{
  "sqlc-repo-method": {
    "scope": "go",
    "prefix": "sqlc-repo-method",
    "body": [
      "func (u *$1) $2(ctx context.Context, d db.DBTX, arg db.$2Params) (bool, error) {",
      "  r, err := u.q.$2(ctx, d, arg)",
      "  if err != nil {",
      "    return false, fmt.Errorf(\"q.$2: %w\", ParseDBErrorDetail(err))",
      "  }",
      "  ",
      "  return r, nil",
      "}",
    ]
  },
  // "openapi-crud": {
  //   "scope": "yaml",
  //   "prefix": "openapi-crud",
  //   "body": [
  //     "  # IMPORTANT: use project dev-utils.create-crud instead",
  //     "  # Make sure to include new scopes in scopes.json",
  //     "  # Recommended schemas for ${1/(.*)/${1:/downcase}/}:",
  //     "  # Create${1/(.*)/${1:/pascalcase}/}Request:",
  //     "  #   x-postgen-struct: RestCreate${1/(.*)/${1:/pascalcase}/}Request",
  //     "  # Update${1/(.*)/${1:/pascalcase}/}Request:",
  //     "  #   x-postgen-struct: RestUpdate${1/(.*)/${1:/pascalcase}/}Request",
  //     "  # ${1/(.*)/${1:/pascalcase}/}:",
  //     "  #   x-postgen-struct: Rest${1/(.*)/${1:/pascalcase}/}",
  //     "  /${1/\\s+/-/g}/:",
  //     "    post:",
  //     "      summary: create ${1/(.*)/${1:/downcase}/}.",
  //     "      !!merge <<: *x-require-authenticated",
  //     "      operationId: Create${1/(.*)/${1:/pascalcase}/}",
  //     "      x-required-scopes:",
  //     "        - <kebabcase ${1}>:create",
  //     "      requestBody:",
  //     "        content:",
  //     "          application/json:",
  //     "            schema:",
  //     "              \\$ref: '#/components/schemas/Create${1/(.*)/${1:/pascalcase}/}Request'",
  //     "        required: true",
  //     "      responses:",
  //     "        201:",
  //     "          description: Success.",
  //     "          content:",
  //     "            application/json:",
  //     "              schema:",
  //     "                \\$ref: '#/components/schemas/${1/(.*)/${1:/pascalcase}/}'",
  //     "        !!merge <<: *x-error-response",
  //     "      tags:",
  //     "        - ${1/\\s+/-/g}",
  //     "  /${1/\\s+/-/g}/{id}/:",
  //     "    get:",
  //     "      summary: get ${1/(.*)/${1:/downcase}/}.",
  //     "      !!merge <<: *x-require-authenticated",
  //     "      operationId: Get${1/(.*)/${1:/pascalcase}/}",
  //     "      parameters:",
  //     "        - \\$ref: '#/components/parameters/SerialID'",
  //     "      responses:",
  //     "        200:",
  //     "          description: Success.",
  //     "          content:",
  //     "            application/json:",
  //     "              schema:",
  //     "                \\$ref: '#/components/schemas/${1/(.*)/${1:/pascalcase}/}'",
  //     "        !!merge <<: *x-error-response",
  //     "      tags:",
  //     "        - ${1/\\s+/-/g}",
  //     "    patch:",
  //     "      summary: update ${1/(.*)/${1:/downcase}/}.",
  //     "      !!merge <<: *x-require-authenticated",
  //     "      operationId: Update${1/(.*)/${1:/pascalcase}/}",
  //     "      x-required-scopes:",
  //     "        - <kebabcase ${1}>:edit",
  //     "      parameters:",
  //     "        - \\$ref: '#/components/parameters/SerialID'",
  //     "      requestBody:",
  //     "        content:",
  //     "          application/json:",
  //     "            schema:",
  //     "              \\$ref: '#/components/schemas/Update${1/(.*)/${1:/pascalcase}/}Request'",
  //     "        required: true",
  //     "      responses:",
  //     "        200:",
  //     "          description: Success.",
  //     "          content:",
  //     "            application/json:",
  //     "              schema:",
  //     "                \\$ref: '#/components/schemas/${1/(.*)/${1:/pascalcase}/}'",
  //     "        !!merge <<: *x-error-response",
  //     "      tags:",
  //     "        - ${1/\\s+/-/g}",
  //     "    delete:",
  //     "      summary: delete ${1/(.*)/${1:/downcase}/}.",
  //     "      !!merge <<: *x-require-authenticated",
  //     "      operationId: Delete${1/(.*)/${1:/pascalcase}/}",
  //     "      x-required-scopes:",
  //     "        - <kebabcase ${1}>:delete",
  //     "      parameters:",
  //     "        - \\$ref: '#/components/parameters/SerialID'",
  //     "      responses:",
  //     "        204:",
  //     "          description: Success.",
  //     "        !!merge <<: *x-error-response",
  //     "      tags:",
  //     "        - ${1/\\s+/-/g}",
  //   ]
  // },
  "keywordqueries": {
    "scope": "postgres,sql",
    "prefix": "keywordqueries",
    "body": [
      "/* plpgsql-language-server:use-keyword-query-parameter */"
    ]
  },
  "anonymous_block": {
    "scope": "postgres,sql",
    "prefix": "anonymous_block",
    "body": [
      "do \\$BODY\\$",
      "--declare",
      "--user_id uuid;",
      "begin",
      "$1",
      "end;",
      "\\$BODY\\$",
      "language plpgsql;",
    ]
  },
  "comment": {
    "scope": "postgres,sql",
    "prefix": "comment",
    "body": [
      "/* $1 */"
    ]
  },
  "disable_validation": {
    "scope": "postgres,sql",
    "prefix": "disable_validation",
    "body": [
      "-- plpgsql-language-server:disable"
    ]
  },
  "fn-doc": {
    "scope": "shellscript",
    "prefix": "fn-doc",
    "body": [
      "# $1.",
      "# Globals:",
      "#   ${2:None}",
      "# Parameters:",
      "#   ${3:None}",
      "# Outputs:",
      "#   ${4:None}",
      "# Returns:",
      "#   ${5:None}",
    ]
  },
}

#!/bin/bash
# shellcheck disable=1091,2155,2068,2086,2031,2048,2178,2120
#
#
# Main s̶c̶r̶i̶p̶t program to manage the entire project stack.
#
#

source ".helpers.sh"

starting_cwd=$(pwd)
ensure_pwd_is_top_level

declare X_IGNORE_BUILD_ERRORS X_FORCE_REGEN X_NO_CONFIRMATION X_NO_GEN X_NO_BACKUP X_ENV
declare BUILD_VERSION

readonly CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

readonly SPEC_PATH="openapi.yaml"

readonly BUILD_DIR="bin/build"
readonly TOOLS_DIR="bin/tools"
readonly PROTO_DIR="internal/pb"
readonly MIGRATIONS_DIR="db/migrations"
readonly CERTIFICATES_DIR="certificates"
readonly GOWRAP_TEMPLATES_DIR="internal/gowrap-templates"
readonly REPOS_DIR="internal/repos"
readonly PG_REPO_DIR="$REPOS_DIR/postgresql"
readonly XO_TEMPLATES_DIR="$PG_REPO_DIR/xo-templates"
readonly BIN_TEMPLATES_DIR="bin/templates"

readonly POSTGRES_TEST_DB="postgres_test"
readonly DUMPS_DIR="$HOME/openapi_go_gin_postgres_dumps"
pkg="$(head -1 go.mod)"
readonly GOMOD_PKG="${pkg#module *}"
# can only run with count=1 at most
readonly XO_TESTS_PKG="$GOMOD_PKG/internal/repos/postgresql/xo-templates/tests"
readonly OPID_AUTH_PATH="operationAuth.gen.json"
readonly REST_MODELS="internal/rest/models.go"
readonly PG_REPO_GEN="$PG_REPO_DIR/gen"
readonly CACHE=".generate.cache"
readonly CACHE_BACKUP="$CACHE-backup"
readonly SWAGGER_UI_DIR="internal/static/swagger-ui"
readonly MAX_FNAME_LOG_LEN=13

GEN_POSTGRES_DB="gen_db"

# determines whether gen cache should be restored at program exit, i.e. failed commands.
# cache folder must be cleaned at exit if true.
# only restores if true.
declare need_backup_restore
# stores the first executing function of xsetup.backup to track if caching gen is already running,
# to allow for nested xsetup.backup and cache-cleanup inside multiple functions.
xsetup_backup_gen_caller=""

# stores the first executing function to determine if a migration
# is needed when running gen* functions which call each other
xsetup_gen_migrated=""

# stores the first executing function to determine if tools have been built
xsetup_tools_built=""

# log for any function output.
xlog() {
  local fname="${FUNCNAME[1]#*.}"
  local color="$BLUE"
  local max_len=$MAX_FNAME_LOG_LEN

  [[ "$CMD" = "$fname" ]] && cat && return

  if [[ "${FUNCNAME[1]%%.*}" != "x" ]]; then
    fname="${FUNCNAME[1]}" # show non-x funcs
    color="$MAGENTA"
  fi

  if [[ "${FUNCNAME[1]}" =~ ^.*(check\.bin|install\.bin).* ]]; then
    max_len=100
  fi

  if [[ ${#fname} -gt $max_len ]]; then
    fname="${fname:0:$max_len}…"
  fi

  local _=$(printf "%*s |\n" $((max_len + 1)) "$fname")
  sed -ue "s/^/${color}$fname >${OFF} /"
}

# log stderr for any function output.
# sed is buffering by default (without -u) so streams dont preserve order
# > >(one) 2> >(two) are background processes so it will break our parallel code.
xerr() {
  local fname="${FUNCNAME[1]#*.}"
  local max_len=$MAX_FNAME_LOG_LEN

  [[ "$CMD" = "$fname" ]] && cat && return
  if [[ ${#fname} -gt $max_len ]]; then
    fname="${fname:0:$max_len}…"
  fi

  local _=$(printf "%*s |\n" $((max_len + 1)) "$fname")
  sed -ue "s/^/${RED}$fname >${OFF} /" >&2
}

kill_descendants() {
  # air and vite spawn processes as well, need to kill those (whose parent is pid), kill $pid will not kill children. pkill -P would also work
  kill $pids || true
  kill "$(list_descendants $pids)" || true
  pids=""
}

######################### x-functions setup #########################

xsetup.build-tools() {
  test -n "$xsetup_tools_built" && return

  xsetup_tools_built="${FUNCNAME[1]}"

  x.gen.build-tools || err Could not rebuild gen tools
}

backup_branch="backup-gen-$(uuidgen)"

# TODO: when running gen and then stashing changes, or switching branches,
# cache should be removed.
gen-cache.backup() {
  cp -r "$CACHE" "$CACHE_BACKUP" || true
}

gen-cache.restore() {
  rm -rf "$CACHE"
  mv "$CACHE_BACKUP" "$CACHE" || true
}

# Create a backup stash with current changes.
# Uncommitted changes are restored on error unless --x-no-backup flag is passed.
xsetup.backup() {
  test -n "$xsetup_backup_gen_caller" && return

  xsetup_backup_gen_caller="${FUNCNAME[1]}"

  mkdir -p "$CACHE"

  backup_stash_name="backup-stash-$backup_branch"

  echo "$backup_branch" >backup-gen-stash-dummy.txt
  gen-cache.backup
  git stash push -m "$backup_stash_name" --include-untracked || err "Could not backup untracked changes before codegen"
  git checkout -b "$backup_branch" &>/dev/null
  git stash apply "stash^{/$backup_stash_name}" &>/dev/null

  need_backup_restore=true # unless
}

xsetup.backup.cleanup() {
  # only accept gen if the main function that backed it up in the first place
  # finishes successfully, i.e. this very function was called
  if [[ "$xsetup_backup_gen_caller" = "${FUNCNAME[1]}" ]]; then
    need_backup_restore=false
  fi
}

xsetup.backup.restore() {
  echo "
Restoring previous changes (branch $backup_branch)..."
  wait # for any pending job

  git reset --hard && git clean -df &>/dev/null
  # if not removing the whole cache folder we get `already exists, no checkout` upon stash apply since we have just reset gitignore
  # IMPORTANT: we do want to delete regardless since we are restoring the cache folder on stash apply so we
  # don't need complex cache invalidation based on what's been run
  rm -rf "$CACHE"
  git stash apply "stash^{/$backup_stash_name}" &>/dev/null
}

xsetup.drop-and-migrate-gen-db() {
  test -n "$xsetup_gen_migrated" && return
  xsetup_gen_migrated=1

  (
    POSTGRES_DB="$GEN_POSTGRES_DB"

    x.db.drop
    x.migrate up
  )
}

######################### x-functions #########################

# Check build dependencies are met and prompt to install if missing.
x.check-build-deps() {
  # TODO: should check go installs in gobin are the version we expect when running x.gen
  # via x.install-tools.check
  { { {
    mkdir -p $TOOLS_DIR

    while IFS= read -r line; do
      [[ $line =~ ^declare\ -f\ check\.bin\. ]] && BIN_CHECKS+=("${line##declare -f check.bin.}")
      [[ $line =~ ^declare\ -f\ install\.bin\. ]] && BIN_INSTALLS+=("${line##declare -f install.bin.}")
    done < <(declare -F)

    echo "Checking dependencies..."
    for bin in "${BIN_CHECKS[@]}"; do
      # local r
      # r="$(...)" # redirect to var while also streaming unbuffered output with | tee /dev/tty
      if "check.bin.$bin"; then
        continue
      fi

      if ! element_in_array "$bin" "${BIN_INSTALLS[@]}"; then
        echo "No automatic installation available. Please install $bin manually and retry"
        exit 1
      fi

      with_tty confirm "Do you want to install $bin now?" || exit 1

      echo "Installing $bin..."
      if ! "install.bin.$bin"; then
        err "$bin installation failed"
      fi

      if ! "check.bin.$bin"; then
        err "$bin check failed after installation"
      fi

      echo "Installed $bin..."
    done
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Check dependencies and fetch required tools.
x.bootstrap() {
  { { {
    git submodule update --init --recursive # sync later on with git `git submodule update --force --recursive --remote`

    x.check-build-deps
    x.backend.sync-deps
    x.install-tools
    x.setup.swagger-ui
    x.gen.build-tools

    cd frontend
    pnpm i --frozen-lockfile
    cd -

    cd e2e
    pnpm i --frozen-lockfile
    cd -

    traefik_dir="$HOME/traefik-bootstrap"
    with_tty confirm "Do you want to setup and run traefik (install dir: $traefik_dir)?" && x.setup.traefik "$traefik_dir"
    echo "${RED}Make sure to add \`complete -o nospace -C project project\` to your ~/.bashrc for completion.${OFF}"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Install miscellaneous tool binaries locally.
x.install-tools() {
  { { {
    echo "Installing tools..."

    go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.15.2 &
    go install github.com/sqlc-dev/sqlc/cmd/sqlc@v1.24.0 &
    # for easier test search.
    # NOTE: unrelated run test broken discovery: https://github.com/golang/vscode-go/issues/2719
    # go install github.com/danicc097/go-test-renamer@v0.2.0 &
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.55.2 &
    go install github.com/tufin/oasdiff@latest &
    go install golang.org/x/tools/cmd/goimports@latest &
    go install mvdan.cc/gofumpt@latest &
    go install github.com/danicc097/air@latest &
    go install github.com/danicc097/xo/v5@v5.3.0 &
    go install github.com/mikefarah/yq/v4@v4.34.2 &
    go install github.com/hexdigest/gowrap/cmd/gowrap@latest &
    go install golang.org/x/tools/cmd/stringer@latest &

    go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28.1 &
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2 &

    GO111MODULE=off go get -u github.com/maxbrunsfeld/counterfeiter &

    # install node libs with --prefix $TOOLS_DIR, if any
    # ...

    wait_without_error || err Could not install all tools. Try running 'go clean -cache' and retry. Else install with ' -mod=readonly' flag.
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Fetch latest Swagger UI bundle.
x.setup.swagger-ui() {
  { { {
    local name

    name="$(curl --retry 100 -fsSL "https://api.github.com/repos/swagger-api/swagger-ui/releases/latest" | jq -r ".. .tag_name? // empty")"
    curl --retry 100 -fsSL "github.com/swagger-api/swagger-ui/archive/refs/tags/$name.tar.gz" -o swagger-ui.tar.gz
    tar xf swagger-ui.tar.gz swagger-ui-"${name#*v}"/dist --one-top-level=swagger-ui --strip-components=2
    rm swagger-ui.tar.gz
    mkdir -p $SWAGGER_UI_DIR
    mv swagger-ui/* $SWAGGER_UI_DIR
    rm -r swagger-ui
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Run pre-generation scripts in the internal package.
x.gen.pregen() {
  xsetup.backup
  xsetup.drop-and-migrate-gen-db
  xsetup.build-tools
  { { {
    POSTGRES_DB="$GEN_POSTGRES_DB"

    echo "Running generation"

    generate_structs_map # structs might have been removed in the meantime

    go build -o $BUILD_DIR/codegen cmd/codegen/main.go || [[ -n "$X_IGNORE_BUILD_ERRORS" ]] # xo gen may create/update models.

    codegen validate-spec -env=".env.$X_ENV"
    ast-parser verify-no-import --imports "$GOMOD_PKG/internal/models" "$REST_MODELS" || err Please use generated rest package OpenAPI types instead.

    sync_spec_with_db

    ######## Ensure consistent style for future codegen

    echo "Applying PascalCase to operation IDs in $SPEC_PATH"
    spec_content=$(<$SPEC_PATH)

    # outputs safe double-quoted paths for yq
    # https://github.com/mikefarah/yq/issues/1295
    mapfile -t opid_paths < <(yq e '
      .paths[][].operationId
      | path
      | with(.[] | select(contains(".") or contains("/") or contains("{")); . = "\"" + . + "\"")
      | join(".")
    ' $SPEC_PATH)
    mapfile -t opids < <(yq e ".paths[][].operationId" $SPEC_PATH)

    # construct single yq call
    local ops=()
    for i in ${!opids[@]}; do
      new_opid="$(to_pascal ${opids[$i]})"
      ops+=(".${opid_paths[$i]}=\"${new_opid}\"") # cant have space
    done

    yq_op=$(join_by " | " ${ops[*]})

    spec_content=$(yq e "$yq_op" < <(echo "$spec_content"))
    echo "$spec_content" >$SPEC_PATH

    update_roles_and_scopes

    ######## Generate shared policies once the spec has been validated
    echo "Writing shared auth policies"

    yq -o=json e "
    .paths[][]
    | explode(.)
    | {
      .operationId: {
        \"scopes\": .x-required-scopes,
        \"role\": .x-required-role,
        \"requiresAuthentication\": has(\"security\")
        }
      }
    | select(.[]) as \$i ireduce ({}; . + \$i)
  " $SPEC_PATH >$OPID_AUTH_PATH

    codegen pre -env=".env.$X_ENV" -op-id-auth="$OPID_AUTH_PATH"

    update_spec_with_structs

    remove_schemas_marked_to_delete
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

update_roles_and_scopes() {
  echo "Updating roles and scopes in $SPEC_PATH"
  ######## Sync spec enums with external policy sources and validate existing schema enums.
  ######## External json files are the source of truth, indexed by enum name
  # arrays can't be nested in bash
  declare -A enum_src_files=(
    [Scope]="$SCOPE_POLICY_PATH"
    [Role]="$ROLE_POLICY_PATH"
  )
  declare -A enum_vext=(
    [Scope]="x-required-scopes"
    [Role]="x-required-role"
  )
  declare -A enum_values=()
  for enum in ${!enum_src_files[@]}; do
    [[ $(yq e ".components.schemas | has(\"$enum\")" $SPEC_PATH) = "false" ]] &&
      yq e ".components.schemas.$enum.type = \"string\"" -i $SPEC_PATH

    local src_file="${enum_src_files[$enum]}"
    vendor_ext="${enum_vext[$enum]}"

    enums=$(yq -P --output-format=yaml '.[] | key' $src_file)
    mapfile -t enums <<<$enums

    src_comment="$src_file keys"
    replace_enum_in_spec "$enum" enums "$src_comment"

    mapfile spec_enums < <(yq e ".paths[][].$vendor_ext | select(length > 0)" $SPEC_PATH)
    spec_enums=("${spec_enums[*]//- /}")
    mapfile -t spec_enums < <(printf "\"%s\"\n" ${spec_enums[*]})
    mapfile -t clean_enums < <(printf "\"%s\"\n" ${enums[*]})
    # ensure only existing enums from src_file are used
    for spec_enum in "${spec_enums[@]}"; do
      [[ ! " ${clean_enums[*]} " =~ " ${spec_enum} " ]] && err "$spec_enum is not a valid '$enum'"
    done

    enum_list=$(printf ",\"%s\"" "${enums[@]}")
    enum_list="[${enum_list:1}]"
    enum_values[$enum]=$enum_list
  done

  ######## IDE intellisense/validation
  yq -e ".definitions.Operation.properties +=
        {
          \"${enum_vext[Role]}\": {
            \"type\": \"string\",
            \"enum\": ${enum_values[Role]}
          },
          \"${enum_vext[Scope]}\": {
            \"type\": \"array\",
            \"items\": {\"enum\": ${enum_values[Scope]}}
          }
        }" -i -oj .vscode/openapi-schema.json
}

sync_spec_with_db() {
  cache_all "$CACHE/db.md5" bin/project bin/.helpers.sh .env.$X_ENV db/ $SPEC_PATH && return 0

  sync_db_enums_with_spec

  # TODO: repo specific changes should all be abstracted to their own standalone functions
  # to be easily replaced in other repos
  ######## Sync projects and related project info

  mapfile -t db_projects < <(docker.postgres.psql -d $POSTGRES_DB -c "select name from projects;" 2>/dev/null)

  [[ ${#db_projects[@]} -gt 0 ]] || err "No projects found in database $POSTGRES_DB"
  replace_enum_in_spec "Project" db_projects "projects table"

  for project in ${db_projects[@]}; do
    ### kanban steps
    mapfile -t kanban_steps < <(docker.postgres.psql -d $POSTGRES_DB -c "
          select name from kanban_steps where project_id = (
            select project_id from projects where name = '$project'
            );" 2>/dev/null)
    [[ ${#kanban_steps[@]} -gt 0 ]] || {
      echo "${YELLOW}[WARNING] No kanban steps found for project '$project' in database $POSTGRES_DB${OFF}" && continue
    }
    schema_name="$(to_pascal $project)KanbanSteps"
    replace_enum_in_spec "$schema_name" kanban_steps "kanban_steps table"

    ### work item types
    mapfile -t work_item_types < <(docker.postgres.psql -d $POSTGRES_DB -c "
          select name from work_item_types where project_id = (
            select project_id from projects where name = '$project'
            );" 2>/dev/null)
    [[ ${#work_item_types[@]} -gt 0 ]] || {
      echo "${YELLOW}[WARNING] No work item types found for project '$project' in database $POSTGRES_DB${OFF}" && continue
    }
    schema_name="$(to_pascal $project)WorkItemTypes"
    replace_enum_in_spec "$schema_name" work_item_types "work_item_types table"
  done

  generate_models_mappings
}

generate_repo_constructor() {
  local out_path="internal/repos/repos.gen.go"

  local repos="$REPOS_DIR/repos.go"
  local repo_interfaces=()
  go-utils.find_interfaces repo_interfaces $repos

  for iface in ${repo_interfaces[@]}; do
    local struct_init+=("${iface}: ${iface,}")
    local struct_fields+=("${iface} ${iface}")
  done

  cat <<EOF >$out_path
// Code generated by project. DO NOT EDIT.

package repos

type Repos struct {
    $(join_by "
    " "${struct_fields[@]}")
}
EOF

  gofumpt -w $out_path

}

# for manually inserted elements via migrations, e.g. projects, kanban_steps, work_item_type,
# generate 2-way maps id<- ->name to save up useless db calls and make logic switching
# and repos usage much easier
generate_models_mappings() {
  local model_mappings_path="internal/models_mappings.gen.go"
  cat <<EOF >$model_mappings_path
// Code generated by project. DO NOT EDIT.

package internal

import (
  "$GOMOD_PKG/internal/models"
  db "$GOMOD_PKG/$PG_REPO_GEN/db"
)


EOF

  mapfile -t projects_rows < <(docker.postgres.psql -d $POSTGRES_DB -c "select project_id,name from projects;" 2>/dev/null)
  generate_model_mappings_dicts Project db.ProjectID projects_rows

  for project in ${db_projects[@]}; do
    mapfile -t kanban_steps_rows < <(docker.postgres.psql -d $POSTGRES_DB -c "
          select kanban_step_id,name from kanban_steps where project_id = (
            select project_id from projects where name = '$project'
            );" 2>/dev/null)
    [[ ${#kanban_steps_rows[@]} -gt 0 ]] || continue
    prefix="$(to_pascal "$project")KanbanSteps"
    generate_model_mappings_dicts $prefix db.KanbanStepID kanban_steps_rows

    kanban_steps_rows=()
    mapfile -t kanban_steps_rows < <(docker.postgres.psql -d $POSTGRES_DB -c "
          select kanban_step_id,step_order from kanban_steps where project_id = (
            select project_id from projects where name = '$project'
            );" 2>/dev/null)
    [[ ${#kanban_steps_rows[@]} -gt 0 ]] || continue
    prefix="$(to_pascal "$project")KanbanSteps"
    echo "var (
    ${prefix}StepOrderByID = map[db.KanbanStepID]int{
  " >>$model_mappings_path
    for row in "${kanban_steps_rows[@]}"; do
      first=$(cut_first "$row" "|") # always safe
      mapfile -t arr <<<"${first}"
      local id="${arr[0]}"
      local kanban_step="${arr[1]}"
      echo "${id}: ${kanban_step}," >>$model_mappings_path
    done
    echo "})" >>$model_mappings_path
  done

  for project in ${db_projects[@]}; do
    mapfile -t work_item_types_rows < <(docker.postgres.psql -d $POSTGRES_DB -c "
          select work_item_type_id,name from work_item_types where project_id = (
            select project_id from projects where name = '$project'
            );" 2>/dev/null)
    [[ ${#work_item_types_rows[@]} -gt 0 ]] || continue
    prefix="$(to_pascal "$project")WorkItemTypes"
    generate_model_mappings_dicts $prefix db.WorkItemTypeID work_item_types_rows
  done

  gofumpt -w $model_mappings_path
}

# generates dictionaries for existing database elements, meant for those
# inserted exclusively via migrations
generate_model_mappings_dicts() {
  local prefix="$1"
  local idType="$2"
  local -n __arr="$3" # db rows
  echo "var (
	${prefix}NameByID = map[${idType}]models.${prefix}{
  " >>$model_mappings_path
  for row in "${__arr[@]}"; do
    first=$(cut_first "$row" "|") # always safe
    mapfile -t arr <<<"${first}"
    local id="${arr[0]}"
    local name="${arr[1]}"
    echo "${id}: models.${prefix}$(to_pascal "$name")," >>$model_mappings_path
  done
  echo "}
	${prefix}IDByName = map[models.${prefix}]${idType}{
  " >>$model_mappings_path
  for row in "${__arr[@]}"; do
    first=$(cut_first "$row" "|") # always safe
    mapfile -t arr <<<"${first}"
    local id="${arr[0]}"
    local name="${arr[1]}"
    echo "models.${prefix}$(to_pascal "$name"): ${id}," >>$model_mappings_path
  done
  echo "})
  " >>$model_mappings_path
}

clean_yq_array() {
  local -n __arr="$1"
  __arr=("${__arr[*]//- /}")
  mapfile -t __arr < <(printf "\"%s\"\n" ${__arr[*]})
  echo ${__arr[@]}
}

# Run post-generation scripts in the internal package.
x.gen.postgen() {
  xsetup.backup
  xsetup.drop-and-migrate-gen-db
  xsetup.build-tools
  { { {
    POSTGRES_DB="$GEN_POSTGRES_DB"

    echo "Running generation"

  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Generate type-safe Go code from SQL.
x.gen.sqlc() {
  xsetup.backup
  xsetup.drop-and-migrate-gen-db
  { { {
    echo "Running generation"
    rm -f "$PG_REPO_GEN"/db/*.sqlc.go
    x.lint.sql
    sqlc generate --experimental -f "$PG_REPO_DIR"/sqlc.yaml || err "Failed sqlc generation"
    rm -f "$PG_REPO_GEN"/db/models.go # sqlc enums
    gowrap gen \
      -g \
      -p "$GOMOD_PKG/$PG_REPO_GEN/db" \
      -i Querier \
      -t "$GOWRAP_TEMPLATES_DIR/sqlc.tmpl" \
      -o "$PG_REPO_DIR/sqlc_querier_wrapper.gen.go"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Automatically generate CRUD and index queries with joins based on existing indexes from a Postgres schema.
x.gen.xo() {
  xsetup.backup
  xsetup.drop-and-migrate-gen-db
  { { {
    cache_all "$CACHE/xo.md5" bin/project bin/.helpers.sh .env.$X_ENV go.mod db/ $XO_TEMPLATES_DIR/* && return 0

    echo "Running generation"

    rm -rf "$PG_REPO_GEN"/db/*.xo.go

    mkdir -p "$PG_REPO_GEN"/db
    xo_schema -o "$PG_REPO_GEN"/db --debug \
      --schema public \
      --ignore "*.created_at" \
      --ignore "*.updated_at" || err "Failed xo public schema generation" &

    xo_schema -o "$PG_REPO_GEN"/db --debug \
      --schema extra_schema \
      --ignore "*.created_at" \
      --ignore "*.updated_at" ||
      err "Failed xo extra_schema schema generation" &

    rm -rf "$PG_REPO_GEN"/db/cache
    mkdir -p "$PG_REPO_GEN"/db/cache
    xo_schema -o "$PG_REPO_GEN"/db/cache \
      --schema cache ||
      err "Failed xo cache schema generation" &

    wait

    files=$(find "$PG_REPO_GEN/db" \
      -name "*.go")
    goimports -w $files
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Generate a type-safe SQL builder.
x.gen.jet() {
  xsetup.backup
  xsetup.drop-and-migrate-gen-db
  xsetup.build-tools
  { { {
    # results may be combined with xo's *Public structs and not reinvent the wheel for jet.
    # should not be hard to generate all adapters at once jet->xo *Public in a new file alongside jet gen.
    # in the end fields are the same name if goName conventions are followed (configurable via custom jet cmd)
    # if it gives problems for some fields (ID, API and the like)
    echo "Running generation"

    local gen_path="$PG_REPO_GEN/jet"
    local schema=public
    rm -rf "$gen_path"
    {
      jet -dbname="$GEN_POSTGRES_DB" -env=.env."$X_ENV" --out=./"$gen_path" --schema=$schema
      mv "./$gen_path"/$GEN_POSTGRES_DB/* "$gen_path"
      rm -r "./$gen_path/$GEN_POSTGRES_DB/"
    }
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Generate repo interface wrappers with common logic: tracing, timeout...
# Args: [name]
x.gen.gowrap() {
  xsetup.backup
  { { {
    local name="$1" # optional to force regen on an interface
    local repos="$REPOS_DIR/repos.go"

    echo "Running generation"

    local cache="$CACHE/gowrap"
    local suffixes=(
      "retry-repo:with_retry"
      "timeout:with_timeout"
      "otel:with_otel"
      "prometheus:with_prometheus" # TODO: https://last9.io/blog/native-support-for-opentelemetry-metrics-in-prometheus/ https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/translator/prometheus
    )

    local repo_interfaces=()
    go-utils.find_interfaces repo_interfaces $repos

    mkdir -p "$cache"

    if test -n "$name"; then
      repo_interfaces=("$name")
    fi

    local updated_ifaces=()
    for iface in ${repo_interfaces[@]}; do
      iface_content="$(go-utils.get_interface_methods $iface $repos)"
      if diff "$cache/$iface" <(echo "$iface_content") &>/dev/null && [[ "$iface" != "$name" ]]; then
        [[ $X_FORCE_REGEN -eq 0 ]] && continue
      fi

      for suffix in ${suffixes[@]}; do
        {
          IFS=":" read -r -a arr <<<${suffix}
          local tmpl="${arr[0]}"
          local suffix="${arr[1]}"
          gowrap gen \
            -g \
            -p $GOMOD_PKG/$REPOS_DIR \
            -i $iface \
            -t "$GOWRAP_TEMPLATES_DIR/$tmpl.tmpl" \
            -o "$REPOS_DIR/reposwrappers/${iface,,}_$suffix.gen.go"
        } &
      done

      echo "$iface_content" >"$cache/$iface"
      updated_ifaces+=("$iface")
    done

    wait_without_error || err Failed jobs

    if [[ ${#updated_ifaces[@]} -gt 0 ]]; then
      echo "Updated repo interfaces: ${updated_ifaces[*]}"
    fi
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Generate Go client and server from spec.
x.gen.client-server() {
  { { {
    echo "Running generation"
    paths_file=".openapi.paths.yaml"

    local all_types=()
    mapfile -t all_types < <(ast-parser find-types --exclude-generics --public-only "$REST_MODELS")
    all_types_list=$(join_by "," ${all_types[*]})

    types_list=$(join_by "," ${all_types[*]})
    # hack to get separate types generation
    sed "s/\$ref: '\#\//\$ref: '$SPEC_PATH\#\//g" $SPEC_PATH >"$paths_file"
    # yq e 'del(.components)' -i "$paths_file" # dont delete since recent oapi-codegen does some checks even if we are not generating types
    go build -o $BUILD_DIR/oapi-codegen cmd/oapi-codegen/main.go || [[ -n "$X_IGNORE_BUILD_ERRORS" ]] # templates are embedded, required rebuild

    # Generated types in models pkg will be used in services, repos, db, but rest package must use original
    # models from rest/models.go (source of generated spec schemas)
    # and not the generated ones to avoid (a lot of) unnecessary conversions.
    oapi-codegen --config internal/models/oapi-codegen-types.yaml "$SPEC_PATH" || err "Failed types generation"
    oapi-codegen --config internal/rest/oapi-codegen-server.yaml --models-pkg models --types "$types_list" "$paths_file" || err "Failed server generation"
    oapi-codegen --config internal/rest/oapi-codegen-test-client.yaml "$SPEC_PATH" || err "Failed client generation"
    oapi-codegen --config internal/client/oapi-codegen-client.yaml "$SPEC_PATH" || err "Failed client generation"

    ast-parser find-redeclared --delete "$REST_MODELS" # for duplicates in rest
    codegen implement-server                           # based on oapi gen

    files=$(find "internal/rest/" -name "*.go")
    goimports -w $files
    gofumpt -w $files
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Generate mocks for specified interfaces.
x.gen.counterfeiter() {
  # This shouldn't pose any problems, the interface is the only input to counterfeiter.
  { { {
    tfidfpb_dir="internal/pb/python-ml-app-protos/tfidf/v1"
    envvar="internal/envvar/envvar.go"
    repos="$REPOS_DIR/repos.go"
    tfidfpb="$tfidfpb_dir/service_grpc.pb.go"

    declare -A ifaces
    ifaces=(
      ["Provider-$envvar"]="internal/envvar/envvartesting/provider.gen.go"
      ["User-$repos"]="$REPOS_DIR/repostesting/user.gen.go"
      ["Notification-$repos"]="$REPOS_DIR/repostesting/notification.gen.go"
      ["Project-$repos"]="$REPOS_DIR/repostesting/project.gen.go"
      ["Team-$repos"]="$REPOS_DIR/repostesting/team.gen.go"
      ["MovieGenreClient-$tfidfpb"]="$tfidfpb_dir/v1testing/movie_genre_client.gen.go"
      ["MovieGenreServer-$tfidfpb"]="$tfidfpb_dir/v1testing/movie_genre_server.gen.go"
    )

    local cache="$CACHE/counterfeiter"
    local updated_ifaces=()

    mkdir -p "$cache"

    for key in ${!ifaces[@]}; do
      input_path="${key#*-}"
      iface="${key%%-*}"
      iface_content="$(go-utils.get_interface_methods $iface $input_path)"

      cache_entry_dir="$cache/$(echo $input_path | base64)" # so we can rm -rf $CACHE/*/$interface only when invalidating on failed gen
      mkdir -p "$cache_entry_dir"
      if diff "$cache_entry_dir/$iface" <(echo "$iface_content") &>/dev/null; then
        [[ $X_FORCE_REGEN -eq 0 ]] && continue
      fi

      counterfeiter -o "${ifaces[$key]}" "$input_path" "$iface" 2>&1 &
      echo "$iface_content" >"$cache_entry_dir/$iface"
      updated_ifaces+=("$key")
    done

    wait_without_error || err Failed jobs

    # counterfeiter is unaware of grpc's obscure mustEmbedUnimplemented***() for forward server compatibility
    if ! grep -q 'v1\.UnimplementedMovieGenreServer' $tfidfpb_dir/v1testing/movie_genre_server.gen.go; then
      sed -i '/type FakeMovieGenreServer struct {/a v1\.UnimplementedMovieGenreServer' $tfidfpb_dir/v1testing/movie_genre_server.gen.go
    fi

    if [[ ${#updated_ifaces[@]} -gt 0 ]]; then
      echo "Updated repo interfaces: ${updated_ifaces[*]}"
    fi

  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Generate the required servers/clients for relevant services.
x.gen.proto() {
  { { {
    local import_path="python-ml-app-protos/tfidf/v1"
    local filename="internal/python-ml-app-protos/tfidf/v1/service.proto"

    mkdir -p internal/pb
    # Plugins are no longer supported by protoc-gen-go.
    # Instead protoc-gen-go-grpc and the go package (in proto or via M flag) are required
    echo "Running generation"
    protoc \
      --go-grpc_out=internal/pb/. \
      --go_out=internal/pb/. \
      --go-grpc_opt=M${filename}=${import_path},paths=import \
      --go_opt=M${filename}=${import_path},paths=import \
      internal/python-ml-app-protos/tfidf/v1/service.proto || err "Failed proto generation"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Run frontend code generation.
x.gen.frontend() {
  xsetup.backup
  { { {
    export PATH=frontend/node_modules/.bin:$PATH

    SCHEMA_OUT="frontend/src/types/schema.d.ts"
    orval_config="frontend/orval.config.ts"

    cache_all "$CACHE/frontend.md5" bin/project bin/.helpers.sh .env.$X_ENV $SPEC_PATH $orval_config frontend/scripts/ frontend/package.json && return 0

    config_template_setup frontend # no need to run if cached .env

    mkdir -p frontend/src/types
    rm -rf frontend/src/gen

    {
      node frontend/scripts/generate-client-validator.js
      # TODO allow custom validate.ts baked into fork
      rm -f frontend/src/client-validator/gen/validate.ts
      find frontend/src/client-validator/gen/ -type f -exec \
        sed -i "s/from '.\/validate'/from '..\/validate'/g" {} \;
    }

    {
      v="$(openapi-typescript --version)"
      openapi-typescript $SPEC_PATH --output "$SCHEMA_OUT" --path-params-as-types --prettier-config .prettierrc
      echo "/* Generated by openapi-typescript $v */
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable */
// @ts-nocheck
export type schemas = components['schemas']
" | cat - "$SCHEMA_OUT" >/tmp/out && mv /tmp/out "$SCHEMA_OUT"
    } &
    orval --config $orval_config &

    wait_without_error || err Failed jobs
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Run e2e code generation.
x.gen.e2e() {
  xsetup.backup
  { { {
    source .env.e2e

    export PATH=e2e/node_modules/.bin:$PATH

    orval_config="e2e/orval.config.ts"

    cache_all "$CACHE/e2e.md5" bin/project bin/.helpers.sh .env.$X_ENV $SPEC_PATH $orval_config e2e/package.json && return 0

    config_template_setup e2e # no need to run if cached .env

    rm -rf e2e/client/gen

    orval --config $orval_config
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Run all codegen and postgen commands for the project.
x.gen() {
  [[ -n $X_NO_GEN ]] && return
  xsetup.backup # Modification of vars inside would be local to subshell (caused by pipeline)
  xsetup.drop-and-migrate-gen-db
  xsetup.build-tools
  { { {
    echo "Running code generation"

    x.lint.sql

    # TODO try use gnu parallel and exit when anyone fails
    # (with current setup the whole x.gen is executed and only then
    # the trap on SIGUSR1 coming from `err` is run - now temporarily using kill 0 in `err` instead on sending SIGUSR1)
    # shopt -s inherit_errexit
    go generate ./... &
    x.gen.gowrap &
    x.gen.proto &
    x.gen.xo &
    x.gen.sqlc &
    x.gen.jet &
    generate_repo_constructor &

    wait_without_error || err Failed jobs

    {
      x.gen.pregen
      x.gen.client-server
    } &
    x.gen.counterfeiter & # delay since it depends on generated output (xo, proto...)

    wait_without_error || err Failed jobs

    x.gen.postgen

    # restart is not robust
    # vscode will randomly lose connection when restarting
    # for pid in $(pidof gopls); do
    #   restart_pid $pid &
    # done

    x.gen.frontend &
    x.gen.e2e &

    wait_without_error || err Failed jobs
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Build code generation custom tools.
x.gen.build-tools() {
  { { {
    generate_structs_map # openapi-go requires structs already compiled

    out_dir=$BUILD_DIR

    mkdir -p $out_dir
    for cmd in jet oapi-codegen codegen ast-parser; do
      echo "Building $cmd..."
      { go build -o $out_dir/$cmd cmd/$cmd/main.go || [[ -n "$X_IGNORE_BUILD_ERRORS" ]]; } &
    done

    wait_without_error || err Could not rebuild all gen tools. Rerun with --x-ignore-build-errors.
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Lint the entire project.
x.lint() {
  { { {
    x.lint.sql &
    x.lint.go &
    x.lint.frontend &
    wait
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Format Go files.
x.lint.go() {
  { { {
    files=$(find . \
      -not -path "**/$PROTO_DIR/*" \
      -not -path "**/$PG_REPO_GEN/*" \
      -not -path "**/testdata/*" \
      -not -path "**/node_modules/*" \
      -not -path "**/.venv/*" \
      -not -path "**/*.cache/*" \
      -not -path "**/vendor/*" \
      -not -path "**/*.gen.*" \
      -not -path "**/*.xo.go" \
      -name "*.go")
    goimports -w $files || echo "Linting failed"
    gofumpt -w $files || echo "Linting failed"
    golangci-lint run --config=.golangci.yml --fix &>/dev/null || true
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

exhaustruct_lint() {
  lint_config=$(
    cat <<EOF
linters:
  disable-all: true
  enable:
    - exhaustruct
linters-settings:
  exhaustruct:
    # lint struct usage in all packages that use them
    include:
      - 'github\.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db\..*CreateParams$'
      - 'github\.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos\.Repos$'
# in case we want to run a linter on test files only
# issues:
#   exclude-rules:
#     - path-except: _test\.go
#       linters:
#         - exhaustruct
EOF
  )

  # postgresqltestutil: ideally tests in rest, service and repo  use Random<...>CreateParams directly or indirectly
  #                     via fixture factories, so we always want these up to date when a new field is added.
  # services: may construct db createparams from specific service models
  # repos: ensure all repos initialized (TODO: same for services)
  local packages=("
  internal/services
  internal/repos/postgresql/postgresqltestutil
  internal/repos
  ")

  for package in ${packages[@]}; do
    LOG_LEVEL=error golangci-lint run --config <(echo "$lint_config") $package
  done

  lint_config=$(
    cat <<EOF
linters:
  disable-all: true
  enable:
    - exhaustruct
linters-settings:
  exhaustruct:
    include:
      - 'github\.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos\.Repos$'
      - 'github\.com/danicc097/openapi-go-gin-postgres-sqlc/internal/services\.Services$'
EOF
  )
  LOG_LEVEL=error golangci-lint run --config <(echo "$lint_config") # ensure repo initialization is complete on all pkgs
}

# Format frontend files.
x.lint.frontend() {
  { { {
    cd frontend
    pnpm run lint:fix
    echo "Success"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Format SQL files.
x.lint.sql() {
  { { {
    SQL_DIRS=(
      "$REPOS_DIR"
      "db"
    )
    for slq_dir in ${SQL_DIRS[@]}; do
      pg_format \
        --spaces 2 \
        --wrap-limit 130 \
        --function-case 2 \
        --keyword-case 1 \
        --placeholder "sqlc\\.(arg|narg)\\(:?[^)]*\\)" \
        --inplace \
        --keep-newline \
        --comma-start \
        --nogrouping \
        $(find "$slq_dir" -name '*.*sql')
    done

    echo "Success"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Run required backend pre-test setup: services, database cleanup, codegen...
# Can be called independently, e.g. before running tests through an IDE.
x.test.backend.setup() {
  xsetup.backup # Modification of vars inside would be local to subshell (caused by pipeline)
  { { {
    # NOTE: tests run independently in Go so we can't have a function be called and run
    # only once before any test starts
    run_shared_services up -d --build --remove-orphans --wait
    x.gen
    # no need to migrate, done on every test run internally
    docker.postgres.drop_and_recreate_db $POSTGRES_TEST_DB
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Test backend. Accepts `go test` parameters.
# Args: [...]
x.test.backend() {
  xsetup.backup
  { { {
    exhaustruct_lint

    x.test.xo

    yes y 2>/dev/null | POSTGRES_DB=$POSTGRES_TEST_DB x.migrate down || true # nochange exits
    # POSTGRES_DB=$POSTGRES_TEST_DB x.migrate up # post-migration scripts now run automatically in testutil db setup

    local cache_opt="-count=1"
    cache_all "$CACHE/go-test.md5" .env.$X_ENV db/ && cache_opt=""

    rm -f /tmp/migration_marker

    set -x
    APP_ENV="$X_ENV" go test -shuffle=on -tags skipxo $cache_opt "$@" ./...
    set +x

  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Test frontend.
# Args: [...]
x.test.frontend() {
  # TODO accept vitest args
  config_template_setup frontend

  cd frontend
  pnpm run test:no-watch
  # pnpm run test-types:no-watch
}

# Test frontend on file changes.
# Args: [...]
x.test.frontend.watch() {
  config_template_setup frontend

  cd frontend
  pnpm run test
}

# Run custom xo generation script tests. Accepts `go test` parameters.
# Args: [...]
x.test.xo() {
  xsetup.backup
  { { {
    POSTGRES_DB="$POSTGRES_TEST_DB"
    GEN_POSTGRES_DB="$POSTGRES_TEST_DB"

    docker.postgres.drop_and_recreate_db $POSTGRES_DB # FIXME wrong xo gen when tables with equal names in public schema exist as well

    echo "Running xo template tests"

    test_dir="$XO_TEMPLATES_DIR/tests"
    docker.postgres.psql -d $POSTGRES_DB <"$test_dir/schema.sql" # need correct schema for xo gen
    echo "Schema loaded"

    rm -rf "$test_dir/got"
    mkdir -p "$test_dir/got"

    xo_schema -o "$test_dir/got" --debug \
      --ignore "*.created_at" \
      --ignore "*.updated_at" >/dev/null || err "Failed xo xo_tests schema generation"

    xo_schema -o "$test_dir/got" --debug \
      --schema xo_tests \
      --ignore "*.created_at" \
      --ignore "*.updated_at" >/dev/null || err "Failed xo xo_tests schema generation"

    files=$(find "$test_dir/got" \
      -name "*.go")
    goimports -w $files
    gofumpt -w $files

    APP_ENV="$X_ENV" go test -shuffle=on -count=1 "$XO_TESTS_PKG" "$@" ||
      err "xo tests failed"

    if ! $test_dir/diff_check; then
      with_tty confirm "Do you want to update test snapshot with current changes?" && { # must redirect inside xlog pipeline
        rm -rf "$test_dir/snapshot"
        cp -r "$test_dir/got" "$test_dir/snapshot"
      }
    fi
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

# Test backend on file changes. Accepts `go test` parameters.
# Args: [...]
x.test.backend.watch() {
  clear

  latency=2
  while true; do
    inotifywait \
      --monitor ./internal/**/* \
      --event=close_write \
      --format='%T %f' \
      --timefmt='%s' |
      while read -r event_time event_file 2>/dev/null || sleep $latency; do
        clear

        # NOTE: no count=1 default to allow caching
        { APP_ENV="$X_ENV" go test -shuffle=on -tags skipxo "$@" ./...; } && echo "${GREEN}✓ All tests passing${OFF}"
      done
  done
}

# Run backend with hot-reloading.
x.run.backend-hr() {
  # TODO replace healthcheck with adhoc calls and bring services up in btaches
  # to prevent either bombarding with req or having to wait too long at startup.
  # see https://github.com/moby/moby/issues/33410
  run_shared_services up -d --build --remove-orphans --wait
  setup_swagger_ui
  # NOTE: building binary very unreliable, leads to bin not found.
  air \
    --build.pre_build_cmd "$pre_build_cmd" \
    --build.cmd "" \
    --build.bin "go run ./cmd/rest-server/ -env=.env.$X_ENV" \
    --build.include_ext "go" \
    --build.exclude_regex ".gen.go,_test.go" \
    --build.exclude_dir ".git,tmp,$PROTO_DIR,$PG_REPO_GEN,**/testdata,vendor,frontend,external,*.cache,$CACHE,$TOOLS_DIR" \
    --build.stop_watch "internal/rest/,internal/services/" \
    --build.delay 1000 \
    --build.exclude_unchanged "true" |
    sed -e "s/^/${BLUE}[Air]${OFF} /"
}

# Run frontend with hot-reloading.
x.run.frontend() {
  config_template_setup frontend
  cd frontend
  pnpm run dev |
    sed -e "s/^/${GREEN}[Vite]${OFF} /"
}

# Run all project services with hot reload enabled in dev mode.
x.run-dev() {
  run_hot_reload

  while true; do
    sleep 1000
  done

  # TODO fix won't kill children
  # next_allowed_run=$(date +%s)
  # latency=3
  # close_write event, else duplicated, tripl. events -> race condition
  # while true; do
  #   inotifywait \
  #     --monitor $SPEC_PATH \
  #     --event=close_write \
  #     --format='%T %f' \
  #     --timefmt='%s' |
  #     while read -r event_time event_file 2>/dev/null || sleep $latency; do
  #       if [[ $event_time -ge $next_allowed_run ]]; then
  #         next_allowed_run=$(date --date="${latency}sec" +%s)

  #         kill_descendants || true

  #         run_hot_reload
  #       fi
  #     done
  # done
}

x.backend.sync-deps() {
  go mod tidy
  go mod vendor
}

# Run project in production mode, i.e. dockerized and bundled.
x.run-dockerized() {
  # project run-dockerized --x-env=prod --x-no-gen
  run_shared_services up -d --build --wait
  x.db.recreate

  x.gen

  setup_swagger_ui

  DOCKER_BUILDKIT=1 BUILDKIT_PROGRESS=plain docker compose \
    --project-name "$PROJECT_PREFIX"_"$X_ENV" \
    -f docker-compose.yml \
    --env-file ".env.$X_ENV" \
    up -d --build --wait --force-recreate 2>&1 # https://github.com/docker/compose/issues/7346

  x.migrate up
}

# Remove running project containers, including shared ones between environments.
x.stop-project() {
  { { {
    run_shared_services down --remove-orphans
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Recreates docker volumes for Postgres, Redis, etc. Unsaved data will be lost.
x.recreate-shared-services() {
  run_shared_services up -d --build --force-recreate --wait
}

# Checks before release:
# - Magic keyword "STOPSHIP" not found in tracked files.
x.release() {
  { { {
    search_stopship "STOPSHIP" &
    GOWORK=off go mod verify & # (https://github.com/golang/go/issues/54372)

    wait_without_error || err Failed jobs
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Runs the go type checker.
x.backend.typecheck() {
  golangci-lint run --no-config --disable-all --enable=typecheck --timeout=10m
}

x.dev-utils.create-crud() { # Creates a generic CRUD endpoint in the OpenAPI spec and generates related files for a
  # given db table by struct name.
  # Accepts flags:
  # --project - Generate as entity under a project.
  # Args: name
  xsetup.backup
  { { {
    x.gen.xo

    load_exported_crud_gen_vars ${@}

    local new_crud_schema="$(bash "$BIN_TEMPLATES_DIR"/crud-openapi.yaml.tmpl.bash)"

    yq eval-all "(
        select(fi == 1).paths
        ) as \$paths
        | (
          select(fi == 1).components.schemas
        ) as \$schemas
        | select(fi == 0)
        | .paths += \$paths
        | .components.schemas += \$schemas
        " "$SPEC_PATH" <(echo "$new_crud_schema") | sponge "$SPEC_PATH"

    echo "
type ${pascal_name} struct {
	db.${pascal_name}
}

type Create${pascal_name}Request struct {
	db.${pascal_name}CreateParams
}

type Update${pascal_name}Request struct {
	db.${pascal_name}UpdateParams
}
" >>"$REST_MODELS"

    echo "package rest" >"internal/rest/api_${snake_name}.go" # required to prevent codegen failing. Will be replaced afterwards

    yq eval-all \
      ". += {
    \"${kebab_name}:create\": {
      \"description\": \"Can create ${sentence_name}s.\"
    },
    \"${kebab_name}:edit\": {
      \"description\": \"Can edit ${sentence_name}s.\"
    },
    \"${kebab_name}:delete\": {
      \"description\": \"Can delete ${sentence_name}s.\"
    }
  }" -i -o=json "$SCOPE_POLICY_PATH"

    update_roles_and_scopes

    local file="internal/repos/postgresql/repo_${snake_name}.go"
    test -e "$file" && err "File $file exists. Please rename to avoid overwrite"
    bash "$BIN_TEMPLATES_DIR"/crud-repo.go.tmpl.bash >"$file" && gofumpt -w $file
    file="internal/services/service_${snake_name}.go"
    test -e "$file" && err "File $file exists. Please rename to avoid overwrite"
    bash "$BIN_TEMPLATES_DIR"/crud-service.go.tmpl.bash >"$file" && gofumpt -w $file
    file="internal/repos/postgresql/postgresqltestutil/${snake_name}.go"
    test -e "$file" && err "File $file exists. Please rename to avoid overwrite"
    bash "$BIN_TEMPLATES_DIR"/crud-postgresqltestutil.go.tmpl.bash >"$file" && gofumpt -w $file
    file="internal/services/servicetestutil/${snake_name}.go"
    test -e "$file" && err "File $file exists. Please rename to avoid overwrite"
    bash "$BIN_TEMPLATES_DIR"/crud-servicetestutil.go.tmpl.bash >"$file" && gofumpt -w $file

    echo "
// ${pascal_name} defines the datastore/repository handling persisting ${sentence_name} records.
type ${pascal_name} interface {
	ByID(ctx context.Context, d db.DBTX, id db.${pascal_name}ID, opts ...db.${pascal_name}SelectConfigOption) (*db.${pascal_name}, error)
	Create(ctx context.Context, d db.DBTX, params *db.${pascal_name}CreateParams) (*db.${pascal_name}, error)
	Update(ctx context.Context, d db.DBTX, id db.${pascal_name}ID, params *db.${pascal_name}UpdateParams) (*db.${pascal_name}, error)
	Delete(ctx context.Context, d db.DBTX, id db.${pascal_name}ID) (*db.${pascal_name}, error)
}
" >>"$REPOS_DIR/repos.go"

    local services_path="internal/services/services.go"
    local line=$(awk '/return &Services/{print NR}' "$services_path")
    test -z line && err "No Services line found"
    sed -i "$((line - 2))a\\
${lower_name}svc := New${pascal_name}(logger, repos)" "$services_path"
    # 1 new line was just prepended
    sed -i "$((line + 1))a\\
${pascal_name}: ${lower_name}svc," "$services_path"

    local line=$(awk '/type Services struct {/{print NR}' "$services_path")
    test -z line && err "No Services line found"
    sed -i "$((line))a\\
${pascal_name} *${pascal_name}" "$services_path"

    local service_repos_path="internal/services/repos.go"
    local line=$(awk '/return &repos.Repos/{print NR}' "$service_repos_path")
    test -z line && err "No repos.Repos line found"
    local string="${lower_name}repo := reposwrappers.New${pascal_name}WithTracing(
		reposwrappers.New${pascal_name}WithTimeout(
			postgresql.New${pascal_name}(),
			reposwrappers.${pascal_name}WithTimeoutConfig{},
		),
		postgresql.OtelName,
		nil,
	)"
    modified_string="${string//$'\n'/}"
    newline_count=$((${#string} - ${#modified_string}))
    formatted_string="${string//$'\n'/\\n}"

    sed -i "$((line - 2))a\\
$formatted_string" "$service_repos_path"
    # 1 new line was just prepended
    sed -i "$((line + newline_count + 1))a\\
${pascal_name}: ${lower_name}repo," "$service_repos_path"

    generate_repo_constructor
    x.gen.gowrap $pascal_name

    if gofumpt -w "$services_path" "$service_repos_path" && x.backend.typecheck; then
      x.gen
      x.dev-utils.create-crud-tests ${@}

      # now that generated api models exist
      file="internal/rest/api_${snake_name}.go"
      rm -f "$file"
      test -e "$file" && err "File $file exists. Please rename to avoid overwrite"
      bash "$BIN_TEMPLATES_DIR"/crud-api.go.tmpl.bash >"$file" && gofumpt -w $file
    else
      err "Typecheck failed after CRUD gen. To debug:
      1. Commit current changes
      2. Run $CMD again with --x-no-backup flag
      3. Fix typecheck errors manually
      4. Run 'project gen', fix errors if any
      5. Run 'project dev-utils.create-crud-tests $*'"
    fi

  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
  xsetup.backup.cleanup
}

load_exported_crud_gen_vars() {
  local name="$1"
  test -z "$name" && err "A db table struct name is required"

  for arg in "${@:2}"; do
    case $arg in
    --project)
      # For entities specific to a project, ie with project_id FK referencing projects.project_id
      # Could autogenerate directly without arg passed, but just be explicit
      export with_project=1
      ;;
    *) ;;
    esac
  done

  export pascal_name="$(to_pascal $name)"
  export camel_name="$(to_camel $name)"
  export kebab_name="$(to_kebab $name)"
  export sentence_name="$(to_lower_sentence $name)"
  export snake_name="$(to_snake $name)"
  export lower_name="$(to_lower $name)"
  _db_struct_fields=()
  go-utils.struct_fields "$pascal_name" "$PG_REPO_GEN/db/$lower_name.xo.go" _db_struct_fields
  if [[ " ${_db_struct_fields[*]} " =~ " DeletedAt " ]]; then
    export has_deleted_at=1
  fi
  db_struct_fields="${_db_struct_fields[*]}"
  export db_struct_fields
  _db_create_params_struct_fields=()
  go-utils.struct_fields "${pascal_name}CreateParams" "$PG_REPO_GEN/db/$lower_name.xo.go" _db_create_params_struct_fields
  db_create_params_struct_fields="${_db_create_params_struct_fields[*]}"
  export db_create_params_struct_fields
  _db_update_params_struct_fields=()
  go-utils.struct_fields "${pascal_name}UpdateParams" "$PG_REPO_GEN/db/$lower_name.xo.go" _db_update_params_struct_fields
  db_update_params_struct_fields="${_db_update_params_struct_fields[*]}"
  export db_update_params_struct_fields
}

x.dev-utils.create-crud-tests() {
  { { {
    load_exported_crud_gen_vars ${@}

    local file="internal/repos/postgresql/repo_${snake_name}_test.go"
    test -e "$file" && err "File $file exists. Please rename to avoid overwrite"
    bash "$BIN_TEMPLATES_DIR"/crud-repo-tests.go.tmpl.bash >"$file" && gofumpt -w $file
    local file="internal/services/service_${snake_name}_test.go"
    test -e "$file" && err "File $file exists. Please rename to avoid overwrite"
    bash "$BIN_TEMPLATES_DIR"/crud-service-tests.go.tmpl.bash >"$file" && gofumpt -w $file
    local file="internal/rest/api_${snake_name}_test.go"
    test -e "$file" && err "File $file exists. Please rename to avoid overwrite"
    bash "$BIN_TEMPLATES_DIR"/crud-api-tests.go.tmpl.bash >"$file" && gofumpt -w $file
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Shows existing user api keys.
x.dev-utils.api-keys() {
  docker.postgres psql --no-psqlrc -d $POSTGRES_DB -c "select email, api_key from user_api_keys left join users using (user_id);"
}

# Shows current database column comments used in xo codegen
# to ease further updates to comments in migrations.
x.dev-utils.show-column-comments() {
  local query="SELECT DISTINCT
  c.relname as table,
  a.attname::varchar AS column,
  COALESCE(col_description(format('%s.%s', n.nspname, c.relname)::regclass::oid, isc.ordinal_position), '') as column_comment
FROM pg_attribute a
  JOIN ONLY pg_class c ON c.oid = a.attrelid
  JOIN ONLY pg_namespace n ON n.oid = c.relnamespace
  INNER JOIN information_schema.columns as isc on c.relname = isc.table_name and isc.column_name = a.attname
  LEFT JOIN pg_constraint ct ON ct.conrelid = c.oid
    AND a.attnum = ANY(ct.conkey)
    AND ct.contype = 'p'
  LEFT JOIN pg_attrdef ad ON ad.adrelid = c.oid
    AND ad.adnum = a.attnum
WHERE a.attisdropped = false
  AND n.nspname = 'public'
  AND (true OR a.attnum > 0)
  AND col_description(format('%s.%s', n.nspname, c.relname)::regclass::oid, isc.ordinal_position) is not null;"

  docker.postgres psql --no-psqlrc -d $POSTGRES_DB -c "$query" 2>/dev/null
}

# Setups a traefik container with predefined configuration in `install-dir`.
# Args: install-dir
x.setup.traefik() {
  { { {
    test -z "$1" && err "installation directory is required"

    x.setup.mkcert

    git clone --depth=1 https://github.com/danicc097/traefik-bootstrap.git "$1" || confirm "$1 already exists. Continue?"
    docker network create traefik-net || true
    mkdir -p "$1"/traefik/certificates
    cp $CERTIFICATES_DIR/* "$1"/traefik/certificates
    cd "$1" || exit
    cp traefik/dynamic_conf.yaml.example traefik/dynamic_conf.yaml
    echo "Adding $PWD/certificates/"
    yq e ".tls.certificates += [{
    \"certFile\": \"$PWD/$CERTIFICATES_DIR/localhost.pem\",
    \"keyFile\": \"$PWD/$CERTIFICATES_DIR/localhost-key.pem\"
  }]" -i traefik/dynamic_conf.yaml

    ./compose-up
    cd - >/dev/null || exit
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Installs mkcert local development certificates.
x.setup.mkcert() {
  { { {
    cd "$CERTIFICATES_DIR" || exit
    echo "Setting up local certificates"
    mkcert --cert-file localhost.pem --key-file localhost-key.pem "localhost" "*.e2e.localhost" "*.local.localhost" "*.dev.localhost" "*.ci.localhost" "*.prod.localhost" "127.0.0.1" "::1" "host.docker.internal" 2>&1
    cd -
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

########################## migrations ##########################

# Wrapper for golang-migrate with predefined configuration.
x.migrate() {
  { { {
    migrate \
      -path $MIGRATIONS_DIR/ \
      -database "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:$EXPOSED_POSTGRES_PORT/$POSTGRES_DB?sslmode=disable" \
      "$@" 2>&1

    if [[ "${*:1}" =~ (up)+ ]]; then
      echo "Running post-migration scripts"
      for file in $(find db/post-migration -maxdepth 1 -name '*.sql' | sort); do
        docker.postgres.psql -U postgres -d "$POSTGRES_DB" <$file
      done
    fi
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Create a new migration file with the given `name`.
# Args: name
x.migrate.create() {
  { { {
    tmp="$*"
    tmp="${tmp// /_}"
    name="${tmp,,}"
    test -z $name && err "Please provide a migration name"
    x.migrate create -ext sql -dir $MIGRATIONS_DIR/ -seq -digits 7 "$name"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

########################## db ##########################

# psql session for the current environment.
x.db.psql() {
  x.db.psql-with-db $POSTGRES_DB
}

# psql session for `database`.
# Args: database
x.db.psql-with-db() {
  docker exec -it postgres_db_"$PROJECT_PREFIX" psql -d $1
}

# Show active and max number of connections for the current environment.
x.db.conns() {
  { { {
    x.db.conns-db $POSTGRES_DB
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Show active and max number of connections for `database`.
# Args: database
x.db.conns-db() {
  { { {
    current_conns=$(docker.postgres.psql -d $1 -c "SELECT count(*) FROM pg_stat_activity WHERE datname = '$1';")
    max_conns=$(docker.postgres.psql -d $1 -c "SHOW max_connections;")
    echo "$current_conns/$max_conns active connections in '$1'"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}
# Create a new database in the current environment if it doesn't exist
# and stops its running processes if any.
x.db.recreate() {
  { { {
    docker.postgres.create_db $POSTGRES_DB
    docker.postgres.stop_db_processes $POSTGRES_DB
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Drop and recreate the database in the current environment.
x.db.drop() {
  [[ $x_env = "prod" && "$POSTGRES_DB" != "$GEN_POSTGRES_DB" ]] && with_tty confirm "This will drop production database data. Continue?"
  { { {
    docker.postgres.drop_and_recreate_db "$POSTGRES_DB"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Drop and recreate the database used for code generation up to N, N-1 revisions or none.
# Args: {up|up-1|drop}
x.db.gen() {
  { { {
    latest_rev=$(find $MIGRATIONS_DIR/*.sql -maxdepth 0 | wc -l)
    second_latest_rev=$(((latest_rev - 2) / 2)) # up+down
    POSTGRES_DB=$GEN_POSTGRES_DB x.db.drop
    # TODO should be able to autocomplete x function nested cases
    # if it's called as $CMD
    case $1 in
    up)
      POSTGRES_DB=$GEN_POSTGRES_DB x.migrate up
      ;;
    up-1)
      POSTGRES_DB=$GEN_POSTGRES_DB x.migrate up $second_latest_rev
      ;;
    drop) ;;
    *)
      err "Valid options {up|up-1|drop}, got: $1"
      ;;
    esac
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Seed gen database.
x.db.gen.initial-data() {
  { { {
    POSTGRES_DB=$GEN_POSTGRES_DB x.db.initial-data
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Seed database.
x.db.initial-data() {
  { { {
    x.db.drop
    x.migrate up
    echo "Loading initial data to $POSTGRES_DB"
    # docker.postgres.psql -d $POSTGRES_DB <"./db/initial_data_$x_env.pgsql"
    go run cmd/initial-data/main.go -env .env.$X_ENV
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Backup the database for the current environment.
x.db.dump() {
  { { {
    local dump_prefix="dump_${X_ENV}_"
    running_dumps=$(docker.postgres.psql -P pager=off -U postgres -d "postgres_$x_env" \
      -c "SELECT pid FROM pg_stat_activity WHERE application_name = 'pg_dump';")
    if [[ "$running_dumps" != "" ]]; then
      err "pg_dump is already running, aborting new dump"
    fi

    mkdir -p "$DUMPS_DIR"
    schema_v=$(docker.postgres.psql -P pager=off -U postgres -d "postgres_$x_env" \
      -c "SELECT version FROM schema_migrations;")
    dump_file="${dump_prefix}$(date +%Y-%m-%dT%H-%M-%S)_version${schema_v}.gz"

    echo "Dumping database to $dump_file"
    docker.postgres pg_dump -U postgres -d "postgres_$x_env" |
      gzip >"$DUMPS_DIR/$dump_file"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

# Restore the database with the latest dump or `file` for the current environment.
# Args: [file]
x.db.restore() {
  dump_file="$1"
  test -z $dump_file && err "A dump file path is required"

  local dump_prefix="dump_${X_ENV}_"
  if [[ -n $dump_file ]]; then
    [[ ! -f $dump_file ]] && err "$dump_file does not exist"
    [[ "$dump_file" != *"$dump_prefix"* ]] && confirm "${RED}Dump doesn't match prefix '$dump_prefix'. Continue?${OFF}"
  else
    mkdir -p "$DUMPS_DIR"
    latest_dump_file=$(find "$DUMPS_DIR"/ -name "$dump_prefix*.gz" | sort -r | head -n 1)
    if [[ -z "$latest_dump_file" ]]; then
      err "No $dump_prefix* file found in $DUMPS_DIR"
    fi
    dump_file="$latest_dump_file"
  fi

  confirm "Do you want to restore ${YELLOW}$dump_file${OFF} in the ${RED}$x_env${OFF} environment?"

  x.db.drop
  gunzip -c "$dump_file" | docker.postgres.psql -U postgres -d "postgres_$x_env"
  # sanity check, but probably better to do it before restoring...
  dump_schema_v=$(docker.postgres.psql -P pager=off -U postgres -d "postgres_$x_env" -c "SELECT version FROM schema_migrations;")
  file_schema_v=$(echo "$dump_file" | sed -E 's/.*_version([0-9]+)\..*/\1/')
  echo "Migration revision: $dump_schema_v"
  if [[ "$dump_schema_v" != "$file_schema_v" ]]; then
    err "Schema version mismatch: $dump_schema_v (dump) != $file_schema_v (file). Dump has probably been renamed."
  fi
}

########################## e2e ##########################

# Run E2E tests.
x.e2e.run() {
  { { {
    source .env.e2e

    x.gen.e2e

    name="$PROJECT_PREFIX-e2e"
    cd e2e
    DOCKER_BUILDKIT=1 BUILDKIT_PROGRESS=plain docker build -t "$name" .
    cd - >/dev/null

    # need symlink resolution for data

    test -t 0 && opts="-t"
    docker run -i $opts --rm \
      --ipc=host \
      --network host \
      -v "$(pwd)/cmd/oidc-server/data/:/cmd/oidc-server/data/" \
      -v "$(pwd)/e2e:/e2e/" \
      "$name" \
      bash -c "playwright test"
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

########################## openapi ##########################

# Run a diff against the previous OpenAPI spec in the main branch.
# Can also be used to generate changelogs when upgrading major versions.
x.diff-oas() {
  { { {
    base_spec="/tmp/openapi.yaml"
    git show "main:$SPEC_PATH" >"$base_spec"

    tmp="$(yq .info.version "$base_spec")"
    base_v="${tmp%%.*}"
    tmp=$(yq .info.version "$SPEC_PATH")
    rev_v="${tmp%%.*}"
    ((rev_v != base_v)) &&
      echo "${YELLOW}Revision mismatch $rev_v and $base_v, skipping diff.${OFF}" && return

    args="-format text -breaking-only -fail-on-diff -exclude-description -exclude-examples"
    if oasdiff $args -base "$base_spec" -revision $SPEC_PATH; then
      echo "${GREEN}No breaking changes found in $SPEC_PATH${OFF}"
    else
      err "${RED}Breaking changes found in $SPEC_PATH${OFF}"
    fi
  } 2>&4 | xlog >&3; } 4>&1 | xerr >&3; } 3>&1
}

########################### helpers ###########################

# IMPORTANT: bug in declare -F returns line number of last nested function, if any.
# extracting function here instead...
run_hot_reload() {
  x.run.backend-hr &
  pids="$pids $!"
  x.run.frontend &
  pids="$pids $!"
}

run_shared_services() {
  docker network create traefik-net 2>/dev/null || true

  local extra_services
  if [[ $x_env != "prod" ]]; then
    extra_services="-f docker-compose.oidc.yml"
  fi
  cd docker
  DOCKER_BUILDKIT=1 BUILDKIT_PROGRESS=plain docker compose \
    -p "$PROJECT_PREFIX" \
    -f docker-compose.shared.yml \
    $extra_services \
    --env-file ../.env."$X_ENV" \
    "$@" 2>&1 # https://github.com/docker/compose/issues/7346
  cd - >/dev/null
}

# generate db structs for use with swaggest/openapi-go.
# no need for ast parsing since all code is predictable
# NOTE: type grouping not supported.
generate_structs_map() {
  # need new cli since this function is called before building the rest of tooling
  go build -o $BUILD_DIR/ast-parser cmd/ast-parser/main.go

  local path="$PG_REPO_GEN/db"
  local structs=()
  local enums=()
  local all_types=()
  go-utils.find_structs structs "$path" # faster. we know no generics structs exist in gen pkg
  go-utils.find_enums enums "$path"
  go-utils.find_all_types all_types "$path"
  # find_deleted_pkg_schemas all_types Db
  for struct in ${structs[@]}; do
    map_fields+=("\"Db$struct\": new(db.$struct),") # swaggest requires pointer to struct
  done
  map_fields+=("
  //
  ")

  local path="$REST_MODELS"
  local structs=()
  local enums=()
  local all_types=()
  # workaround for reflection type name with generics in swaggest
  ast-parser find-structs --create-generics-map --public-only "$path" >"internal/codegen/reflectTypeMap.gen.json"

  mapfile -t structs < <(ast-parser find-structs --exclude-generics --public-only "$path")
  go-utils.find_enums enums "$path"
  go-utils.find_all_types all_types "$path"
  # find_deleted_pkg_schemas all_types Rest
  for struct in ${structs[@]}; do
    map_fields+=("\"Rest$struct\": new(rest.$struct),")
  done
  map_fields+=("
  //
  ")

  out="internal/codegen/structs.gen.go"
  cat <<EOF >$out
// Code generated by project. DO NOT EDIT.

package codegen

import (
  db "$GOMOD_PKG/$PG_REPO_GEN/db"
	rest "$GOMOD_PKG/internal/rest"
  )
    var PublicStructs = map[string]any{
$(printf "%s\n" "${map_fields[@]}")
  }
EOF

  gofumpt -w $out
}

# Converts db enums to OpenAPI schemas.
sync_db_enums_with_spec() {
  db_search_paths=("public" "other_schema")

  search_path_str=$(printf "'%s'," "${db_search_paths[@]}")
  search_path_str=${search_path_str%,}
  enum_query=$(printf "
    SELECT t.typname AS enum_name
    FROM pg_type t
    INNER JOIN pg_namespace n ON n.oid = t.typnamespace
    WHERE t.typtype = 'e' AND n.nspname IN (%s);" "$search_path_str")

  mapfile -t db_enum_names < <(docker.postgres.psql -d $POSTGRES_DB -c "$enum_query" 2>/dev/null)
  for db_enum_name in "${db_enum_names[@]}"; do
    local schema_name="$(to_pascal $db_enum_name)"
    local enum_values=()
    mapfile -t enum_values < <(docker.postgres.psql -d $POSTGRES_DB -c "SELECT unnest(enum_range(NULL::\"$db_enum_name\"));" 2>/dev/null)

    local schema_path=".components.schemas.$schema_name"
    if yq -e "$schema_path" $SPEC_PATH &>/dev/null; then # -e exits 1 if no match
      if ! yq -e "$schema_path | has(\"x-generated\")" $SPEC_PATH &>/dev/null; then
        err "Clashing schema name '$schema_name'. Please remove it before continuing."
      fi
    fi

    src_comment="database enum '$db_enum_name'"
    replace_enum_in_spec "$schema_name" enum_values "$src_comment"
  done
}

setup_swagger_ui() {
  go run cmd/swagger-ui-setup/main.go -env=".env.$X_ENV" -swagger-ui-dir=$SWAGGER_UI_DIR

  local bundle_spec="$SWAGGER_UI_DIR/openapi.yaml"
  cp $SPEC_PATH $bundle_spec
  yq 'explode(.)' -i $bundle_spec
  sed -i 's/!!merge //' $bundle_spec
}

# Replaces database.
# Parameters:
#   Schema name
#   Enum values (nameref)
#   Enum source comment
replace_enum_in_spec() {
  local enum="$1"
  local -n __arr="$2"
  local src_comment="$3"

  local schema_path=".components.schemas.$enum"

  local __enums
  __enums=$(printf ",\"%s\"" "${__arr[@]}")
  __enums="[${__enums:1}]"

  echo "Replacing '$enum' enum in $SPEC_PATH with values from $src_comment"
  __enums=$__enums yq e "
    $schema_path.type = \"string\" |
    $schema_path.enum = env(__enums) |
    $schema_path.x-generated = \"-\" |
    $schema_path.description = \"is generated from $src_comment.\" |
    ($schema_path | key) line_comment=\"Generated from $src_comment. DO NOT EDIT.\"" -i $SPEC_PATH
}

find_deleted_pkg_schemas() {
  local -n __all_types="$1"
  local pkg="$2"
  local pkg_prefix=$(to_pascal $pkg)
  echo "Finding deleted structs or enums from package '$pkg_prefix'..."
  mapfile -t spec_schemas < <(yq eval '.components.schemas[] | key' "$SPEC_PATH" | grep -E "^${pkg_prefix}" || true)

  local found=0
  for spec_schema in ${spec_schemas[*]}; do
    for type in ${__all_types[@]}; do
      if [[ $spec_schema == "${pkg_prefix}$type" ]]; then
        found=1
      fi
    done
    ((found == 0)) && echo "${YELLOW}[WARNING] $SPEC_PATH schema $spec_schema no longer exists in package '$pkg'. Remove if necessary.${OFF}"
    found=0
  done
}

update_spec_with_structs() {
  vext="x-postgen-struct"
  struct_names=$(yq e ".components.schemas[] | select(has(\"$vext\")).$vext" $SPEC_PATH)
  schema_names=$(yq e ".components.schemas[] | select(has(\"$vext\")) | key" $SPEC_PATH)
  mapfile -t struct_names <<<$struct_names
  mapfile -t schema_names <<<$schema_names

  # openapi-go will generate a RestXYZ if we have a XYZ: <...> x-postgen-struct: RestXYZ
  # we need to detect these early, because it will sync a RestXYZ instead of XYZ
  declare -A schemas
  for i in ${!struct_names[@]}; do
    schemas["${struct_names[$i]}"]="${schema_names[$i]}" # keep track of custom structs per schema name
  done

  struct_names_list=$(join_by "," ${struct_names[*]})
  ((${#struct_names_list} == 0)) && return

  # NOTE: https://github.com/pkujhd/goloader allows reloading packages at runtime
  # NOTE: yaegi extraction doesn't work with generics and is slow. See failed-yaegi* branches
  # otherwise maybe yaegi can be used for openapi-go without much fuzz
  # Only implement the above if there are cases where we cant have compilable state when
  # building gen-schema at this step, or the workaround is too tedious

  local gen_schema_spec="/tmp/openapi.yaml"
  # always compile and run since we need new PublicStructs that were just changed
  codegen gen-schema --struct-names $struct_names_list | yq '
    with_entries(select(.key == "components"))' \
    >$gen_schema_spec || [[ -n "$X_IGNORE_BUILD_ERRORS" ]]

  # replace every schema back into the spec
  for schema in $(yq '.components.schemas[] | key' $gen_schema_spec); do
    schema_name="${schemas[$schema]:-$schema}"

    yq eval-all "(
        select(fi == 1).components.schemas.$schema
        ) as \$schema
        | select(fi == 0)
        | .components.schemas.$schema_name = \$schema
        | (.components.schemas.$schema_name | key) line_comment=\"Generated from internal structs. DO NOT EDIT.\"
      " "$SPEC_PATH" $gen_schema_spec >/tmp/final-spec

    # TODO: better handle in gen_schema if possible to not generate at all in the first place
    # if [[ "$schema_name" != "$schema" ]]; then
    #   echo "Deleting schema \"$schema\". Replace references with \"$schema_name\""
    #   # yq e "del(.components.schemas.$schema)" -i /tmp/final-spec
    # fi

    mv /tmp/final-spec "$SPEC_PATH" # need to update at each iteration since next depends on it
  done
}

remove_schemas_marked_to_delete() {
  local paths_arr paths
  paths_arr=$(yq e '..
      | select(has("x-TO-BE-DELETED"))
      | path
      | with(.[] | select(contains(".") or contains("/") or contains("{")); . = "\"" + . + "\"")
      | join(".")
      | . = "." + .
    ' $SPEC_PATH)

  paths=$(join_by "," "${paths_arr[@]}")
  yq e "del($paths)" -i "$SPEC_PATH"
}

xo_schema() {
  # xo cannot use db files as input, needs an up-to-date schema
  # not recreating db on every gen can lead to plain wrong generation based on an old dev schema.
  # Also use a unique db to prevent cosmic accidents
  xo schema "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:$EXPOSED_POSTGRES_PORT/$GEN_POSTGRES_DB?sslmode=disable" \
    --src "$XO_TEMPLATES_DIR" \
    "$@"
}

# updates dynamic config with env vars for
config_template_setup() {
  local dir="$1"
  export ENV_REPLACE_GLOB=$dir/config.json
  # ensure config has all k:v as "<KEY>": "$<KEY>"
  # this has to always be run at startup
  jq \
    'to_entries | map_values({ (.key) : ("$" + .key) }) | reduce .[] as $item ({}; . + $item)' \
    $dir/config.template.json >/tmp/$dir-config.tmp.json && mv /tmp/$dir-config.tmp.json "$ENV_REPLACE_GLOB"
  envvars=$(printenv | awk -F= '{print $1}' | sed 's/^/\$/g' | paste -sd,)
  frontend/nginx/replace-envvars.sh "$envvars"
}

######################## ENTRYPOINT ########################

export PROC=$$

export POSTGRES_TRACE=${POSTGRES_TRACE:-false}
export GIN_MODE=${GIN_MODE:-release}

source ".project.dependencies.sh"
source ".project.usage.sh"

set -Eeo pipefail
set -o errtrace

X_ENV="dev"

# --------------------- completion and delegation --------------------
#      `complete -o nospace -C foo foo` > `source <(foo bloated_completion)`

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=("${line##declare -f x.}")
done < <(declare -F)
# sort the array. Mimic file input to sort
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

MAX_XFN_LEN=0 # for logging purposes
for c in "${COMMANDS[@]}"; do
  len=${#c}
  ((len > MAX_XFN_LEN)) && MAX_XFN_LEN=$((len - 1)) # remove "x." but account for extra last space appended.
done

if [[ -n $COMP_LINE ]]; then
  pre="${COMP_LINE##* }" # the part after the last space in the current command
  cur_commands=(${COMP_LINE%"$pre"})

  for c in "${COMMANDS[@]}"; do
    if [[ " ${cur_commands[*]} " =~ " ${c} " ]]; then
      xfn_specified=true
      break
    fi
  done

  for c in "${COMMANDS[@]}"; do
    test -z "${xfn_specified}" || break
    test -z "${pre}" -o "${c}" != "${c#"${pre}"}" -a "${pre}" != "${c}" && echo "${c} "
  done

  test -z "${xfn_specified}" && exit

  declare __x_options x_options_lines

  parse_x_options x_options_lines

  for c in "${x_options_lines[@]}"; do
    tmp="${c%%)*}"
    xopt="${tmp//\*/}"
    __x_options+=("$xopt")
  done

  declare -A __x_opts_seen
  for cmd in "${cur_commands[@]}"; do
    for opt in ${__x_options[@]}; do
      if [[ "$cmd" == *"$opt"* ]]; then
        __x_opts_seen[$opt]=true
        break
      fi
    done
  done

  for opt in ${__x_options[@]}; do
    [[ -n "${__x_opts_seen[$opt]}" ]] && continue
    if [[ ${opt:0:${#pre}} == "${pre,,}" ]]; then
      [[ "$opt" == "${pre,,}" ]] && continue # will have to be removed for inner completion
      if [[ "${opt,,}" =~ ^.*= ]]; then
        # TODO: could complete if choices found for opt (assoc array) eg --x-env has # Options: "dev prod ci"
        # which gets added to usage docs as arg: dev|prod|ci instead of using # Args: env
        # for validation, it can be generic:
        # if [[ ! " ${opts[${--x-(flag)}]} " =~ " $val " ]]; then
        #   err "Invalid value for --x-(flag): val. Allowed values: opts[${--x-(flag)}]"
        # fi`
        # and for completion itself we cycle through echo "${opt}<val1>", "${opt}<val2>",...
        # (can handle inner pre here, ie --x-env=de <TAB> outputs possible nested opts as well)
        echo "${opt}"
      else
        echo "${opt} "
      fi
    fi
  done

  exit
fi

declare CMD="$1"

# First comment lines automatically added to usage docs.
while [[ "$#" -gt 0 ]]; do
  case $1 in
  --x-help)
    # Show help for a particular x function.
    COMMANDS=("$CMD")
    usage
    exit
    ;;
  --x-ignore-build-errors)
    # Proceeds with code generation regardless of tool rebuild errors.
    # Use in case of compilation errors that depend on generated code.
    # A clean gen run is required afterwards.
    export X_IGNORE_BUILD_ERRORS=1
    # export X_NO_BACKUP=1 # on failed gen $CACHE is cleared, shouldn't be necessary
    ;;
  --x-force-regen)
    # Removes code generation cache, forcing a new run.
    export X_FORCE_REGEN=1
    ;;
  --x-no-confirmation)
    # Bypasses confirmation messages. (WIP: Use `yes` in the meantime)
    export X_NO_CONFIRMATION=1
    ;;
  --x-no-gen)
    # Skips code generation steps.
    export X_NO_GEN=1
    ;;
  --x-no-backup)
    # Backup stash is not restored on failure.
    # Please ensure there are no uncommitted changes in the current branch beforehand.
    export X_NO_BACKUP=1
    ;;
  --x-env=*)
    # Environment to run commands in. Defaults to "dev".
    # Args: env
    export X_ENV="${1#--x-env=}"
    valid_envs="dev prod ci"
    if [[ ! " ${valid_envs[*]} " =~ " $X_ENV " ]]; then
      err "Valid environments: $valid_envs"
    fi
    ;;
  *)
    # will set everything else back
    args+=("$1")
    ;;
  esac
  shift
done

for arg in ${args[@]}; do
  set -- "$@" "$arg"
done

export BUILD_VERSION="$X_ENV-$(git rev-parse --verify HEAD)"

readonly X_IGNORE_BUILD_ERRORS X_FORCE_REGEN X_NO_CONFIRMATION X_NO_GEN X_NO_BACKUP X_ENV

######################## INIT ########################

# applicable to any command
ensure_envvars_set ".env.template" ".env.${X_ENV}"

# export to all subsequent commands or scripts
set -a
# TODO: wrapper around source that for each var in file
# checks if its defined, e.g. P4="" test -v P4
# and if so saves to a global current_env assoc array
# that is shared for all calls of this wrapper func
# shellcheck source=SCRIPTDIR/../.env.dev
source ".env.$X_ENV"
set +a

trap 'show_tracebacks' ERR
trap killgroup EXIT HUP INT TERM
trap errtrap SIGUSR1
# may get called multiple times
trap 'exit-cleanup $LINENO' EXIT HUP INT TERM # EXIT (0) executed on exit from the shell

exit_cleanup_calls=0

exit-cleanup() {
  # prevent exiting in foreground while we check if we should run cleanup
  trap 'echo ignoring SIGINT' SIGINT
  [[ "$exit_cleanup_calls" -gt 0 ]] && return
  ((exit_cleanup_calls++)) || true

  {
    if [[ $need_backup_restore = true ]]; then
      test -z $X_NO_BACKUP && xsetup.backup.restore
      # IMPORTANT: if any command failed always restore gen cache, regardless of flags passed.
      gen-cache.restore
    fi

    # shared cleanup regardless of gen success
    git checkout "$CURRENT_BRANCH" &>/dev/null || err "Could not checkout $CURRENT_BRANCH branch"
    rm -f backup-gen-stash-dummy.txt
    git branch -D "$backup_branch" &>/dev/null || true

    cd "$starting_cwd" || true
  } & # ensure cleanup is always run at exit
  wait
}

killgroup() {
  printf "Killing spawned processes...\n\n"
  # kill $(jobs -p) 2>/dev/null # doesn't really kill all children, just process group leaders
  kill_descendants 2>/dev/null || true
  pgrep -P $PROC | xargs kill || true
  exit 1
}

errtrap() {
  printf "Exiting due to propagated error...\n"
  killgroup
}

source .envrc

pids=""

################ handle executing x functions ################

if [[ -n "$1" ]]; then
  shift
  for c in "${COMMANDS[@]}"; do
    declare cmd=$(command -v "x.$c")
    if [[ $c == "$CMD" && -n "$cmd" ]]; then
      "x.$CMD" "$@"
      if [[ -n $X_IGNORE_BUILD_ERRORS ]]; then
        echo "${YELLOW}[WARNING] A rerun without ignoring build errors is required"
      fi
      exit $?
    fi
  done
fi

# default to show usage if its a noop
usage

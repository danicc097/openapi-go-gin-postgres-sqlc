#!/bin/bash
# shellcheck disable=1091,2155,2068,2086

source "${BASH_SOURCE%/*}/.helpers.sh"
source "${BASH_SOURCE%/*}/scripts/deps-check.sh"

set -e

trap killgroup SIGINT

pids=()
killgroup() {
  printf "\nkilling spawned processes...\n"
  kill 0
}

ensure_pwd_is_top_level
source ".envrc"

export GIT_USER_ID=danicc097
export GIT_REPO_ID=openapi-go-gin-postgres-sqlc
export GO_POST_PROCESS_FILE="/usr/bin/env gofmt -w -s"
export GENVERS=6.0.1

SPEC="openapi.yaml"
GEN_OUT_DIR="internal"
TEMPLATE_DIR="internal/go-gin-server-templates"
PWD="$(pwd)"
env="dev"
BIN_DIR=$(dirname "$0")
PG_REPO="internal/repos/postgresql"

MAX_COMMENT_LEN=88

# Check build dependencies are met.
x.check-build-deps() {
  local -i fails
  check.column || { ((fails++)) && true; }
  check.bash || { ((fails++)) && true; }
  check.go || { ((fails++)) && true; }
  check.java || { ((fails++)) && true; }
  check.curl || { ((fails++)) && true; }
  check.docker || { ((fails++)) && true; }
  check.docker-compose || { ((fails++)) && true; }
  check.direnv || { ((fails++)) && true; }
  check.yq || { ((fails++)) && true; }
  check.pg_format || { ((fails++)) && true; }
  ((fails == 0)) && echo "${GREEN}🎉 All build dependencies met.${OFF}"
  { ((fails != 0)) && err "${RED}❌ Missing dependencies.${OFF}"; } || true
}

# Check dependencies and fetch required tools.
x.bootstrap() {
  x.check-build-deps
  x.install-tools
  x.fetch.openapi-generator
  x.fetch.swagger-ui
}

# Install go libraries as runnable programs.
x.install-tools() {
  set -o errexit -eo pipefail

  go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.15.2
  go install github.com/kyleconroy/sqlc/cmd/sqlc@v1.15.0
  go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.47.2
  go install github.com/joho/godotenv/cmd/godotenv@latest
  go install github.com/danicc097/air@latest
  go install github.com/xo/xo@latest
  go install github.com/tufin/oasdiff@latest

  GO111MODULE=off go get -u github.com/maxbrunsfeld/counterfeiter
}

# Fetch openapi-generator jar file.
x.fetch.openapi-generator() {
  local url="https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/$GENVERS/openapi-generator-cli-$GENVERS.jar"
  echo "$url > openapi-generator-cli.jar"
  curl -L "$url" -o openapi-generator-cli.jar
}

# Fetch latest swagger ui bundle.
x.fetch.swagger-ui() {
  name="$(curl --silent "https://api.github.com/repos/swagger-api/swagger-ui/releases/latest" | jq -r ".. .tag_name? // empty")"
  curl -fsSL "github.com/swagger-api/swagger-ui/archive/refs/tags/$name.tar.gz" -o swagger-ui.tar.gz
  tar xf swagger-ui.tar.gz swagger-ui-"${name#*v}"/dist --one-top-level=swagger-ui --strip-components=2
  rm swagger-ui.tar.gz
  mkdir -p internal/static/swagger-ui
  mv swagger-ui/* internal/static/swagger-ui/
  rm -r swagger-ui
}

# Run openapi generator for testdata.
# jar won't output properly if absolute paths are passed from subdir.
x.generate.tests-api() {
  local testdata="$BIN_DIR/../internal/postgen/testdata/postgen/openapi_generator"
  local test_dirs=$(find "$testdata" -maxdepth 1 -mindepth 1 -type d -exec basename {} \;)

  cache=".generate-tests-api.cache"
  for test_dir in $test_dirs; do
    generate_api \
      "$cache" \
      "$test_dir" \
      "$testdata/$test_dir/openapi.yaml" \
      "$testdata/$test_dir/internal" \
      "$BIN_DIR/../internal/go-gin-server-templates"
  done
}

# Run post-generation scripts on the internal package.
x.postgen() {
  cache="$1"
  mkdir -p "$cache"
  go build -o postgen "$PWD"/cmd/postgen/main.go
  ./postgen -cachedir="$cache" -env=".env.$env"
  mv "$GEN_OUT_DIR"/gen/api_*.go "$cache/" 2>/dev/null || true
}

# Generate type-safe Go code from SQL.
x.generate.sqlc() {
  { cd $PG_REPO && sqlc generate && cd -; } || err "Failed sqlc generation"
}

# Automatically generate CRUD and By queries based on existing indexes from
# a Postgres schema.
# Does not work with a schema file, database must be up to date.
x.generate.xo() {
  mkdir -p $PG_REPO/gen/crud
  xo schema "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:$DB_PORT/$POSTGRES_DB?sslmode=disable" \
    -o $PG_REPO/gen/crud
}

# Generate mocks for specified interfaces. Runs are cached to `cachedir`.
# Args: cachedir
x.generate.counterfeiter() {
  # This shouldn't pose any problems, the interface is the only input to counterfeiter.
  cache="$1"

  envvar="internal/envvar/envvar.go"
  services="internal/rest/services.go"

  if ! md5sum -c "$cache/counterfeiter.md5" >/dev/null; then
    counterfeiter -o internal/envvar/envvartesting/provider.gen.go $envvar Provider &
    counterfeiter -o internal/rest/resttesting/authorization.gen.go $services AuthorizationService &
    counterfeiter -o internal/rest/resttesting/authentication.gen.go $services AuthenticationService &
    md5sum $envvar $services >"$cache/counterfeiter.md5" &
    wait
  fi
}

# Run all codegen and postgen commands for the project.
x.generate() {
  local pids
  source ".env.$env"
  # TODO --force-regen to any x fn removes all cache dirs
  echo "${MAGENTA}${BOLD}Running codegen and postgen...${OFF}"
  cache=".generate.cache"

  generate_api "$cache" "internal" "$SPEC" "$GEN_OUT_DIR" "$TEMPLATE_DIR"

  go generate ./... &
  pids+=($!)
  x.generate.counterfeiter "$cache" &
  pids+=($!)
  x.generate.sqlc &
  pids+=($!)
  x.generate.xo &
  pids+=($!)
  x.postgen "$cache" &
  pids+=($!)

  for pid in "${pids[@]}"; do
    wait "$pid"
  done

}

# Lints the entire project.
x.lint() {
  x.lint.sql
}

# Formats SQL files.
x.lint.sql() {
  SQL_DIRS=(
    "$PG_REPO/queries"
    "db/migrations"
  )
  for slq_dir in ${SQL_DIRS[@]}; do
    pg_format \
      --spaces 2 \
      --wrap-limit 88 \
      --function-case 2 \
      --keyword-case 1 \
      --placeholder "sqlc\\.(arg|narg)\\(:?[^)]*\\)" \
      --inplace \
      $(find "$slq_dir" -maxdepth 1 -name '*.sql')
  done
}

# Bring docker compose services up.
x.compose-up() {
  docker-compose up -d
}

# Runs required backend pre-test setup: services, database cleanup, codegen...
# Can be called independently, e.g. before running tests through an IDE.
x.test.backend-setup() {
  source ".env.$env"
  # NOTE: tests run independently in Go so we can't have a function be called and run
  # only once before any test starts
  run_shared_services
  x.db.recreate-database
  x.generate
  drop_and_recreate_db "postgres_test"
  x.generate.tests-api
}

# Test the entire project. Accepts `go test` parameters.
# Args: [...]
x.test() {
  x.test.backend-setup
  APP_ENV="$env" go test $@ ./...
}

# Test and build the entire project.
x.build() {
  x.lint
  x.test ""
  go build -o rest-server "$PWD"/cmd/rest-server
}

# Build the project for Windows.
x.build.windows() {
  GOOS=windows GOARCH=amd64 go build -o rest-server.exe "$PWD"/cmd/rest-server
}

# Test, build and run the entire project.
x.run() {
  x.build
  ./rest-server -env=".env.$env"
}

# Run backend with hot-reloading.
x.run-hot-reload() {
  source ".env.$env"
  run_shared_services
  # TODO new include_files flag in fork, e.g. for openapi.yaml.
  # else generated .yaml files trigger rebuild.
  # --build.include_files "openapi.yaml" \
  # NOTE: building binary very unreliable, leads to bin not found.
  air \
    --build.pre_build_cmd "bin/project generate" \
    --build.cmd "" \
    --build.bin "go run ./cmd/rest-server/ -env=.env.$env" \
    --build.include_ext "go" \
    --build.exclude_regex ".gen.go,_test.go" \
    --build.exclude_dir ".git,tmp,internal/gen,$PG_REPO/gen,tests/testdata,frontend,*.cache" \
    --build.stop_watch "internal/rest/,internal/services/" \
    --build.delay 1000 \
    --build.exclude_unchanged "true" |
    sed -e "s/^/${BLUE}[Air]${OFF} /"
  # TODO compose
}

# Run frontend with hot-reloading.
x.run-frontend() {
  cd frontend
  pnpm run generate
  pnpm run dev |
    sed -e "s/^/${GREEN}[Vite]${OFF} /"
}

# air and vite hot reload working fine while watching
# Run all project services with hot reload enabled.
x.run-all-hot-reload() {
  source ".env.$env"
  # to be replaced by dcompose up --build when oas changes
  run_hot_reload() {
    x.run-hot-reload &
    pids+=("$!")
    x.run-frontend &
    pids+=("$!")
  }

  run_hot_reload

  next_allowed_run=$(date +%s)
  latency=3
  # close_write event, else duplicated, tripl. events -> race condition
  while true; do
    inotifywait \
      --monitor "$SPEC" \
      --event=close_write \
      --format='%T %f' \
      --timefmt='%s' |
      while read -r event_time event_file 2>/dev/null || sleep $latency; do
        if [[ $event_time -ge $next_allowed_run ]]; then
          next_allowed_run=$(date --date="${latency}sec" +%s)

          for pid in "${pids[@]}"; do
            # air and vite spawn processes as well, need to kill those (whose parent is pid), kill $pid will not kill children. pkill -P would also work
            kill $(list_descendants $pid)
          done
          pids=()

          run_hot_reload
        fi
      done
  done
}

x.run-prod() {
  env="prod"
  source ".env.$env"

  # TODO shared postgres container -> dbname "postgres_$env"

  docker network create traefik-net 2>/dev/null || true
  run_shared_services
  x.db.recreate-database

  cd frontend && pnpm run generate && cd -
  x.generate

  DOCKER_BUILDKIT=1 BUILDKIT_PROGRESS=plain docker-compose \
    --project-name "$PROJECT_PREFIX"_"$env" \
    -f docker-compose."$env".yml \
    --env-file ".env.$env" \
    up -d --build

  x.migrate up
}

run_shared_services() {
  cd docker
  docker-compose \
    -p "$PROJECT_PREFIX" \
    -f docker-compose.shared.yml \
    --env-file ../.env."$env" \
    up -d --remove-orphans
  cd -
}

# Ensure no breaking changes to the OpenAPI spec in the same version are present.
x.release() {
  x.diff-openapi-spec
}

# Wrapper for golang-migrate with predefined configuration.
x.migrate() {
  source ".env.$env"
  migrate \
    -path db/migrations/ \
    -database "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:$DB_PORT/$POSTGRES_DB?sslmode=disable" \
    "$@"
}

# Creates a new migration file with the given `name`.
# Args: name
x.migrate.create-migration() {
  tmp="$*"
  tmp="${tmp// /_}"
  name="${tmp,,}"
  [[ -z $name ]] && err "Please provide a migration name"
  x.migrate create -ext sql -dir db/migrations/ "$name"
}

# Creates a new database in the current environment if it doesn't exist
# and stops its running processes if any.
x.db.recreate-database() {
  create_db_if_not_exists "postgres_$env"
  stop_db_processes "postgres_$env"
}

############## openapi ##############

# Validates the project's OpenAPI specification or `spec`.
# Args: [spec]
x.validate() {
  # quite unreliable. e.g. ignored examples inexistent ref.
  # prefer built in kin-openapi validation
  java -jar openapi-generator-cli.jar validate -i "${1:-$SPEC}"
}

# Wrapper for openapi-generator with sane output modifications.
# Args: spec out tpl
x.openapi-generator() {
  local spec="$1"
  local gen_out_dir="$2"
  local template_dir="$3"

  [[ -z $spec ]] && err "openapi-generator: spec required"
  [[ -z $gen_out_dir ]] && err "openapi-generator: out dir required"
  [[ -z $template_dir ]] && err "openapi-generator: template dir required"
  echo "Generating API from $spec"
  echo "Generation directory: $gen_out_dir"
  echo "Template override directory: $template_dir"

  rm -rf "$gen_out_dir/gen"
  # debug has a very small overhead compared to the >1s required per spec
  java -jar "$BIN_DIR"/../openapi-generator-cli.jar generate \
    -g go-gin-server \
    -i "$spec" \
    -o "$gen_out_dir" \
    -t "$template_dir" \
    --additional-properties=packageName=openapi,apiPath=gen,hideGenerationTimestamp=true \
    --enable-post-process-file \
    --global-property=debugModels,debugOperations >debug-openapi.log #>/dev/null \

  mkdir -p "$gen_out_dir"/gen/models
  mkdir -p "$gen_out_dir"/rest
  mkdir -p "$gen_out_dir"/services

  mv "$gen_out_dir"/gen/routers.go "$gen_out_dir"/rest
  {
    mv "$gen_out_dir"/gen/model_*.go "$gen_out_dir"/gen/models 2>/dev/null
    goimports -w "$gen_out_dir"/gen/models
  } || echo "No model files found. Skipping"

  rm -rf "$gen_out_dir/api"
}

# Run a diff against the previous OpenAPI spec in the main branch.
# Can also be used to generate changelogs when upgrading major versions.
x.diff-openapi-spec() {
  base_spec="/tmp/openapi.yaml"
  git show "main:$SPEC" >"$base_spec"

  tmp="$(yq .info.version "$base_spec")"
  base_v="${tmp%%.*}"
  tmp=$(yq .info.version "$SPEC")
  rev_v="${tmp%%.*}"
  ((rev_v != base_v)) &&
    echo "${YELLOW}Revision mismatch $rev_v and $base_v, skipping diff.${OFF}" && return

  args="-format text -breaking-only -fail-on-diff -exclude-description -exclude-examples"
  if oasdiff $args -base "$base_spec" -revision $SPEC; then
    echo "${GREEN}No breaking changes found in $SPEC${OFF}"
  else
    echo "${RED}Breaking changes found in $SPEC${OFF}"
    return 1
  fi
}

generate_api() {
  cache="$1"
  prefix="$2"
  spec="$3"
  gen_out_dir="$4"
  template_dir="$5"

  invalid_cache=false
  mkdir -p "$cache"

  if ! md5sum -c "$cache/$prefix-go-gin-server-templates.md5" >/dev/null; then
    invalid_cache=true
    md5sum "$BIN_DIR"/../internal/go-gin-server-templates/* >"$cache/$prefix-go-gin-server-templates.md5"
  fi
  if ! md5sum -c "$cache/$prefix-openapi.md5" >/dev/null; then
    invalid_cache=true
    md5sum "$BIN_DIR"/../"$SPEC" >"$cache/$prefix-openapi.md5"
  fi

  if [[ $invalid_cache == true ]]; then
    x.openapi-generator \
      "$spec" \
      "$gen_out_dir" \
      "$template_dir"
  fi
}

usage() (
  command_comments_parser() {
    head -$((${lns[$i]} - 1)) $0 |
      tac |
      sed -n '/#/!q;p' |
      tac |
      awk '{$1=$1;print}'
  }

  command_opts_comments_parser() {
    tail -n +$((${lns[$i]} + 1)) $0 |
      sed -n '/^[[:blank:]]*#/!q;p' |
      awk '{$1=$1;print}'
  }

  construct_column() {
    comment_parser="$1"
    for i in ${!lns[@]}; do
      comment_paragraph="$($comment_parser)"
      ROWS["${rows[$i]}"]="$comment_paragraph"
      mapfile -t comments <<<"${ROWS[${rows[$i]}]}"
      for comment in "${comments[@]}"; do
        comment="$(clean_comment "$comment")"
        args="-"
        if [[ ${comment,,} == args:* ]]; then
          args=$(clean_args "$comment")
        fi
        ROW_ARGS[${rows[$i]}]="$args"
      done
    done

    for i in "${!rows[@]}"; do
      mapfile -t comments <<<"${ROWS[${rows[$i]}]}"
      for j in "${!comments[@]}"; do
        comment="$(clean_comment "${comments[$j]}")"
        if [[ ${comment,,} == args:* ]]; then
          continue
        fi

        if [[ $j = 0 ]]; then
          docs+=("$(
            printf -- "%s\t%s\t%s" \
              "${rows[$i]}" \
              "${ROW_ARGS[${rows[$i]}]}" \
              "$comment"
          )")
          continue
        fi

        docs+=("$(
          printf -- "%s\t%s\t%s" \
            "" \
            "" \
            "$comment"
        )")
      done
    done

    column -t \
      --separator $'\t' \
      --output-width 150 \
      --table-noextreme C2 \
      --table-noheadings \
      --table-wrap C3 \
      --table-columns C1,C2,C3 < <(printf "    %s\n" "${docs[@]}")
  }

  declare -A ROWS ROW_ARGS
  declare docs rows X_FLAGS

  for c in "${COMMANDS[@]}"; do
    shopt -s extdebug
    lns+=("$(declare -F x.$c | awk '{print $2}')")
    rows+=("${c}")
    shopt -u extdebug
  done

  x_functions="$(construct_column command_comments_parser)"

  lns=()
  rows=()
  docs=()

  while IFS= read -r line; do
    X_FLAGS+=("$(awk '{$1=$1;print $1 $NF}' <<<"$line")")
  done < <(sed -nr '/.*(--x-[[:alnum:]_-]+[)]+).*/{p;=}' $0 | sed '{N;s/\n/ /}')
  mapfile -t X_FLAGS < \
    <(LC_COLLATE=C sort < <(printf "%s\n" "${X_FLAGS[@]}"))

  for c in "${X_FLAGS[@]}"; do
    lns+=("${c##*)}")
    rows+=("${c%%)*}")
  done

  x_options="$(construct_column command_opts_comments_parser)"

  cat <<EOF

$BOLD$UNDERSCORE$(basename $0)$OFF centralizes all relevant project commands.

${BOLD}USAGE:
    $RED$(basename $0) x.function [--x-option ...] [args]$OFF

${BOLD}x.functions:$OFF
$(echo "${x_functions}" |
    sed -E 's/    ([[:alnum:][:punct:]]*)(.*)/    '"$BLUE$BOLD"'\1'"$OFF"'\2''/')

${BOLD}--x-options:$OFF
$(echo "${x_options}" |
      sed -E 's/    ([[:alnum:][:punct:]]*)(.*)/    '"$GREEN$BOLD"'\1'"$OFF"'\2''/')
EOF

)

clean_comment() {
  tmp="$1"
  tmp="${tmp//\#/}"
  comment="${tmp#* }"
  [[ -z $comment ]] && comment="·"
  # TODO split in % MAX_COMMENT_LEN lines instead, on spaces only.
  ((${#comment} > MAX_COMMENT_LEN)) && comment="${comment:0:MAX_COMMENT_LEN}..."
  echo "$comment"
}

clean_args() {
  tmp="$1"
  tmp="${tmp,,##*args\:}"
  args="${tmp#* }"
  echo "$args"
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=("${line##declare -f x.}")
done < <(declare -F)
# sort the array. Mimic file input to sort
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  pre="${COMP_LINE##* }" # the part after the last space in the current command
  cur_commands=(${COMP_LINE%"$pre"})

  for c in "${COMMANDS[@]}"; do
    if [[ " ${cur_commands[*]} " =~ " ${c} " ]]; then
      xfn_specified=true
      break
    fi
  done

  for c in "${COMMANDS[@]}"; do
    test -z "${xfn_specified}" || break
    test -z "${pre}" -o "${c}" != "${c#"${pre}"}" -a "${pre}" != "${c}" && echo "${c}"
  done

  test -z "${xfn_specified}" && exit

  # TODO should reuse logic to get them in ``usage``
  while IFS= read -r line; do
    x_opts_lines+=("$(awk '{$1=$1;print $1 $NF}' <<<"$line")")
  done < <(sed -nr '/.*(--x-[[:alnum:]_-]+[)]+).*/{p;=}' $0 | sed '{N;s/\n/ /}')
  mapfile -t x_opts_lines < \
    <(LC_COLLATE=C sort < <(printf "%s\n" "${x_opts_lines[@]}"))

  declare __x_opts
  for c in "${x_opts_lines[@]}"; do
    __x_opts+=("${c%%)*}")
  done

  declare -A __x_opts_seen
  for cmd in "${cur_commands[@]}"; do
    for opt in ${__x_opts[@]}; do
      if [[ "$opt" == *"$cmd"* ]]; then
        __x_opts_seen[$opt]=true
        break
      fi
    done
  done

  for opt in ${__x_opts[@]}; do
    [[ -n "${__x_opts_seen[$opt]}" ]] && continue
    [[ ${opt:0:${#pre}} == "${pre,,}" ]] && echo "${opt}"
  done

  exit
fi

# First comment lines automatically added to usage docs.
set +e
while [[ "$#" -gt 0 ]]; do
  case $1 in
  --x-force-regen) # this comment should be ignored
    # Removes generation cache, forcing a new run.
    force_regen=1
    ;;
  --x-no-confirmation)
    # Bypasses confirmation messages.
    no_confirmation=1
    ;;
  --x-env)
    # Environment to run commands in. Defaults to "dev".
    # Args: env
    env="$2"

    valid_envs="dev e2e prod ci"
    if [[ ! " ${valid_envs[*]} " =~ " $env " ]]; then
      err "Valid environments: $valid_envs"
    fi
    shift
    ;;
  *)
    args+=("$1")
    ;;
  esac
  shift
done
for arg in ${args[@]}; do
  set -- "$@" "$arg"
done
set -e

# handle executing x functions
if [[ -n "$1" ]]; then
  declare CMD="$1"
  shift
  for c in "${COMMANDS[@]}"; do
    declare cmd=$(command -v "x.$c")
    if [[ $c == "$CMD" && -n "$cmd" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

usage

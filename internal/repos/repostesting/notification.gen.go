// Code generated by counterfeiter. DO NOT EDIT.
package repostesting

import (
	"context"
	"sync"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

type FakeNotification struct {
	CreateStub        func(context.Context, db.DBTX, *db.NotificationCreateParams) (*db.Notification, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.NotificationCreateParams
	}
	createReturns struct {
		result1 *db.Notification
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *db.Notification
		result2 error
	}
	DeleteStub        func(context.Context, db.DBTX, db.NotificationID) (*db.Notification, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 db.NotificationID
	}
	deleteReturns struct {
		result1 *db.Notification
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 *db.Notification
		result2 error
	}
	LatestUserNotificationsStub        func(context.Context, db.DBTX, *db.GetUserNotificationsParams) ([]db.GetUserNotificationsRow, error)
	latestUserNotificationsMutex       sync.RWMutex
	latestUserNotificationsArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.GetUserNotificationsParams
	}
	latestUserNotificationsReturns struct {
		result1 []db.GetUserNotificationsRow
		result2 error
	}
	latestUserNotificationsReturnsOnCall map[int]struct {
		result1 []db.GetUserNotificationsRow
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotification) Create(arg1 context.Context, arg2 db.DBTX, arg3 *db.NotificationCreateParams) (*db.Notification, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.NotificationCreateParams
	}{arg1, arg2, arg3})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotification) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeNotification) CreateCalls(stub func(context.Context, db.DBTX, *db.NotificationCreateParams) (*db.Notification, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeNotification) CreateArgsForCall(i int) (context.Context, db.DBTX, *db.NotificationCreateParams) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNotification) CreateReturns(result1 *db.Notification, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *db.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) CreateReturnsOnCall(i int, result1 *db.Notification, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *db.Notification
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *db.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) Delete(arg1 context.Context, arg2 db.DBTX, arg3 db.NotificationID) (*db.Notification, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 db.NotificationID
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotification) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeNotification) DeleteCalls(stub func(context.Context, db.DBTX, db.NotificationID) (*db.Notification, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeNotification) DeleteArgsForCall(i int) (context.Context, db.DBTX, db.NotificationID) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNotification) DeleteReturns(result1 *db.Notification, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 *db.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) DeleteReturnsOnCall(i int, result1 *db.Notification, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 *db.Notification
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 *db.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) LatestUserNotifications(arg1 context.Context, arg2 db.DBTX, arg3 *db.GetUserNotificationsParams) ([]db.GetUserNotificationsRow, error) {
	fake.latestUserNotificationsMutex.Lock()
	ret, specificReturn := fake.latestUserNotificationsReturnsOnCall[len(fake.latestUserNotificationsArgsForCall)]
	fake.latestUserNotificationsArgsForCall = append(fake.latestUserNotificationsArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.GetUserNotificationsParams
	}{arg1, arg2, arg3})
	stub := fake.LatestUserNotificationsStub
	fakeReturns := fake.latestUserNotificationsReturns
	fake.recordInvocation("LatestUserNotifications", []interface{}{arg1, arg2, arg3})
	fake.latestUserNotificationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotification) LatestUserNotificationsCallCount() int {
	fake.latestUserNotificationsMutex.RLock()
	defer fake.latestUserNotificationsMutex.RUnlock()
	return len(fake.latestUserNotificationsArgsForCall)
}

func (fake *FakeNotification) LatestUserNotificationsCalls(stub func(context.Context, db.DBTX, *db.GetUserNotificationsParams) ([]db.GetUserNotificationsRow, error)) {
	fake.latestUserNotificationsMutex.Lock()
	defer fake.latestUserNotificationsMutex.Unlock()
	fake.LatestUserNotificationsStub = stub
}

func (fake *FakeNotification) LatestUserNotificationsArgsForCall(i int) (context.Context, db.DBTX, *db.GetUserNotificationsParams) {
	fake.latestUserNotificationsMutex.RLock()
	defer fake.latestUserNotificationsMutex.RUnlock()
	argsForCall := fake.latestUserNotificationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNotification) LatestUserNotificationsReturns(result1 []db.GetUserNotificationsRow, result2 error) {
	fake.latestUserNotificationsMutex.Lock()
	defer fake.latestUserNotificationsMutex.Unlock()
	fake.LatestUserNotificationsStub = nil
	fake.latestUserNotificationsReturns = struct {
		result1 []db.GetUserNotificationsRow
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) LatestUserNotificationsReturnsOnCall(i int, result1 []db.GetUserNotificationsRow, result2 error) {
	fake.latestUserNotificationsMutex.Lock()
	defer fake.latestUserNotificationsMutex.Unlock()
	fake.LatestUserNotificationsStub = nil
	if fake.latestUserNotificationsReturnsOnCall == nil {
		fake.latestUserNotificationsReturnsOnCall = make(map[int]struct {
			result1 []db.GetUserNotificationsRow
			result2 error
		})
	}
	fake.latestUserNotificationsReturnsOnCall[i] = struct {
		result1 []db.GetUserNotificationsRow
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.latestUserNotificationsMutex.RLock()
	defer fake.latestUserNotificationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotification) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repos.Notification = new(FakeNotification)

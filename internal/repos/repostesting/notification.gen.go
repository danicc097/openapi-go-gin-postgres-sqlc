// Code generated by counterfeiter. DO NOT EDIT.
package repostesting

import (
	"context"
	"sync"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

type FakeNotification struct {
	CreateStub        func(context.Context, db.DBTX, *db.NotificationCreateParams) (*db.UserNotification, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.NotificationCreateParams
	}
	createReturns struct {
		result1 *db.UserNotification
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *db.UserNotification
		result2 error
	}
	DeleteStub        func(context.Context, db.DBTX, db.NotificationID) (*db.Notification, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 db.NotificationID
	}
	deleteReturns struct {
		result1 *db.Notification
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 *db.Notification
		result2 error
	}
	LatestNotificationsStub        func(context.Context, db.DBTX, *db.GetUserNotificationsParams) ([]db.GetUserNotificationsRow, error)
	latestNotificationsMutex       sync.RWMutex
	latestNotificationsArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.GetUserNotificationsParams
	}
	latestNotificationsReturns struct {
		result1 []db.GetUserNotificationsRow
		result2 error
	}
	latestNotificationsReturnsOnCall map[int]struct {
		result1 []db.GetUserNotificationsRow
		result2 error
	}
	PaginatedUserNotificationsStub        func(context.Context, db.DBTX, db.UserID, models.GetPaginatedNotificationsParams) ([]db.UserNotification, error)
	paginatedUserNotificationsMutex       sync.RWMutex
	paginatedUserNotificationsArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 db.UserID
		arg4 models.GetPaginatedNotificationsParams
	}
	paginatedUserNotificationsReturns struct {
		result1 []db.UserNotification
		result2 error
	}
	paginatedUserNotificationsReturnsOnCall map[int]struct {
		result1 []db.UserNotification
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotification) Create(arg1 context.Context, arg2 db.DBTX, arg3 *db.NotificationCreateParams) (*db.UserNotification, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.NotificationCreateParams
	}{arg1, arg2, arg3})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotification) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeNotification) CreateCalls(stub func(context.Context, db.DBTX, *db.NotificationCreateParams) (*db.UserNotification, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeNotification) CreateArgsForCall(i int) (context.Context, db.DBTX, *db.NotificationCreateParams) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNotification) CreateReturns(result1 *db.UserNotification, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *db.UserNotification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) CreateReturnsOnCall(i int, result1 *db.UserNotification, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *db.UserNotification
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *db.UserNotification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) Delete(arg1 context.Context, arg2 db.DBTX, arg3 db.NotificationID) (*db.Notification, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 db.NotificationID
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotification) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeNotification) DeleteCalls(stub func(context.Context, db.DBTX, db.NotificationID) (*db.Notification, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeNotification) DeleteArgsForCall(i int) (context.Context, db.DBTX, db.NotificationID) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNotification) DeleteReturns(result1 *db.Notification, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 *db.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) DeleteReturnsOnCall(i int, result1 *db.Notification, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 *db.Notification
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 *db.Notification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) LatestNotifications(arg1 context.Context, arg2 db.DBTX, arg3 *db.GetUserNotificationsParams) ([]db.GetUserNotificationsRow, error) {
	fake.latestNotificationsMutex.Lock()
	ret, specificReturn := fake.latestNotificationsReturnsOnCall[len(fake.latestNotificationsArgsForCall)]
	fake.latestNotificationsArgsForCall = append(fake.latestNotificationsArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.GetUserNotificationsParams
	}{arg1, arg2, arg3})
	stub := fake.LatestNotificationsStub
	fakeReturns := fake.latestNotificationsReturns
	fake.recordInvocation("LatestNotifications", []interface{}{arg1, arg2, arg3})
	fake.latestNotificationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotification) LatestNotificationsCallCount() int {
	fake.latestNotificationsMutex.RLock()
	defer fake.latestNotificationsMutex.RUnlock()
	return len(fake.latestNotificationsArgsForCall)
}

func (fake *FakeNotification) LatestNotificationsCalls(stub func(context.Context, db.DBTX, *db.GetUserNotificationsParams) ([]db.GetUserNotificationsRow, error)) {
	fake.latestNotificationsMutex.Lock()
	defer fake.latestNotificationsMutex.Unlock()
	fake.LatestNotificationsStub = stub
}

func (fake *FakeNotification) LatestNotificationsArgsForCall(i int) (context.Context, db.DBTX, *db.GetUserNotificationsParams) {
	fake.latestNotificationsMutex.RLock()
	defer fake.latestNotificationsMutex.RUnlock()
	argsForCall := fake.latestNotificationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNotification) LatestNotificationsReturns(result1 []db.GetUserNotificationsRow, result2 error) {
	fake.latestNotificationsMutex.Lock()
	defer fake.latestNotificationsMutex.Unlock()
	fake.LatestNotificationsStub = nil
	fake.latestNotificationsReturns = struct {
		result1 []db.GetUserNotificationsRow
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) LatestNotificationsReturnsOnCall(i int, result1 []db.GetUserNotificationsRow, result2 error) {
	fake.latestNotificationsMutex.Lock()
	defer fake.latestNotificationsMutex.Unlock()
	fake.LatestNotificationsStub = nil
	if fake.latestNotificationsReturnsOnCall == nil {
		fake.latestNotificationsReturnsOnCall = make(map[int]struct {
			result1 []db.GetUserNotificationsRow
			result2 error
		})
	}
	fake.latestNotificationsReturnsOnCall[i] = struct {
		result1 []db.GetUserNotificationsRow
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) PaginatedUserNotifications(arg1 context.Context, arg2 db.DBTX, arg3 db.UserID, arg4 models.GetPaginatedNotificationsParams) ([]db.UserNotification, error) {
	fake.paginatedUserNotificationsMutex.Lock()
	ret, specificReturn := fake.paginatedUserNotificationsReturnsOnCall[len(fake.paginatedUserNotificationsArgsForCall)]
	fake.paginatedUserNotificationsArgsForCall = append(fake.paginatedUserNotificationsArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 db.UserID
		arg4 models.GetPaginatedNotificationsParams
	}{arg1, arg2, arg3, arg4})
	stub := fake.PaginatedUserNotificationsStub
	fakeReturns := fake.paginatedUserNotificationsReturns
	fake.recordInvocation("PaginatedUserNotifications", []interface{}{arg1, arg2, arg3, arg4})
	fake.paginatedUserNotificationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNotification) PaginatedUserNotificationsCallCount() int {
	fake.paginatedUserNotificationsMutex.RLock()
	defer fake.paginatedUserNotificationsMutex.RUnlock()
	return len(fake.paginatedUserNotificationsArgsForCall)
}

func (fake *FakeNotification) PaginatedUserNotificationsCalls(stub func(context.Context, db.DBTX, db.UserID, models.GetPaginatedNotificationsParams) ([]db.UserNotification, error)) {
	fake.paginatedUserNotificationsMutex.Lock()
	defer fake.paginatedUserNotificationsMutex.Unlock()
	fake.PaginatedUserNotificationsStub = stub
}

func (fake *FakeNotification) PaginatedUserNotificationsArgsForCall(i int) (context.Context, db.DBTX, db.UserID, models.GetPaginatedNotificationsParams) {
	fake.paginatedUserNotificationsMutex.RLock()
	defer fake.paginatedUserNotificationsMutex.RUnlock()
	argsForCall := fake.paginatedUserNotificationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeNotification) PaginatedUserNotificationsReturns(result1 []db.UserNotification, result2 error) {
	fake.paginatedUserNotificationsMutex.Lock()
	defer fake.paginatedUserNotificationsMutex.Unlock()
	fake.PaginatedUserNotificationsStub = nil
	fake.paginatedUserNotificationsReturns = struct {
		result1 []db.UserNotification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) PaginatedUserNotificationsReturnsOnCall(i int, result1 []db.UserNotification, result2 error) {
	fake.paginatedUserNotificationsMutex.Lock()
	defer fake.paginatedUserNotificationsMutex.Unlock()
	fake.PaginatedUserNotificationsStub = nil
	if fake.paginatedUserNotificationsReturnsOnCall == nil {
		fake.paginatedUserNotificationsReturnsOnCall = make(map[int]struct {
			result1 []db.UserNotification
			result2 error
		})
	}
	fake.paginatedUserNotificationsReturnsOnCall[i] = struct {
		result1 []db.UserNotification
		result2 error
	}{result1, result2}
}

func (fake *FakeNotification) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.latestNotificationsMutex.RLock()
	defer fake.latestNotificationsMutex.RUnlock()
	fake.paginatedUserNotificationsMutex.RLock()
	defer fake.paginatedUserNotificationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotification) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repos.Notification = new(FakeNotification)

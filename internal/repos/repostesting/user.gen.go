// Code generated by counterfeiter. DO NOT EDIT.
package repostesting

import (
	"context"
	"sync"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

type FakeUser struct {
	CreateStub        func(context.Context, db.DBTX, *db.User) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.User
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	UserByAPIKeyStub        func(context.Context, db.DBTX, string) (*db.User, error)
	userByAPIKeyMutex       sync.RWMutex
	userByAPIKeyArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 string
	}
	userByAPIKeyReturns struct {
		result1 *db.User
		result2 error
	}
	userByAPIKeyReturnsOnCall map[int]struct {
		result1 *db.User
		result2 error
	}
	UserByEmailStub        func(context.Context, db.DBTX, string) (*db.User, error)
	userByEmailMutex       sync.RWMutex
	userByEmailArgsForCall []struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 string
	}
	userByEmailReturns struct {
		result1 *db.User
		result2 error
	}
	userByEmailReturnsOnCall map[int]struct {
		result1 *db.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUser) Create(arg1 context.Context, arg2 db.DBTX, arg3 *db.User) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 *db.User
	}{arg1, arg2, arg3})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUser) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeUser) CreateCalls(stub func(context.Context, db.DBTX, *db.User) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeUser) CreateArgsForCall(i int) (context.Context, db.DBTX, *db.User) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUser) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUser) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUser) UserByAPIKey(arg1 context.Context, arg2 db.DBTX, arg3 string) (*db.User, error) {
	fake.userByAPIKeyMutex.Lock()
	ret, specificReturn := fake.userByAPIKeyReturnsOnCall[len(fake.userByAPIKeyArgsForCall)]
	fake.userByAPIKeyArgsForCall = append(fake.userByAPIKeyArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UserByAPIKeyStub
	fakeReturns := fake.userByAPIKeyReturns
	fake.recordInvocation("UserByAPIKey", []interface{}{arg1, arg2, arg3})
	fake.userByAPIKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUser) UserByAPIKeyCallCount() int {
	fake.userByAPIKeyMutex.RLock()
	defer fake.userByAPIKeyMutex.RUnlock()
	return len(fake.userByAPIKeyArgsForCall)
}

func (fake *FakeUser) UserByAPIKeyCalls(stub func(context.Context, db.DBTX, string) (*db.User, error)) {
	fake.userByAPIKeyMutex.Lock()
	defer fake.userByAPIKeyMutex.Unlock()
	fake.UserByAPIKeyStub = stub
}

func (fake *FakeUser) UserByAPIKeyArgsForCall(i int) (context.Context, db.DBTX, string) {
	fake.userByAPIKeyMutex.RLock()
	defer fake.userByAPIKeyMutex.RUnlock()
	argsForCall := fake.userByAPIKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUser) UserByAPIKeyReturns(result1 *db.User, result2 error) {
	fake.userByAPIKeyMutex.Lock()
	defer fake.userByAPIKeyMutex.Unlock()
	fake.UserByAPIKeyStub = nil
	fake.userByAPIKeyReturns = struct {
		result1 *db.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUser) UserByAPIKeyReturnsOnCall(i int, result1 *db.User, result2 error) {
	fake.userByAPIKeyMutex.Lock()
	defer fake.userByAPIKeyMutex.Unlock()
	fake.UserByAPIKeyStub = nil
	if fake.userByAPIKeyReturnsOnCall == nil {
		fake.userByAPIKeyReturnsOnCall = make(map[int]struct {
			result1 *db.User
			result2 error
		})
	}
	fake.userByAPIKeyReturnsOnCall[i] = struct {
		result1 *db.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUser) UserByEmail(arg1 context.Context, arg2 db.DBTX, arg3 string) (*db.User, error) {
	fake.userByEmailMutex.Lock()
	ret, specificReturn := fake.userByEmailReturnsOnCall[len(fake.userByEmailArgsForCall)]
	fake.userByEmailArgsForCall = append(fake.userByEmailArgsForCall, struct {
		arg1 context.Context
		arg2 db.DBTX
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UserByEmailStub
	fakeReturns := fake.userByEmailReturns
	fake.recordInvocation("UserByEmail", []interface{}{arg1, arg2, arg3})
	fake.userByEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUser) UserByEmailCallCount() int {
	fake.userByEmailMutex.RLock()
	defer fake.userByEmailMutex.RUnlock()
	return len(fake.userByEmailArgsForCall)
}

func (fake *FakeUser) UserByEmailCalls(stub func(context.Context, db.DBTX, string) (*db.User, error)) {
	fake.userByEmailMutex.Lock()
	defer fake.userByEmailMutex.Unlock()
	fake.UserByEmailStub = stub
}

func (fake *FakeUser) UserByEmailArgsForCall(i int) (context.Context, db.DBTX, string) {
	fake.userByEmailMutex.RLock()
	defer fake.userByEmailMutex.RUnlock()
	argsForCall := fake.userByEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUser) UserByEmailReturns(result1 *db.User, result2 error) {
	fake.userByEmailMutex.Lock()
	defer fake.userByEmailMutex.Unlock()
	fake.UserByEmailStub = nil
	fake.userByEmailReturns = struct {
		result1 *db.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUser) UserByEmailReturnsOnCall(i int, result1 *db.User, result2 error) {
	fake.userByEmailMutex.Lock()
	defer fake.userByEmailMutex.Unlock()
	fake.UserByEmailStub = nil
	if fake.userByEmailReturnsOnCall == nil {
		fake.userByEmailReturnsOnCall = make(map[int]struct {
			result1 *db.User
			result2 error
		})
	}
	fake.userByEmailReturnsOnCall[i] = struct {
		result1 *db.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.userByAPIKeyMutex.RLock()
	defer fake.userByAPIKeyMutex.RUnlock()
	fake.userByEmailMutex.RLock()
	defer fake.userByEmailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repos.User = new(FakeUser)

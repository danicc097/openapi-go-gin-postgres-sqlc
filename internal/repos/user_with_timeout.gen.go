// Code generated by gowrap. DO NOT EDIT.
// template: ../gowrap-templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package repos

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// UserWithTimeout implements User interface instrumented with timeouts
type UserWithTimeout struct {
	User
	config UserWithTimeoutConfig
}

type UserWithTimeoutConfig struct {
	CreateTimeout time.Duration

	CreateAPIKeyTimeout time.Duration

	UpdateTimeout time.Duration

	UserByAPIKeyTimeout time.Duration

	UserByEmailTimeout time.Duration

	UserByExternalIDTimeout time.Duration

	UserByIDTimeout time.Duration

	UserByUsernameTimeout time.Duration
}

// NewUserWithTimeout returns UserWithTimeout
func NewUserWithTimeout(base User, config UserWithTimeoutConfig) UserWithTimeout {
	return UserWithTimeout{
		User:   base,
		config: config,
	}
}

// Create implements User
func (_d UserWithTimeout) Create(ctx context.Context, d db.DBTX, params UserCreateParams) (up1 *db.User, err error) {
	var cancelFunc func()
	if _d.config.CreateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CreateTimeout)
		defer cancelFunc()
	}
	return _d.User.Create(ctx, d, params)
}

// CreateAPIKey implements User
func (_d UserWithTimeout) CreateAPIKey(ctx context.Context, d db.DBTX, user *db.User) (up1 *db.UserAPIKey, err error) {
	var cancelFunc func()
	if _d.config.CreateAPIKeyTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CreateAPIKeyTimeout)
		defer cancelFunc()
	}
	return _d.User.CreateAPIKey(ctx, d, user)
}

// Update implements User
func (_d UserWithTimeout) Update(ctx context.Context, d db.DBTX, params UserUpdateParams) (up1 *db.User, err error) {
	var cancelFunc func()
	if _d.config.UpdateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UpdateTimeout)
		defer cancelFunc()
	}
	return _d.User.Update(ctx, d, params)
}

// UserByAPIKey implements User
func (_d UserWithTimeout) UserByAPIKey(ctx context.Context, d db.DBTX, apiKey string) (up1 *db.User, err error) {
	var cancelFunc func()
	if _d.config.UserByAPIKeyTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UserByAPIKeyTimeout)
		defer cancelFunc()
	}
	return _d.User.UserByAPIKey(ctx, d, apiKey)
}

// UserByEmail implements User
func (_d UserWithTimeout) UserByEmail(ctx context.Context, d db.DBTX, email string) (up1 *db.User, err error) {
	var cancelFunc func()
	if _d.config.UserByEmailTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UserByEmailTimeout)
		defer cancelFunc()
	}
	return _d.User.UserByEmail(ctx, d, email)
}

// UserByExternalID implements User
func (_d UserWithTimeout) UserByExternalID(ctx context.Context, d db.DBTX, extID string) (up1 *db.User, err error) {
	var cancelFunc func()
	if _d.config.UserByExternalIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UserByExternalIDTimeout)
		defer cancelFunc()
	}
	return _d.User.UserByExternalID(ctx, d, extID)
}

// UserByID implements User
func (_d UserWithTimeout) UserByID(ctx context.Context, d db.DBTX, id string) (up1 *db.User, err error) {
	var cancelFunc func()
	if _d.config.UserByIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UserByIDTimeout)
		defer cancelFunc()
	}
	return _d.User.UserByID(ctx, d, id)
}

// UserByUsername implements User
func (_d UserWithTimeout) UserByUsername(ctx context.Context, d db.DBTX, username string) (up1 *db.User, err error) {
	var cancelFunc func()
	if _d.config.UserByUsernameTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UserByUsernameTimeout)
		defer cancelFunc()
	}
	return _d.User.UserByUsername(ctx, d, username)
}

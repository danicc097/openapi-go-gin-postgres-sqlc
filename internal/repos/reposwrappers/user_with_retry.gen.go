// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/retry.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// UserWithRetry implements repos.User interface instrumented with retries
type UserWithRetry struct {
	repos.User
	_retryCount    int
	_retryInterval time.Duration
}

// NewUserWithRetry returns UserWithRetry
func NewUserWithRetry(base repos.User, retryCount int, retryInterval time.Duration) UserWithRetry {
	return UserWithRetry{
		User:           base,
		_retryCount:    retryCount,
		_retryInterval: retryInterval,
	}
}

// ByAPIKey implements repos.User
func (_d UserWithRetry) ByAPIKey(ctx context.Context, d db.DBTX, apiKey string) (up1 *db.User, err error) {
	up1, err = _d.User.ByAPIKey(ctx, d, apiKey)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.ByAPIKey(ctx, d, apiKey)
	}
	return
}

// ByEmail implements repos.User
func (_d UserWithRetry) ByEmail(ctx context.Context, d db.DBTX, email string, opts ...db.UserSelectConfigOption) (up1 *db.User, err error) {
	up1, err = _d.User.ByEmail(ctx, d, email, opts...)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.ByEmail(ctx, d, email, opts...)
	}
	return
}

// ByExternalID implements repos.User
func (_d UserWithRetry) ByExternalID(ctx context.Context, d db.DBTX, extID string, opts ...db.UserSelectConfigOption) (up1 *db.User, err error) {
	up1, err = _d.User.ByExternalID(ctx, d, extID, opts...)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.ByExternalID(ctx, d, extID, opts...)
	}
	return
}

// ByID implements repos.User
func (_d UserWithRetry) ByID(ctx context.Context, d db.DBTX, id db.UserID, opts ...db.UserSelectConfigOption) (up1 *db.User, err error) {
	up1, err = _d.User.ByID(ctx, d, id, opts...)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.ByID(ctx, d, id, opts...)
	}
	return
}

// ByProject implements repos.User
func (_d UserWithRetry) ByProject(ctx context.Context, d db.DBTX, projectID db.ProjectID) (ua1 []db.User, err error) {
	ua1, err = _d.User.ByProject(ctx, d, projectID)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		ua1, err = _d.User.ByProject(ctx, d, projectID)
	}
	return
}

// ByTeam implements repos.User
func (_d UserWithRetry) ByTeam(ctx context.Context, d db.DBTX, teamID db.TeamID) (ua1 []db.User, err error) {
	ua1, err = _d.User.ByTeam(ctx, d, teamID)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		ua1, err = _d.User.ByTeam(ctx, d, teamID)
	}
	return
}

// ByUsername implements repos.User
func (_d UserWithRetry) ByUsername(ctx context.Context, d db.DBTX, username string, opts ...db.UserSelectConfigOption) (up1 *db.User, err error) {
	up1, err = _d.User.ByUsername(ctx, d, username, opts...)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.ByUsername(ctx, d, username, opts...)
	}
	return
}

// Create implements repos.User
func (_d UserWithRetry) Create(ctx context.Context, d db.DBTX, params *db.UserCreateParams) (up1 *db.User, err error) {
	up1, err = _d.User.Create(ctx, d, params)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.Create(ctx, d, params)
	}
	return
}

// CreateAPIKey implements repos.User
func (_d UserWithRetry) CreateAPIKey(ctx context.Context, d db.DBTX, user *db.User) (up1 *db.UserAPIKey, err error) {
	up1, err = _d.User.CreateAPIKey(ctx, d, user)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.CreateAPIKey(ctx, d, user)
	}
	return
}

// Delete implements repos.User
func (_d UserWithRetry) Delete(ctx context.Context, d db.DBTX, id db.UserID) (up1 *db.User, err error) {
	up1, err = _d.User.Delete(ctx, d, id)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.Delete(ctx, d, id)
	}
	return
}

// DeleteAPIKey implements repos.User
func (_d UserWithRetry) DeleteAPIKey(ctx context.Context, d db.DBTX, apiKey string) (up1 *db.UserAPIKey, err error) {
	up1, err = _d.User.DeleteAPIKey(ctx, d, apiKey)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.DeleteAPIKey(ctx, d, apiKey)
	}
	return
}

// IsUserInProject implements repos.User
func (_d UserWithRetry) IsUserInProject(ctx context.Context, db db.DBTX, arg db.IsUserInProjectParams) (b1 bool, err error) {
	b1, err = _d.User.IsUserInProject(ctx, db, arg)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		b1, err = _d.User.IsUserInProject(ctx, db, arg)
	}
	return
}

// Update implements repos.User
func (_d UserWithRetry) Update(ctx context.Context, d db.DBTX, id db.UserID, params *db.UserUpdateParams) (up1 *db.User, err error) {
	up1, err = _d.User.Update(ctx, d, id, params)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		up1, err = _d.User.Update(ctx, d, id, params)
	}
	return
}

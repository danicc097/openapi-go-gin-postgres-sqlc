// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// WorkItemTagWithTimeout implements repos.WorkItemTag interface instrumented with timeouts
type WorkItemTagWithTimeout struct {
	repos.WorkItemTag
	config WorkItemTagWithTimeoutConfig
}

type WorkItemTagWithTimeoutConfig struct {
	ByIDTimeout time.Duration

	ByNameTimeout time.Duration

	CreateTimeout time.Duration

	DeleteTimeout time.Duration

	UpdateTimeout time.Duration
}

// NewWorkItemTagWithTimeout returns WorkItemTagWithTimeout
func NewWorkItemTagWithTimeout(base repos.WorkItemTag, config WorkItemTagWithTimeoutConfig) WorkItemTagWithTimeout {
	return WorkItemTagWithTimeout{
		WorkItemTag: base,
		config:      config,
	}
}

// ByID implements repos.WorkItemTag
func (_d WorkItemTagWithTimeout) ByID(ctx context.Context, d db.DBTX, id db.WorkItemTagID, opts ...db.WorkItemTagSelectConfigOption) (wp1 *db.WorkItemTag, err error) {
	var cancelFunc func()
	if _d.config.ByIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ByIDTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemTag.ByID(ctx, d, id, opts...)
}

// ByName implements repos.WorkItemTag
func (_d WorkItemTagWithTimeout) ByName(ctx context.Context, d db.DBTX, name string, projectID db.ProjectID, opts ...db.WorkItemTagSelectConfigOption) (wp1 *db.WorkItemTag, err error) {
	var cancelFunc func()
	if _d.config.ByNameTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ByNameTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemTag.ByName(ctx, d, name, projectID, opts...)
}

// Create implements repos.WorkItemTag
func (_d WorkItemTagWithTimeout) Create(ctx context.Context, d db.DBTX, params *db.WorkItemTagCreateParams) (wp1 *db.WorkItemTag, err error) {
	var cancelFunc func()
	if _d.config.CreateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CreateTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemTag.Create(ctx, d, params)
}

// Delete implements repos.WorkItemTag
func (_d WorkItemTagWithTimeout) Delete(ctx context.Context, d db.DBTX, id db.WorkItemTagID) (wp1 *db.WorkItemTag, err error) {
	var cancelFunc func()
	if _d.config.DeleteTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.DeleteTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemTag.Delete(ctx, d, id)
}

// Update implements repos.WorkItemTag
func (_d WorkItemTagWithTimeout) Update(ctx context.Context, d db.DBTX, id db.WorkItemTagID, params *db.WorkItemTagUpdateParams) (wp1 *db.WorkItemTag, err error) {
	var cancelFunc func()
	if _d.config.UpdateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UpdateTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemTag.Update(ctx, d, id, params)
}

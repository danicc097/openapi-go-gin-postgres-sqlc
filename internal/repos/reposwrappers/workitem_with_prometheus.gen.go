// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/prometheus.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	_sourceRepos "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// WorkItemWithPrometheus implements _sourceRepos.WorkItem interface with all methods wrapped
// with Prometheus metrics
type WorkItemWithPrometheus struct {
	base         _sourceRepos.WorkItem
	instanceName string
}

var workitemDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "workitem_duration_seconds",
		Help:       "workitem runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewWorkItemWithPrometheus returns an instance of the _sourceRepos.WorkItem decorated with prometheus summary metric
func NewWorkItemWithPrometheus(base _sourceRepos.WorkItem, instanceName string) WorkItemWithPrometheus {
	return WorkItemWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// AssignTag implements _sourceRepos.WorkItem
func (_d WorkItemWithPrometheus) AssignTag(ctx context.Context, d models.DBTX, params *models.WorkItemWorkItemTagCreateParams) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		workitemDurationSummaryVec.WithLabelValues(_d.instanceName, "AssignTag", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AssignTag(ctx, d, params)
}

// AssignUser implements _sourceRepos.WorkItem
func (_d WorkItemWithPrometheus) AssignUser(ctx context.Context, d models.DBTX, params *models.WorkItemAssigneeCreateParams) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		workitemDurationSummaryVec.WithLabelValues(_d.instanceName, "AssignUser", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.AssignUser(ctx, d, params)
}

// ByID implements _sourceRepos.WorkItem
func (_d WorkItemWithPrometheus) ByID(ctx context.Context, d models.DBTX, id models.WorkItemID, opts ...models.WorkItemSelectConfigOption) (wp1 *models.WorkItem, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		workitemDurationSummaryVec.WithLabelValues(_d.instanceName, "ByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByID(ctx, d, id, opts...)
}

// Delete implements _sourceRepos.WorkItem
func (_d WorkItemWithPrometheus) Delete(ctx context.Context, d models.DBTX, id models.WorkItemID) (wp1 *models.WorkItem, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		workitemDurationSummaryVec.WithLabelValues(_d.instanceName, "Delete", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Delete(ctx, d, id)
}

// RemoveAssignedUser implements _sourceRepos.WorkItem
func (_d WorkItemWithPrometheus) RemoveAssignedUser(ctx context.Context, d models.DBTX, memberID models.UserID, workItemID models.WorkItemID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		workitemDurationSummaryVec.WithLabelValues(_d.instanceName, "RemoveAssignedUser", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RemoveAssignedUser(ctx, d, memberID, workItemID)
}

// RemoveTag implements _sourceRepos.WorkItem
func (_d WorkItemWithPrometheus) RemoveTag(ctx context.Context, d models.DBTX, tagID models.WorkItemTagID, workItemID models.WorkItemID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		workitemDurationSummaryVec.WithLabelValues(_d.instanceName, "RemoveTag", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RemoveTag(ctx, d, tagID, workItemID)
}

// Restore implements _sourceRepos.WorkItem
func (_d WorkItemWithPrometheus) Restore(ctx context.Context, d models.DBTX, id models.WorkItemID) (wp1 *models.WorkItem, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		workitemDurationSummaryVec.WithLabelValues(_d.instanceName, "Restore", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Restore(ctx, d, id)
}

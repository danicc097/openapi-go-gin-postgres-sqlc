// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/prometheus.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// WorkItemWithPrometheus implements repos.WorkItem interface with all methods wrapped
// with Prometheus metrics
type WorkItemWithPrometheus struct {
	base         repos.WorkItem
	instanceName string
}

var workitemDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "workitem_duration_seconds",
		Help:       "workitem runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewWorkItemWithPrometheus returns an instance of the repos.WorkItem decorated with prometheus summary metric
func NewWorkItemWithPrometheus(base repos.WorkItem, instanceName string) WorkItemWithPrometheus {
	return WorkItemWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// ByID implements repos.WorkItem
func (_d WorkItemWithPrometheus) ByID(ctx context.Context, d db.DBTX, id int, opts ...db.WorkItemSelectConfigOption) (wp1 *db.WorkItem, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		workitemDurationSummaryVec.WithLabelValues(_d.instanceName, "ByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByID(ctx, d, id, opts...)
}

// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/retry.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// EntityNotificationWithRetry implements repos.EntityNotification interface instrumented with retries
type EntityNotificationWithRetry struct {
	repos.EntityNotification
	_retryCount    int
	_retryInterval time.Duration
}

// NewEntityNotificationWithRetry returns EntityNotificationWithRetry
func NewEntityNotificationWithRetry(base repos.EntityNotification, retryCount int, retryInterval time.Duration) EntityNotificationWithRetry {
	return EntityNotificationWithRetry{
		EntityNotification: base,
		_retryCount:        retryCount,
		_retryInterval:     retryInterval,
	}
}

// ByID implements repos.EntityNotification
func (_d EntityNotificationWithRetry) ByID(ctx context.Context, d db.DBTX, id db.EntityNotificationID, opts ...db.EntityNotificationSelectConfigOption) (ep1 *db.EntityNotification, err error) {
	ep1, err = _d.EntityNotification.ByID(ctx, d, id, opts...)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		ep1, err = _d.EntityNotification.ByID(ctx, d, id, opts...)
	}
	return
}

// Create implements repos.EntityNotification
func (_d EntityNotificationWithRetry) Create(ctx context.Context, d db.DBTX, params *db.EntityNotificationCreateParams) (ep1 *db.EntityNotification, err error) {
	ep1, err = _d.EntityNotification.Create(ctx, d, params)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		ep1, err = _d.EntityNotification.Create(ctx, d, params)
	}
	return
}

// Delete implements repos.EntityNotification
func (_d EntityNotificationWithRetry) Delete(ctx context.Context, d db.DBTX, id db.EntityNotificationID) (ep1 *db.EntityNotification, err error) {
	ep1, err = _d.EntityNotification.Delete(ctx, d, id)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		ep1, err = _d.EntityNotification.Delete(ctx, d, id)
	}
	return
}

// Update implements repos.EntityNotification
func (_d EntityNotificationWithRetry) Update(ctx context.Context, d db.DBTX, id db.EntityNotificationID, params *db.EntityNotificationUpdateParams) (ep1 *db.EntityNotification, err error) {
	ep1, err = _d.EntityNotification.Update(ctx, d, id, params)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		ep1, err = _d.EntityNotification.Update(ctx, d, id, params)
	}
	return
}

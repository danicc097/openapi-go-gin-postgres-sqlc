// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/otel.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// ProjectWithTracing implements repos.Project interface instrumented with opentracing spans
type ProjectWithTracing struct {
	repos.Project
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewProjectWithTracing returns ProjectWithTracing
func NewProjectWithTracing(base repos.Project, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ProjectWithTracing {
	d := ProjectWithTracing{
		Project:   base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// ByID implements repos.Project
func (_d ProjectWithTracing) ByID(ctx context.Context, d models.DBTX, id models.ProjectID, opts ...models.ProjectSelectConfigOption) (pp1 *models.Project, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "repos.Project.ByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"d":    d,
				"id":   id,
				"opts": opts}, map[string]interface{}{
				"pp1": pp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Project.ByID(ctx, d, id, opts...)
}

// ByName implements repos.Project
func (_d ProjectWithTracing) ByName(ctx context.Context, d models.DBTX, name models.ProjectName, opts ...models.ProjectSelectConfigOption) (pp1 *models.Project, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "repos.Project.ByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"d":    d,
				"name": name,
				"opts": opts}, map[string]interface{}{
				"pp1": pp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Project.ByName(ctx, d, name, opts...)
}

// IsTeamInProject implements repos.Project
func (_d ProjectWithTracing) IsTeamInProject(ctx context.Context, d models.DBTX, arg models.IsTeamInProjectParams) (b1 bool, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "repos.Project.IsTeamInProject")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"d":   d,
				"arg": arg}, map[string]interface{}{
				"b1":  b1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Project.IsTeamInProject(ctx, d, arg)
}

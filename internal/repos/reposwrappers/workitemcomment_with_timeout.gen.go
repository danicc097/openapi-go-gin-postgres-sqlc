// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
)

// WorkItemCommentWithTimeout implements repos.WorkItemComment interface instrumented with timeouts
type WorkItemCommentWithTimeout struct {
	repos.WorkItemComment
	config WorkItemCommentWithTimeoutConfig
}

type WorkItemCommentWithTimeoutConfig struct {
	ByIDTimeout time.Duration

	CreateTimeout time.Duration

	DeleteTimeout time.Duration

	UpdateTimeout time.Duration
}

// NewWorkItemCommentWithTimeout returns WorkItemCommentWithTimeout
func NewWorkItemCommentWithTimeout(base repos.WorkItemComment, config WorkItemCommentWithTimeoutConfig) WorkItemCommentWithTimeout {
	return WorkItemCommentWithTimeout{
		WorkItemComment: base,
		config:          config,
	}
}

// ByID implements repos.WorkItemComment
func (_d WorkItemCommentWithTimeout) ByID(ctx context.Context, d models.DBTX, id models.WorkItemCommentID, opts ...models.WorkItemCommentSelectConfigOption) (wp1 *models.WorkItemComment, err error) {
	var cancelFunc func()
	if _d.config.ByIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ByIDTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemComment.ByID(ctx, d, id, opts...)
}

// Create implements repos.WorkItemComment
func (_d WorkItemCommentWithTimeout) Create(ctx context.Context, d models.DBTX, params *models.WorkItemCommentCreateParams) (wp1 *models.WorkItemComment, err error) {
	var cancelFunc func()
	if _d.config.CreateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CreateTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemComment.Create(ctx, d, params)
}

// Delete implements repos.WorkItemComment
func (_d WorkItemCommentWithTimeout) Delete(ctx context.Context, d models.DBTX, id models.WorkItemCommentID) (wp1 *models.WorkItemComment, err error) {
	var cancelFunc func()
	if _d.config.DeleteTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.DeleteTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemComment.Delete(ctx, d, id)
}

// Update implements repos.WorkItemComment
func (_d WorkItemCommentWithTimeout) Update(ctx context.Context, d models.DBTX, id models.WorkItemCommentID, params *models.WorkItemCommentUpdateParams) (wp1 *models.WorkItemComment, err error) {
	var cancelFunc func()
	if _d.config.UpdateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UpdateTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemComment.Update(ctx, d, id, params)
}

// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/otel.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"

	_sourceRepos "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// DemoWorkItemWithTracing implements _sourceRepos.DemoWorkItem interface instrumented with opentracing spans
type DemoWorkItemWithTracing struct {
	_sourceRepos.DemoWorkItem
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewDemoWorkItemWithTracing returns DemoWorkItemWithTracing
func NewDemoWorkItemWithTracing(base _sourceRepos.DemoWorkItem, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) DemoWorkItemWithTracing {
	d := DemoWorkItemWithTracing{
		DemoWorkItem: base,
		_instance:    instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// ByID implements _sourceRepos.DemoWorkItem
func (_d DemoWorkItemWithTracing) ByID(ctx context.Context, d models.DBTX, id models.WorkItemID, opts ...models.WorkItemSelectConfigOption) (wp1 *models.WorkItem, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "_sourceRepos.DemoWorkItem.ByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"d":    d,
				"id":   id,
				"opts": opts}, map[string]interface{}{
				"wp1": wp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.DemoWorkItem.ByID(ctx, d, id, opts...)
}

// Create implements _sourceRepos.DemoWorkItem
func (_d DemoWorkItemWithTracing) Create(ctx context.Context, d models.DBTX, params _sourceRepos.DemoWorkItemCreateParams) (wp1 *models.WorkItem, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "_sourceRepos.DemoWorkItem.Create")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"d":      d,
				"params": params}, map[string]interface{}{
				"wp1": wp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.DemoWorkItem.Create(ctx, d, params)
}

// Paginated implements _sourceRepos.DemoWorkItem
func (_d DemoWorkItemWithTracing) Paginated(ctx context.Context, d models.DBTX, cursor models.WorkItemID, opts ...models.CacheDemoWorkItemSelectConfigOption) (ca1 []models.CacheDemoWorkItem, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "_sourceRepos.DemoWorkItem.Paginated")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"d":      d,
				"cursor": cursor,
				"opts":   opts}, map[string]interface{}{
				"ca1": ca1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.DemoWorkItem.Paginated(ctx, d, cursor, opts...)
}

// Update implements _sourceRepos.DemoWorkItem
func (_d DemoWorkItemWithTracing) Update(ctx context.Context, d models.DBTX, id models.WorkItemID, params _sourceRepos.DemoWorkItemUpdateParams) (wp1 *models.WorkItem, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "_sourceRepos.DemoWorkItem.Update")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"d":      d,
				"id":     id,
				"params": params}, map[string]interface{}{
				"wp1": wp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.DemoWorkItem.Update(ctx, d, id, params)
}

// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// NotificationWithTimeout implements repos.Notification interface instrumented with timeouts
type NotificationWithTimeout struct {
	repos.Notification
	config NotificationWithTimeoutConfig
}

type NotificationWithTimeoutConfig struct {
	CreateTimeout time.Duration

	DeleteTimeout time.Duration

	LatestNotificationsTimeout time.Duration

	PaginatedNotificationsTimeout time.Duration
}

// NewNotificationWithTimeout returns NotificationWithTimeout
func NewNotificationWithTimeout(base repos.Notification, config NotificationWithTimeoutConfig) NotificationWithTimeout {
	return NotificationWithTimeout{
		Notification: base,
		config:       config,
	}
}

// Create implements repos.Notification
func (_d NotificationWithTimeout) Create(ctx context.Context, d db.DBTX, params *db.NotificationCreateParams) (up1 *db.UserNotification, err error) {
	var cancelFunc func()
	if _d.config.CreateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CreateTimeout)
		defer cancelFunc()
	}
	return _d.Notification.Create(ctx, d, params)
}

// Delete implements repos.Notification
func (_d NotificationWithTimeout) Delete(ctx context.Context, d db.DBTX, id db.NotificationID) (np1 *db.Notification, err error) {
	var cancelFunc func()
	if _d.config.DeleteTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.DeleteTimeout)
		defer cancelFunc()
	}
	return _d.Notification.Delete(ctx, d, id)
}

// LatestNotifications implements repos.Notification
func (_d NotificationWithTimeout) LatestNotifications(ctx context.Context, d db.DBTX, params *db.GetUserNotificationsParams) (ga1 []db.GetUserNotificationsRow, err error) {
	var cancelFunc func()
	if _d.config.LatestNotificationsTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.LatestNotificationsTimeout)
		defer cancelFunc()
	}
	return _d.Notification.LatestNotifications(ctx, d, params)
}

// PaginatedNotifications implements repos.Notification
func (_d NotificationWithTimeout) PaginatedNotifications(ctx context.Context, d db.DBTX, userID db.UserID, params models.GetPaginatedNotificationsParams) (ua1 []db.UserNotification, err error) {
	var cancelFunc func()
	if _d.config.PaginatedNotificationsTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.PaginatedNotificationsTimeout)
		defer cancelFunc()
	}
	return _d.Notification.PaginatedNotifications(ctx, d, userID, params)
}

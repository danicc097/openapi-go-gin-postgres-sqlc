// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/prometheus.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ActivityWithPrometheus implements repos.Activity interface with all methods wrapped
// with Prometheus metrics
type ActivityWithPrometheus struct {
	base         repos.Activity
	instanceName string
}

var activityDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "activity_duration_seconds",
		Help:       "activity runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewActivityWithPrometheus returns an instance of the repos.Activity decorated with prometheus summary metric
func NewActivityWithPrometheus(base repos.Activity, instanceName string) ActivityWithPrometheus {
	return ActivityWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// ByID implements repos.Activity
func (_d ActivityWithPrometheus) ByID(ctx context.Context, d db.DBTX, id int, opts ...db.ActivitySelectConfigOption) (ap1 *db.Activity, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		activityDurationSummaryVec.WithLabelValues(_d.instanceName, "ByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByID(ctx, d, id, opts...)
}

// ByName implements repos.Activity
func (_d ActivityWithPrometheus) ByName(ctx context.Context, d db.DBTX, name string, projectID int, opts ...db.ActivitySelectConfigOption) (ap1 *db.Activity, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		activityDurationSummaryVec.WithLabelValues(_d.instanceName, "ByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByName(ctx, d, name, projectID, opts...)
}

// ByProjectID implements repos.Activity
func (_d ActivityWithPrometheus) ByProjectID(ctx context.Context, d db.DBTX, projectID int, opts ...db.ActivitySelectConfigOption) (aa1 []db.Activity, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		activityDurationSummaryVec.WithLabelValues(_d.instanceName, "ByProjectID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByProjectID(ctx, d, projectID, opts...)
}

// Create implements repos.Activity
func (_d ActivityWithPrometheus) Create(ctx context.Context, d db.DBTX, params *db.ActivityCreateParams) (ap1 *db.Activity, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		activityDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, d, params)
}

// Delete implements repos.Activity
func (_d ActivityWithPrometheus) Delete(ctx context.Context, d db.DBTX, id int) (ap1 *db.Activity, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		activityDurationSummaryVec.WithLabelValues(_d.instanceName, "Delete", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Delete(ctx, d, id)
}

// Update implements repos.Activity
func (_d ActivityWithPrometheus) Update(ctx context.Context, d db.DBTX, id int, params *db.ActivityUpdateParams) (ap1 *db.Activity, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		activityDurationSummaryVec.WithLabelValues(_d.instanceName, "Update", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Update(ctx, d, id, params)
}

// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/otel.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"

	_sourceRepos "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// KanbanStepWithTracing implements _sourceRepos.KanbanStep interface instrumented with opentracing spans
type KanbanStepWithTracing struct {
	_sourceRepos.KanbanStep
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewKanbanStepWithTracing returns KanbanStepWithTracing
func NewKanbanStepWithTracing(base _sourceRepos.KanbanStep, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) KanbanStepWithTracing {
	d := KanbanStepWithTracing{
		KanbanStep: base,
		_instance:  instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// ByID implements _sourceRepos.KanbanStep
func (_d KanbanStepWithTracing) ByID(ctx context.Context, d models.DBTX, id models.KanbanStepID, opts ...models.KanbanStepSelectConfigOption) (kp1 *models.KanbanStep, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "_sourceRepos.KanbanStep.ByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"d":    d,
				"id":   id,
				"opts": opts}, map[string]interface{}{
				"kp1": kp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.KanbanStep.ByID(ctx, d, id, opts...)
}

// ByProject implements _sourceRepos.KanbanStep
func (_d KanbanStepWithTracing) ByProject(ctx context.Context, d models.DBTX, projectID models.ProjectID, opts ...models.KanbanStepSelectConfigOption) (ka1 []models.KanbanStep, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "_sourceRepos.KanbanStep.ByProject")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"d":         d,
				"projectID": projectID,
				"opts":      opts}, map[string]interface{}{
				"ka1": ka1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.KanbanStep.ByProject(ctx, d, projectID, opts...)
}

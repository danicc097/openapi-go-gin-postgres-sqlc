// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// WorkItemWithTimeout implements repos.WorkItem interface instrumented with timeouts
type WorkItemWithTimeout struct {
	repos.WorkItem
	config WorkItemWithTimeoutConfig
}

type WorkItemWithTimeoutConfig struct {
	ByIDTimeout time.Duration
}

// NewWorkItemWithTimeout returns WorkItemWithTimeout
func NewWorkItemWithTimeout(base repos.WorkItem, config WorkItemWithTimeoutConfig) WorkItemWithTimeout {
	return WorkItemWithTimeout{
		WorkItem: base,
		config:   config,
	}
}

// ByID implements repos.WorkItem
func (_d WorkItemWithTimeout) ByID(ctx context.Context, d db.DBTX, id int64, opts ...db.WorkItemSelectConfigOption) (wp1 *db.WorkItem, err error) {
	var cancelFunc func()
	if _d.config.ByIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ByIDTimeout)
		defer cancelFunc()
	}
	return _d.WorkItem.ByID(ctx, d, id, opts...)
}

// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/prometheus.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// UserWithPrometheus implements repos.User interface with all methods wrapped
// with Prometheus metrics
type UserWithPrometheus struct {
	base         repos.User
	instanceName string
}

var userDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "user_duration_seconds",
		Help:       "user runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewUserWithPrometheus returns an instance of the repos.User decorated with prometheus summary metric
func NewUserWithPrometheus(base repos.User, instanceName string) UserWithPrometheus {
	return UserWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// ByAPIKey implements repos.User
func (_d UserWithPrometheus) ByAPIKey(ctx context.Context, d db.DBTX, apiKey string) (up1 *db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "ByAPIKey", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByAPIKey(ctx, d, apiKey)
}

// ByEmail implements repos.User
func (_d UserWithPrometheus) ByEmail(ctx context.Context, d db.DBTX, email string, opts ...db.UserSelectConfigOption) (up1 *db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "ByEmail", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByEmail(ctx, d, email, opts...)
}

// ByExternalID implements repos.User
func (_d UserWithPrometheus) ByExternalID(ctx context.Context, d db.DBTX, extID string, opts ...db.UserSelectConfigOption) (up1 *db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "ByExternalID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByExternalID(ctx, d, extID, opts...)
}

// ByID implements repos.User
func (_d UserWithPrometheus) ByID(ctx context.Context, d db.DBTX, id db.UserID, opts ...db.UserSelectConfigOption) (up1 *db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "ByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByID(ctx, d, id, opts...)
}

// ByProject implements repos.User
func (_d UserWithPrometheus) ByProject(ctx context.Context, d db.DBTX, projectID db.ProjectID) (ua1 []db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "ByProject", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByProject(ctx, d, projectID)
}

// ByTeam implements repos.User
func (_d UserWithPrometheus) ByTeam(ctx context.Context, d db.DBTX, teamID db.TeamID) (ua1 []db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "ByTeam", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByTeam(ctx, d, teamID)
}

// ByUsername implements repos.User
func (_d UserWithPrometheus) ByUsername(ctx context.Context, d db.DBTX, username string, opts ...db.UserSelectConfigOption) (up1 *db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "ByUsername", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ByUsername(ctx, d, username, opts...)
}

// Create implements repos.User
func (_d UserWithPrometheus) Create(ctx context.Context, d db.DBTX, params *db.UserCreateParams) (up1 *db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, d, params)
}

// CreateAPIKey implements repos.User
func (_d UserWithPrometheus) CreateAPIKey(ctx context.Context, d db.DBTX, user *db.User) (up1 *db.UserAPIKey, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "CreateAPIKey", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.CreateAPIKey(ctx, d, user)
}

// Delete implements repos.User
func (_d UserWithPrometheus) Delete(ctx context.Context, d db.DBTX, id db.UserID) (up1 *db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "Delete", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Delete(ctx, d, id)
}

// DeleteAPIKey implements repos.User
func (_d UserWithPrometheus) DeleteAPIKey(ctx context.Context, d db.DBTX, apiKey string) (up1 *db.UserAPIKey, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteAPIKey", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteAPIKey(ctx, d, apiKey)
}

// Paginated implements repos.User
func (_d UserWithPrometheus) Paginated(ctx context.Context, d db.DBTX, params repos.GetPaginatedUsersParams) (ua1 []db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "Paginated", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Paginated(ctx, d, params)
}

// Update implements repos.User
func (_d UserWithPrometheus) Update(ctx context.Context, d db.DBTX, id db.UserID, params *db.UserUpdateParams) (up1 *db.User, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		userDurationSummaryVec.WithLabelValues(_d.instanceName, "Update", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Update(ctx, d, id, params)
}

// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
)

// ProjectWithTimeout implements repos.Project interface instrumented with timeouts
type ProjectWithTimeout struct {
	repos.Project
	config ProjectWithTimeoutConfig
}

type ProjectWithTimeoutConfig struct {
	ByIDTimeout time.Duration

	ByNameTimeout time.Duration

	IsTeamInProjectTimeout time.Duration
}

// NewProjectWithTimeout returns ProjectWithTimeout
func NewProjectWithTimeout(base repos.Project, config ProjectWithTimeoutConfig) ProjectWithTimeout {
	return ProjectWithTimeout{
		Project: base,
		config:  config,
	}
}

// ByID implements repos.Project
func (_d ProjectWithTimeout) ByID(ctx context.Context, d models.DBTX, id models.ProjectID, opts ...models.ProjectSelectConfigOption) (pp1 *models.Project, err error) {
	var cancelFunc func()
	if _d.config.ByIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ByIDTimeout)
		defer cancelFunc()
	}
	return _d.Project.ByID(ctx, d, id, opts...)
}

// ByName implements repos.Project
func (_d ProjectWithTimeout) ByName(ctx context.Context, d models.DBTX, name models.ProjectName, opts ...models.ProjectSelectConfigOption) (pp1 *models.Project, err error) {
	var cancelFunc func()
	if _d.config.ByNameTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ByNameTimeout)
		defer cancelFunc()
	}
	return _d.Project.ByName(ctx, d, name, opts...)
}

// IsTeamInProject implements repos.Project
func (_d ProjectWithTimeout) IsTeamInProject(ctx context.Context, d models.DBTX, arg models.IsTeamInProjectParams) (b1 bool, err error) {
	var cancelFunc func()
	if _d.config.IsTeamInProjectTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.IsTeamInProjectTimeout)
		defer cancelFunc()
	}
	return _d.Project.IsTeamInProject(ctx, d, arg)
}

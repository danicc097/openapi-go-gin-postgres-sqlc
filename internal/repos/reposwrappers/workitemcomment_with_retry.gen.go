// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/retry.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// WorkItemCommentWithRetry implements repos.WorkItemComment interface instrumented with retries
type WorkItemCommentWithRetry struct {
	repos.WorkItemComment
	_retryCount    int
	_retryInterval time.Duration
}

// NewWorkItemCommentWithRetry returns WorkItemCommentWithRetry
func NewWorkItemCommentWithRetry(base repos.WorkItemComment, retryCount int, retryInterval time.Duration) WorkItemCommentWithRetry {
	return WorkItemCommentWithRetry{
		WorkItemComment: base,
		_retryCount:     retryCount,
		_retryInterval:  retryInterval,
	}
}

// ByID implements repos.WorkItemComment
func (_d WorkItemCommentWithRetry) ByID(ctx context.Context, d db.DBTX, id db.WorkItemCommentID, opts ...db.WorkItemCommentSelectConfigOption) (wp1 *db.WorkItemComment, err error) {
	wp1, err = _d.WorkItemComment.ByID(ctx, d, id, opts...)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		wp1, err = _d.WorkItemComment.ByID(ctx, d, id, opts...)
	}
	return
}

// Create implements repos.WorkItemComment
func (_d WorkItemCommentWithRetry) Create(ctx context.Context, d db.DBTX, params *db.WorkItemCommentCreateParams) (wp1 *db.WorkItemComment, err error) {
	wp1, err = _d.WorkItemComment.Create(ctx, d, params)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		wp1, err = _d.WorkItemComment.Create(ctx, d, params)
	}
	return
}

// Delete implements repos.WorkItemComment
func (_d WorkItemCommentWithRetry) Delete(ctx context.Context, d db.DBTX, id db.WorkItemCommentID) (wp1 *db.WorkItemComment, err error) {
	wp1, err = _d.WorkItemComment.Delete(ctx, d, id)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		wp1, err = _d.WorkItemComment.Delete(ctx, d, id)
	}
	return
}

// Update implements repos.WorkItemComment
func (_d WorkItemCommentWithRetry) Update(ctx context.Context, d db.DBTX, id db.WorkItemCommentID, params *db.WorkItemCommentUpdateParams) (wp1 *db.WorkItemComment, err error) {
	wp1, err = _d.WorkItemComment.Update(ctx, d, id, params)
	if err == nil || _d._retryCount < 1 {
		return
	}
	_ticker := time.NewTicker(_d._retryInterval)
	defer _ticker.Stop()
	for _i := 0; _i < _d._retryCount && err != nil; _i++ {
		select {
		case <-ctx.Done():
			return
		case <-_ticker.C:
		}
		wp1, err = _d.WorkItemComment.Update(ctx, d, id, params)
	}
	return
}

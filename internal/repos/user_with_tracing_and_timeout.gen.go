// Code generated by gowrap. DO NOT EDIT.
// template: ../gowrap-templates/otel-with-timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package repos

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// UserWrapped implements User interface instrumented with opentracing spans and timeout.
type UserWrapped struct {
	User
	_otelName      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
	config         UserWrappedConfig
}

type UserWrappedConfig struct {
	CreateTimeout time.Duration

	CreateAPIKeyTimeout time.Duration

	UpdateTimeout time.Duration

	UserByAPIKeyTimeout time.Duration

	UserByEmailTimeout time.Duration

	UserByIDTimeout time.Duration
}

// NewUserWrapped returns a decorated User with tracing and timeout options.
func NewUserWrapped(base User, otelName string, config UserWrappedConfig, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) UserWrapped {
	d := UserWrapped{
		User:      base,
		_otelName: otelName,
		config:    config,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Create implements User.
func (_d UserWrapped) Create(ctx context.Context, d db.DBTX, user *db.User) (err error) {
	// -- tracing
	ctx, _span := otel.Tracer(_d._otelName).Start(ctx, "User.Create")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"d":    d,
				"user": user}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()

	// -- timeout
	var cancelFunc func()
	if _d.config.CreateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CreateTimeout)
		defer cancelFunc()
	}

	return _d.User.Create(ctx, d, user)
}

// CreateAPIKey implements User.
func (_d UserWrapped) CreateAPIKey(ctx context.Context, d db.DBTX, user *db.User) (up1 *db.UserAPIKey, err error) {
	// -- tracing
	ctx, _span := otel.Tracer(_d._otelName).Start(ctx, "User.CreateAPIKey")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"d":    d,
				"user": user}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()

	// -- timeout
	var cancelFunc func()
	if _d.config.CreateAPIKeyTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CreateAPIKeyTimeout)
		defer cancelFunc()
	}

	return _d.User.CreateAPIKey(ctx, d, user)
}

// Update implements User.
func (_d UserWrapped) Update(ctx context.Context, d db.DBTX, params UserUpdateParams) (up1 *db.User, err error) {
	// -- tracing
	ctx, _span := otel.Tracer(_d._otelName).Start(ctx, "User.Update")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"d":      d,
				"params": params}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()

	// -- timeout
	var cancelFunc func()
	if _d.config.UpdateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UpdateTimeout)
		defer cancelFunc()
	}

	return _d.User.Update(ctx, d, params)
}

// UserByAPIKey implements User.
func (_d UserWrapped) UserByAPIKey(ctx context.Context, d db.DBTX, apiKey string) (up1 *db.User, err error) {
	// -- tracing
	ctx, _span := otel.Tracer(_d._otelName).Start(ctx, "User.UserByAPIKey")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"d":      d,
				"apiKey": apiKey}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()

	// -- timeout
	var cancelFunc func()
	if _d.config.UserByAPIKeyTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UserByAPIKeyTimeout)
		defer cancelFunc()
	}

	return _d.User.UserByAPIKey(ctx, d, apiKey)
}

// UserByEmail implements User.
func (_d UserWrapped) UserByEmail(ctx context.Context, d db.DBTX, email string) (up1 *db.User, err error) {
	// -- tracing
	ctx, _span := otel.Tracer(_d._otelName).Start(ctx, "User.UserByEmail")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"d":     d,
				"email": email}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()

	// -- timeout
	var cancelFunc func()
	if _d.config.UserByEmailTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UserByEmailTimeout)
		defer cancelFunc()
	}

	return _d.User.UserByEmail(ctx, d, email)
}

// UserByID implements User.
func (_d UserWrapped) UserByID(ctx context.Context, d db.DBTX, id string) (up1 *db.User, err error) {
	// -- tracing
	ctx, _span := otel.Tracer(_d._otelName).Start(ctx, "User.UserByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"d":   d,
				"id":  id}, map[string]interface{}{
				"up1": up1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()

	// -- timeout
	var cancelFunc func()
	if _d.config.UserByIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UserByIDTimeout)
		defer cancelFunc()
	}

	return _d.User.UserByID(ctx, d, id)
}

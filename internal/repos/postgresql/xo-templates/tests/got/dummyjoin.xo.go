package got

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"errors"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5"
)

// DummyJoin represents a row from 'xo_tests.dummy_join'.
// Change properties via SQL column comments, joined with ",":
//   - "property:private" to exclude a field from JSON.
//   - "type:<pkg.type>" to override the type annotation.
//   - "cardinality:O2O|M2O|M2M" to generate joins (not executed by default).
type DummyJoin struct {
	DummyJoinID int     `json:"dummyJoinID" db:"dummy_join_id" required:"true"` // dummy_join_id
	Name        *string `json:"name" db:"name" required:"true"`                 // name

	PagElementJoin *PagElement `json:"-" db:"pag_element_dummy_join_id" openapi-go:"ignore"` // O2O pag_element (inferred)
}

// DummyJoinCreateParams represents insert params for 'xo_tests.dummy_join'.
type DummyJoinCreateParams struct {
	Name *string `json:"name" required:"true"` // name
}

// CreateDummyJoin creates a new DummyJoin in the database with the given params.
func CreateDummyJoin(ctx context.Context, db DB, params *DummyJoinCreateParams) (*DummyJoin, error) {
	dj := &DummyJoin{
		Name: params.Name,
	}

	return dj.Insert(ctx, db)
}

// DummyJoinUpdateParams represents update params for 'xo_tests.dummy_join'
type DummyJoinUpdateParams struct {
	Name **string `json:"name" required:"true"` // name
}

// SetUpdateParams updates xo_tests.dummy_join struct fields with the specified params.
func (dj *DummyJoin) SetUpdateParams(params *DummyJoinUpdateParams) {
	if params.Name != nil {
		dj.Name = *params.Name
	}
}

type DummyJoinSelectConfig struct {
	limit   string
	orderBy string
	joins   DummyJoinJoins
}
type DummyJoinSelectConfigOption func(*DummyJoinSelectConfig)

// WithDummyJoinLimit limits row selection.
func WithDummyJoinLimit(limit int) DummyJoinSelectConfigOption {
	return func(s *DummyJoinSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

type DummyJoinOrderBy = string

type DummyJoinJoins struct {
	PagElement bool // O2O pag_element
}

// WithDummyJoinJoin joins with the given tables.
func WithDummyJoinJoin(joins DummyJoinJoins) DummyJoinSelectConfigOption {
	return func(s *DummyJoinSelectConfig) {
		s.joins = DummyJoinJoins{
			PagElement: s.joins.PagElement || joins.PagElement,
		}
	}
}

// Insert inserts the DummyJoin to the database.
func (dj *DummyJoin) Insert(ctx context.Context, db DB) (*DummyJoin, error) {
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO xo_tests.dummy_join (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING * `
	// run
	logf(sqlstr, dj.Name)

	rows, err := db.Query(ctx, sqlstr, dj.Name)
	if err != nil {
		return nil, logerror(fmt.Errorf("DummyJoin/Insert/db.Query: %w", err))
	}
	newdj, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[DummyJoin])
	if err != nil {
		return nil, logerror(fmt.Errorf("DummyJoin/Insert/pgx.CollectOneRow: %w", err))
	}

	*dj = newdj

	return dj, nil
}

// Update updates a DummyJoin in the database.
func (dj *DummyJoin) Update(ctx context.Context, db DB) (*DummyJoin, error) {
	// update with composite primary key
	sqlstr := `UPDATE xo_tests.dummy_join SET ` +
		`name = $1 ` +
		`WHERE dummy_join_id = $2 ` +
		`RETURNING * `
	// run
	logf(sqlstr, dj.Name, dj.DummyJoinID)

	rows, err := db.Query(ctx, sqlstr, dj.Name, dj.DummyJoinID)
	if err != nil {
		return nil, logerror(fmt.Errorf("DummyJoin/Update/db.Query: %w", err))
	}
	newdj, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[DummyJoin])
	if err != nil {
		return nil, logerror(fmt.Errorf("DummyJoin/Update/pgx.CollectOneRow: %w", err))
	}
	*dj = newdj

	return dj, nil
}

// Upsert upserts a DummyJoin in the database.
// Requires appropiate PK(s) to be set beforehand.
func (dj *DummyJoin) Upsert(ctx context.Context, db DB, params *DummyJoinCreateParams) (*DummyJoin, error) {
	var err error

	dj.Name = params.Name

	dj, err = dj.Insert(ctx, db)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code != pgerrcode.UniqueViolation {
				return nil, fmt.Errorf("UpsertUser/Insert: %w", err)
			}
			dj, err = dj.Update(ctx, db)
			if err != nil {
				return nil, fmt.Errorf("UpsertUser/Update: %w", err)
			}
		}
	}

	return dj, err
}

// Delete deletes the DummyJoin from the database.
func (dj *DummyJoin) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM xo_tests.dummy_join ` +
		`WHERE dummy_join_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, dj.DummyJoinID); err != nil {
		return logerror(err)
	}
	return nil
}

// DummyJoinPaginatedByDummyJoinIDAsc returns a cursor-paginated list of DummyJoin in Asc order.
func DummyJoinPaginatedByDummyJoinIDAsc(ctx context.Context, db DB, dummyJoinID int, opts ...DummyJoinSelectConfigOption) ([]DummyJoin, error) {
	c := &DummyJoinSelectConfig{joins: DummyJoinJoins{}}

	for _, o := range opts {
		o(c)
	}

	sqlstr := `SELECT ` +
		`dummy_join.dummy_join_id,
dummy_join.name,
(case when $1::boolean = true and _dummy_join_dummy_join_id.dummy is not null then row(_dummy_join_dummy_join_id.*) end) as pag_element_dummy_join_id ` +
		`FROM xo_tests.dummy_join ` +
		`-- O2O join generated from "pag_element_dummy_fkey (inferred)"
left join xo_tests.pag_element as _dummy_join_dummy_join_id on _dummy_join_dummy_join_id.dummy = dummy_join.dummy_join_id` +
		` WHERE dummy_join.dummy_join_id > $2 GROUP BY 
	dummy_join.dummy_join_id,
	dummy_join.name,
_dummy_join_dummy_join_id.dummy,
      _dummy_join_dummy_join_id.paginated_element_id,
	dummy_join.dummy_join_id ORDER BY 
		dummy_join_id Asc `
	sqlstr += c.limit

	// run

	rows, err := db.Query(ctx, sqlstr, c.joins.PagElement, dummyJoinID)
	if err != nil {
		return nil, logerror(fmt.Errorf("DummyJoin/Paginated/Asc/db.Query: %w", err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[DummyJoin])
	if err != nil {
		return nil, logerror(fmt.Errorf("DummyJoin/Paginated/Asc/pgx.CollectRows: %w", err))
	}
	return res, nil
}

// DummyJoinPaginatedByDummyJoinIDDesc returns a cursor-paginated list of DummyJoin in Desc order.
func DummyJoinPaginatedByDummyJoinIDDesc(ctx context.Context, db DB, dummyJoinID int, opts ...DummyJoinSelectConfigOption) ([]DummyJoin, error) {
	c := &DummyJoinSelectConfig{joins: DummyJoinJoins{}}

	for _, o := range opts {
		o(c)
	}

	sqlstr := `SELECT ` +
		`dummy_join.dummy_join_id,
dummy_join.name,
(case when $1::boolean = true and _dummy_join_dummy_join_id.dummy is not null then row(_dummy_join_dummy_join_id.*) end) as pag_element_dummy_join_id ` +
		`FROM xo_tests.dummy_join ` +
		`-- O2O join generated from "pag_element_dummy_fkey (inferred)"
left join xo_tests.pag_element as _dummy_join_dummy_join_id on _dummy_join_dummy_join_id.dummy = dummy_join.dummy_join_id` +
		` WHERE dummy_join.dummy_join_id < $2 GROUP BY 
	dummy_join.dummy_join_id,
	dummy_join.name,
_dummy_join_dummy_join_id.dummy,
      _dummy_join_dummy_join_id.paginated_element_id,
	dummy_join.dummy_join_id ORDER BY 
		dummy_join_id Desc `
	sqlstr += c.limit

	// run

	rows, err := db.Query(ctx, sqlstr, c.joins.PagElement, dummyJoinID)
	if err != nil {
		return nil, logerror(fmt.Errorf("DummyJoin/Paginated/Desc/db.Query: %w", err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[DummyJoin])
	if err != nil {
		return nil, logerror(fmt.Errorf("DummyJoin/Paginated/Desc/pgx.CollectRows: %w", err))
	}
	return res, nil
}

// DummyJoinByDummyJoinID retrieves a row from 'xo_tests.dummy_join' as a DummyJoin.
//
// Generated from index 'dummy_join_pkey'.
func DummyJoinByDummyJoinID(ctx context.Context, db DB, dummyJoinID int, opts ...DummyJoinSelectConfigOption) (*DummyJoin, error) {
	c := &DummyJoinSelectConfig{joins: DummyJoinJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`dummy_join.dummy_join_id,
dummy_join.name,
(case when $1::boolean = true and _dummy_join_dummy_join_id.dummy is not null then row(_dummy_join_dummy_join_id.*) end) as pag_element_dummy_join_id ` +
		`FROM xo_tests.dummy_join ` +
		`-- O2O join generated from "pag_element_dummy_fkey (inferred)"
left join xo_tests.pag_element as _dummy_join_dummy_join_id on _dummy_join_dummy_join_id.dummy = dummy_join.dummy_join_id` +
		` WHERE dummy_join.dummy_join_id = $2 GROUP BY 
	dummy_join.dummy_join_id,
	dummy_join.name,
_dummy_join_dummy_join_id.dummy,
      _dummy_join_dummy_join_id.paginated_element_id,
	dummy_join.dummy_join_id `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, dummyJoinID)
	rows, err := db.Query(ctx, sqlstr, c.joins.PagElement, dummyJoinID)
	if err != nil {
		return nil, logerror(fmt.Errorf("dummy_join/DummyJoinByDummyJoinID/db.Query: %w", err))
	}
	dj, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[DummyJoin])
	if err != nil {
		return nil, logerror(fmt.Errorf("dummy_join/DummyJoinByDummyJoinID/pgx.CollectOneRow: %w", err))
	}

	return &dj, nil
}

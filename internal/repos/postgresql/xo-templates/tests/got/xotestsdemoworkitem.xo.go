// Code generated by xo. DO NOT EDIT.

//lint:ignore

package got

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5"
)

// XoTestsDemoWorkItem represents a row from 'xo_tests.demo_work_items'.
type XoTestsDemoWorkItem struct {
	WorkItemID XoTestsWorkItemID `json:"workItemID" db:"work_item_id" required:"true" nullable:"false"` // work_item_id
	Checked    bool              `json:"checked" db:"checked" required:"true" nullable:"false"`         // checked

	WorkItemJoin *XoTestsWorkItem `json:"-" db:"work_item_work_item_id"` // O2O work_items (inferred)
}

// XoTestsDemoWorkItemCreateParams represents insert params for 'xo_tests.demo_work_items'.
type XoTestsDemoWorkItemCreateParams struct {
	Checked    bool              `json:"checked" required:"true" nullable:"false"` // checked
	WorkItemID XoTestsWorkItemID `json:"-" required:"true" nullable:"false"`       // work_item_id
}

// XoTestsDemoWorkItemParams represents common params for both insert and update of 'xo_tests.demo_work_items'.
type XoTestsDemoWorkItemParams interface {
	GetChecked() *bool
}

func (p XoTestsDemoWorkItemCreateParams) GetChecked() *bool {
	x := p.Checked
	return &x
}

func (p XoTestsDemoWorkItemUpdateParams) GetChecked() *bool {
	return p.Checked
}

// CreateXoTestsDemoWorkItem creates a new XoTestsDemoWorkItem in the database with the given params.
func CreateXoTestsDemoWorkItem(ctx context.Context, db DB, params *XoTestsDemoWorkItemCreateParams) (*XoTestsDemoWorkItem, error) {
	xtdwi := &XoTestsDemoWorkItem{
		Checked:    params.Checked,
		WorkItemID: params.WorkItemID,
	}

	return xtdwi.Insert(ctx, db)
}

type XoTestsDemoWorkItemSelectConfig struct {
	limit   string
	orderBy map[string]Direction
	joins   XoTestsDemoWorkItemJoins
	filters map[string][]any
	having  map[string][]any
}
type XoTestsDemoWorkItemSelectConfigOption func(*XoTestsDemoWorkItemSelectConfig)

// WithXoTestsDemoWorkItemLimit limits row selection.
func WithXoTestsDemoWorkItemLimit(limit int) XoTestsDemoWorkItemSelectConfigOption {
	return func(s *XoTestsDemoWorkItemSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

// WithXoTestsDemoWorkItemOrderBy accumulates orders results by the given columns.
// A nil entry removes the existing column sort, if any.
func WithXoTestsDemoWorkItemOrderBy(rows map[string]*Direction) XoTestsDemoWorkItemSelectConfigOption {
	return func(s *XoTestsDemoWorkItemSelectConfig) {
		te := XoTestsEntityFields[XoTestsTableEntityXoTestsDemoWorkItem]
		for dbcol, dir := range rows {
			if _, ok := te[dbcol]; !ok {
				continue
			}
			if dir == nil {
				delete(s.orderBy, dbcol)
				continue
			}
			s.orderBy[dbcol] = *dir
		}
	}
}

type XoTestsDemoWorkItemJoins struct {
	WorkItem bool `json:"workItem" required:"true" nullable:"false"` // O2O work_items
}

// WithXoTestsDemoWorkItemJoin joins with the given tables.
func WithXoTestsDemoWorkItemJoin(joins XoTestsDemoWorkItemJoins) XoTestsDemoWorkItemSelectConfigOption {
	return func(s *XoTestsDemoWorkItemSelectConfig) {
		s.joins = XoTestsDemoWorkItemJoins{
			WorkItem: s.joins.WorkItem || joins.WorkItem,
		}
	}
}

// WithXoTestsDemoWorkItemFilters adds the given WHERE clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	filters := map[string][]any{
//		"NOT (col.name = any ($i))": {[]string{"excl_name_1", "excl_name_2"}},
//		`(col.created_at > $i OR
//		col.is_closed = $i)`: {time.Now().Add(-24 * time.Hour), true},
//	}
func WithXoTestsDemoWorkItemFilters(filters map[string][]any) XoTestsDemoWorkItemSelectConfigOption {
	return func(s *XoTestsDemoWorkItemSelectConfig) {
		s.filters = filters
	}
}

// WithXoTestsDemoWorkItemHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
// WithUserHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	// filter a given aggregate of assigned users to return results where at least one of them has id of userId.
//	// See xo_join_* alias used by the join db tag in the SelectSQL string.
//	filters := map[string][]any{
//	"$i = ANY(ARRAY_AGG(xo_join_assigned_users_join.user_id))": {userId},
//	}
func WithXoTestsDemoWorkItemHavingClause(conditions map[string][]any) XoTestsDemoWorkItemSelectConfigOption {
	return func(s *XoTestsDemoWorkItemSelectConfig) {
		s.having = conditions
	}
}

const xoTestsDemoWorkItemTableWorkItemJoinSQL = `-- O2O join generated from "demo_work_items_work_item_id_fkey (inferred)"
left join xo_tests.work_items as _demo_work_items_work_item_id on _demo_work_items_work_item_id.work_item_id = demo_work_items.work_item_id
`

const xoTestsDemoWorkItemTableWorkItemSelectSQL = `(case when _demo_work_items_work_item_id.work_item_id is not null then row(_demo_work_items_work_item_id.*) end) as work_item_work_item_id`

const xoTestsDemoWorkItemTableWorkItemGroupBySQL = `_demo_work_items_work_item_id.work_item_id,
      _demo_work_items_work_item_id.work_item_id,
	demo_work_items.work_item_id`

// XoTestsDemoWorkItemUpdateParams represents update params for 'xo_tests.demo_work_items'.
type XoTestsDemoWorkItemUpdateParams struct {
	Checked *bool `json:"checked" nullable:"false"` // checked
}

// SetUpdateParams updates xo_tests.demo_work_items struct fields with the specified params.
func (xtdwi *XoTestsDemoWorkItem) SetUpdateParams(params *XoTestsDemoWorkItemUpdateParams) {
	if params.Checked != nil {
		xtdwi.Checked = *params.Checked
	}
}

// Insert inserts the XoTestsDemoWorkItem to the database.
func (xtdwi *XoTestsDemoWorkItem) Insert(ctx context.Context, db DB) (*XoTestsDemoWorkItem, error) {
	// insert (manual)
	sqlstr := `INSERT INTO xo_tests.demo_work_items (
	checked, work_item_id
	) VALUES (
	$1, $2
	)
	 RETURNING * `
	// run
	logf(sqlstr, xtdwi.Checked, xtdwi.WorkItemID)
	rows, err := db.Query(ctx, sqlstr, xtdwi.Checked, xtdwi.WorkItemID)
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsDemoWorkItem/Insert/db.Query: %w", &XoError{Entity: "Demo work item", Err: err}))
	}
	newxtdwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[XoTestsDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsDemoWorkItem/Insert/pgx.CollectOneRow: %w", &XoError{Entity: "Demo work item", Err: err}))
	}
	*xtdwi = newxtdwi

	return xtdwi, nil
}

// Update updates a XoTestsDemoWorkItem in the database.
func (xtdwi *XoTestsDemoWorkItem) Update(ctx context.Context, db DB) (*XoTestsDemoWorkItem, error) {
	// update with composite primary key
	sqlstr := `UPDATE xo_tests.demo_work_items SET 
	checked = $1 
	WHERE work_item_id = $2 
	RETURNING * `
	// run
	logf(sqlstr, xtdwi.Checked, xtdwi.WorkItemID)

	rows, err := db.Query(ctx, sqlstr, xtdwi.Checked, xtdwi.WorkItemID)
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsDemoWorkItem/Update/db.Query: %w", &XoError{Entity: "Demo work item", Err: err}))
	}
	newxtdwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[XoTestsDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsDemoWorkItem/Update/pgx.CollectOneRow: %w", &XoError{Entity: "Demo work item", Err: err}))
	}
	*xtdwi = newxtdwi

	return xtdwi, nil
}

// Upsert upserts a XoTestsDemoWorkItem in the database.
// Requires appropriate PK(s) to be set beforehand.
func (xtdwi *XoTestsDemoWorkItem) Upsert(ctx context.Context, db DB, params *XoTestsDemoWorkItemCreateParams) (*XoTestsDemoWorkItem, error) {
	var err error

	xtdwi.Checked = params.Checked
	xtdwi.WorkItemID = params.WorkItemID

	xtdwi, err = xtdwi.Insert(ctx, db)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code != pgerrcode.UniqueViolation {
				return nil, fmt.Errorf("UpsertXoTestsDemoWorkItem/Insert: %w", &XoError{Entity: "Demo work item", Err: err})
			}
			xtdwi, err = xtdwi.Update(ctx, db)
			if err != nil {
				return nil, fmt.Errorf("UpsertXoTestsDemoWorkItem/Update: %w", &XoError{Entity: "Demo work item", Err: err})
			}
		}
	}

	return xtdwi, err
}

// Delete deletes the XoTestsDemoWorkItem from the database.
func (xtdwi *XoTestsDemoWorkItem) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM xo_tests.demo_work_items 
	WHERE work_item_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, xtdwi.WorkItemID); err != nil {
		return logerror(err)
	}
	return nil
}

// XoTestsDemoWorkItemPaginated returns a cursor-paginated list of XoTestsDemoWorkItem.
// At least one cursor is required.
func XoTestsDemoWorkItemPaginated(ctx context.Context, db DB, cursor PaginationCursor, opts ...XoTestsDemoWorkItemSelectConfigOption) ([]XoTestsDemoWorkItem, error) {
	c := &XoTestsDemoWorkItemSelectConfig{
		joins:   XoTestsDemoWorkItemJoins{},
		filters: make(map[string][]any),
		having:  make(map[string][]any),
		orderBy: make(map[string]Direction),
	}

	for _, o := range opts {
		o(c)
	}

	if cursor.Value == nil {
		return nil, logerror(fmt.Errorf("XoTestsUser/Paginated/cursorValue: %w", &XoError{Entity: "User", Err: fmt.Errorf("no cursor value for column: %s", cursor.Column)}))
	}
	field, ok := XoTestsEntityFields[XoTestsTableEntityXoTestsDemoWorkItem][cursor.Column]
	if !ok {
		return nil, logerror(fmt.Errorf("XoTestsDemoWorkItem/Paginated/cursor: %w", &XoError{Entity: "Demo work item", Err: fmt.Errorf("invalid cursor column: %s", cursor.Column)}))
	}

	op := "<"
	if cursor.Direction == DirectionAsc {
		op = ">"
	}
	c.filters[fmt.Sprintf("demo_work_items.%s %s $i", field.Db, op)] = []any{*cursor.Value}
	c.orderBy[field.Db] = cursor.Direction // no need to duplicate opts

	paramStart := 0 // all filters will come from the user
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters += " where " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderByClause := ""
	if len(c.orderBy) > 0 {
		orderByClause += " order by "
	} else {
		return nil, logerror(fmt.Errorf("XoTestsDemoWorkItem/Paginated/orderBy: %w", &XoError{Entity: "Demo work item", Err: fmt.Errorf("at least one sorted column is required")}))
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderByClause += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.WorkItem {
		selectClauses = append(selectClauses, xoTestsDemoWorkItemTableWorkItemSelectSQL)
		joinClauses = append(joinClauses, xoTestsDemoWorkItemTableWorkItemJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsDemoWorkItemTableWorkItemGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	demo_work_items.checked,
	demo_work_items.work_item_id %s 
	 FROM xo_tests.demo_work_items %s 
	 %s  %s %s %s`, selects, joins, filters, groupByClause, havingClause, orderByClause)
	sqlstr += c.limit
	sqlstr = "/* XoTestsDemoWorkItemPaginated */\n" + sqlstr

	// run

	rows, err := db.Query(ctx, sqlstr, append(filterParams, havingParams...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsDemoWorkItem/Paginated/db.Query: %w", &XoError{Entity: "Demo work item", Err: err}))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[XoTestsDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsDemoWorkItem/Paginated/pgx.CollectRows: %w", &XoError{Entity: "Demo work item", Err: err}))
	}
	return res, nil
}

// XoTestsDemoWorkItemByWorkItemID retrieves a row from 'xo_tests.demo_work_items' as a XoTestsDemoWorkItem.
//
// Generated from index 'demo_work_items_pkey'.
func XoTestsDemoWorkItemByWorkItemID(ctx context.Context, db DB, workItemID XoTestsWorkItemID, opts ...XoTestsDemoWorkItemSelectConfigOption) (*XoTestsDemoWorkItem, error) {
	c := &XoTestsDemoWorkItemSelectConfig{joins: XoTestsDemoWorkItemJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderBy := ""
	if len(c.orderBy) > 0 {
		orderBy += " order by "
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderBy += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.WorkItem {
		selectClauses = append(selectClauses, xoTestsDemoWorkItemTableWorkItemSelectSQL)
		joinClauses = append(joinClauses, xoTestsDemoWorkItemTableWorkItemJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsDemoWorkItemTableWorkItemGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	demo_work_items.checked,
	demo_work_items.work_item_id %s 
	 FROM xo_tests.demo_work_items %s 
	 WHERE demo_work_items.work_item_id = $1
	 %s   %s 
  %s 
`, selects, joins, filters, groupByClause, havingClause)
	sqlstr += orderBy
	sqlstr += c.limit
	sqlstr = "/* XoTestsDemoWorkItemByWorkItemID */\n" + sqlstr

	// run
	// logf(sqlstr, workItemID)
	rows, err := db.Query(ctx, sqlstr, append([]any{workItemID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("demo_work_items/DemoWorkItemByWorkItemID/db.Query: %w", &XoError{Entity: "Demo work item", Err: err}))
	}
	xtdwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[XoTestsDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("demo_work_items/DemoWorkItemByWorkItemID/pgx.CollectOneRow: %w", &XoError{Entity: "Demo work item", Err: err}))
	}

	return &xtdwi, nil
}

// FKWorkItem_WorkItemID returns the WorkItem associated with the XoTestsDemoWorkItem's (WorkItemID).
//
// Generated from foreign key 'demo_work_items_work_item_id_fkey'.
func (xtdwi *XoTestsDemoWorkItem) FKWorkItem_WorkItemID(ctx context.Context, db DB) (*XoTestsWorkItem, error) {
	return XoTestsWorkItemByWorkItemID(ctx, db, xtdwi.WorkItemID)
}

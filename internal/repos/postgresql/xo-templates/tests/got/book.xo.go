package got

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
)

// Book represents a row from 'public.books'.
// Change properties via SQL column comments, joined with ",":
//   - "property:private" to exclude a field from JSON.
//   - "type:<pkg.type>" to override the type annotation.
//   - "cardinality:O2O|O2M|M2O|M2M" to generate joins (not executed by default).
type Book struct {
	BookID int    `json:"bookID" db:"book_id" required:"true"` // book_id
	Name   string `json:"name" db:"name" required:"true"`      // name

	AuthorsJoin    *[]Book_Author `json:"-" db:"authors" openapi-go:"ignore"`     // M2M
	BookReviewJoin *BookReview    `json:"-" db:"book_review" openapi-go:"ignore"` // O2O (inferred O2O - modify via `cardinality:` column comment)
	// xo fields
	_exists, _deleted bool
}

// BookCreateParams represents insert params for 'public.books'
type BookCreateParams struct {
	Name string `json:"name"` // name
}

// BookUpdateParams represents update params for 'public.books'
type BookUpdateParams struct {
	Name *string `json:"name"` // name
}

type BookSelectConfig struct {
	limit   string
	orderBy string
	joins   BookJoins
}
type BookSelectConfigOption func(*BookSelectConfig)

// WithBookLimit limits row selection.
func WithBookLimit(limit int) BookSelectConfigOption {
	return func(s *BookSelectConfig) {
		s.limit = fmt.Sprintf(" limit %d ", limit)
	}
}

type BookOrderBy = string

type BookJoins struct {
	Authors    bool
	BookReview bool
}

// WithBookJoin joins with the given tables.
func WithBookJoin(joins BookJoins) BookSelectConfigOption {
	return func(s *BookSelectConfig) {
		s.joins = joins
	}
}

type Book_Author struct {
	User User `json:"user" db:"users"`
}

// Insert inserts the Book to the database.
func (b *Book) Insert(ctx context.Context, db DB) (*Book, error) {
	switch {
	case b._exists: // already exists
		return nil, logerror(&ErrInsertFailed{ErrAlreadyExists})
	case b._deleted: // deleted
		return nil, logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO public.books (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING * `
	// run
	logf(sqlstr, b.Name)

	rows, err := db.Query(ctx, sqlstr, b.Name)
	if err != nil {
		return nil, logerror(fmt.Errorf("Book/Insert/db.Query: %w", err))
	}
	newb, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[Book])
	if err != nil {
		return nil, logerror(fmt.Errorf("Book/Insert/pgx.CollectOneRow: %w", err))
	}

	newb._exists = true
	*b = newb

	return b, nil
}

// Update updates a Book in the database.
func (b *Book) Update(ctx context.Context, db DB) (*Book, error) {
	switch {
	case !b._exists: // doesn't exist
		return nil, logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case b._deleted: // deleted
		return nil, logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	sqlstr := `UPDATE public.books SET ` +
		`name = $1 ` +
		`WHERE book_id = $2 ` +
		`RETURNING * `
	// run
	logf(sqlstr, b.Name, b.BookID)

	rows, err := db.Query(ctx, sqlstr, b.Name, b.BookID)
	if err != nil {
		return nil, logerror(fmt.Errorf("Book/Update/db.Query: %w", err))
	}
	newb, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[Book])
	if err != nil {
		return nil, logerror(fmt.Errorf("Book/Update/pgx.CollectOneRow: %w", err))
	}
	newb._exists = true
	*b = newb

	return b, nil
}

// Save saves the Book to the database.
func (b *Book) Save(ctx context.Context, db DB) (*Book, error) {
	if b._exists {
		return b.Update(ctx, db)
	}
	return b.Insert(ctx, db)
}

// Upsert performs an upsert for Book.
func (b *Book) Upsert(ctx context.Context, db DB) error {
	switch {
	case b._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	sqlstr := `INSERT INTO public.books (` +
		`book_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (book_id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name ` +
		` RETURNING * `
	// run
	logf(sqlstr, b.BookID, b.Name)
	if _, err := db.Exec(ctx, sqlstr, b.BookID, b.Name); err != nil {
		return logerror(err)
	}
	// set exists
	b._exists = true
	return nil
}

// Delete deletes the Book from the database.
func (b *Book) Delete(ctx context.Context, db DB) error {
	switch {
	case !b._exists: // doesn't exist
		return nil
	case b._deleted: // deleted
		return nil
	}
	// delete with single primary key
	sqlstr := `DELETE FROM public.books ` +
		`WHERE book_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, b.BookID); err != nil {
		return logerror(err)
	}
	// set deleted
	b._deleted = true
	return nil
}

// BookByBookID retrieves a row from 'public.books' as a Book.
//
// Generated from index 'books_pkey'.
func BookByBookID(ctx context.Context, db DB, bookID int, opts ...BookSelectConfigOption) (*Book, error) {
	c := &BookSelectConfig{joins: BookJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`books.book_id,
books.name,
(case when $1::boolean = true then COALESCE(joined_author_ids.__author_ids, '{}') end) as author_ids,
(case when $2::boolean = true and book_reviews.book_id is not null then row(book_reviews.*) end) as book_review ` +
		`FROM public.books ` +
		`-- M2M join generated from "book_authors_author_id_fkey"
left join (
	select
			book_authors.book_id as book_authors_book_id
			, array_agg(users.*) filter (where users.* is not null) as __author_ids
		from book_authors
    	join users on users.user_id = book_authors.author_id
    group by book_authors_book_id
  ) as joined_author_ids on joined_author_ids.book_authors_book_id = books.book_id

-- O2O join generated from "book_reviews_book_id_fkey"
left join book_reviews on book_reviews.book_id = books.book_id` +
		` WHERE books.book_id = $3 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, bookID)
	rows, err := db.Query(ctx, sqlstr, c.joins.Authors, c.joins.BookReview, bookID)
	if err != nil {
		return nil, logerror(fmt.Errorf("books/BookByBookID/db.Query: %w", err))
	}
	b, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[Book])
	if err != nil {
		return nil, logerror(fmt.Errorf("books/BookByBookID/pgx.CollectOneRow: %w", err))
	}
	b._exists = true

	return &b, nil
}

package got

// Code generated by xo. DO NOT EDIT.

import (
	"fmt"
)

// XoTestsCacheDemoWorkItem represents a row from 'xo_tests_cache.demo_work_items'.
// Change properties via SQL column comments, joined with " && ":
//   - "properties":<p1>,<p2>,...
//     -- private to exclude a field from JSON.
//     -- not-required to make a schema field not required.
//     -- hidden to exclude field from OpenAPI generation.
//   - "type":<pkg.type> to override the type annotation. An openapi schema named <type> must exist.
//   - "cardinality":<O2O|M2O|M2M> to generate/override joins explicitly. Only O2O is inferred.
//   - "tags":<tags> to append literal struct tag strings.
type XoTestsCacheDemoWorkItem struct {
	WorkItemID XoTestsWorkItemID `json:"workItemID" db:"work_item_id" required:"true" nullable:"false" ref:"#/components/schemas/DbXoTestsWorkItemID"` // work_item_id
	Title      *string           `json:"title" db:"title"`                                                                                             // title
}

type XoTestsCacheDemoWorkItemSelectConfig struct {
	limit   string
	orderBy string
	joins   XoTestsCacheDemoWorkItemJoins
	filters map[string][]any
	having  map[string][]any
}
type XoTestsCacheDemoWorkItemSelectConfigOption func(*XoTestsCacheDemoWorkItemSelectConfig)

// WithXoTestsCacheDemoWorkItemLimit limits row selection.
func WithXoTestsCacheDemoWorkItemLimit(limit int) XoTestsCacheDemoWorkItemSelectConfigOption {
	return func(s *XoTestsCacheDemoWorkItemSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

type XoTestsCacheDemoWorkItemOrderBy string

type XoTestsCacheDemoWorkItemJoins struct{}

// WithXoTestsCacheDemoWorkItemJoin joins with the given tables.
func WithXoTestsCacheDemoWorkItemJoin(joins XoTestsCacheDemoWorkItemJoins) XoTestsCacheDemoWorkItemSelectConfigOption {
	return func(s *XoTestsCacheDemoWorkItemSelectConfig) {
		s.joins = XoTestsCacheDemoWorkItemJoins{}
	}
}

// WithXoTestsCacheDemoWorkItemFilters adds the given WHERE clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	filters := map[string][]any{
//		"NOT (col.name = any ($i))": {[]string{"excl_name_1", "excl_name_2"}},
//		`(col.created_at > $i OR
//		col.is_closed = $i)`: {time.Now().Add(-24 * time.Hour), true},
//	}
func WithXoTestsCacheDemoWorkItemFilters(filters map[string][]any) XoTestsCacheDemoWorkItemSelectConfigOption {
	return func(s *XoTestsCacheDemoWorkItemSelectConfig) {
		s.filters = filters
	}
}

// WithXoTestsCacheDemoWorkItemHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	// filter a given aggregate of assigned users to return results where at least one of them has id of userId
//	filters := map[string][]any{
//	"$i = ANY(ARRAY_AGG(assigned_users_join.user_id))": {userId},
//	}
func WithXoTestsCacheDemoWorkItemHavingClause(conditions map[string][]any) XoTestsCacheDemoWorkItemSelectConfigOption {
	return func(s *XoTestsCacheDemoWorkItemSelectConfig) {
		s.having = conditions
	}
}

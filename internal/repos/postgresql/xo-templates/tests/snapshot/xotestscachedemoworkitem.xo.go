// Code generated by xo. DO NOT EDIT.

//lint:ignore

package got

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"

	models "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5"
)

// XoTestsCacheDemoWorkItem represents a row from 'xo_tests.cache__demo_work_items'.
// Change properties via SQL column comments, joined with " && ":
//   - "properties":<p1>,<p2>,...
//     -- private: exclude a field from JSON.
//     -- not-required: make a schema field not required.
//     -- hidden: exclude field from OpenAPI generation.
//     -- refs-ignore: generate a field whose constraints are ignored by the referenced table,
//     i.e. no joins will be generated.
//     -- share-ref-constraints: for a FK column, it will generate the same M2O and M2M join fields the ref column has.
//   - "type":<pkg.type> to override the type annotation. An openapi schema named <type> must exist.
//   - "cardinality":<O2O|M2O|M2M> to generate/override joins explicitly. Only O2O is inferred.
//   - "tags":<tags> to append literal struct tag strings.
type XoTestsCacheDemoWorkItem struct {
	WorkItemID XoTestsWorkItemID `json:"workItemID" db:"work_item_id" required:"true" nullable:"false"` // work_item_id
	Title      *string           `json:"title" db:"title"`                                              // title
	TeamID     XoTestsTeamID     `json:"teamID" db:"team_id" required:"true" nullable:"false"`          // team_id

	TeamJoin             *XoTestsTeam                              `json:"-" db:"team_team_id" openapi-go:"ignore"`                 // O2O teams (inferred)
	TimeEntriesJoin      *[]XoTestsTimeEntry                       `json:"-" db:"time_entries" openapi-go:"ignore"`                 // M2O cache__demo_work_items
	AssigneesJoin        *[]XoTestsCacheDemoWorkItemM2MAssigneeWIA `json:"-" db:"work_item_assignee_assignees" openapi-go:"ignore"` // M2M work_item_assignee
	WorkItemCommentsJoin *[]XoTestsWorkItemComment                 `json:"-" db:"work_item_comments" openapi-go:"ignore"`           // M2O cache__demo_work_items
}

// XoTestsCacheDemoWorkItemCreateParams represents insert params for 'xo_tests.cache__demo_work_items'.
type XoTestsCacheDemoWorkItemCreateParams struct {
	TeamID     XoTestsTeamID     `json:"teamID" required:"true" nullable:"false"` // team_id
	Title      *string           `json:"title"`                                   // title
	WorkItemID XoTestsWorkItemID `json:"-" required:"true" nullable:"false"`      // work_item_id
}

// XoTestsCacheDemoWorkItemParams represents common params for both insert and update of 'xo_tests.cache__demo_work_items'.
type XoTestsCacheDemoWorkItemParams interface {
	GetTeamID() *XoTestsTeamID
	GetTitle() *string
}

func (p XoTestsCacheDemoWorkItemCreateParams) GetTeamID() *XoTestsTeamID {
	x := p.TeamID
	return &x
}

func (p XoTestsCacheDemoWorkItemUpdateParams) GetTeamID() *XoTestsTeamID {
	return p.TeamID
}

func (p XoTestsCacheDemoWorkItemCreateParams) GetTitle() *string {
	return p.Title
}

func (p XoTestsCacheDemoWorkItemUpdateParams) GetTitle() *string {
	if p.Title != nil {
		return *p.Title
	}
	return nil
}

// CreateXoTestsCacheDemoWorkItem creates a new XoTestsCacheDemoWorkItem in the database with the given params.
func CreateXoTestsCacheDemoWorkItem(ctx context.Context, db DB, params *XoTestsCacheDemoWorkItemCreateParams) (*XoTestsCacheDemoWorkItem, error) {
	xtcdwi := &XoTestsCacheDemoWorkItem{
		TeamID:     params.TeamID,
		Title:      params.Title,
		WorkItemID: params.WorkItemID,
	}

	return xtcdwi.Insert(ctx, db)
}

type XoTestsCacheDemoWorkItemSelectConfig struct {
	limit   string
	orderBy map[string]models.Direction
	joins   XoTestsCacheDemoWorkItemJoins
	filters map[string][]any
	having  map[string][]any
}
type XoTestsCacheDemoWorkItemSelectConfigOption func(*XoTestsCacheDemoWorkItemSelectConfig)

// WithXoTestsCacheDemoWorkItemLimit limits row selection.
func WithXoTestsCacheDemoWorkItemLimit(limit int) XoTestsCacheDemoWorkItemSelectConfigOption {
	return func(s *XoTestsCacheDemoWorkItemSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

// WithXoTestsCacheDemoWorkItemOrderBy accumulates orders results by the given columns.
// A nil entry removes the existing column sort, if any.
func WithXoTestsCacheDemoWorkItemOrderBy(rows map[string]*models.Direction) XoTestsCacheDemoWorkItemSelectConfigOption {
	return func(s *XoTestsCacheDemoWorkItemSelectConfig) {
		te := XoTestsEntityFields[XoTestsTableEntityXoTestsCacheDemoWorkItem]
		for dbcol, dir := range rows {
			if _, ok := te[dbcol]; !ok {
				continue
			}
			if dir == nil {
				delete(s.orderBy, dbcol)
				continue
			}
			s.orderBy[dbcol] = *dir
		}
	}
}

type XoTestsCacheDemoWorkItemJoins struct {
	Team             bool `json:"team" required:"true" nullable:"false"`             // O2O teams
	TimeEntries      bool `json:"timeEntries" required:"true" nullable:"false"`      // M2O time_entries
	Assignees        bool `json:"assignees" required:"true" nullable:"false"`        // M2M work_item_assignee
	WorkItemComments bool `json:"workItemComments" required:"true" nullable:"false"` // M2O work_item_comments
}

// WithXoTestsCacheDemoWorkItemJoin joins with the given tables.
func WithXoTestsCacheDemoWorkItemJoin(joins XoTestsCacheDemoWorkItemJoins) XoTestsCacheDemoWorkItemSelectConfigOption {
	return func(s *XoTestsCacheDemoWorkItemSelectConfig) {
		s.joins = XoTestsCacheDemoWorkItemJoins{
			Team:             s.joins.Team || joins.Team,
			TimeEntries:      s.joins.TimeEntries || joins.TimeEntries,
			Assignees:        s.joins.Assignees || joins.Assignees,
			WorkItemComments: s.joins.WorkItemComments || joins.WorkItemComments,
		}
	}
}

// XoTestsCacheDemoWorkItemM2MAssigneeWIA represents a M2M join against "xo_tests.work_item_assignee"
type XoTestsCacheDemoWorkItemM2MAssigneeWIA struct {
	User XoTestsUser          `json:"user" db:"users" required:"true"`
	Role *XoTestsWorkItemRole `json:"role" db:"role" required:"true" ref:"#/components/schemas/WorkItemRole" `
}

// WithXoTestsCacheDemoWorkItemFilters adds the given WHERE clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	filters := map[string][]any{
//		"NOT (col.name = any ($i))": {[]string{"excl_name_1", "excl_name_2"}},
//		`(col.created_at > $i OR
//		col.is_closed = $i)`: {time.Now().Add(-24 * time.Hour), true},
//	}
func WithXoTestsCacheDemoWorkItemFilters(filters map[string][]any) XoTestsCacheDemoWorkItemSelectConfigOption {
	return func(s *XoTestsCacheDemoWorkItemSelectConfig) {
		s.filters = filters
	}
}

// WithXoTestsCacheDemoWorkItemHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
// WithUserHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	// filter a given aggregate of assigned users to return results where at least one of them has id of userId.
//	// See xo_join_* alias used by the join db tag in the SelectSQL string.
//	filters := map[string][]any{
//	"$i = ANY(ARRAY_AGG(xo_join_assigned_users_join.user_id))": {userId},
//	}
func WithXoTestsCacheDemoWorkItemHavingClause(conditions map[string][]any) XoTestsCacheDemoWorkItemSelectConfigOption {
	return func(s *XoTestsCacheDemoWorkItemSelectConfig) {
		s.having = conditions
	}
}

const xoTestsCacheDemoWorkItemTableTeamJoinSQL = `-- O2O join generated from "cache__demo_work_items_team_id_fkey (inferred)"
left join xo_tests.teams as _cache__demo_work_items_team_id on _cache__demo_work_items_team_id.team_id = cache__demo_work_items.team_id
`

const xoTestsCacheDemoWorkItemTableTeamSelectSQL = `(case when _cache__demo_work_items_team_id.team_id is not null then row(_cache__demo_work_items_team_id.*) end) as team_team_id`

const xoTestsCacheDemoWorkItemTableTeamGroupBySQL = `_cache__demo_work_items_team_id.team_id,
      _cache__demo_work_items_team_id.team_id,
	cache__demo_work_items.work_item_id`

const xoTestsCacheDemoWorkItemTableTimeEntriesJoinSQL = `-- M2O join generated from "time_entries_work_item_id_fkey-shared-ref-cache__demo_work_items"
left join (
  select
  work_item_id as time_entries_work_item_id
    , row(time_entries.*) as __time_entries
  from
    xo_tests.time_entries
  group by
	  time_entries_work_item_id, xo_tests.time_entries.time_entry_id
) as xo_join_time_entries on xo_join_time_entries.time_entries_work_item_id = cache__demo_work_items.work_item_id
`

const xoTestsCacheDemoWorkItemTableTimeEntriesSelectSQL = `COALESCE(ARRAY_AGG( DISTINCT (xo_join_time_entries.__time_entries)) filter (where xo_join_time_entries.time_entries_work_item_id is not null), '{}') as time_entries`

const xoTestsCacheDemoWorkItemTableTimeEntriesGroupBySQL = `cache__demo_work_items.work_item_id`

const xoTestsCacheDemoWorkItemTableAssigneesJoinSQL = `-- M2M join generated from "work_item_assignee_assignee_fkey-shared-ref-cache__demo_work_items"
left join (
	select
		work_item_assignee.work_item_id as work_item_assignee_work_item_id
		, work_item_assignee.role as role
		, users.user_id as __users_user_id
		, row(users.*) as __users
	from
		xo_tests.work_item_assignee
	join xo_tests.users on users.user_id = work_item_assignee.assignee
	group by
		work_item_assignee_work_item_id
		, users.user_id
		, role
) as xo_join_work_item_assignee_assignees on xo_join_work_item_assignee_assignees.work_item_assignee_work_item_id = cache__demo_work_items.work_item_id
`

const xoTestsCacheDemoWorkItemTableAssigneesSelectSQL = `COALESCE(
		ARRAY_AGG( DISTINCT (
		xo_join_work_item_assignee_assignees.__users
		, xo_join_work_item_assignee_assignees.role
		)) filter (where xo_join_work_item_assignee_assignees.__users_user_id is not null), '{}') as work_item_assignee_assignees`

const xoTestsCacheDemoWorkItemTableAssigneesGroupBySQL = `cache__demo_work_items.work_item_id, cache__demo_work_items.work_item_id`

const xoTestsCacheDemoWorkItemTableWorkItemCommentsJoinSQL = `-- M2O join generated from "work_item_comments_work_item_id_fkey-shared-ref-cache__demo_work_items"
left join (
  select
  work_item_id as work_item_comments_work_item_id
    , row(work_item_comments.*) as __work_item_comments
  from
    xo_tests.work_item_comments
  group by
	  work_item_comments_work_item_id, xo_tests.work_item_comments.work_item_comment_id
) as xo_join_work_item_comments on xo_join_work_item_comments.work_item_comments_work_item_id = cache__demo_work_items.work_item_id
`

const xoTestsCacheDemoWorkItemTableWorkItemCommentsSelectSQL = `COALESCE(ARRAY_AGG( DISTINCT (xo_join_work_item_comments.__work_item_comments)) filter (where xo_join_work_item_comments.work_item_comments_work_item_id is not null), '{}') as work_item_comments`

const xoTestsCacheDemoWorkItemTableWorkItemCommentsGroupBySQL = `cache__demo_work_items.work_item_id`

// XoTestsCacheDemoWorkItemUpdateParams represents update params for 'xo_tests.cache__demo_work_items'.
type XoTestsCacheDemoWorkItemUpdateParams struct {
	TeamID *XoTestsTeamID `json:"teamID" nullable:"false"` // team_id
	Title  **string       `json:"title"`                   // title
}

// SetUpdateParams updates xo_tests.cache__demo_work_items struct fields with the specified params.
func (xtcdwi *XoTestsCacheDemoWorkItem) SetUpdateParams(params *XoTestsCacheDemoWorkItemUpdateParams) {
	if params.TeamID != nil {
		xtcdwi.TeamID = *params.TeamID
	}
	if params.Title != nil {
		xtcdwi.Title = *params.Title
	}
}

// Insert inserts the XoTestsCacheDemoWorkItem to the database.
func (xtcdwi *XoTestsCacheDemoWorkItem) Insert(ctx context.Context, db DB) (*XoTestsCacheDemoWorkItem, error) {
	// insert (manual)
	sqlstr := `INSERT INTO xo_tests.cache__demo_work_items (
	team_id, title, work_item_id
	) VALUES (
	$1, $2, $3
	)
	 RETURNING * `
	// run
	logf(sqlstr, xtcdwi.TeamID, xtcdwi.Title, xtcdwi.WorkItemID)
	rows, err := db.Query(ctx, sqlstr, xtcdwi.TeamID, xtcdwi.Title, xtcdwi.WorkItemID)
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsCacheDemoWorkItem/Insert/db.Query: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	newxtcdwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[XoTestsCacheDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsCacheDemoWorkItem/Insert/pgx.CollectOneRow: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	*xtcdwi = newxtcdwi

	return xtcdwi, nil
}

// Update updates a XoTestsCacheDemoWorkItem in the database.
func (xtcdwi *XoTestsCacheDemoWorkItem) Update(ctx context.Context, db DB) (*XoTestsCacheDemoWorkItem, error) {
	// update with composite primary key
	sqlstr := `UPDATE xo_tests.cache__demo_work_items SET 
	team_id = $1, title = $2 
	WHERE work_item_id = $3 
	RETURNING * `
	// run
	logf(sqlstr, xtcdwi.TeamID, xtcdwi.Title, xtcdwi.WorkItemID)

	rows, err := db.Query(ctx, sqlstr, xtcdwi.TeamID, xtcdwi.Title, xtcdwi.WorkItemID)
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsCacheDemoWorkItem/Update/db.Query: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	newxtcdwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[XoTestsCacheDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsCacheDemoWorkItem/Update/pgx.CollectOneRow: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	*xtcdwi = newxtcdwi

	return xtcdwi, nil
}

// Upsert upserts a XoTestsCacheDemoWorkItem in the database.
// Requires appropriate PK(s) to be set beforehand.
func (xtcdwi *XoTestsCacheDemoWorkItem) Upsert(ctx context.Context, db DB, params *XoTestsCacheDemoWorkItemCreateParams) (*XoTestsCacheDemoWorkItem, error) {
	var err error

	xtcdwi.TeamID = params.TeamID
	xtcdwi.Title = params.Title
	xtcdwi.WorkItemID = params.WorkItemID

	xtcdwi, err = xtcdwi.Insert(ctx, db)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code != pgerrcode.UniqueViolation {
				return nil, fmt.Errorf("UpsertXoTestsCacheDemoWorkItem/Insert: %w", &XoError{Entity: "Cache  demo work item", Err: err})
			}
			xtcdwi, err = xtcdwi.Update(ctx, db)
			if err != nil {
				return nil, fmt.Errorf("UpsertXoTestsCacheDemoWorkItem/Update: %w", &XoError{Entity: "Cache  demo work item", Err: err})
			}
		}
	}

	return xtcdwi, err
}

// Delete deletes the XoTestsCacheDemoWorkItem from the database.
func (xtcdwi *XoTestsCacheDemoWorkItem) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM xo_tests.cache__demo_work_items 
	WHERE work_item_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, xtcdwi.WorkItemID); err != nil {
		return logerror(err)
	}
	return nil
}

// XoTestsCacheDemoWorkItemPaginated returns a cursor-paginated list of XoTestsCacheDemoWorkItem.
// At least one cursor is required.
func XoTestsCacheDemoWorkItemPaginated(ctx context.Context, db DB, cursor models.PaginationCursor, opts ...XoTestsCacheDemoWorkItemSelectConfigOption) ([]XoTestsCacheDemoWorkItem, error) {
	c := &XoTestsCacheDemoWorkItemSelectConfig{
		joins:   XoTestsCacheDemoWorkItemJoins{},
		filters: make(map[string][]any),
		having:  make(map[string][]any),
		orderBy: make(map[string]models.Direction),
	}

	for _, o := range opts {
		o(c)
	}

	if cursor.Value == nil {
		return nil, logerror(fmt.Errorf("XoTestsUser/Paginated/cursorValue: %w", &XoError{Entity: "User", Err: fmt.Errorf("no cursor value for column: %s", cursor.Column)}))
	}
	field, ok := XoTestsEntityFields[XoTestsTableEntityXoTestsCacheDemoWorkItem][cursor.Column]
	if !ok {
		return nil, logerror(fmt.Errorf("XoTestsCacheDemoWorkItem/Paginated/cursor: %w", &XoError{Entity: "Cache  demo work item", Err: fmt.Errorf("invalid cursor column: %s", cursor.Column)}))
	}

	op := "<"
	if cursor.Direction == models.DirectionAsc {
		op = ">"
	}
	c.filters[fmt.Sprintf("cache__demo_work_items.%s %s $i", field.Db, op)] = []any{*cursor.Value}
	c.orderBy[field.Db] = cursor.Direction // no need to duplicate opts

	paramStart := 0 // all filters will come from the user
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters += " where " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderByClause := ""
	if len(c.orderBy) > 0 {
		orderByClause += " order by "
	} else {
		return nil, logerror(fmt.Errorf("XoTestsCacheDemoWorkItem/Paginated/orderBy: %w", &XoError{Entity: "Cache  demo work item", Err: fmt.Errorf("at least one sorted column is required")}))
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderByClause += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Team {
		selectClauses = append(selectClauses, xoTestsCacheDemoWorkItemTableTeamSelectSQL)
		joinClauses = append(joinClauses, xoTestsCacheDemoWorkItemTableTeamJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsCacheDemoWorkItemTableTeamGroupBySQL)
	}

	if c.joins.TimeEntries {
		selectClauses = append(selectClauses, xoTestsCacheDemoWorkItemTableTimeEntriesSelectSQL)
		joinClauses = append(joinClauses, xoTestsCacheDemoWorkItemTableTimeEntriesJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsCacheDemoWorkItemTableTimeEntriesGroupBySQL)
	}

	if c.joins.Assignees {
		selectClauses = append(selectClauses, xoTestsCacheDemoWorkItemTableAssigneesSelectSQL)
		joinClauses = append(joinClauses, xoTestsCacheDemoWorkItemTableAssigneesJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsCacheDemoWorkItemTableAssigneesGroupBySQL)
	}

	if c.joins.WorkItemComments {
		selectClauses = append(selectClauses, xoTestsCacheDemoWorkItemTableWorkItemCommentsSelectSQL)
		joinClauses = append(joinClauses, xoTestsCacheDemoWorkItemTableWorkItemCommentsJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsCacheDemoWorkItemTableWorkItemCommentsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	cache__demo_work_items.team_id,
	cache__demo_work_items.title,
	cache__demo_work_items.work_item_id %s 
	 FROM xo_tests.cache__demo_work_items %s 
	 %s  %s %s %s`, selects, joins, filters, groupByClause, havingClause, orderByClause)
	sqlstr += c.limit
	sqlstr = "/* XoTestsCacheDemoWorkItemPaginated */\n" + sqlstr

	// run

	rows, err := db.Query(ctx, sqlstr, append(filterParams, havingParams...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsCacheDemoWorkItem/Paginated/db.Query: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[XoTestsCacheDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("XoTestsCacheDemoWorkItem/Paginated/pgx.CollectRows: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	return res, nil
}

// XoTestsCacheDemoWorkItemByWorkItemID retrieves a row from 'xo_tests.cache__demo_work_items' as a XoTestsCacheDemoWorkItem.
//
// Generated from index 'cache__demo_work_items_pkey'.
func XoTestsCacheDemoWorkItemByWorkItemID(ctx context.Context, db DB, workItemID int, opts ...XoTestsCacheDemoWorkItemSelectConfigOption) (*XoTestsCacheDemoWorkItem, error) {
	c := &XoTestsCacheDemoWorkItemSelectConfig{joins: XoTestsCacheDemoWorkItemJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderBy := ""
	if len(c.orderBy) > 0 {
		orderBy += " order by "
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderBy += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Team {
		selectClauses = append(selectClauses, xoTestsCacheDemoWorkItemTableTeamSelectSQL)
		joinClauses = append(joinClauses, xoTestsCacheDemoWorkItemTableTeamJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsCacheDemoWorkItemTableTeamGroupBySQL)
	}

	if c.joins.TimeEntries {
		selectClauses = append(selectClauses, xoTestsCacheDemoWorkItemTableTimeEntriesSelectSQL)
		joinClauses = append(joinClauses, xoTestsCacheDemoWorkItemTableTimeEntriesJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsCacheDemoWorkItemTableTimeEntriesGroupBySQL)
	}

	if c.joins.Assignees {
		selectClauses = append(selectClauses, xoTestsCacheDemoWorkItemTableAssigneesSelectSQL)
		joinClauses = append(joinClauses, xoTestsCacheDemoWorkItemTableAssigneesJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsCacheDemoWorkItemTableAssigneesGroupBySQL)
	}

	if c.joins.WorkItemComments {
		selectClauses = append(selectClauses, xoTestsCacheDemoWorkItemTableWorkItemCommentsSelectSQL)
		joinClauses = append(joinClauses, xoTestsCacheDemoWorkItemTableWorkItemCommentsJoinSQL)
		groupByClauses = append(groupByClauses, xoTestsCacheDemoWorkItemTableWorkItemCommentsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	cache__demo_work_items.team_id,
	cache__demo_work_items.title,
	cache__demo_work_items.work_item_id %s 
	 FROM xo_tests.cache__demo_work_items %s 
	 WHERE cache__demo_work_items.work_item_id = $1
	 %s   %s 
  %s 
`, selects, joins, filters, groupByClause, havingClause)
	sqlstr += orderBy
	sqlstr += c.limit
	sqlstr = "/* XoTestsCacheDemoWorkItemByWorkItemID */\n" + sqlstr

	// run
	// logf(sqlstr, workItemID)
	rows, err := db.Query(ctx, sqlstr, append([]any{workItemID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("cache__demo_work_items/CacheDemoWorkItemByWorkItemID/db.Query: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	xtcdwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[XoTestsCacheDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("cache__demo_work_items/CacheDemoWorkItemByWorkItemID/pgx.CollectOneRow: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}

	return &xtcdwi, nil
}

// FKTeam_TeamID returns the Team associated with the XoTestsCacheDemoWorkItem's (TeamID).
//
// Generated from foreign key 'cache__demo_work_items_team_id_fkey'.
func (xtcdwi *XoTestsCacheDemoWorkItem) FKTeam_TeamID(ctx context.Context, db DB) (*XoTestsTeam, error) {
	return XoTestsTeamByTeamID(ctx, db, xtcdwi.TeamID)
}

// FKWorkItem_WorkItemID returns the WorkItem associated with the XoTestsCacheDemoWorkItem's (WorkItemID).
//
// Generated from foreign key 'cache__demo_work_items_work_item_id_fkey'.
func (xtcdwi *XoTestsCacheDemoWorkItem) FKWorkItem_WorkItemID(ctx context.Context, db DB) (*XoTestsWorkItem, error) {
	return XoTestsWorkItemByWorkItemID(ctx, db, xtcdwi.WorkItemID)
}

package got

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5"
)

// PagElement represents a row from 'xo_tests.pag_element'.
// Change properties via SQL column comments, joined with ",":
//   - "property:private" to exclude a field from JSON.
//   - "type:<pkg.type>" to override the type annotation.
//   - "cardinality:O2O|M2O|M2M" to generate joins (not executed by default).
type PagElement struct {
	PaginatedElementID uuid.UUID `json:"paginatedElementID" db:"paginated_element_id" required:"true"` // paginated_element_id
	Name               string    `json:"name" db:"name" required:"true"`                               // name
	CreatedAt          time.Time `json:"createdAt" db:"created_at" required:"true"`                    // created_at
	Dummy              *int      `json:"dummy" db:"dummy" required:"true"`                             // dummy
}

// PagElementCreateParams represents insert params for 'xo_tests.pag_element'.
type PagElementCreateParams struct {
	Name  string `json:"name" required:"true"`  // name
	Dummy *int   `json:"dummy" required:"true"` // dummy
}

// CreatePagElement creates a new PagElement in the database with the given params.
func CreatePagElement(ctx context.Context, db DB, params *PagElementCreateParams) (*PagElement, error) {
	pe := &PagElement{
		Name:  params.Name,
		Dummy: params.Dummy,
	}

	return pe.Insert(ctx, db)
}

// PagElementUpdateParams represents update params for 'xo_tests.pag_element'
type PagElementUpdateParams struct {
	Name  *string `json:"name" required:"true"`  // name
	Dummy **int   `json:"dummy" required:"true"` // dummy
}

// SetUpdateParams updates xo_tests.pag_element struct fields with the specified params.
func (pe *PagElement) SetUpdateParams(params *PagElementUpdateParams) {
	if params.Name != nil {
		pe.Name = *params.Name
	}
	if params.Dummy != nil {
		pe.Dummy = *params.Dummy
	}
}

type PagElementSelectConfig struct {
	limit   string
	orderBy string
	joins   PagElementJoins
}
type PagElementSelectConfigOption func(*PagElementSelectConfig)

// WithPagElementLimit limits row selection.
func WithPagElementLimit(limit int) PagElementSelectConfigOption {
	return func(s *PagElementSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

type PagElementOrderBy = string

const (
	PagElementCreatedAtDescNullsFirst PagElementOrderBy = " created_at DESC NULLS FIRST "
	PagElementCreatedAtDescNullsLast  PagElementOrderBy = " created_at DESC NULLS LAST "
	PagElementCreatedAtAscNullsFirst  PagElementOrderBy = " created_at ASC NULLS FIRST "
	PagElementCreatedAtAscNullsLast   PagElementOrderBy = " created_at ASC NULLS LAST "
)

// WithPagElementOrderBy orders results by the given columns.
func WithPagElementOrderBy(rows ...PagElementOrderBy) PagElementSelectConfigOption {
	return func(s *PagElementSelectConfig) {
		if len(rows) > 0 {
			s.orderBy = " order by "
			s.orderBy += strings.Join(rows, ", ")
		}
	}
}

type PagElementJoins struct{}

// WithPagElementJoin joins with the given tables.
func WithPagElementJoin(joins PagElementJoins) PagElementSelectConfigOption {
	return func(s *PagElementSelectConfig) {
		s.joins = PagElementJoins{}
	}
}

// Insert inserts the PagElement to the database.
func (pe *PagElement) Insert(ctx context.Context, db DB) (*PagElement, error) {
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO xo_tests.pag_element (` +
		`name, dummy` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING * `
	// run
	logf(sqlstr, pe.Name, pe.Dummy)

	rows, err := db.Query(ctx, sqlstr, pe.Name, pe.Dummy)
	if err != nil {
		return nil, logerror(fmt.Errorf("PagElement/Insert/db.Query: %w", err))
	}
	newpe, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[PagElement])
	if err != nil {
		return nil, logerror(fmt.Errorf("PagElement/Insert/pgx.CollectOneRow: %w", err))
	}

	*pe = newpe

	return pe, nil
}

// Update updates a PagElement in the database.
func (pe *PagElement) Update(ctx context.Context, db DB) (*PagElement, error) {
	// update with composite primary key
	sqlstr := `UPDATE xo_tests.pag_element SET ` +
		`name = $1, dummy = $2 ` +
		`WHERE paginated_element_id = $3 ` +
		`RETURNING * `
	// run
	logf(sqlstr, pe.Name, pe.CreatedAt, pe.Dummy, pe.PaginatedElementID)

	rows, err := db.Query(ctx, sqlstr, pe.Name, pe.Dummy, pe.PaginatedElementID)
	if err != nil {
		return nil, logerror(fmt.Errorf("PagElement/Update/db.Query: %w", err))
	}
	newpe, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[PagElement])
	if err != nil {
		return nil, logerror(fmt.Errorf("PagElement/Update/pgx.CollectOneRow: %w", err))
	}
	*pe = newpe

	return pe, nil
}

// Upsert upserts a PagElement in the database.
// Requires appropiate PK(s) to be set beforehand.
func (pe *PagElement) Upsert(ctx context.Context, db DB, params *PagElementCreateParams) (*PagElement, error) {
	var err error

	pe.Name = params.Name
	pe.Dummy = params.Dummy

	pe, err = pe.Insert(ctx, db)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code != pgerrcode.UniqueViolation {
				return nil, fmt.Errorf("UpsertUser/Insert: %w", err)
			}
			pe, err = pe.Update(ctx, db)
			if err != nil {
				return nil, fmt.Errorf("UpsertUser/Update: %w", err)
			}
		}
	}

	return pe, err
}

// Delete deletes the PagElement from the database.
func (pe *PagElement) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM xo_tests.pag_element ` +
		`WHERE paginated_element_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, pe.PaginatedElementID); err != nil {
		return logerror(err)
	}
	return nil
}

// PagElementPaginatedByCreatedAtAsc returns a cursor-paginated list of PagElement in Asc order.
func PagElementPaginatedByCreatedAtAsc(ctx context.Context, db DB, createdAt time.Time, opts ...PagElementSelectConfigOption) ([]PagElement, error) {
	c := &PagElementSelectConfig{joins: PagElementJoins{}}

	for _, o := range opts {
		o(c)
	}

	sqlstr := `SELECT ` +
		`pag_element.paginated_element_id,
pag_element.name,
pag_element.created_at,
pag_element.dummy ` +
		`FROM xo_tests.pag_element ` +
		`` +
		` WHERE pag_element.created_at > $1 ORDER BY 
		created_at Asc `
	sqlstr += c.limit

	// run

	rows, err := db.Query(ctx, sqlstr, createdAt)
	if err != nil {
		return nil, logerror(fmt.Errorf("PagElement/Paginated/Asc/db.Query: %w", err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[PagElement])
	if err != nil {
		return nil, logerror(fmt.Errorf("PagElement/Paginated/Asc/pgx.CollectRows: %w", err))
	}
	return res, nil
}

// PagElementPaginatedByCreatedAtDesc returns a cursor-paginated list of PagElement in Desc order.
func PagElementPaginatedByCreatedAtDesc(ctx context.Context, db DB, createdAt time.Time, opts ...PagElementSelectConfigOption) ([]PagElement, error) {
	c := &PagElementSelectConfig{joins: PagElementJoins{}}

	for _, o := range opts {
		o(c)
	}

	sqlstr := `SELECT ` +
		`pag_element.paginated_element_id,
pag_element.name,
pag_element.created_at,
pag_element.dummy ` +
		`FROM xo_tests.pag_element ` +
		`` +
		` WHERE pag_element.created_at < $1 ORDER BY 
		created_at Desc `
	sqlstr += c.limit

	// run

	rows, err := db.Query(ctx, sqlstr, createdAt)
	if err != nil {
		return nil, logerror(fmt.Errorf("PagElement/Paginated/Desc/db.Query: %w", err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[PagElement])
	if err != nil {
		return nil, logerror(fmt.Errorf("PagElement/Paginated/Desc/pgx.CollectRows: %w", err))
	}
	return res, nil
}

// PagElementByCreatedAt retrieves a row from 'xo_tests.pag_element' as a PagElement.
//
// Generated from index 'pag_element_created_at_key'.
func PagElementByCreatedAt(ctx context.Context, db DB, createdAt time.Time, opts ...PagElementSelectConfigOption) (*PagElement, error) {
	c := &PagElementSelectConfig{joins: PagElementJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`pag_element.paginated_element_id,
pag_element.name,
pag_element.created_at,
pag_element.dummy ` +
		`FROM xo_tests.pag_element ` +
		`` +
		` WHERE pag_element.created_at = $1 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, createdAt)
	rows, err := db.Query(ctx, sqlstr, createdAt)
	if err != nil {
		return nil, logerror(fmt.Errorf("pag_element/PagElementByCreatedAt/db.Query: %w", err))
	}
	pe, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[PagElement])
	if err != nil {
		return nil, logerror(fmt.Errorf("pag_element/PagElementByCreatedAt/pgx.CollectOneRow: %w", err))
	}

	return &pe, nil
}

// PagElementByPaginatedElementID retrieves a row from 'xo_tests.pag_element' as a PagElement.
//
// Generated from index 'pag_element_pkey'.
func PagElementByPaginatedElementID(ctx context.Context, db DB, paginatedElementID uuid.UUID, opts ...PagElementSelectConfigOption) (*PagElement, error) {
	c := &PagElementSelectConfig{joins: PagElementJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`pag_element.paginated_element_id,
pag_element.name,
pag_element.created_at,
pag_element.dummy ` +
		`FROM xo_tests.pag_element ` +
		`` +
		` WHERE pag_element.paginated_element_id = $1 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, paginatedElementID)
	rows, err := db.Query(ctx, sqlstr, paginatedElementID)
	if err != nil {
		return nil, logerror(fmt.Errorf("pag_element/PagElementByPaginatedElementID/db.Query: %w", err))
	}
	pe, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[PagElement])
	if err != nil {
		return nil, logerror(fmt.Errorf("pag_element/PagElementByPaginatedElementID/pgx.CollectOneRow: %w", err))
	}

	return &pe, nil
}

// FKDummyJoin_Dummy returns the DummyJoin associated with the PagElement's (Dummy).
//
// Generated from foreign key 'pag_element_dummy_fkey'.
func (pe *PagElement) FKDummyJoin_Dummy(ctx context.Context, db DB) (*DummyJoin, error) {
	return DummyJoinByDummyJoinID(ctx, db, *pe.Dummy)
}

// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID WorkItemID   `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    KanbanStepID                    `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	TimeEntryID     TimeEntryID  `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID   `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *TeamID       `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *WorkItemID   `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *WorkItemID   `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            ModelsUserID      `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JpK/mZJVy/8NAAD//7udZoXdQwEA",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

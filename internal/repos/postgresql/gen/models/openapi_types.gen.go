// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID WorkItemID   `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    KanbanStepID                    `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	TimeEntryID     TimeEntryID  `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID   `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *TeamID       `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *WorkItemID   `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *WorkItemID   `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            ModelsUserID      `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"n7aJ5G+mZNXyfwIAAP//Oel5p+pDAQA=",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

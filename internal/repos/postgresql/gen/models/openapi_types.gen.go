// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID WorkItemID   `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    KanbanStepID                    `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	TimeEntryID     TimeEntryID  `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID   `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *TeamID       `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *WorkItemID   `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *WorkItemID   `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            ModelsUserID      `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kk/bRPI3U7Jq+b8BAAD//zPYQQPtQwEA",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID WorkItemID   `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    KanbanStepID                    `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	TimeEntryID     TimeEntryID  `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID   `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *TeamID       `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *WorkItemID   `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *WorkItemID   `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            ModelsUserID      `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

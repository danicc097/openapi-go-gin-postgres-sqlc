// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID WorkItemID   `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    KanbanStepID                    `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsActivity defines the model for ModelsActivity.
type ModelsActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// ModelsActivityCreateParams defines the model for ModelsActivityCreateParams.
type ModelsActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsNotificationID defines the model for ModelsNotificationID.
type ModelsNotificationID = interface{}

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsProjectID defines the model for ModelsProjectID.
type ModelsProjectID = interface{}

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsUserNotification defines the model for ModelsUserNotification.
type ModelsUserNotification struct {
	NotificationID     int          `json:"notificationID"`
	Read               bool         `json:"read"`
	UserID             ModelsUserID `json:"userID"`
	UserNotificationID int          `json:"userNotificationID"`
}

// ModelsUserWIAUWorkItem defines the model for ModelsUserWIAUWorkItem.
type ModelsUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsUserWIAWorkItem defines the model for ModelsUserWIAWorkItem.
type ModelsUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemID defines the model for ModelsWorkItemID.
type ModelsWorkItemID = interface{}

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// ModelsWorkItemTypeID defines the model for ModelsWorkItemTypeID.
type ModelsWorkItemTypeID = interface{}

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	TimeEntryID     TimeEntryID  `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID   `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *TeamID       `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *WorkItemID   `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *WorkItemID   `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            ModelsUserID      `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Lf8/AAD//2iAOBcQRwEA",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID WorkItemID   `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    KanbanStepID                    `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsActivity defines the model for ModelsActivity.
type ModelsActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// ModelsActivityCreateParams defines the model for ModelsActivityCreateParams.
type ModelsActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsNotificationID defines the model for ModelsNotificationID.
type ModelsNotificationID = interface{}

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsProjectID defines the model for ModelsProjectID.
type ModelsProjectID = interface{}

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsUserNotification defines the model for ModelsUserNotification.
type ModelsUserNotification struct {
	NotificationID     int          `json:"notificationID"`
	Read               bool         `json:"read"`
	UserID             ModelsUserID `json:"userID"`
	UserNotificationID int          `json:"userNotificationID"`
}

// ModelsUserWIAUWorkItem defines the model for ModelsUserWIAUWorkItem.
type ModelsUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsUserWIAWorkItem defines the model for ModelsUserWIAWorkItem.
type ModelsUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemID defines the model for ModelsWorkItemID.
type ModelsWorkItemID = interface{}

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// ModelsWorkItemTypeID defines the model for ModelsWorkItemTypeID.
type ModelsWorkItemTypeID = interface{}

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	TimeEntryID     TimeEntryID  `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID   `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *TeamID       `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *WorkItemID   `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *WorkItemID   `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            ModelsUserID      `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+gocyq2EYBAA==",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

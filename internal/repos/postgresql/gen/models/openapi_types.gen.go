// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID WorkItemID   `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    KanbanStepID                    `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsActivity defines the model for ModelsActivity.
type ModelsActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// ModelsActivityCreateParams defines the model for ModelsActivityCreateParams.
type ModelsActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsNotificationID defines the model for ModelsNotificationID.
type ModelsNotificationID = interface{}

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsProjectID defines the model for ModelsProjectID.
type ModelsProjectID = interface{}

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsUserNotification defines the model for ModelsUserNotification.
type ModelsUserNotification struct {
	NotificationID     int          `json:"notificationID"`
	Read               bool         `json:"read"`
	UserID             ModelsUserID `json:"userID"`
	UserNotificationID int          `json:"userNotificationID"`
}

// ModelsUserWIAUWorkItem defines the model for ModelsUserWIAUWorkItem.
type ModelsUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsUserWIAWorkItem defines the model for ModelsUserWIAWorkItem.
type ModelsUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemID defines the model for ModelsWorkItemID.
type ModelsWorkItemID = interface{}

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// ModelsWorkItemTypeID defines the model for ModelsWorkItemTypeID.
type ModelsWorkItemTypeID = interface{}

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	TimeEntryID     TimeEntryID  `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID   `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *TeamID       `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *WorkItemID   `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *WorkItemID   `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            ModelsUserID      `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/P8AAAD//9oq7pYQRwEA",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

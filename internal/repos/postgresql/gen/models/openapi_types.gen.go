// Package db provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package db

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   int        `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    int        `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     int                    `json:"workItemID"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      int          `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *int         `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *int         `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID int          `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    int                             `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *int                     `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       int                      `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                      `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID int                             `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *int                     `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       int                      `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                      `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsActivity defines the model for ModelsActivity.
type ModelsActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// ModelsActivityCreateParams defines the model for ModelsActivityCreateParams.
type ModelsActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsNotificationID defines the model for ModelsNotificationID.
type ModelsNotificationID = interface{}

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsProjectID defines the model for ModelsProjectID.
type ModelsProjectID = interface{}

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsUserNotification defines the model for ModelsUserNotification.
type ModelsUserNotification struct {
	NotificationID     int          `json:"notificationID"`
	Read               bool         `json:"read"`
	UserID             ModelsUserID `json:"userID"`
	UserNotificationID int          `json:"userNotificationID"`
}

// ModelsUserWIAUWorkItem defines the model for ModelsUserWIAUWorkItem.
type ModelsUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsUserWIAWorkItem defines the model for ModelsUserWIAWorkItem.
type ModelsUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemID defines the model for ModelsWorkItemID.
type ModelsWorkItemID = interface{}

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemRole defines the model for ModelsWorkItemRole.
type ModelsWorkItemRole = string

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// ModelsWorkItemTypeID defines the model for ModelsWorkItemTypeID.
type ModelsWorkItemTypeID = interface{}

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     int                `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID int                `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      int          `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *int         `json:"teamID"`
	TimeEntryID     int          `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *int         `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *int          `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *int          `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *int          `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *int          `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID int                             `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *int                     `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       int                      `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                      `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time    `json:"createdAt"`
	Message           string       `json:"message"`
	UpdatedAt         time.Time    `json:"updatedAt"`
	UserID            ModelsUserID `json:"userID"`
	WorkItemCommentID int          `json:"workItemCommentID"`
	WorkItemID        int          `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

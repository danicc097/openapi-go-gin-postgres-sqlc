// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID WorkItemID   `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    KanbanStepID                    `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsActivity defines the model for ModelsActivity.
type ModelsActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// ModelsActivityCreateParams defines the model for ModelsActivityCreateParams.
type ModelsActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsNotificationID defines the model for ModelsNotificationID.
type ModelsNotificationID = interface{}

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsProjectID defines the model for ModelsProjectID.
type ModelsProjectID = interface{}

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsUserNotification defines the model for ModelsUserNotification.
type ModelsUserNotification struct {
	NotificationID     int          `json:"notificationID"`
	Read               bool         `json:"read"`
	UserID             ModelsUserID `json:"userID"`
	UserNotificationID int          `json:"userNotificationID"`
}

// ModelsUserWIAUWorkItem defines the model for ModelsUserWIAUWorkItem.
type ModelsUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsUserWIAWorkItem defines the model for ModelsUserWIAWorkItem.
type ModelsUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User ModelsUser   `json:"user"`
}

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemID defines the model for ModelsWorkItemID.
type ModelsWorkItemID = interface{}

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// ModelsWorkItemTypeID defines the model for ModelsWorkItemTypeID.
type ModelsWorkItemTypeID = interface{}

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	TimeEntryID     TimeEntryID  `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID   `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *TeamID       `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *WorkItemID   `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *WorkItemID   `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            ModelsUserID      `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQA=",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

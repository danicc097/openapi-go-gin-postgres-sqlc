// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           ModelsWorkItemCreateParams        `json:"base"`
	DemoTwoProject ModelsDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember                  `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        ModelsWorkItemCreateParams     `json:"base"`
	DemoProject ModelsDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember               `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]ModelsWorkItemTagCreateParams `json:"tags"`
	Teams *[]ModelsTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string       `json:"message"`
	UserID     ModelsUserID `json:"userID"`
	WorkItemID WorkItemID   `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                      `json:"closedAt"`
	CreatedAt       time.Time                       `json:"createdAt"`
	DeletedAt       *time.Time                      `json:"deletedAt"`
	DemoTwoWorkItem ModelsDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                          `json:"description"`
	KanbanStepID    KanbanStepID                    `json:"kanbanStepID"`
	Members         *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	DemoWorkItem ModelsDemoWorkItem              `json:"demoWorkItem"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *ModelsCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *ModelsUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       ModelsNotification `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             ModelsUserID       `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID ModelsUserID `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]ModelsTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]ModelsWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]ModelsWorkItemTag            `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID   `json:"activityID"`
	Comment         string       `json:"comment"`
	DurationMinutes *int         `json:"durationMinutes"`
	Start           time.Time    `json:"start"`
	TeamID          *TeamID      `json:"teamID"`
	TimeEntryID     TimeEntryID  `json:"timeEntryID"`
	UserID          ModelsUserID `json:"userID"`
	WorkItemID      *WorkItemID  `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID   `json:"activityID,omitempty"`
	Comment         *string       `json:"comment,omitempty"`
	DurationMinutes *int          `json:"durationMinutes"`
	Start           *time.Time    `json:"start,omitempty"`
	TeamID          *TeamID       `json:"teamID"`
	UserID          *ModelsUserID `json:"userID,omitempty"`
	WorkItemID      *WorkItemID   `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string       `json:"message,omitempty"`
	UserID     *ModelsUserID `json:"userID,omitempty"`
	WorkItemID *WorkItemID   `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int              `json:"age"`
	ApiKey                   *ModelsUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time         `json:"createdAt"`
	DeletedAt                *time.Time        `json:"deletedAt"`
	Email                    string            `json:"email"`
	FirstName                *string           `json:"firstName"`
	FullName                 *string           `json:"fullName"`
	HasGlobalNotifications   bool              `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool              `json:"hasPersonalNotifications"`
	LastName                 *string           `json:"lastName"`
	Projects                 *[]ModelsProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role          `json:"role"`
	Scopes    Scopes        `json:"scopes"`
	Teams     *[]ModelsTeam `json:"teams"`
	UpdatedAt time.Time     `json:"updatedAt"`
	UserID    ModelsUserID  `json:"userID"`
	Username  string        `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                      `json:"closedAt"`
	CreatedAt    time.Time                       `json:"createdAt"`
	DeletedAt    *time.Time                      `json:"deletedAt"`
	Description  string                          `json:"description"`
	KanbanStepID KanbanStepID                    `json:"kanbanStepID"`
	Members      *[]ModelsWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}          `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName              `json:"projectName"`
	TargetDate       time.Time                `json:"targetDate"`
	TeamID           *TeamID                  `json:"teamID"`
	TimeEntries      *[]ModelsTimeEntry       `json:"timeEntries"`
	Title            string                   `json:"title"`
	UpdatedAt        time.Time                `json:"updatedAt"`
	WorkItemComments *[]ModelsWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID               `json:"workItemID"`
	WorkItemTags     *[]ModelsWorkItemTag     `json:"workItemTags"`
	WorkItemType     *ModelsWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID           `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            ModelsUserID      `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// Discriminator via struct field ProjectName.
func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// Discriminator via struct field FilterMode.
func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// Discriminator via struct field ProjectName.
func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IvmbKVm1/L8AAAD///dwARTmQwEA",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

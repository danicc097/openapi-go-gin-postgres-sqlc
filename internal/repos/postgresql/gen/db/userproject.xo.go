package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/google/uuid"
)

// UserProject represents a row from 'public.user_project'.
type UserProject struct {
	ProjectID int       `json:"project_id"` // project_id
	UserID    uuid.UUID `json:"user_id"`    // user_id
	// xo fields
	_exists, _deleted bool
}

// TODO only create if exists
// GetMostRecentUserProject returns n most recent rows from 'user_project',
// ordered by "created_at" in descending order.
func GetMostRecentUserProject(ctx context.Context, db DB, n int) ([]*UserProject, error) {
	// list
	const sqlstr = `SELECT ` +
		`project_id, user_id ` +
		`FROM public.user_project ` +
		`ORDER BY created_at DESC LIMIT $1`
	// run
	logf(sqlstr, n)

	rows, err := db.Query(ctx, sqlstr, n)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	// load results
	var res []*UserProject
	for rows.Next() {
		up := UserProject{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&up.ProjectID, &up.UserID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &up)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Exists returns true when the UserProject exists in the database.
func (up *UserProject) Exists() bool {
	return up._exists
}

// Deleted returns true when the UserProject has been marked for deletion from
// the database.
func (up *UserProject) Deleted() bool {
	return up._deleted
}

// Insert inserts the UserProject to the database.
func (up *UserProject) Insert(ctx context.Context, db DB) error {
	switch {
	case up._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case up._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.user_project (` +
		`project_id, user_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, up.ProjectID, up.UserID)
	if _, err := db.Exec(ctx, sqlstr, up.ProjectID, up.UserID); err != nil {
		return logerror(err)
	}
	// set exists
	up._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the UserProject from the database.
func (up *UserProject) Delete(ctx context.Context, db DB) error {
	switch {
	case !up._exists: // doesn't exist
		return nil
	case up._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.user_project ` +
		`WHERE project_id = $1 AND user_id = $2`
	// run
	logf(sqlstr, up.ProjectID, up.UserID)
	if _, err := db.Exec(ctx, sqlstr, up.ProjectID, up.UserID); err != nil {
		return logerror(err)
	}
	// set deleted
	up._deleted = true
	return nil
}

// UserProjectByUserIDProjectID retrieves a row from 'public.user_project' as a UserProject.
//
// Generated from index 'user_project_pkey'.
func UserProjectByUserIDProjectID(ctx context.Context, db DB, userID uuid.UUID, projectID int) (*UserProject, error) {
	// query
	const sqlstr = `SELECT ` +
		`project_id, user_id ` +
		`FROM public.user_project ` +
		`WHERE user_id = $1 AND project_id = $2`
	// run
	logf(sqlstr, userID, projectID)
	up := UserProject{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, userID, projectID).Scan(&up.ProjectID, &up.UserID); err != nil {
		return nil, logerror(err)
	}
	return &up, nil
}

// UserProjectByProjectIDUserID retrieves a row from 'public.user_project' as a UserProject.
//
// Generated from index 'user_project_project_id_user_id_idx'.
func UserProjectByProjectIDUserID(ctx context.Context, db DB, projectID int, userID uuid.UUID) ([]*UserProject, error) {
	// query
	const sqlstr = `SELECT ` +
		`project_id, user_id ` +
		`FROM public.user_project ` +
		`WHERE project_id = $1 AND user_id = $2`
	// run
	logf(sqlstr, projectID, userID)
	rows, err := db.Query(ctx, sqlstr, projectID, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserProject
	for rows.Next() {
		up := UserProject{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&up.ProjectID, &up.UserID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &up)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserProjectByUserID retrieves a row from 'public.user_project' as a UserProject.
//
// Generated from index 'user_project_user_idx'.
func UserProjectByUserID(ctx context.Context, db DB, userID uuid.UUID) ([]*UserProject, error) {
	// query
	const sqlstr = `SELECT ` +
		`project_id, user_id ` +
		`FROM public.user_project ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.Query(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserProject
	for rows.Next() {
		up := UserProject{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&up.ProjectID, &up.UserID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &up)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Project returns the Project associated with the UserProject's (ProjectID).
//
// Generated from foreign key 'user_project_project_id_fkey'.
func (up *UserProject) Project(ctx context.Context, db DB) (*Project, error) {
	return ProjectByProjectID(ctx, db, up.ProjectID)
}

// User returns the User associated with the UserProject's (UserID).
//
// Generated from foreign key 'user_project_user_id_fkey'.
func (up *UserProject) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, up.UserID)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: extra_schema.notification.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const GetExtraSchemaNotifications = `-- name: GetExtraSchemaNotifications :many
select
  notification_type
  , sender
from
  extra_schema.notifications
where
  sender = $1
  and notification_type = $2::extra_schema.notification_type
`

type GetExtraSchemaNotificationsParams struct {
	UserID           uuid.UUID                   `db:"user_id" json:"user_id"`
	NotificationType ExtraSchemaNotificationType `db:"notification_type" json:"notification_type"`
}

type GetExtraSchemaNotificationsRow struct {
	NotificationType ExtraSchemaNotificationType `db:"notification_type" json:"notification_type"`
	Sender           uuid.UUID                   `db:"sender" json:"sender"`
}

// plpgsql-language-server:use-keyword-query-parameter
func (q *Queries) GetExtraSchemaNotifications(ctx context.Context, db DBTX, arg GetExtraSchemaNotificationsParams) ([]GetExtraSchemaNotificationsRow, error) {
	rows, err := db.Query(ctx, GetExtraSchemaNotifications, arg.UserID, arg.NotificationType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetExtraSchemaNotificationsRow{}
	for rows.Next() {
		var i GetExtraSchemaNotificationsRow
		if err := rows.Scan(&i.NotificationType, &i.Sender); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

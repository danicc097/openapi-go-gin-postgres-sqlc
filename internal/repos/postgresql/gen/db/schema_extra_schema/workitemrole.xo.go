package schema_extra_schema

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// WorkItemRole is the 'work_item_role' enum type from schema 'extra_schema'.
type WorkItemRole string

// WorkItemRole values.
const (
	// WorkItemRolePreparer is the 'preparer' work_item_role.
	WorkItemRolePreparer WorkItemRole = "preparer"
	// WorkItemRoleReviewer is the 'reviewer' work_item_role.
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// Value satisfies the driver.Valuer interface.
func (wir WorkItemRole) Value() (driver.Value, error) {
	return string(wir), nil
}

// Scan satisfies the sql.Scanner interface.
func (wir *WorkItemRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*wir = WorkItemRole(s)
	case string:
		*wir = WorkItemRole(s)
	default:
		return fmt.Errorf("unsupported scan type for WorkItemRole: %T", src)
	}
	return nil
}

// NullWorkItemRole represents a null 'work_item_role' enum for schema 'extra_schema'.
type NullWorkItemRole struct {
	WorkItemRole WorkItemRole
	// Valid is true if WorkItemRole is not null.
	Valid bool
}

// Value satisfies the driver.Valuer interface.
func (nwir NullWorkItemRole) Value() (driver.Value, error) {
	if !nwir.Valid {
		return nil, nil
	}
	return nwir.WorkItemRole.Value()
}

// Scan satisfies the sql.Scanner interface.
func (nwir *NullWorkItemRole) Scan(v interface{}) error {
	if v == nil {
		nwir.WorkItemRole, nwir.Valid = "", false
		return nil
	}
	err := nwir.WorkItemRole.Scan(v)
	nwir.Valid = err == nil
	return err
}

// ErrInvalidWorkItemRole is the invalid WorkItemRole error.
type ErrInvalidWorkItemRole string

// Error satisfies the error interface.
func (err ErrInvalidWorkItemRole) Error() string {
	return fmt.Sprintf("invalid WorkItemRole(%s)", string(err))
}

func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// WorkItemTask represents a row from 'public.work_item_task'.
type WorkItemTask struct {
	TaskID     int64 `json:"task_id"`      // task_id
	WorkItemID int64 `json:"work_item_id"` // work_item_id
	// xo fields
	_exists, _deleted bool
}

// GetMostRecentWorkItemTask returns n most recent rows from 'work_item_task',
// ordered by "created_at" in descending order.
func GetMostRecentWorkItemTask(ctx context.Context, db DB, n int) ([]*WorkItemTask, error) {
	// list
	const sqlstr = `SELECT ` +
		`task_id, work_item_id ` +
		`FROM public.work_item_task ` +
		`ORDER BY created_at DESC LIMIT $1`
	// run
	logf(sqlstr, n)

	rows, err := db.Query(ctx, sqlstr, n)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	// load results
	var res []*WorkItemTask
	for rows.Next() {
		wit := WorkItemTask{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&wit.TaskID, &wit.WorkItemID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &wit)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Exists returns true when the WorkItemTask exists in the database.
func (wit *WorkItemTask) Exists() bool {
	return wit._exists
}

// Deleted returns true when the WorkItemTask has been marked for deletion from
// the database.
func (wit *WorkItemTask) Deleted() bool {
	return wit._deleted
}

// Insert inserts the WorkItemTask to the database.
func (wit *WorkItemTask) Insert(ctx context.Context, db DB) error {
	switch {
	case wit._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case wit._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.work_item_task (` +
		`task_id, work_item_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, wit.TaskID, wit.WorkItemID)
	if _, err := db.Exec(ctx, sqlstr, wit.TaskID, wit.WorkItemID); err != nil {
		return logerror(err)
	}
	// set exists
	wit._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the WorkItemTask from the database.
func (wit *WorkItemTask) Delete(ctx context.Context, db DB) error {
	switch {
	case !wit._exists: // doesn't exist
		return nil
	case wit._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.work_item_task ` +
		`WHERE task_id = $1 AND work_item_id = $2`
	// run
	logf(sqlstr, wit.TaskID, wit.WorkItemID)
	if _, err := db.Exec(ctx, sqlstr, wit.TaskID, wit.WorkItemID); err != nil {
		return logerror(err)
	}
	// set deleted
	wit._deleted = true
	return nil
}

// WorkItemTaskByWorkItemIDTaskID retrieves a row from 'public.work_item_task' as a WorkItemTask.
//
// Generated from index 'work_item_task_pkey'.
func WorkItemTaskByWorkItemIDTaskID(ctx context.Context, db DB, workItemID, taskID int64) (*WorkItemTask, error) {
	// query
	const sqlstr = `SELECT ` +
		`task_id, work_item_id ` +
		`FROM public.work_item_task ` +
		`WHERE work_item_id = $1 AND task_id = $2`
	// run
	logf(sqlstr, workItemID, taskID)
	wit := WorkItemTask{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, workItemID, taskID).Scan(&wit.TaskID, &wit.WorkItemID); err != nil {
		return nil, logerror(err)
	}
	return &wit, nil
}

// WorkItemTaskByTaskIDWorkItemID retrieves a row from 'public.work_item_task' as a WorkItemTask.
//
// Generated from index 'work_item_task_task_id_work_item_id_idx'.
func WorkItemTaskByTaskIDWorkItemID(ctx context.Context, db DB, taskID, workItemID int64) ([]*WorkItemTask, error) {
	// query
	const sqlstr = `SELECT ` +
		`task_id, work_item_id ` +
		`FROM public.work_item_task ` +
		`WHERE task_id = $1 AND work_item_id = $2`
	// run
	logf(sqlstr, taskID, workItemID)
	rows, err := db.Query(ctx, sqlstr, taskID, workItemID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*WorkItemTask
	for rows.Next() {
		wit := WorkItemTask{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&wit.TaskID, &wit.WorkItemID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &wit)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Task returns the Task associated with the WorkItemTask's (TaskID).
//
// Generated from foreign key 'work_item_task_task_id_fkey'.
func (wit *WorkItemTask) Task(ctx context.Context, db DB) (*Task, error) {
	return TaskByTaskID(ctx, db, wit.TaskID)
}

// WorkItem returns the WorkItem associated with the WorkItemTask's (WorkItemID).
//
// Generated from foreign key 'work_item_task_work_item_id_fkey'.
func (wit *WorkItemTask) WorkItem(ctx context.Context, db DB) (*WorkItem, error) {
	return WorkItemByWorkItemID(ctx, db, wit.WorkItemID)
}

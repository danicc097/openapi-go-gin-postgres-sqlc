// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql/driver"
	"fmt"
)

type UserRole string

const (
	UserRoleGuest        UserRole = "guest"
	UserRoleUser         UserRole = "user"
	UserRoleAdvanceduser UserRole = "advanced user"
	UserRoleManager      UserRole = "manager"
	UserRoleAdmin        UserRole = "admin"
	UserRoleSuperadmin   UserRole = "superadmin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.UserRole, nil
}

func (e UserRole) Valid() bool {
	switch e {
	case UserRoleGuest,
		UserRoleUser,
		UserRoleAdvanceduser,
		UserRoleManager,
		UserRoleAdmin,
		UserRoleSuperadmin:
		return true
	}
	return false
}

func AllUserRoleValues() []UserRole {
	return []UserRole{
		UserRoleGuest,
		UserRoleUser,
		UserRoleAdvanceduser,
		UserRoleManager,
		UserRoleAdmin,
		UserRoleSuperadmin,
	}
}

package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	models "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5"
)

// CacheDemoWorkItem represents a row from 'public.cache__demo_work_items'.
// Change properties via SQL column comments, joined with " && ":
//   - "properties":<p1>,<p2>,...
//     -- private: exclude a field from JSON.
//     -- not-required: make a schema field not required.
//     -- hidden: exclude field from OpenAPI generation.
//     -- refs-ignore: generate a field whose constraints are ignored by the referenced table,
//     i.e. no joins will be generated.
//     -- share-ref-constraints: for a FK column, it will generate the same M2O and M2M join fields the ref column has.
//   - "type":<pkg.type> to override the type annotation. An openapi schema named <type> must exist.
//   - "cardinality":<O2O|M2O|M2M> to generate/override joins explicitly. Only O2O is inferred.
//   - "tags":<tags> to append literal struct tag strings.
type CacheDemoWorkItem struct {
	Ref            string         `json:"ref" db:"ref" required:"true" nullable:"false" pattern:"^[0-9]{8}$"`     // ref
	Line           string         `json:"line" db:"line" required:"true" nullable:"false"`                        // line
	LastMessageAt  time.Time      `json:"lastMessageAt" db:"last_message_at" required:"true" nullable:"false"`    // last_message_at
	Reopened       bool           `json:"reopened" db:"reopened" required:"true" nullable:"false"`                // reopened
	WorkItemID     WorkItemID     `json:"workItemID" db:"work_item_id" required:"true" nullable:"false"`          // work_item_id
	Title          string         `json:"title" db:"title" required:"true" nullable:"false"`                      // title
	Description    string         `json:"description" db:"description" required:"true" nullable:"false"`          // description
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID" db:"work_item_type_id" required:"true" nullable:"false"` // work_item_type_id
	Metadata       map[string]any `json:"metadata" db:"metadata" required:"true" nullable:"false"`                // metadata
	TeamID         TeamID         `json:"teamID" db:"team_id" required:"true" nullable:"false"`                   // team_id
	KanbanStepID   KanbanStepID   `json:"kanbanStepID" db:"kanban_step_id" required:"true" nullable:"false"`      // kanban_step_id
	ClosedAt       *time.Time     `json:"closedAt" db:"closed_at"`                                                // closed_at
	TargetDate     time.Time      `json:"targetDate" db:"target_date" required:"true" nullable:"false"`           // target_date
	CreatedAt      time.Time      `json:"createdAt" db:"created_at" required:"true" nullable:"false"`             // created_at
	UpdatedAt      time.Time      `json:"updatedAt" db:"updated_at" required:"true" nullable:"false"`             // updated_at
	DeletedAt      *time.Time     `json:"deletedAt" db:"deleted_at"`                                              // deleted_at

	KanbanStepJoin       *KanbanStep                        `json:"-" db:"kanban_step_kanban_step_id" openapi-go:"ignore"`             // O2O kanban_steps (inferred)
	TeamJoin             *Team                              `json:"-" db:"team_team_id" openapi-go:"ignore"`                           // O2O teams (inferred)
	WorkItemTypeJoin     *WorkItemType                      `json:"-" db:"work_item_type_work_item_type_id" openapi-go:"ignore"`       // O2O work_item_types (inferred)
	TimeEntriesJoin      *[]TimeEntry                       `json:"-" db:"time_entries" openapi-go:"ignore"`                           // M2O cache__demo_work_items
	AssigneesJoin        *[]CacheDemoWorkItemM2MAssigneeWIA `json:"-" db:"work_item_assignee_assignees" openapi-go:"ignore"`           // M2M work_item_assignee
	WorkItemCommentsJoin *[]WorkItemComment                 `json:"-" db:"work_item_comments" openapi-go:"ignore"`                     // M2O cache__demo_work_items
	WorkItemTagsJoin     *[]WorkItemTag                     `json:"-" db:"work_item_work_item_tag_work_item_tags" openapi-go:"ignore"` // M2M work_item_work_item_tag

}

// CacheDemoWorkItemCreateParams represents insert params for 'public.cache__demo_work_items'.
type CacheDemoWorkItemCreateParams struct {
	ClosedAt       *time.Time     `json:"closedAt"`                                                  // closed_at
	Description    string         `json:"description" required:"true" nullable:"false"`              // description
	KanbanStepID   KanbanStepID   `json:"kanbanStepID" required:"true" nullable:"false"`             // kanban_step_id
	LastMessageAt  time.Time      `json:"lastMessageAt" required:"true" nullable:"false"`            // last_message_at
	Line           string         `json:"line" required:"true" nullable:"false"`                     // line
	Metadata       map[string]any `json:"metadata" required:"true" nullable:"false"`                 // metadata
	Ref            string         `json:"ref" required:"true" nullable:"false" pattern:"^[0-9]{8}$"` // ref
	Reopened       bool           `json:"reopened" required:"true" nullable:"false"`                 // reopened
	TargetDate     time.Time      `json:"targetDate" required:"true" nullable:"false"`               // target_date
	TeamID         TeamID         `json:"teamID" required:"true" nullable:"false"`                   // team_id
	Title          string         `json:"title" required:"true" nullable:"false"`                    // title
	WorkItemID     WorkItemID     `json:"-" required:"true" nullable:"false"`                        // work_item_id
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID" required:"true" nullable:"false"`           // work_item_type_id
}

// CacheDemoWorkItemParams represents common params for both insert and update of 'public.cache__demo_work_items'.
type CacheDemoWorkItemParams interface {
	GetClosedAt() *time.Time
	GetDescription() *string
	GetKanbanStepID() *KanbanStepID
	GetLastMessageAt() *time.Time
	GetLine() *string
	GetMetadata() *map[string]any
	GetRef() *string
	GetReopened() *bool
	GetTargetDate() *time.Time
	GetTeamID() *TeamID
	GetTitle() *string
	GetWorkItemTypeID() *WorkItemTypeID
}

func (p CacheDemoWorkItemCreateParams) GetClosedAt() *time.Time {
	return p.ClosedAt
}
func (p CacheDemoWorkItemUpdateParams) GetClosedAt() *time.Time {
	if p.ClosedAt != nil {
		return *p.ClosedAt
	}
	return nil
}

func (p CacheDemoWorkItemCreateParams) GetDescription() *string {
	x := p.Description
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetDescription() *string {
	return p.Description
}

func (p CacheDemoWorkItemCreateParams) GetKanbanStepID() *KanbanStepID {
	x := p.KanbanStepID
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetKanbanStepID() *KanbanStepID {
	return p.KanbanStepID
}

func (p CacheDemoWorkItemCreateParams) GetLastMessageAt() *time.Time {
	x := p.LastMessageAt
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetLastMessageAt() *time.Time {
	return p.LastMessageAt
}

func (p CacheDemoWorkItemCreateParams) GetLine() *string {
	x := p.Line
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetLine() *string {
	return p.Line
}

func (p CacheDemoWorkItemCreateParams) GetMetadata() *map[string]any {
	x := p.Metadata
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetMetadata() *map[string]any {
	return p.Metadata
}

func (p CacheDemoWorkItemCreateParams) GetRef() *string {
	x := p.Ref
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetRef() *string {
	return p.Ref
}

func (p CacheDemoWorkItemCreateParams) GetReopened() *bool {
	x := p.Reopened
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetReopened() *bool {
	return p.Reopened
}

func (p CacheDemoWorkItemCreateParams) GetTargetDate() *time.Time {
	x := p.TargetDate
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetTargetDate() *time.Time {
	return p.TargetDate
}

func (p CacheDemoWorkItemCreateParams) GetTeamID() *TeamID {
	x := p.TeamID
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetTeamID() *TeamID {
	return p.TeamID
}

func (p CacheDemoWorkItemCreateParams) GetTitle() *string {
	x := p.Title
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetTitle() *string {
	return p.Title
}

func (p CacheDemoWorkItemCreateParams) GetWorkItemTypeID() *WorkItemTypeID {
	x := p.WorkItemTypeID
	return &x
}
func (p CacheDemoWorkItemUpdateParams) GetWorkItemTypeID() *WorkItemTypeID {
	return p.WorkItemTypeID
}

// CreateCacheDemoWorkItem creates a new CacheDemoWorkItem in the database with the given params.
func CreateCacheDemoWorkItem(ctx context.Context, db DB, params *CacheDemoWorkItemCreateParams) (*CacheDemoWorkItem, error) {
	cdwi := &CacheDemoWorkItem{
		ClosedAt:       params.ClosedAt,
		Description:    params.Description,
		KanbanStepID:   params.KanbanStepID,
		LastMessageAt:  params.LastMessageAt,
		Line:           params.Line,
		Metadata:       params.Metadata,
		Ref:            params.Ref,
		Reopened:       params.Reopened,
		TargetDate:     params.TargetDate,
		TeamID:         params.TeamID,
		Title:          params.Title,
		WorkItemID:     params.WorkItemID,
		WorkItemTypeID: params.WorkItemTypeID,
	}

	return cdwi.Insert(ctx, db)
}

type CacheDemoWorkItemSelectConfig struct {
	limit   string
	orderBy string
	joins   CacheDemoWorkItemJoins
	filters map[string][]any
	having  map[string][]any

	deletedAt string
}
type CacheDemoWorkItemSelectConfigOption func(*CacheDemoWorkItemSelectConfig)

// WithCacheDemoWorkItemLimit limits row selection.
func WithCacheDemoWorkItemLimit(limit int) CacheDemoWorkItemSelectConfigOption {
	return func(s *CacheDemoWorkItemSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

// WithDeletedCacheDemoWorkItemOnly limits result to records marked as deleted.
func WithDeletedCacheDemoWorkItemOnly() CacheDemoWorkItemSelectConfigOption {
	return func(s *CacheDemoWorkItemSelectConfig) {
		s.deletedAt = " not null "
	}
}

type CacheDemoWorkItemOrderBy string

const (
	CacheDemoWorkItemClosedAtDescNullsFirst      CacheDemoWorkItemOrderBy = " closed_at DESC NULLS FIRST "
	CacheDemoWorkItemClosedAtDescNullsLast       CacheDemoWorkItemOrderBy = " closed_at DESC NULLS LAST "
	CacheDemoWorkItemClosedAtAscNullsFirst       CacheDemoWorkItemOrderBy = " closed_at ASC NULLS FIRST "
	CacheDemoWorkItemClosedAtAscNullsLast        CacheDemoWorkItemOrderBy = " closed_at ASC NULLS LAST "
	CacheDemoWorkItemCreatedAtDescNullsFirst     CacheDemoWorkItemOrderBy = " created_at DESC NULLS FIRST "
	CacheDemoWorkItemCreatedAtDescNullsLast      CacheDemoWorkItemOrderBy = " created_at DESC NULLS LAST "
	CacheDemoWorkItemCreatedAtAscNullsFirst      CacheDemoWorkItemOrderBy = " created_at ASC NULLS FIRST "
	CacheDemoWorkItemCreatedAtAscNullsLast       CacheDemoWorkItemOrderBy = " created_at ASC NULLS LAST "
	CacheDemoWorkItemDeletedAtDescNullsFirst     CacheDemoWorkItemOrderBy = " deleted_at DESC NULLS FIRST "
	CacheDemoWorkItemDeletedAtDescNullsLast      CacheDemoWorkItemOrderBy = " deleted_at DESC NULLS LAST "
	CacheDemoWorkItemDeletedAtAscNullsFirst      CacheDemoWorkItemOrderBy = " deleted_at ASC NULLS FIRST "
	CacheDemoWorkItemDeletedAtAscNullsLast       CacheDemoWorkItemOrderBy = " deleted_at ASC NULLS LAST "
	CacheDemoWorkItemLastMessageAtDescNullsFirst CacheDemoWorkItemOrderBy = " last_message_at DESC NULLS FIRST "
	CacheDemoWorkItemLastMessageAtDescNullsLast  CacheDemoWorkItemOrderBy = " last_message_at DESC NULLS LAST "
	CacheDemoWorkItemLastMessageAtAscNullsFirst  CacheDemoWorkItemOrderBy = " last_message_at ASC NULLS FIRST "
	CacheDemoWorkItemLastMessageAtAscNullsLast   CacheDemoWorkItemOrderBy = " last_message_at ASC NULLS LAST "
	CacheDemoWorkItemTargetDateDescNullsFirst    CacheDemoWorkItemOrderBy = " target_date DESC NULLS FIRST "
	CacheDemoWorkItemTargetDateDescNullsLast     CacheDemoWorkItemOrderBy = " target_date DESC NULLS LAST "
	CacheDemoWorkItemTargetDateAscNullsFirst     CacheDemoWorkItemOrderBy = " target_date ASC NULLS FIRST "
	CacheDemoWorkItemTargetDateAscNullsLast      CacheDemoWorkItemOrderBy = " target_date ASC NULLS LAST "
	CacheDemoWorkItemUpdatedAtDescNullsFirst     CacheDemoWorkItemOrderBy = " updated_at DESC NULLS FIRST "
	CacheDemoWorkItemUpdatedAtDescNullsLast      CacheDemoWorkItemOrderBy = " updated_at DESC NULLS LAST "
	CacheDemoWorkItemUpdatedAtAscNullsFirst      CacheDemoWorkItemOrderBy = " updated_at ASC NULLS FIRST "
	CacheDemoWorkItemUpdatedAtAscNullsLast       CacheDemoWorkItemOrderBy = " updated_at ASC NULLS LAST "
)

// WithCacheDemoWorkItemOrderBy orders results by the given columns.
func WithCacheDemoWorkItemOrderBy(rows ...CacheDemoWorkItemOrderBy) CacheDemoWorkItemSelectConfigOption {
	return func(s *CacheDemoWorkItemSelectConfig) {
		if len(rows) > 0 {
			orderStrings := make([]string, len(rows))
			for i, row := range rows {
				orderStrings[i] = string(row)
			}
			s.orderBy = " order by "
			s.orderBy += strings.Join(orderStrings, ", ")
		}
	}
}

type CacheDemoWorkItemJoins struct {
	KanbanStep       bool // O2O kanban_steps
	Team             bool // O2O teams
	WorkItemType     bool // O2O work_item_types
	TimeEntries      bool // M2O time_entries
	Assignees        bool // M2M work_item_assignee
	WorkItemComments bool // M2O work_item_comments
	WorkItemTags     bool // M2M work_item_work_item_tag
}

// WithCacheDemoWorkItemJoin joins with the given tables.
func WithCacheDemoWorkItemJoin(joins CacheDemoWorkItemJoins) CacheDemoWorkItemSelectConfigOption {
	return func(s *CacheDemoWorkItemSelectConfig) {
		s.joins = CacheDemoWorkItemJoins{
			KanbanStep:       s.joins.KanbanStep || joins.KanbanStep,
			Team:             s.joins.Team || joins.Team,
			WorkItemType:     s.joins.WorkItemType || joins.WorkItemType,
			TimeEntries:      s.joins.TimeEntries || joins.TimeEntries,
			Assignees:        s.joins.Assignees || joins.Assignees,
			WorkItemComments: s.joins.WorkItemComments || joins.WorkItemComments,
			WorkItemTags:     s.joins.WorkItemTags || joins.WorkItemTags,
		}
	}
}

// CacheDemoWorkItemM2MAssigneeWIA represents a M2M join against "public.work_item_assignee"
type CacheDemoWorkItemM2MAssigneeWIA struct {
	User User                `json:"user" db:"users" required:"true"`
	Role models.WorkItemRole `json:"role" db:"role" required:"true" ref:"#/components/schemas/WorkItemRole" `
}

// WithCacheDemoWorkItemFilters adds the given WHERE clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	filters := map[string][]any{
//		"NOT (col.name = any ($i))": {[]string{"excl_name_1", "excl_name_2"}},
//		`(col.created_at > $i OR
//		col.is_closed = $i)`: {time.Now().Add(-24 * time.Hour), true},
//	}
func WithCacheDemoWorkItemFilters(filters map[string][]any) CacheDemoWorkItemSelectConfigOption {
	return func(s *CacheDemoWorkItemSelectConfig) {
		s.filters = filters
	}
}

// WithCacheDemoWorkItemHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
// WithUserHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	// filter a given aggregate of assigned users to return results where at least one of them has id of userId.
//	// See xo_join_* alias used by the join db tag in the SelectSQL string.
//	filters := map[string][]any{
//	"$i = ANY(ARRAY_AGG(xo_join_assigned_users_join.user_id))": {userId},
//	}
func WithCacheDemoWorkItemHavingClause(conditions map[string][]any) CacheDemoWorkItemSelectConfigOption {
	return func(s *CacheDemoWorkItemSelectConfig) {
		s.having = conditions
	}
}

const cacheDemoWorkItemTableKanbanStepJoinSQL = `-- O2O join generated from "cache__demo_work_items_kanban_step_id_fkey (inferred)"
left join kanban_steps as _cache__demo_work_items_kanban_step_id on _cache__demo_work_items_kanban_step_id.kanban_step_id = cache__demo_work_items.kanban_step_id
`

const cacheDemoWorkItemTableKanbanStepSelectSQL = `(case when _cache__demo_work_items_kanban_step_id.kanban_step_id is not null then row(_cache__demo_work_items_kanban_step_id.*) end) as kanban_step_kanban_step_id`

const cacheDemoWorkItemTableKanbanStepGroupBySQL = `_cache__demo_work_items_kanban_step_id.kanban_step_id,
      _cache__demo_work_items_kanban_step_id.kanban_step_id,
	cache__demo_work_items.work_item_id`

const cacheDemoWorkItemTableTeamJoinSQL = `-- O2O join generated from "cache__demo_work_items_team_id_fkey (inferred)"
left join teams as _cache__demo_work_items_team_id on _cache__demo_work_items_team_id.team_id = cache__demo_work_items.team_id
`

const cacheDemoWorkItemTableTeamSelectSQL = `(case when _cache__demo_work_items_team_id.team_id is not null then row(_cache__demo_work_items_team_id.*) end) as team_team_id`

const cacheDemoWorkItemTableTeamGroupBySQL = `_cache__demo_work_items_team_id.team_id,
      _cache__demo_work_items_team_id.team_id,
	cache__demo_work_items.work_item_id`

const cacheDemoWorkItemTableWorkItemTypeJoinSQL = `-- O2O join generated from "cache__demo_work_items_work_item_type_id_fkey (inferred)"
left join work_item_types as _cache__demo_work_items_work_item_type_id on _cache__demo_work_items_work_item_type_id.work_item_type_id = cache__demo_work_items.work_item_type_id
`

const cacheDemoWorkItemTableWorkItemTypeSelectSQL = `(case when _cache__demo_work_items_work_item_type_id.work_item_type_id is not null then row(_cache__demo_work_items_work_item_type_id.*) end) as work_item_type_work_item_type_id`

const cacheDemoWorkItemTableWorkItemTypeGroupBySQL = `_cache__demo_work_items_work_item_type_id.work_item_type_id,
      _cache__demo_work_items_work_item_type_id.work_item_type_id,
	cache__demo_work_items.work_item_id`

const cacheDemoWorkItemTableTimeEntriesJoinSQL = `-- M2O join generated from "time_entries_work_item_id_fkey-shared-ref-cache__demo_work_items"
left join (
  select
  work_item_id as time_entries_work_item_id
    , row(time_entries.*) as __time_entries
  from
    time_entries
  group by
	  time_entries_work_item_id, time_entries.time_entry_id
) as xo_join_time_entries on xo_join_time_entries.time_entries_work_item_id = cache__demo_work_items.work_item_id
`

const cacheDemoWorkItemTableTimeEntriesSelectSQL = `COALESCE(ARRAY_AGG( DISTINCT (xo_join_time_entries.__time_entries)) filter (where xo_join_time_entries.time_entries_work_item_id is not null), '{}') as time_entries`

const cacheDemoWorkItemTableTimeEntriesGroupBySQL = `cache__demo_work_items.work_item_id`

const cacheDemoWorkItemTableAssigneesJoinSQL = `-- M2M join generated from "work_item_assignee_assignee_fkey-shared-ref-cache__demo_work_items"
left join (
	select
		work_item_assignee.work_item_id as work_item_assignee_work_item_id
		, work_item_assignee.role as role
		, users.user_id as __users_user_id
		, row(users.*) as __users
	from
		work_item_assignee
	join users on users.user_id = work_item_assignee.assignee
	group by
		work_item_assignee_work_item_id
		, users.user_id
		, role
) as xo_join_work_item_assignee_assignees on xo_join_work_item_assignee_assignees.work_item_assignee_work_item_id = cache__demo_work_items.work_item_id
`

const cacheDemoWorkItemTableAssigneesSelectSQL = `COALESCE(
		ARRAY_AGG( DISTINCT (
		xo_join_work_item_assignee_assignees.__users
		, xo_join_work_item_assignee_assignees.role
		)) filter (where xo_join_work_item_assignee_assignees.__users_user_id is not null), '{}') as work_item_assignee_assignees`

const cacheDemoWorkItemTableAssigneesGroupBySQL = `cache__demo_work_items.work_item_id, cache__demo_work_items.work_item_id`

const cacheDemoWorkItemTableWorkItemCommentsJoinSQL = `-- M2O join generated from "work_item_comments_work_item_id_fkey-shared-ref-cache__demo_work_items"
left join (
  select
  work_item_id as work_item_comments_work_item_id
    , row(work_item_comments.*) as __work_item_comments
  from
    work_item_comments
  group by
	  work_item_comments_work_item_id, work_item_comments.work_item_comment_id
) as xo_join_work_item_comments on xo_join_work_item_comments.work_item_comments_work_item_id = cache__demo_work_items.work_item_id
`

const cacheDemoWorkItemTableWorkItemCommentsSelectSQL = `COALESCE(ARRAY_AGG( DISTINCT (xo_join_work_item_comments.__work_item_comments)) filter (where xo_join_work_item_comments.work_item_comments_work_item_id is not null), '{}') as work_item_comments`

const cacheDemoWorkItemTableWorkItemCommentsGroupBySQL = `cache__demo_work_items.work_item_id`

const cacheDemoWorkItemTableWorkItemTagsJoinSQL = `-- M2M join generated from "work_item_work_item_tag_work_item_tag_id_fkey-shared-ref-cache__demo_work_items"
left join (
	select
		work_item_work_item_tag.work_item_id as work_item_work_item_tag_work_item_id
		, work_item_tags.work_item_tag_id as __work_item_tags_work_item_tag_id
		, row(work_item_tags.*) as __work_item_tags
	from
		work_item_work_item_tag
	join work_item_tags on work_item_tags.work_item_tag_id = work_item_work_item_tag.work_item_tag_id
	group by
		work_item_work_item_tag_work_item_id
		, work_item_tags.work_item_tag_id
) as xo_join_work_item_work_item_tag_work_item_tags on xo_join_work_item_work_item_tag_work_item_tags.work_item_work_item_tag_work_item_id = cache__demo_work_items.work_item_id
`

const cacheDemoWorkItemTableWorkItemTagsSelectSQL = `COALESCE(
		ARRAY_AGG( DISTINCT (
		xo_join_work_item_work_item_tag_work_item_tags.__work_item_tags
		)) filter (where xo_join_work_item_work_item_tag_work_item_tags.__work_item_tags_work_item_tag_id is not null), '{}') as work_item_work_item_tag_work_item_tags`

const cacheDemoWorkItemTableWorkItemTagsGroupBySQL = `cache__demo_work_items.work_item_id, cache__demo_work_items.work_item_id`

// CacheDemoWorkItemUpdateParams represents update params for 'public.cache__demo_work_items'.
type CacheDemoWorkItemUpdateParams struct {
	ClosedAt       **time.Time     `json:"closedAt"`                                  // closed_at
	Description    *string         `json:"description" nullable:"false"`              // description
	KanbanStepID   *KanbanStepID   `json:"kanbanStepID" nullable:"false"`             // kanban_step_id
	LastMessageAt  *time.Time      `json:"lastMessageAt" nullable:"false"`            // last_message_at
	Line           *string         `json:"line" nullable:"false"`                     // line
	Metadata       *map[string]any `json:"metadata" nullable:"false"`                 // metadata
	Ref            *string         `json:"ref" nullable:"false" pattern:"^[0-9]{8}$"` // ref
	Reopened       *bool           `json:"reopened" nullable:"false"`                 // reopened
	TargetDate     *time.Time      `json:"targetDate" nullable:"false"`               // target_date
	TeamID         *TeamID         `json:"teamID" nullable:"false"`                   // team_id
	Title          *string         `json:"title" nullable:"false"`                    // title
	WorkItemTypeID *WorkItemTypeID `json:"workItemTypeID" nullable:"false"`           // work_item_type_id
}

// SetUpdateParams updates public.cache__demo_work_items struct fields with the specified params.
func (cdwi *CacheDemoWorkItem) SetUpdateParams(params *CacheDemoWorkItemUpdateParams) {
	if params.ClosedAt != nil {
		cdwi.ClosedAt = *params.ClosedAt
	}
	if params.Description != nil {
		cdwi.Description = *params.Description
	}
	if params.KanbanStepID != nil {
		cdwi.KanbanStepID = *params.KanbanStepID
	}
	if params.LastMessageAt != nil {
		cdwi.LastMessageAt = *params.LastMessageAt
	}
	if params.Line != nil {
		cdwi.Line = *params.Line
	}
	if params.Metadata != nil {
		cdwi.Metadata = *params.Metadata
	}
	if params.Ref != nil {
		cdwi.Ref = *params.Ref
	}
	if params.Reopened != nil {
		cdwi.Reopened = *params.Reopened
	}
	if params.TargetDate != nil {
		cdwi.TargetDate = *params.TargetDate
	}
	if params.TeamID != nil {
		cdwi.TeamID = *params.TeamID
	}
	if params.Title != nil {
		cdwi.Title = *params.Title
	}
	if params.WorkItemTypeID != nil {
		cdwi.WorkItemTypeID = *params.WorkItemTypeID
	}
}

// Insert inserts the CacheDemoWorkItem to the database.
func (cdwi *CacheDemoWorkItem) Insert(ctx context.Context, db DB) (*CacheDemoWorkItem, error) {
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO public.cache__demo_work_items (
	closed_at, deleted_at, description, kanban_step_id, last_message_at, line, metadata, ref, reopened, target_date, team_id, title, work_item_id, work_item_type_id
	) VALUES (
	$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
	) RETURNING * `
	// run
	logf(sqlstr, cdwi.ClosedAt, cdwi.DeletedAt, cdwi.Description, cdwi.KanbanStepID, cdwi.LastMessageAt, cdwi.Line, cdwi.Metadata, cdwi.Ref, cdwi.Reopened, cdwi.TargetDate, cdwi.TeamID, cdwi.Title, cdwi.WorkItemID, cdwi.WorkItemTypeID)

	rows, err := db.Query(ctx, sqlstr, cdwi.ClosedAt, cdwi.DeletedAt, cdwi.Description, cdwi.KanbanStepID, cdwi.LastMessageAt, cdwi.Line, cdwi.Metadata, cdwi.Ref, cdwi.Reopened, cdwi.TargetDate, cdwi.TeamID, cdwi.Title, cdwi.WorkItemID, cdwi.WorkItemTypeID)
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoWorkItem/Insert/db.Query: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	newcdwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[CacheDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoWorkItem/Insert/pgx.CollectOneRow: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}

	*cdwi = newcdwi

	return cdwi, nil
}

// Update updates a CacheDemoWorkItem in the database.
func (cdwi *CacheDemoWorkItem) Update(ctx context.Context, db DB) (*CacheDemoWorkItem, error) {
	// update with composite primary key
	sqlstr := `UPDATE public.cache__demo_work_items SET 
	closed_at = $1, deleted_at = $2, description = $3, kanban_step_id = $4, last_message_at = $5, line = $6, metadata = $7, ref = $8, reopened = $9, target_date = $10, team_id = $11, title = $12, work_item_type_id = $13 
	WHERE work_item_id = $14 
	RETURNING * `
	// run
	logf(sqlstr, cdwi.ClosedAt, cdwi.CreatedAt, cdwi.DeletedAt, cdwi.Description, cdwi.KanbanStepID, cdwi.LastMessageAt, cdwi.Line, cdwi.Metadata, cdwi.Ref, cdwi.Reopened, cdwi.TargetDate, cdwi.TeamID, cdwi.Title, cdwi.UpdatedAt, cdwi.WorkItemTypeID, cdwi.WorkItemID)

	rows, err := db.Query(ctx, sqlstr, cdwi.ClosedAt, cdwi.DeletedAt, cdwi.Description, cdwi.KanbanStepID, cdwi.LastMessageAt, cdwi.Line, cdwi.Metadata, cdwi.Ref, cdwi.Reopened, cdwi.TargetDate, cdwi.TeamID, cdwi.Title, cdwi.WorkItemTypeID, cdwi.WorkItemID)
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoWorkItem/Update/db.Query: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	newcdwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[CacheDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoWorkItem/Update/pgx.CollectOneRow: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	*cdwi = newcdwi

	return cdwi, nil
}

// Upsert upserts a CacheDemoWorkItem in the database.
// Requires appropriate PK(s) to be set beforehand.
func (cdwi *CacheDemoWorkItem) Upsert(ctx context.Context, db DB, params *CacheDemoWorkItemCreateParams) (*CacheDemoWorkItem, error) {
	var err error

	cdwi.ClosedAt = params.ClosedAt
	cdwi.Description = params.Description
	cdwi.KanbanStepID = params.KanbanStepID
	cdwi.LastMessageAt = params.LastMessageAt
	cdwi.Line = params.Line
	cdwi.Metadata = params.Metadata
	cdwi.Ref = params.Ref
	cdwi.Reopened = params.Reopened
	cdwi.TargetDate = params.TargetDate
	cdwi.TeamID = params.TeamID
	cdwi.Title = params.Title
	cdwi.WorkItemID = params.WorkItemID
	cdwi.WorkItemTypeID = params.WorkItemTypeID

	cdwi, err = cdwi.Insert(ctx, db)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code != pgerrcode.UniqueViolation {
				return nil, fmt.Errorf("UpsertUser/Insert: %w", &XoError{Entity: "Cache  demo work item", Err: err})
			}
			cdwi, err = cdwi.Update(ctx, db)
			if err != nil {
				return nil, fmt.Errorf("UpsertUser/Update: %w", &XoError{Entity: "Cache  demo work item", Err: err})
			}
		}
	}

	return cdwi, err
}

// Delete deletes the CacheDemoWorkItem from the database.
func (cdwi *CacheDemoWorkItem) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM public.cache__demo_work_items 
	WHERE work_item_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, cdwi.WorkItemID); err != nil {
		return logerror(err)
	}
	return nil
}

// SoftDelete soft deletes the CacheDemoWorkItem from the database via 'deleted_at'.
func (cdwi *CacheDemoWorkItem) SoftDelete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `UPDATE public.cache__demo_work_items 
	SET deleted_at = NOW() 
	WHERE work_item_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, cdwi.WorkItemID); err != nil {
		return logerror(err)
	}
	// set deleted
	cdwi.DeletedAt = newPointer(time.Now())

	return nil
}

// Restore restores a soft deleted CacheDemoWorkItem from the database.
func (cdwi *CacheDemoWorkItem) Restore(ctx context.Context, db DB) (*CacheDemoWorkItem, error) {
	cdwi.DeletedAt = nil
	newcdwi, err := cdwi.Update(ctx, db)
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoWorkItem/Restore/pgx.CollectRows: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	return newcdwi, nil
}

// CacheDemoWorkItemPaginatedByWorkItemID returns a cursor-paginated list of CacheDemoWorkItem.
func CacheDemoWorkItemPaginatedByWorkItemID(ctx context.Context, db DB, workItemID int, direction models.Direction, opts ...CacheDemoWorkItemSelectConfigOption) ([]CacheDemoWorkItem, error) {
	c := &CacheDemoWorkItemSelectConfig{deletedAt: " null ", joins: CacheDemoWorkItemJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.KanbanStep {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableKanbanStepSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableKanbanStepJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableKanbanStepGroupBySQL)
	}

	if c.joins.Team {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableTeamSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableTeamJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableTeamGroupBySQL)
	}

	if c.joins.WorkItemType {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableWorkItemTypeSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableWorkItemTypeJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableWorkItemTypeGroupBySQL)
	}

	if c.joins.TimeEntries {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableTimeEntriesSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableTimeEntriesJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableTimeEntriesGroupBySQL)
	}

	if c.joins.Assignees {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableAssigneesSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableAssigneesJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableAssigneesGroupBySQL)
	}

	if c.joins.WorkItemComments {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableWorkItemCommentsSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableWorkItemCommentsJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableWorkItemCommentsGroupBySQL)
	}

	if c.joins.WorkItemTags {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableWorkItemTagsSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableWorkItemTagsJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableWorkItemTagsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	operator := "<"
	if direction == models.DirectionAsc {
		operator = ">"
	}

	sqlstr := fmt.Sprintf(`SELECT 
	cache__demo_work_items.closed_at,
	cache__demo_work_items.created_at,
	cache__demo_work_items.deleted_at,
	cache__demo_work_items.description,
	cache__demo_work_items.kanban_step_id,
	cache__demo_work_items.last_message_at,
	cache__demo_work_items.line,
	cache__demo_work_items.metadata,
	cache__demo_work_items.ref,
	cache__demo_work_items.reopened,
	cache__demo_work_items.target_date,
	cache__demo_work_items.team_id,
	cache__demo_work_items.title,
	cache__demo_work_items.updated_at,
	cache__demo_work_items.work_item_id,
	cache__demo_work_items.work_item_type_id %s 
	 FROM public.cache__demo_work_items %s 
	 WHERE cache__demo_work_items.work_item_id %s $1
	 %s   AND cache__demo_work_items.deleted_at is %s  %s 
  %s 
  ORDER BY 
		work_item_id %s `, selects, joins, operator, filters, c.deletedAt, groupbys, havingClause, direction)
	sqlstr += c.limit
	sqlstr = "/* CacheDemoWorkItemPaginatedByWorkItemID */\n" + sqlstr

	// run

	rows, err := db.Query(ctx, sqlstr, append([]any{workItemID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoWorkItem/Paginated/db.Query: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[CacheDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoWorkItem/Paginated/pgx.CollectRows: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	return res, nil
}

// CacheDemoWorkItemsByReopened retrieves a row from 'public.cache__demo_work_items' as a CacheDemoWorkItem.
//
// Generated from index 'cache__demo_work_items_gin_index'.
func CacheDemoWorkItemsByReopened(ctx context.Context, db DB, reopened bool, opts ...CacheDemoWorkItemSelectConfigOption) ([]CacheDemoWorkItem, error) {
	c := &CacheDemoWorkItemSelectConfig{deletedAt: " null ", joins: CacheDemoWorkItemJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.KanbanStep {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableKanbanStepSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableKanbanStepJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableKanbanStepGroupBySQL)
	}

	if c.joins.Team {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableTeamSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableTeamJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableTeamGroupBySQL)
	}

	if c.joins.WorkItemType {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableWorkItemTypeSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableWorkItemTypeJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableWorkItemTypeGroupBySQL)
	}

	if c.joins.TimeEntries {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableTimeEntriesSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableTimeEntriesJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableTimeEntriesGroupBySQL)
	}

	if c.joins.Assignees {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableAssigneesSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableAssigneesJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableAssigneesGroupBySQL)
	}

	if c.joins.WorkItemComments {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableWorkItemCommentsSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableWorkItemCommentsJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableWorkItemCommentsGroupBySQL)
	}

	if c.joins.WorkItemTags {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableWorkItemTagsSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableWorkItemTagsJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableWorkItemTagsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	cache__demo_work_items.closed_at,
	cache__demo_work_items.created_at,
	cache__demo_work_items.deleted_at,
	cache__demo_work_items.description,
	cache__demo_work_items.kanban_step_id,
	cache__demo_work_items.last_message_at,
	cache__demo_work_items.line,
	cache__demo_work_items.metadata,
	cache__demo_work_items.ref,
	cache__demo_work_items.reopened,
	cache__demo_work_items.target_date,
	cache__demo_work_items.team_id,
	cache__demo_work_items.title,
	cache__demo_work_items.updated_at,
	cache__demo_work_items.work_item_id,
	cache__demo_work_items.work_item_type_id %s 
	 FROM public.cache__demo_work_items %s 
	 WHERE cache__demo_work_items.reopened = $1
	 %s   AND cache__demo_work_items.deleted_at is %s  %s 
  %s 
`, selects, joins, filters, c.deletedAt, groupbys, havingClause)
	sqlstr += c.orderBy
	sqlstr += c.limit
	sqlstr = "/* CacheDemoWorkItemsByReopened */\n" + sqlstr

	// run
	// logf(sqlstr, reopened)
	rows, err := db.Query(ctx, sqlstr, append([]any{reopened}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoWorkItem/CacheDemoWorkItemsByTitleLineRefReopened/Query: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[CacheDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoWorkItem/CacheDemoWorkItemsByTitleLineRefReopened/pgx.CollectRows: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	return res, nil
}

// CacheDemoWorkItemByWorkItemID retrieves a row from 'public.cache__demo_work_items' as a CacheDemoWorkItem.
//
// Generated from index 'cache__demo_work_items_pkey'.
func CacheDemoWorkItemByWorkItemID(ctx context.Context, db DB, workItemID int, opts ...CacheDemoWorkItemSelectConfigOption) (*CacheDemoWorkItem, error) {
	c := &CacheDemoWorkItemSelectConfig{deletedAt: " null ", joins: CacheDemoWorkItemJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.KanbanStep {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableKanbanStepSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableKanbanStepJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableKanbanStepGroupBySQL)
	}

	if c.joins.Team {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableTeamSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableTeamJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableTeamGroupBySQL)
	}

	if c.joins.WorkItemType {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableWorkItemTypeSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableWorkItemTypeJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableWorkItemTypeGroupBySQL)
	}

	if c.joins.TimeEntries {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableTimeEntriesSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableTimeEntriesJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableTimeEntriesGroupBySQL)
	}

	if c.joins.Assignees {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableAssigneesSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableAssigneesJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableAssigneesGroupBySQL)
	}

	if c.joins.WorkItemComments {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableWorkItemCommentsSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableWorkItemCommentsJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableWorkItemCommentsGroupBySQL)
	}

	if c.joins.WorkItemTags {
		selectClauses = append(selectClauses, cacheDemoWorkItemTableWorkItemTagsSelectSQL)
		joinClauses = append(joinClauses, cacheDemoWorkItemTableWorkItemTagsJoinSQL)
		groupByClauses = append(groupByClauses, cacheDemoWorkItemTableWorkItemTagsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	cache__demo_work_items.closed_at,
	cache__demo_work_items.created_at,
	cache__demo_work_items.deleted_at,
	cache__demo_work_items.description,
	cache__demo_work_items.kanban_step_id,
	cache__demo_work_items.last_message_at,
	cache__demo_work_items.line,
	cache__demo_work_items.metadata,
	cache__demo_work_items.ref,
	cache__demo_work_items.reopened,
	cache__demo_work_items.target_date,
	cache__demo_work_items.team_id,
	cache__demo_work_items.title,
	cache__demo_work_items.updated_at,
	cache__demo_work_items.work_item_id,
	cache__demo_work_items.work_item_type_id %s 
	 FROM public.cache__demo_work_items %s 
	 WHERE cache__demo_work_items.work_item_id = $1
	 %s   AND cache__demo_work_items.deleted_at is %s  %s 
  %s 
`, selects, joins, filters, c.deletedAt, groupbys, havingClause)
	sqlstr += c.orderBy
	sqlstr += c.limit
	sqlstr = "/* CacheDemoWorkItemByWorkItemID */\n" + sqlstr

	// run
	// logf(sqlstr, workItemID)
	rows, err := db.Query(ctx, sqlstr, append([]any{workItemID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("cache__demo_work_items/CacheDemoWorkItemByWorkItemID/db.Query: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}
	cdwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[CacheDemoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("cache__demo_work_items/CacheDemoWorkItemByWorkItemID/pgx.CollectOneRow: %w", &XoError{Entity: "Cache  demo work item", Err: err}))
	}

	return &cdwi, nil
}

// FKKanbanStep_KanbanStepID returns the KanbanStep associated with the CacheDemoWorkItem's (KanbanStepID).
//
// Generated from foreign key 'cache__demo_work_items_kanban_step_id_fkey'.
func (cdwi *CacheDemoWorkItem) FKKanbanStep_KanbanStepID(ctx context.Context, db DB) (*KanbanStep, error) {
	return KanbanStepByKanbanStepID(ctx, db, cdwi.KanbanStepID)
}

// FKTeam_TeamID returns the Team associated with the CacheDemoWorkItem's (TeamID).
//
// Generated from foreign key 'cache__demo_work_items_team_id_fkey'.
func (cdwi *CacheDemoWorkItem) FKTeam_TeamID(ctx context.Context, db DB) (*Team, error) {
	return TeamByTeamID(ctx, db, cdwi.TeamID)
}

// FKWorkItem_WorkItemID returns the WorkItem associated with the CacheDemoWorkItem's (WorkItemID).
//
// Generated from foreign key 'cache__demo_work_items_work_item_id_fkey'.
func (cdwi *CacheDemoWorkItem) FKWorkItem_WorkItemID(ctx context.Context, db DB) (*WorkItem, error) {
	return WorkItemByWorkItemID(ctx, db, cdwi.WorkItemID)
}

// FKWorkItemType_WorkItemTypeID returns the WorkItemType associated with the CacheDemoWorkItem's (WorkItemTypeID).
//
// Generated from foreign key 'cache__demo_work_items_work_item_type_id_fkey'.
func (cdwi *CacheDemoWorkItem) FKWorkItemType_WorkItemTypeID(ctx context.Context, db DB) (*WorkItemType, error) {
	return WorkItemTypeByWorkItemTypeID(ctx, db, cdwi.WorkItemTypeID)
}

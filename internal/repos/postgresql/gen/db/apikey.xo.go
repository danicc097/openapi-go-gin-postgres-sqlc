package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/google/uuid"
)

type APIKeySelectConfig struct {
	limit    string
	orderBy  string
	joinWith []APIKeyJoinBy
}

type APIKeySelectConfigOption func(*APIKeySelectConfig)

// APIKeyWithLimit limits row selection.
func APIKeyWithLimit(limit int) APIKeySelectConfigOption {
	return func(s *APIKeySelectConfig) {
		s.limit = fmt.Sprintf(" limit %d ", limit)
	}
}

// APIKeyWithOrderBy orders results by the given columns.
func APIKeyWithOrderBy(rows ...APIKeyOrderBy) APIKeySelectConfigOption {
	return func(s *APIKeySelectConfig) {
		s.orderBy = strings.Join(rows, ", ")
	}
}

type (
	APIKeyJoinBy  = string
	APIKeyOrderBy = string
)

const (
	APIKeyExpiresOnDescNullsFirst APIKeyOrderBy = "expires_on DESC NULLS FIRST"
	APIKeyExpiresOnDescNullsLast  APIKeyOrderBy = "expires_on DESC NULLS LAST"
	APIKeyExpiresOnAscNullsFirst  APIKeyOrderBy = "expires_on ASC NULLS FIRST"
	APIKeyExpiresOnAscNullsLast   APIKeyOrderBy = "expires_on ASC NULLS LAST"
)

// APIKey represents a row from 'public.api_keys'.
type APIKey struct {
	APIKeyID  int       `json:"api_key_id"` // api_key_id
	APIKey    string    `json:"api_key"`    // api_key
	UserID    uuid.UUID `json:"user_id"`    // user_id
	ExpiresOn time.Time `json:"expires_on"` // expires_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the APIKey exists in the database.
func (ak *APIKey) Exists() bool {
	return ak._exists
}

// Deleted returns true when the APIKey has been marked for deletion from
// the database.
func (ak *APIKey) Deleted() bool {
	return ak._deleted
}

// Insert inserts the APIKey to the database.
func (ak *APIKey) Insert(ctx context.Context, db DB) error {
	switch {
	case ak._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ak._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO public.api_keys (` +
		`api_key, user_id, expires_on` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING api_key_id `
	// run
	logf(sqlstr, ak.APIKey, ak.UserID, ak.ExpiresOn)
	if err := db.QueryRow(ctx, sqlstr, ak.APIKey, ak.UserID, ak.ExpiresOn).Scan(&ak.APIKeyID); err != nil {
		return logerror(err)
	}
	// set exists
	ak._exists = true
	return nil
}

// Update updates a APIKey in the database.
func (ak *APIKey) Update(ctx context.Context, db DB) error {
	switch {
	case !ak._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ak._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	sqlstr := `UPDATE public.api_keys SET ` +
		`api_key = $1, user_id = $2, expires_on = $3 ` +
		`WHERE api_key_id = $4 `
	// run
	logf(sqlstr, ak.APIKey, ak.UserID, ak.ExpiresOn, ak.APIKeyID)
	if _, err := db.Exec(ctx, sqlstr, ak.APIKey, ak.UserID, ak.ExpiresOn, ak.APIKeyID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the APIKey to the database.
func (ak *APIKey) Save(ctx context.Context, db DB) error {
	if ak.Exists() {
		return ak.Update(ctx, db)
	}
	return ak.Insert(ctx, db)
}

// Upsert performs an upsert for APIKey.
func (ak *APIKey) Upsert(ctx context.Context, db DB) error {
	switch {
	case ak._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	sqlstr := `INSERT INTO public.api_keys (` +
		`api_key_id, api_key, user_id, expires_on` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (api_key_id) DO ` +
		`UPDATE SET ` +
		`api_key = EXCLUDED.api_key, user_id = EXCLUDED.user_id, expires_on = EXCLUDED.expires_on  `
	// run
	logf(sqlstr, ak.APIKeyID, ak.APIKey, ak.UserID, ak.ExpiresOn)
	if _, err := db.Exec(ctx, sqlstr, ak.APIKeyID, ak.APIKey, ak.UserID, ak.ExpiresOn); err != nil {
		return logerror(err)
	}
	// set exists
	ak._exists = true
	return nil
}

// Delete deletes the APIKey from the database.
func (ak *APIKey) Delete(ctx context.Context, db DB) error {
	switch {
	case !ak._exists: // doesn't exist
		return nil
	case ak._deleted: // deleted
		return nil
	}
	// delete with single primary key
	sqlstr := `DELETE FROM public.api_keys ` +
		`WHERE api_key_id = $1 `
	// run
	logf(sqlstr, ak.APIKeyID)
	if _, err := db.Exec(ctx, sqlstr, ak.APIKeyID); err != nil {
		return logerror(err)
	}
	// set deleted
	ak._deleted = true
	return nil
}

// APIKeyByAPIKey retrieves a row from 'public.api_keys' as a APIKey.
//
// Generated from index 'api_keys_api_key_key'.
func APIKeyByAPIKey(ctx context.Context, db DB, apiKey string, opts ...APIKeySelectConfigOption) (*APIKey, error) {
	c := &APIKeySelectConfig{}
	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`api_key_id, api_key, user_id, expires_on ` +
		`FROM public.api_keys ` +
		`WHERE api_key = $1 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	logf(sqlstr, apiKey)
	ak := APIKey{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, apiKey).Scan(&ak.APIKeyID, &ak.APIKey, &ak.UserID, &ak.ExpiresOn); err != nil {
		return nil, logerror(err)
	}
	return &ak, nil
}

// APIKeyByAPIKeyID retrieves a row from 'public.api_keys' as a APIKey.
//
// Generated from index 'api_keys_pkey'.
func APIKeyByAPIKeyID(ctx context.Context, db DB, apiKeyID int, opts ...APIKeySelectConfigOption) (*APIKey, error) {
	c := &APIKeySelectConfig{}
	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`api_key_id, api_key, user_id, expires_on ` +
		`FROM public.api_keys ` +
		`WHERE api_key_id = $1 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	logf(sqlstr, apiKeyID)
	ak := APIKey{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, apiKeyID).Scan(&ak.APIKeyID, &ak.APIKey, &ak.UserID, &ak.ExpiresOn); err != nil {
		return nil, logerror(err)
	}
	return &ak, nil
}

// User returns the User associated with the APIKey's (UserID).
//
// Generated from foreign key 'api_keys_user_id_fkey'.
func (ak *APIKey) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, ak.UserID)
}

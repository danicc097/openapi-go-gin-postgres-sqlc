package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/jackc/pgx/v5"
)

// ExtraSchemaBookSeller represents a row from 'extra_schema.book_sellers'.
// Change properties via SQL column comments, joined with " && ":
//   - "properties":<p1>,<p2>,...
//     -- private to exclude a field from JSON.
//     -- not-required to make a schema field not required.
//     -- hidden to exclude field from OpenAPI generation.
//   - "type":<pkg.type> to override the type annotation. An openapi schema named <type> must exist.
//   - "cardinality":<O2O|M2O|M2M> to generate/override joins explicitly. Only O2O is inferred.
//   - "tags":<tags> to append literal struct tag strings.
type ExtraSchemaBookSeller struct {
	BookID ExtraSchemaBookID `json:"bookID" db:"book_id" required:"true" nullable:"false"` // book_id
	Seller ExtraSchemaUserID `json:"seller" db:"seller" required:"true" nullable:"false"`  // seller

	BookSellersJoin *[]ExtraSchemaUser `json:"-" db:"book_sellers_sellers" openapi-go:"ignore"` // M2M book_sellers
	SellerBooksJoin *[]ExtraSchemaBook `json:"-" db:"book_sellers_books" openapi-go:"ignore"`   // M2M book_sellers

}

// ExtraSchemaBookSellerCreateParams represents insert params for 'extra_schema.book_sellers'.
type ExtraSchemaBookSellerCreateParams struct {
	BookID ExtraSchemaBookID `json:"bookID" required:"true" nullable:"false"` // book_id
	Seller ExtraSchemaUserID `json:"seller" required:"true" nullable:"false"` // seller
}

// CreateExtraSchemaBookSeller creates a new ExtraSchemaBookSeller in the database with the given params.
func CreateExtraSchemaBookSeller(ctx context.Context, db DB, params *ExtraSchemaBookSellerCreateParams) (*ExtraSchemaBookSeller, error) {
	esbs := &ExtraSchemaBookSeller{
		BookID: params.BookID,
		Seller: params.Seller,
	}

	return esbs.Insert(ctx, db)
}

// ExtraSchemaBookSellerUpdateParams represents update params for 'extra_schema.book_sellers'.
type ExtraSchemaBookSellerUpdateParams struct {
	BookID *ExtraSchemaBookID `json:"bookID" nullable:"false"` // book_id
	Seller *ExtraSchemaUserID `json:"seller" nullable:"false"` // seller
}

// SetUpdateParams updates extra_schema.book_sellers struct fields with the specified params.
func (esbs *ExtraSchemaBookSeller) SetUpdateParams(params *ExtraSchemaBookSellerUpdateParams) {
	if params.BookID != nil {
		esbs.BookID = *params.BookID
	}
	if params.Seller != nil {
		esbs.Seller = *params.Seller
	}
}

type ExtraSchemaBookSellerSelectConfig struct {
	limit   string
	orderBy string
	joins   ExtraSchemaBookSellerJoins
	filters map[string][]any
	having  map[string][]any
}
type ExtraSchemaBookSellerSelectConfigOption func(*ExtraSchemaBookSellerSelectConfig)

// WithExtraSchemaBookSellerLimit limits row selection.
func WithExtraSchemaBookSellerLimit(limit int) ExtraSchemaBookSellerSelectConfigOption {
	return func(s *ExtraSchemaBookSellerSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

type ExtraSchemaBookSellerOrderBy string

const ()

type ExtraSchemaBookSellerJoins struct {
	Sellers     bool // M2M book_sellers
	BooksSeller bool // M2M book_sellers
}

// WithExtraSchemaBookSellerJoin joins with the given tables.
func WithExtraSchemaBookSellerJoin(joins ExtraSchemaBookSellerJoins) ExtraSchemaBookSellerSelectConfigOption {
	return func(s *ExtraSchemaBookSellerSelectConfig) {
		s.joins = ExtraSchemaBookSellerJoins{
			Sellers:     s.joins.Sellers || joins.Sellers,
			BooksSeller: s.joins.BooksSeller || joins.BooksSeller,
		}
	}
}

// WithExtraSchemaBookSellerFilters adds the given WHERE clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	filters := map[string][]any{
//		"NOT (col.name = any ($i))": {[]string{"excl_name_1", "excl_name_2"}},
//		`(col.created_at > $i OR
//		col.is_closed = $i)`: {time.Now().Add(-24 * time.Hour), true},
//	}
func WithExtraSchemaBookSellerFilters(filters map[string][]any) ExtraSchemaBookSellerSelectConfigOption {
	return func(s *ExtraSchemaBookSellerSelectConfig) {
		s.filters = filters
	}
}

// WithExtraSchemaBookSellerHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	// filter a given aggregate of assigned users to return results where at least one of them has id of userId
//	filters := map[string][]any{
//	"$i = ANY(ARRAY_AGG(assigned_users_join.user_id))": {userId},
//	}
func WithExtraSchemaBookSellerHavingClause(conditions map[string][]any) ExtraSchemaBookSellerSelectConfigOption {
	return func(s *ExtraSchemaBookSellerSelectConfig) {
		s.having = conditions
	}
}

const extraSchemaBookSellerTableSellersJoinSQL = `-- M2M join generated from "book_sellers_seller_fkey"
left join (
	select
		book_sellers.book_id as book_sellers_book_id
		, users.user_id as __users_user_id
		, row(users.*) as __users
	from
		extra_schema.book_sellers
	join extra_schema.users on users.user_id = book_sellers.seller
	group by
		book_sellers_book_id
		, users.user_id
) as joined_book_sellers_sellers on joined_book_sellers_sellers.book_sellers_book_id = book_sellers.book_id
`

const extraSchemaBookSellerTableSellersSelectSQL = `COALESCE(
		ARRAY_AGG( DISTINCT (
		joined_book_sellers_sellers.__users
		)) filter (where joined_book_sellers_sellers.__users_user_id is not null), '{}') as book_sellers_sellers`

const extraSchemaBookSellerTableSellersGroupBySQL = `book_sellers.book_id, book_sellers.book_id, book_sellers.seller`

const extraSchemaBookSellerTableBooksSellerJoinSQL = `-- M2M join generated from "book_sellers_book_id_fkey"
left join (
	select
		book_sellers.seller as book_sellers_seller
		, books.book_id as __books_book_id
		, row(books.*) as __books
	from
		extra_schema.book_sellers
	join extra_schema.books on books.book_id = book_sellers.book_id
	group by
		book_sellers_seller
		, books.book_id
) as joined_book_sellers_books on joined_book_sellers_books.book_sellers_seller = book_sellers.seller
`

const extraSchemaBookSellerTableBooksSellerSelectSQL = `COALESCE(
		ARRAY_AGG( DISTINCT (
		joined_book_sellers_books.__books
		)) filter (where joined_book_sellers_books.__books_book_id is not null), '{}') as book_sellers_books`

const extraSchemaBookSellerTableBooksSellerGroupBySQL = `book_sellers.seller, book_sellers.book_id, book_sellers.seller`

// Insert inserts the ExtraSchemaBookSeller to the database.
func (esbs *ExtraSchemaBookSeller) Insert(ctx context.Context, db DB) (*ExtraSchemaBookSeller, error) {
	// insert (manual)
	sqlstr := `INSERT INTO extra_schema.book_sellers (
	book_id, seller
	) VALUES (
	$1, $2
	)
	 RETURNING * `
	// run
	logf(sqlstr, esbs.BookID, esbs.Seller)
	rows, err := db.Query(ctx, sqlstr, esbs.BookID, esbs.Seller)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/Insert/db.Query: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	newesbs, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[ExtraSchemaBookSeller])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/Insert/pgx.CollectOneRow: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	*esbs = newesbs

	return esbs, nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the ExtraSchemaBookSeller from the database.
func (esbs *ExtraSchemaBookSeller) Delete(ctx context.Context, db DB) error {
	// delete with composite primary key
	sqlstr := `DELETE FROM extra_schema.book_sellers 
	WHERE book_id = $1 AND seller = $2 `
	// run
	if _, err := db.Exec(ctx, sqlstr, esbs.BookID, esbs.Seller); err != nil {
		return logerror(err)
	}
	return nil
}

// ExtraSchemaBookSellersByBookIDSeller retrieves a row from 'extra_schema.book_sellers' as a ExtraSchemaBookSeller.
//
// Generated from index 'book_sellers_book_id_seller_idx'.
func ExtraSchemaBookSellersByBookIDSeller(ctx context.Context, db DB, bookID ExtraSchemaBookID, seller ExtraSchemaUserID, opts ...ExtraSchemaBookSellerSelectConfigOption) ([]ExtraSchemaBookSeller, error) {
	c := &ExtraSchemaBookSellerSelectConfig{joins: ExtraSchemaBookSellerJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 2
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Sellers {
		selectClauses = append(selectClauses, extraSchemaBookSellerTableSellersSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookSellerTableSellersJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookSellerTableSellersGroupBySQL)
	}

	if c.joins.BooksSeller {
		selectClauses = append(selectClauses, extraSchemaBookSellerTableBooksSellerSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookSellerTableBooksSellerJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookSellerTableBooksSellerGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	book_sellers.book_id,
	book_sellers.seller %s 
	 FROM extra_schema.book_sellers %s 
	 WHERE book_sellers.book_id = $1 AND book_sellers.seller = $2
	 %s   %s 
  %s 
`, selects, joins, filters, groupbys, havingClause)
	sqlstr += c.orderBy
	sqlstr += c.limit
	sqlstr = "/* ExtraSchemaBookSellersByBookIDSeller */\n" + sqlstr

	// run
	// logf(sqlstr, bookID, seller)
	rows, err := db.Query(ctx, sqlstr, append([]any{bookID, seller}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/BookSellersByBookIDSeller/Query: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[ExtraSchemaBookSeller])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/BookSellersByBookIDSeller/pgx.CollectRows: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	return res, nil
}

// ExtraSchemaBookSellersByBookID retrieves a row from 'extra_schema.book_sellers' as a ExtraSchemaBookSeller.
//
// Generated from index 'book_sellers_pkey'.
func ExtraSchemaBookSellersByBookID(ctx context.Context, db DB, bookID ExtraSchemaBookID, opts ...ExtraSchemaBookSellerSelectConfigOption) ([]ExtraSchemaBookSeller, error) {
	c := &ExtraSchemaBookSellerSelectConfig{joins: ExtraSchemaBookSellerJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Sellers {
		selectClauses = append(selectClauses, extraSchemaBookSellerTableSellersSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookSellerTableSellersJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookSellerTableSellersGroupBySQL)
	}

	if c.joins.BooksSeller {
		selectClauses = append(selectClauses, extraSchemaBookSellerTableBooksSellerSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookSellerTableBooksSellerJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookSellerTableBooksSellerGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	book_sellers.book_id,
	book_sellers.seller %s 
	 FROM extra_schema.book_sellers %s 
	 WHERE book_sellers.book_id = $1
	 %s   %s 
  %s 
`, selects, joins, filters, groupbys, havingClause)
	sqlstr += c.orderBy
	sqlstr += c.limit
	sqlstr = "/* ExtraSchemaBookSellersByBookID */\n" + sqlstr

	// run
	// logf(sqlstr, bookID)
	rows, err := db.Query(ctx, sqlstr, append([]any{bookID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/BookSellerByBookIDSeller/Query: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[ExtraSchemaBookSeller])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/BookSellerByBookIDSeller/pgx.CollectRows: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	return res, nil
}

// ExtraSchemaBookSellersBySeller retrieves a row from 'extra_schema.book_sellers' as a ExtraSchemaBookSeller.
//
// Generated from index 'book_sellers_pkey'.
func ExtraSchemaBookSellersBySeller(ctx context.Context, db DB, seller ExtraSchemaUserID, opts ...ExtraSchemaBookSellerSelectConfigOption) ([]ExtraSchemaBookSeller, error) {
	c := &ExtraSchemaBookSellerSelectConfig{joins: ExtraSchemaBookSellerJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Sellers {
		selectClauses = append(selectClauses, extraSchemaBookSellerTableSellersSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookSellerTableSellersJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookSellerTableSellersGroupBySQL)
	}

	if c.joins.BooksSeller {
		selectClauses = append(selectClauses, extraSchemaBookSellerTableBooksSellerSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookSellerTableBooksSellerJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookSellerTableBooksSellerGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	book_sellers.book_id,
	book_sellers.seller %s 
	 FROM extra_schema.book_sellers %s 
	 WHERE book_sellers.seller = $1
	 %s   %s 
  %s 
`, selects, joins, filters, groupbys, havingClause)
	sqlstr += c.orderBy
	sqlstr += c.limit
	sqlstr = "/* ExtraSchemaBookSellersBySeller */\n" + sqlstr

	// run
	// logf(sqlstr, seller)
	rows, err := db.Query(ctx, sqlstr, append([]any{seller}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/BookSellerByBookIDSeller/Query: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[ExtraSchemaBookSeller])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/BookSellerByBookIDSeller/pgx.CollectRows: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	return res, nil
}

// ExtraSchemaBookSellersBySellerBookID retrieves a row from 'extra_schema.book_sellers' as a ExtraSchemaBookSeller.
//
// Generated from index 'book_sellers_seller_book_id_idx'.
func ExtraSchemaBookSellersBySellerBookID(ctx context.Context, db DB, seller ExtraSchemaUserID, bookID ExtraSchemaBookID, opts ...ExtraSchemaBookSellerSelectConfigOption) ([]ExtraSchemaBookSeller, error) {
	c := &ExtraSchemaBookSellerSelectConfig{joins: ExtraSchemaBookSellerJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 2
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Sellers {
		selectClauses = append(selectClauses, extraSchemaBookSellerTableSellersSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookSellerTableSellersJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookSellerTableSellersGroupBySQL)
	}

	if c.joins.BooksSeller {
		selectClauses = append(selectClauses, extraSchemaBookSellerTableBooksSellerSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookSellerTableBooksSellerJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookSellerTableBooksSellerGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	book_sellers.book_id,
	book_sellers.seller %s 
	 FROM extra_schema.book_sellers %s 
	 WHERE book_sellers.seller = $1 AND book_sellers.book_id = $2
	 %s   %s 
  %s 
`, selects, joins, filters, groupbys, havingClause)
	sqlstr += c.orderBy
	sqlstr += c.limit
	sqlstr = "/* ExtraSchemaBookSellersBySellerBookID */\n" + sqlstr

	// run
	// logf(sqlstr, seller, bookID)
	rows, err := db.Query(ctx, sqlstr, append([]any{seller, bookID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/BookSellersBySellerBookID/Query: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[ExtraSchemaBookSeller])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookSeller/BookSellersBySellerBookID/pgx.CollectRows: %w", &XoError{Entity: "Book seller", Err: err}))
	}
	return res, nil
}

// FKBook_BookID returns the Book associated with the ExtraSchemaBookSeller's (BookID).
//
// Generated from foreign key 'book_sellers_book_id_fkey'.
func (esbs *ExtraSchemaBookSeller) FKBook_BookID(ctx context.Context, db DB) (*ExtraSchemaBook, error) {
	return ExtraSchemaBookByBookID(ctx, db, esbs.BookID)
}

// FKUser_Seller returns the User associated with the ExtraSchemaBookSeller's (Seller).
//
// Generated from foreign key 'book_sellers_seller_fkey'.
func (esbs *ExtraSchemaBookSeller) FKUser_Seller(ctx context.Context, db DB) (*ExtraSchemaUser, error) {
	return ExtraSchemaUserByUserID(ctx, db, esbs.Seller)
}

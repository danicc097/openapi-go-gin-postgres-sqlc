package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"strings"
	"time"

	models "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	"github.com/jackc/pgx/v5"

	"github.com/google/uuid"
)

// User represents a row from 'public.users'.
// Change properties via SQL column comments, joined with ",":
//   - "property:private" to exclude a field from JSON.
//   - "type:<pkg.type>" to override the type annotation.
//   - "cardinality:O2O|O2M|M2O|M2M" to generate joins (not executed by default).
type User struct {
	UserID                   uuid.UUID     `json:"userID" db:"user_id" required:"true"`                                      // user_id
	Username                 string        `json:"username" db:"username" required:"true"`                                   // username
	Email                    string        `json:"email" db:"email" required:"true"`                                         // email
	FirstName                *string       `json:"firstName" db:"first_name" required:"true"`                                // first_name
	LastName                 *string       `json:"lastName" db:"last_name" required:"true"`                                  // last_name
	FullName                 *string       `json:"fullName" db:"full_name" required:"true"`                                  // full_name
	ExternalID               string        `json:"-" db:"external_id"`                                                       // external_id
	APIKeyID                 *int          `json:"-" db:"api_key_id"`                                                        // api_key_id
	Scopes                   models.Scopes `json:"scopes" db:"scopes" required:"true" ref:"#/components/schemas/Scopes"`     // scopes
	RoleRank                 int16         `json:"-" db:"role_rank"`                                                         // role_rank
	HasPersonalNotifications bool          `json:"hasPersonalNotifications" db:"has_personal_notifications" required:"true"` // has_personal_notifications
	HasGlobalNotifications   bool          `json:"hasGlobalNotifications" db:"has_global_notifications" required:"true"`     // has_global_notifications
	CreatedAt                time.Time     `json:"createdAt" db:"created_at" required:"true"`                                // created_at
	UpdatedAt                time.Time     `json:"-" db:"updated_at"`                                                        // updated_at
	DeletedAt                *time.Time    `json:"deletedAt" db:"deleted_at" required:"true"`                                // deleted_at

	NotificationsJoinReceiver *[]Notification     `json:"-" db:"notifications_receiver" openapi-go:"ignore"` // M2O
	NotificationsJoinSender   *[]Notification     `json:"-" db:"notifications_sender" openapi-go:"ignore"`   // M2O
	TimeEntriesJoin           *[]TimeEntry        `json:"-" db:"time_entries" openapi-go:"ignore"`           // M2O
	UserAPIKeyJoin            *UserAPIKey         `json:"-" db:"user_api_key" openapi-go:"ignore"`           // O2O (inferred)
	UserNotificationsJoin     *[]UserNotification `json:"-" db:"user_notifications" openapi-go:"ignore"`     // M2O
	TeamsJoin                 *[]Team             `json:"-" db:"teams" openapi-go:"ignore"`                  // M2M
	WorkItemCommentsJoin      *[]WorkItemComment  `json:"-" db:"work_item_comments" openapi-go:"ignore"`     // M2O
	WorkItemsJoin             *[]WorkItem         `json:"-" db:"work_items" openapi-go:"ignore"`             // M2M

}

// UserCreateParams represents insert params for 'public.users'
type UserCreateParams struct {
	Username                 string        `json:"username" required:"true"`                                 // username
	Email                    string        `json:"email" required:"true"`                                    // email
	FirstName                *string       `json:"firstName" required:"true"`                                // first_name
	LastName                 *string       `json:"lastName" required:"true"`                                 // last_name
	ExternalID               string        `json:"-"`                                                        // external_id
	APIKeyID                 *int          `json:"-"`                                                        // api_key_id
	Scopes                   models.Scopes `json:"scopes" required:"true" ref:"#/components/schemas/Scopes"` // scopes
	RoleRank                 int16         `json:"-"`                                                        // role_rank
	HasPersonalNotifications bool          `json:"hasPersonalNotifications" required:"true"`                 // has_personal_notifications
	HasGlobalNotifications   bool          `json:"hasGlobalNotifications" required:"true"`                   // has_global_notifications
}

// CreateUser creates a new User in the database with the given params.
func CreateUser(ctx context.Context, db DB, params *UserCreateParams) (*User, error) {
	u := &User{
		Username:                 params.Username,
		Email:                    params.Email,
		FirstName:                params.FirstName,
		LastName:                 params.LastName,
		ExternalID:               params.ExternalID,
		APIKeyID:                 params.APIKeyID,
		Scopes:                   params.Scopes,
		RoleRank:                 params.RoleRank,
		HasPersonalNotifications: params.HasPersonalNotifications,
		HasGlobalNotifications:   params.HasGlobalNotifications,
	}

	return u.Insert(ctx, db)
}

// UserUpdateParams represents update params for 'public.users'
type UserUpdateParams struct {
	Username                 *string        `json:"username" required:"true"`                                 // username
	Email                    *string        `json:"email" required:"true"`                                    // email
	FirstName                **string       `json:"firstName" required:"true"`                                // first_name
	LastName                 **string       `json:"lastName" required:"true"`                                 // last_name
	ExternalID               *string        `json:"-"`                                                        // external_id
	APIKeyID                 **int          `json:"-"`                                                        // api_key_id
	Scopes                   *models.Scopes `json:"scopes" required:"true" ref:"#/components/schemas/Scopes"` // scopes
	RoleRank                 *int16         `json:"-"`                                                        // role_rank
	HasPersonalNotifications *bool          `json:"hasPersonalNotifications" required:"true"`                 // has_personal_notifications
	HasGlobalNotifications   *bool          `json:"hasGlobalNotifications" required:"true"`                   // has_global_notifications
}

// SetUpdateParams updates public.users struct fields with the specified params.
func (u *User) SetUpdateParams(params *UserUpdateParams) {
	if params.Username != nil {
		u.Username = *params.Username
	}
	if params.Email != nil {
		u.Email = *params.Email
	}
	if params.FirstName != nil {
		u.FirstName = *params.FirstName
	}
	if params.LastName != nil {
		u.LastName = *params.LastName
	}
	if params.ExternalID != nil {
		u.ExternalID = *params.ExternalID
	}
	if params.APIKeyID != nil {
		u.APIKeyID = *params.APIKeyID
	}
	if params.Scopes != nil {
		u.Scopes = *params.Scopes
	}
	if params.RoleRank != nil {
		u.RoleRank = *params.RoleRank
	}
	if params.HasPersonalNotifications != nil {
		u.HasPersonalNotifications = *params.HasPersonalNotifications
	}
	if params.HasGlobalNotifications != nil {
		u.HasGlobalNotifications = *params.HasGlobalNotifications
	}
}

type UserSelectConfig struct {
	limit     string
	orderBy   string
	joins     UserJoins
	deletedAt string
}
type UserSelectConfigOption func(*UserSelectConfig)

// WithUserLimit limits row selection.
func WithUserLimit(limit int) UserSelectConfigOption {
	return func(s *UserSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

// WithDeletedUserOnly limits result to records marked as deleted.
func WithDeletedUserOnly() UserSelectConfigOption {
	return func(s *UserSelectConfig) {
		s.deletedAt = " not null "
	}
}

type UserOrderBy = string

const (
	UserCreatedAtDescNullsFirst UserOrderBy = " created_at DESC NULLS FIRST "
	UserCreatedAtDescNullsLast  UserOrderBy = " created_at DESC NULLS LAST "
	UserCreatedAtAscNullsFirst  UserOrderBy = " created_at ASC NULLS FIRST "
	UserCreatedAtAscNullsLast   UserOrderBy = " created_at ASC NULLS LAST "
	UserUpdatedAtDescNullsFirst UserOrderBy = " updated_at DESC NULLS FIRST "
	UserUpdatedAtDescNullsLast  UserOrderBy = " updated_at DESC NULLS LAST "
	UserUpdatedAtAscNullsFirst  UserOrderBy = " updated_at ASC NULLS FIRST "
	UserUpdatedAtAscNullsLast   UserOrderBy = " updated_at ASC NULLS LAST "
	UserDeletedAtDescNullsFirst UserOrderBy = " deleted_at DESC NULLS FIRST "
	UserDeletedAtDescNullsLast  UserOrderBy = " deleted_at DESC NULLS LAST "
	UserDeletedAtAscNullsFirst  UserOrderBy = " deleted_at ASC NULLS FIRST "
	UserDeletedAtAscNullsLast   UserOrderBy = " deleted_at ASC NULLS LAST "
)

// WithUserOrderBy orders results by the given columns.
func WithUserOrderBy(rows ...UserOrderBy) UserSelectConfigOption {
	return func(s *UserSelectConfig) {
		if len(rows) > 0 {
			s.orderBy = " order by "
			s.orderBy += strings.Join(rows, ", ")
		}
	}
}

type UserJoins struct {
	NotificationsReceiver bool
	NotificationsSender   bool
	TimeEntries           bool
	UserAPIKey            bool
	UserNotifications     bool
	Teams                 bool
	WorkItemComments      bool
	WorkItems             bool
}

// WithUserJoin joins with the given tables.
func WithUserJoin(joins UserJoins) UserSelectConfigOption {
	return func(s *UserSelectConfig) {
		s.joins = UserJoins{
			NotificationsReceiver: s.joins.NotificationsReceiver || joins.NotificationsReceiver,
			NotificationsSender:   s.joins.NotificationsSender || joins.NotificationsSender,
			TimeEntries:           s.joins.TimeEntries || joins.TimeEntries,
			UserAPIKey:            s.joins.UserAPIKey || joins.UserAPIKey,
			UserNotifications:     s.joins.UserNotifications || joins.UserNotifications,
			Teams:                 s.joins.Teams || joins.Teams,
			WorkItemComments:      s.joins.WorkItemComments || joins.WorkItemComments,
			WorkItems:             s.joins.WorkItems || joins.WorkItems,
		}
	}
}

// Insert inserts the User to the database.
func (u *User) Insert(ctx context.Context, db DB) (*User, error) {
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO public.users (` +
		`username, email, first_name, last_name, external_id, api_key_id, scopes, role_rank, has_personal_notifications, has_global_notifications, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) RETURNING * `
	// run
	logf(sqlstr, u.Username, u.Email, u.FirstName, u.LastName, u.ExternalID, u.APIKeyID, u.Scopes, u.RoleRank, u.HasPersonalNotifications, u.HasGlobalNotifications, u.DeletedAt)

	rows, err := db.Query(ctx, sqlstr, u.Username, u.Email, u.FirstName, u.LastName, u.ExternalID, u.APIKeyID, u.Scopes, u.RoleRank, u.HasPersonalNotifications, u.HasGlobalNotifications, u.DeletedAt)
	if err != nil {
		return nil, logerror(fmt.Errorf("User/Insert/db.Query: %w", err))
	}
	newu, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("User/Insert/pgx.CollectOneRow: %w", err))
	}

	*u = newu

	return u, nil
}

// Update updates a User in the database.
func (u *User) Update(ctx context.Context, db DB) (*User, error) {
	// update with composite primary key
	sqlstr := `UPDATE public.users SET ` +
		`username = $1, email = $2, first_name = $3, last_name = $4, external_id = $5, api_key_id = $6, scopes = $7, role_rank = $8, has_personal_notifications = $9, has_global_notifications = $10, deleted_at = $11 ` +
		`WHERE user_id = $12 ` +
		`RETURNING * `
	// run
	logf(sqlstr, u.Username, u.Email, u.FirstName, u.LastName, u.ExternalID, u.APIKeyID, u.Scopes, u.RoleRank, u.HasPersonalNotifications, u.HasGlobalNotifications, u.CreatedAt, u.UpdatedAt, u.DeletedAt, u.UserID)

	rows, err := db.Query(ctx, sqlstr, u.Username, u.Email, u.FirstName, u.LastName, u.ExternalID, u.APIKeyID, u.Scopes, u.RoleRank, u.HasPersonalNotifications, u.HasGlobalNotifications, u.DeletedAt, u.UserID)
	if err != nil {
		return nil, logerror(fmt.Errorf("User/Update/db.Query: %w", err))
	}
	newu, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("User/Update/pgx.CollectOneRow: %w", err))
	}
	*u = newu

	return u, nil
}

// Upsert performs an upsert for User.
func (u *User) Upsert(ctx context.Context, db DB) error {
	// upsert
	sqlstr := `INSERT INTO public.users (` +
		`user_id, username, email, first_name, last_name, full_name, external_id, api_key_id, scopes, role_rank, has_personal_notifications, has_global_notifications, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)` +
		` ON CONFLICT (user_id) DO ` +
		`UPDATE SET ` +
		`username = EXCLUDED.username, email = EXCLUDED.email, first_name = EXCLUDED.first_name, last_name = EXCLUDED.last_name, external_id = EXCLUDED.external_id, api_key_id = EXCLUDED.api_key_id, scopes = EXCLUDED.scopes, role_rank = EXCLUDED.role_rank, has_personal_notifications = EXCLUDED.has_personal_notifications, has_global_notifications = EXCLUDED.has_global_notifications, deleted_at = EXCLUDED.deleted_at ` +
		` RETURNING * `
	// run
	logf(sqlstr, u.UserID, u.Username, u.Email, u.FirstName, u.LastName, u.FullName, u.ExternalID, u.APIKeyID, u.Scopes, u.RoleRank, u.HasPersonalNotifications, u.HasGlobalNotifications, u.DeletedAt)
	if _, err := db.Exec(ctx, sqlstr, u.UserID, u.Username, u.Email, u.FirstName, u.LastName, u.FullName, u.ExternalID, u.APIKeyID, u.Scopes, u.RoleRank, u.HasPersonalNotifications, u.HasGlobalNotifications, u.DeletedAt); err != nil {
		return logerror(err)
	}
	// set exists
	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM public.users ` +
		`WHERE user_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, u.UserID); err != nil {
		return logerror(err)
	}
	return nil
}

// SoftDelete soft deletes the User from the database via 'deleted_at'.
func (u *User) SoftDelete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `UPDATE public.users ` +
		`SET deleted_at = NOW() ` +
		`WHERE user_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, u.UserID); err != nil {
		return logerror(err)
	}
	// set deleted
	u.DeletedAt = newPointer(time.Now())

	return nil
}

// Restore restores a soft deleted User from the database.
func (u *User) Restore(ctx context.Context, db DB) (*User, error) {
	u.DeletedAt = nil
	newu, err := u.Update(ctx, db)
	if err != nil {
		return nil, logerror(fmt.Errorf("User/Restore/pgx.CollectRows: %w", err))
	}
	return newu, nil
}

// UserPaginatedByUserID returns a cursor-paginated list of User.
func UserPaginatedByUserID(ctx context.Context, db DB, userID uuid.UUID, opts ...UserSelectConfigOption) ([]User, error) {
	c := &UserSelectConfig{deletedAt: " null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.user_id > $9`+
		` ORDER BY 
		user_id DESC  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.limit

	// run

	rows, err := db.Query(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(fmt.Errorf("User/Paginated/db.Query: %w", err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("User/Paginated/pgx.CollectRows: %w", err))
	}
	return res, nil
}

// UserPaginatedByCreatedAt returns a cursor-paginated list of User.
func UserPaginatedByCreatedAt(ctx context.Context, db DB, createdAt time.Time, opts ...UserSelectConfigOption) ([]User, error) {
	c := &UserSelectConfig{deletedAt: " null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.created_at > $9`+
		` ORDER BY 
		created_at DESC  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.limit

	// run

	rows, err := db.Query(ctx, sqlstr, createdAt)
	if err != nil {
		return nil, logerror(fmt.Errorf("User/Paginated/db.Query: %w", err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("User/Paginated/pgx.CollectRows: %w", err))
	}
	return res, nil
}

// UsersByCreatedAt retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_created_at_idx'.
func UsersByCreatedAt(ctx context.Context, db DB, createdAt time.Time, opts ...UserSelectConfigOption) ([]User, error) {
	c := &UserSelectConfig{deletedAt: " null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.created_at = $9  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, createdAt)
	rows, err := db.Query(ctx, sqlstr, c.joins.NotificationsReceiver, c.joins.NotificationsSender, c.joins.TimeEntries, c.joins.UserAPIKey, c.joins.UserNotifications, c.joins.Teams, c.joins.WorkItemComments, c.joins.WorkItems, createdAt)
	if err != nil {
		return nil, logerror(fmt.Errorf("User/UsersByCreatedAt/Query: %w", err))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("User/UsersByCreatedAt/pgx.CollectRows: %w", err))
	}
	return res, nil
}

// UserByCreatedAt retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_created_at_key'.
func UserByCreatedAt(ctx context.Context, db DB, createdAt time.Time, opts ...UserSelectConfigOption) (*User, error) {
	c := &UserSelectConfig{deletedAt: " null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.created_at = $9  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, createdAt)
	rows, err := db.Query(ctx, sqlstr, c.joins.NotificationsReceiver, c.joins.NotificationsSender, c.joins.TimeEntries, c.joins.UserAPIKey, c.joins.UserNotifications, c.joins.Teams, c.joins.WorkItemComments, c.joins.WorkItems, createdAt)
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByCreatedAt/db.Query: %w", err))
	}
	u, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByCreatedAt/pgx.CollectOneRow: %w", err))
	}

	return &u, nil
}

// UsersByDeletedAt_WhereDeletedAtIsNotNull retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_deleted_at_idx'.
func UsersByDeletedAt_WhereDeletedAtIsNotNull(ctx context.Context, db DB, deletedAt *time.Time, opts ...UserSelectConfigOption) ([]User, error) {
	c := &UserSelectConfig{deletedAt: " not null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.deleted_at = $9 AND (deleted_at IS NOT NULL)  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, deletedAt)
	rows, err := db.Query(ctx, sqlstr, c.joins.NotificationsReceiver, c.joins.NotificationsSender, c.joins.TimeEntries, c.joins.UserAPIKey, c.joins.UserNotifications, c.joins.Teams, c.joins.WorkItemComments, c.joins.WorkItems, deletedAt)
	if err != nil {
		return nil, logerror(fmt.Errorf("User/UsersByDeletedAt/Query: %w", err))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("User/UsersByDeletedAt/pgx.CollectRows: %w", err))
	}
	return res, nil
}

// UserByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_email_key'.
func UserByEmail(ctx context.Context, db DB, email string, opts ...UserSelectConfigOption) (*User, error) {
	c := &UserSelectConfig{deletedAt: " null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.email = $9  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, email)
	rows, err := db.Query(ctx, sqlstr, c.joins.NotificationsReceiver, c.joins.NotificationsSender, c.joins.TimeEntries, c.joins.UserAPIKey, c.joins.UserNotifications, c.joins.Teams, c.joins.WorkItemComments, c.joins.WorkItems, email)
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByEmail/db.Query: %w", err))
	}
	u, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByEmail/pgx.CollectOneRow: %w", err))
	}

	return &u, nil
}

// UserByExternalID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_external_id_key'.
func UserByExternalID(ctx context.Context, db DB, externalID string, opts ...UserSelectConfigOption) (*User, error) {
	c := &UserSelectConfig{deletedAt: " null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.external_id = $9  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, externalID)
	rows, err := db.Query(ctx, sqlstr, c.joins.NotificationsReceiver, c.joins.NotificationsSender, c.joins.TimeEntries, c.joins.UserAPIKey, c.joins.UserNotifications, c.joins.Teams, c.joins.WorkItemComments, c.joins.WorkItems, externalID)
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByExternalID/db.Query: %w", err))
	}
	u, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByExternalID/pgx.CollectOneRow: %w", err))
	}

	return &u, nil
}

// UserByUserID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserByUserID(ctx context.Context, db DB, userID uuid.UUID, opts ...UserSelectConfigOption) (*User, error) {
	c := &UserSelectConfig{deletedAt: " null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.user_id = $9  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, userID)
	rows, err := db.Query(ctx, sqlstr, c.joins.NotificationsReceiver, c.joins.NotificationsSender, c.joins.TimeEntries, c.joins.UserAPIKey, c.joins.UserNotifications, c.joins.Teams, c.joins.WorkItemComments, c.joins.WorkItems, userID)
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByUserID/db.Query: %w", err))
	}
	u, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByUserID/pgx.CollectOneRow: %w", err))
	}

	return &u, nil
}

// UsersByUpdatedAt retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_updated_at_idx'.
func UsersByUpdatedAt(ctx context.Context, db DB, updatedAt time.Time, opts ...UserSelectConfigOption) ([]User, error) {
	c := &UserSelectConfig{deletedAt: " null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.updated_at = $9  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, updatedAt)
	rows, err := db.Query(ctx, sqlstr, c.joins.NotificationsReceiver, c.joins.NotificationsSender, c.joins.TimeEntries, c.joins.UserAPIKey, c.joins.UserNotifications, c.joins.Teams, c.joins.WorkItemComments, c.joins.WorkItems, updatedAt)
	if err != nil {
		return nil, logerror(fmt.Errorf("User/UsersByUpdatedAt/Query: %w", err))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("User/UsersByUpdatedAt/pgx.CollectRows: %w", err))
	}
	return res, nil
}

// UserByUsername retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_username_key'.
func UserByUsername(ctx context.Context, db DB, username string, opts ...UserSelectConfigOption) (*User, error) {
	c := &UserSelectConfig{deletedAt: " null ", joins: UserJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`users.user_id,
users.username,
users.email,
users.first_name,
users.last_name,
users.full_name,
users.external_id,
users.api_key_id,
users.scopes,
users.role_rank,
users.has_personal_notifications,
users.has_global_notifications,
users.created_at,
users.updated_at,
users.deleted_at,
(case when $1::boolean = true then COALESCE(joined_notifications_receiver.notifications, '{}') end) as notifications_receiver,
(case when $2::boolean = true then COALESCE(joined_notifications_sender.notifications, '{}') end) as notifications_sender,
(case when $3::boolean = true then COALESCE(joined_time_entries.time_entries, '{}') end) as time_entries,
(case when $4::boolean = true and user_api_keys.user_id is not null then row(user_api_keys.*) end) as user_api_key,
(case when $5::boolean = true then COALESCE(joined_user_notifications.user_notifications, '{}') end) as user_notifications,
(case when $6::boolean = true then COALESCE(joined_teams.__teams, '{}') end) as teams,
(case when $7::boolean = true then COALESCE(joined_work_item_comments.work_item_comments, '{}') end) as work_item_comments,
(case when $8::boolean = true then COALESCE(joined_work_items.__work_items, '{}') end) as work_items `+
		`FROM public.users `+
		`-- M2O join generated from "notifications_receiver_fkey"
left join (
  select
  receiver as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        receiver) joined_notifications_receiver on joined_notifications_receiver.notifications_user_id = users.user_id
-- M2O join generated from "notifications_sender_fkey"
left join (
  select
  sender as notifications_user_id
    , array_agg(notifications.*) as notifications
  from
    notifications
  group by
        sender) joined_notifications_sender on joined_notifications_sender.notifications_user_id = users.user_id
-- M2O join generated from "time_entries_user_id_fkey"
left join (
  select
  user_id as time_entries_user_id
    , array_agg(time_entries.*) as time_entries
  from
    time_entries
  group by
        user_id) joined_time_entries on joined_time_entries.time_entries_user_id = users.user_id
-- O2O join generated from "user_api_keys_user_id_fkey(O2O inferred)"
left join user_api_keys on user_api_keys.user_id = users.user_id
-- M2O join generated from "user_notifications_user_id_fkey"
left join (
  select
  user_id as user_notifications_user_id
    , array_agg(user_notifications.*) as user_notifications
  from
    user_notifications
  group by
        user_id) joined_user_notifications on joined_user_notifications.user_notifications_user_id = users.user_id
-- M2M join generated from "user_team_team_id_fkey"
left join (
	select
			user_team.user_id as user_team_user_id
			, array_agg(teams.*) filter (where teams.* is not null) as __teams
		from user_team
    	join teams on teams.team_id = user_team.team_id
    group by user_team_user_id
  ) as joined_teams on joined_teams.user_team_user_id = users.user_id

-- M2O join generated from "work_item_comments_user_id_fkey"
left join (
  select
  user_id as work_item_comments_user_id
    , array_agg(work_item_comments.*) as work_item_comments
  from
    work_item_comments
  group by
        user_id) joined_work_item_comments on joined_work_item_comments.work_item_comments_user_id = users.user_id
-- M2M join generated from "work_item_member_work_item_id_fkey"
left join (
	select
			work_item_member.member as work_item_member_member
			, array_agg(work_items.*) filter (where work_items.* is not null) as __work_items
		from work_item_member
    	join work_items on work_items.work_item_id = work_item_member.work_item_id
    group by work_item_member_member
  ) as joined_work_items on joined_work_items.work_item_member_member = users.user_id
`+
		` WHERE users.username = $9  AND users.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	// logf(sqlstr, username)
	rows, err := db.Query(ctx, sqlstr, c.joins.NotificationsReceiver, c.joins.NotificationsSender, c.joins.TimeEntries, c.joins.UserAPIKey, c.joins.UserNotifications, c.joins.Teams, c.joins.WorkItemComments, c.joins.WorkItems, username)
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByUsername/db.Query: %w", err))
	}
	u, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[User])
	if err != nil {
		return nil, logerror(fmt.Errorf("users/UserByUsername/pgx.CollectOneRow: %w", err))
	}

	return &u, nil
}

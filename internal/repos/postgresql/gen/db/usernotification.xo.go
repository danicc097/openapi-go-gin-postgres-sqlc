package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/google/uuid"
)

// UserNotificationPublic represents fields that may be exposed from 'public.user_notifications'
// and embedded in other response models.
// Include "property:private" in a SQL column comment to exclude a field.
// Joins may be explicitly added in the Response struct.
type UserNotificationPublic struct {
	UserNotificationID int        `json:"userNotificationID" required:"true"` // user_notification_id
	ReadAt             *time.Time `json:"readAt" required:"true"`             // read_at
	DeletedAt          *time.Time `json:"deletedAt" required:"true"`          // deleted_at
	CreatedAt          time.Time  `json:"createdAt" required:"true"`          // created_at
	UserID             uuid.UUID  `json:"userID" required:"true"`             // user_id
}

// UserNotification represents a row from 'public.user_notifications'.
type UserNotification struct {
	UserNotificationID int        `json:"user_notification_id" db:"user_notification_id"` // user_notification_id
	ReadAt             *time.Time `json:"read_at" db:"read_at"`                           // read_at
	DeletedAt          *time.Time `json:"deleted_at" db:"deleted_at"`                     // deleted_at
	CreatedAt          time.Time  `json:"created_at" db:"created_at"`                     // created_at
	UserID             uuid.UUID  `json:"user_id" db:"user_id"`                           // user_id

	// xo fields
	_exists, _deleted bool
}

func (x *UserNotification) ToPublic() UserNotificationPublic {
	return UserNotificationPublic{
		UserNotificationID: x.UserNotificationID, ReadAt: x.ReadAt, DeletedAt: x.DeletedAt, CreatedAt: x.CreatedAt, UserID: x.UserID,
	}
}

type UserNotificationSelectConfig struct {
	limit     string
	orderBy   string
	joins     UserNotificationJoins
	deletedAt string
}
type UserNotificationSelectConfigOption func(*UserNotificationSelectConfig)

// WithUserNotificationLimit limits row selection.
func WithUserNotificationLimit(limit int) UserNotificationSelectConfigOption {
	return func(s *UserNotificationSelectConfig) {
		s.limit = fmt.Sprintf(" limit %d ", limit)
	}
}

// WithDeletedUserNotificationOnly limits result to records marked as deleted.
func WithDeletedUserNotificationOnly() UserNotificationSelectConfigOption {
	return func(s *UserNotificationSelectConfig) {
		s.deletedAt = " not null "
	}
}

type UserNotificationOrderBy = string

const (
	UserNotificationReadAtDescNullsFirst    UserNotificationOrderBy = " read_at DESC NULLS FIRST "
	UserNotificationReadAtDescNullsLast     UserNotificationOrderBy = " read_at DESC NULLS LAST "
	UserNotificationReadAtAscNullsFirst     UserNotificationOrderBy = " read_at ASC NULLS FIRST "
	UserNotificationReadAtAscNullsLast      UserNotificationOrderBy = " read_at ASC NULLS LAST "
	UserNotificationDeletedAtDescNullsFirst UserNotificationOrderBy = " deleted_at DESC NULLS FIRST "
	UserNotificationDeletedAtDescNullsLast  UserNotificationOrderBy = " deleted_at DESC NULLS LAST "
	UserNotificationDeletedAtAscNullsFirst  UserNotificationOrderBy = " deleted_at ASC NULLS FIRST "
	UserNotificationDeletedAtAscNullsLast   UserNotificationOrderBy = " deleted_at ASC NULLS LAST "
	UserNotificationCreatedAtDescNullsFirst UserNotificationOrderBy = " created_at DESC NULLS FIRST "
	UserNotificationCreatedAtDescNullsLast  UserNotificationOrderBy = " created_at DESC NULLS LAST "
	UserNotificationCreatedAtAscNullsFirst  UserNotificationOrderBy = " created_at ASC NULLS FIRST "
	UserNotificationCreatedAtAscNullsLast   UserNotificationOrderBy = " created_at ASC NULLS LAST "
)

// WithUserNotificationOrderBy orders results by the given columns.
func WithUserNotificationOrderBy(rows ...UserNotificationOrderBy) UserNotificationSelectConfigOption {
	return func(s *UserNotificationSelectConfig) {
		if len(rows) == 0 {
			s.orderBy = ""
			return
		}
		s.orderBy = " order by "
		s.orderBy += strings.Join(rows, ", ")
	}
}

type UserNotificationJoins struct{}

// WithUserNotificationJoin orders results by the given columns.
func WithUserNotificationJoin(joins UserNotificationJoins) UserNotificationSelectConfigOption {
	return func(s *UserNotificationSelectConfig) {
		s.joins = joins
	}
}

// Exists returns true when the UserNotification exists in the database.
func (un *UserNotification) Exists() bool {
	return un._exists
}

// Deleted returns true when the UserNotification has been marked for deletion from
// the database.
func (un *UserNotification) Deleted() bool {
	return un._deleted
}

// Insert inserts the UserNotification to the database.
func (un *UserNotification) Insert(ctx context.Context, db DB) error {
	switch {
	case un._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case un._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO public.user_notifications (` +
		`read_at, deleted_at, user_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING user_notification_id, created_at `
	// run
	logf(sqlstr, un.ReadAt, un.DeletedAt, un.UserID)
	if err := db.QueryRow(ctx, sqlstr, un.ReadAt, un.DeletedAt, un.UserID).Scan(&un.UserNotificationID, &un.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	un._exists = true
	return nil
}

// Update updates a UserNotification in the database.
func (un *UserNotification) Update(ctx context.Context, db DB) error {
	switch {
	case !un._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case un._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	sqlstr := `UPDATE public.user_notifications SET ` +
		`read_at = $1, deleted_at = $2, user_id = $3 ` +
		`WHERE user_notification_id = $4 ` +
		`RETURNING user_notification_id, created_at `
	// run
	logf(sqlstr, un.ReadAt, un.DeletedAt, un.CreatedAt, un.UserID, un.UserNotificationID)
	if err := db.QueryRow(ctx, sqlstr, un.ReadAt, un.DeletedAt, un.UserID, un.UserNotificationID).Scan(&un.UserNotificationID, &un.CreatedAt); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the UserNotification to the database.
func (un *UserNotification) Save(ctx context.Context, db DB) error {
	if un.Exists() {
		return un.Update(ctx, db)
	}
	return un.Insert(ctx, db)
}

// Upsert performs an upsert for UserNotification.
func (un *UserNotification) Upsert(ctx context.Context, db DB) error {
	switch {
	case un._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	sqlstr := `INSERT INTO public.user_notifications (` +
		`user_notification_id, read_at, deleted_at, user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (user_notification_id) DO ` +
		`UPDATE SET ` +
		`read_at = EXCLUDED.read_at, deleted_at = EXCLUDED.deleted_at, user_id = EXCLUDED.user_id  `
	// run
	logf(sqlstr, un.UserNotificationID, un.ReadAt, un.DeletedAt, un.UserID)
	if _, err := db.Exec(ctx, sqlstr, un.UserNotificationID, un.ReadAt, un.DeletedAt, un.UserID); err != nil {
		return logerror(err)
	}
	// set exists
	un._exists = true
	return nil
}

// Delete deletes the UserNotification from the database.
func (un *UserNotification) Delete(ctx context.Context, db DB) error {
	switch {
	case !un._exists: // doesn't exist
		return nil
	case un._deleted: // deleted
		return nil
	}
	// delete with single primary key
	sqlstr := `DELETE FROM public.user_notifications ` +
		`WHERE user_notification_id = $1 `
	// run
	logf(sqlstr, un.UserNotificationID)
	if _, err := db.Exec(ctx, sqlstr, un.UserNotificationID); err != nil {
		return logerror(err)
	}
	// set deleted
	un._deleted = true
	return nil
}

// UserNotificationByUserNotificationID retrieves a row from 'public.user_notifications' as a UserNotification.
//
// Generated from index 'user_notifications_pkey'.
func UserNotificationByUserNotificationID(ctx context.Context, db DB, userNotificationID int, opts ...UserNotificationSelectConfigOption) (*UserNotification, error) {
	c := &UserNotificationSelectConfig{deletedAt: " null ", joins: UserNotificationJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`user_notifications.user_notification_id,
user_notifications.read_at,
user_notifications.deleted_at,
user_notifications.created_at,
user_notifications.user_id `+
		`FROM public.user_notifications `+
		``+
		` WHERE user_notifications.user_notification_id = $1  AND user_notifications.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	logf(sqlstr, userNotificationID)
	un := UserNotification{
		_exists: true,
	}

	if err := db.QueryRow(ctx, sqlstr, userNotificationID).Scan(&un.UserNotificationID, &un.ReadAt, &un.DeletedAt, &un.CreatedAt, &un.UserID); err != nil {
		return nil, logerror(err)
	}
	return &un, nil
}

// UserNotificationsByUserIDDeletedAt retrieves a row from 'public.user_notifications' as a UserNotification.
//
// Generated from index 'user_notifications_user_id_deleted_at_idx'.
func UserNotificationsByUserIDDeletedAt(ctx context.Context, db DB, userID uuid.UUID, deletedAt *time.Time, opts ...UserNotificationSelectConfigOption) ([]*UserNotification, error) {
	c := &UserNotificationSelectConfig{deletedAt: " null ", joins: UserNotificationJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := fmt.Sprintf(`SELECT `+
		`user_notifications.user_notification_id,
user_notifications.read_at,
user_notifications.deleted_at,
user_notifications.created_at,
user_notifications.user_id `+
		`FROM public.user_notifications `+
		``+
		` WHERE user_notifications.user_id = $1 AND user_notifications.deleted_at = $2  AND user_notifications.deleted_at is %s `, c.deletedAt)
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	logf(sqlstr, userID, deletedAt)
	rows, err := db.Query(ctx, sqlstr, userID, deletedAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserNotification
	for rows.Next() {
		un := UserNotification{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&un.UserNotificationID, &un.ReadAt, &un.DeletedAt, &un.CreatedAt, &un.UserID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &un)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// FKUser_UserID returns the User associated with the UserNotification's (UserID).
//
// Generated from foreign key 'user_notifications_user_id_fkey'.
func (un *UserNotification) FKUser_UserID(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, un.UserID)
}

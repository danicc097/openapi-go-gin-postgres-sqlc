package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Organization represents a row from 'public.organizations'.
type Organization struct {
	OrganizationID int       `json:"organization_id"` // organization_id
	Name           string    `json:"name"`            // name
	Description    string    `json:"description"`     // description
	Metadata       []byte    `json:"metadata"`        // metadata
	CreatedAt      time.Time `json:"created_at"`      // created_at
	UpdatedAt      time.Time `json:"updated_at"`      // updated_at
	// xo fields
	_exists, _deleted bool
}

// GetMostRecentOrganization returns n most recent rows from 'organizations',
// ordered by "created_at" in descending order.
func GetMostRecentOrganization(ctx context.Context, db DB, n int) ([]*Organization, error) {
	// list
	const sqlstr = `SELECT ` +
		`organization_id, name, description, metadata, created_at, updated_at ` +
		`FROM public.organizations ` +
		`ORDER BY created_at DESC LIMIT $1`
	// run
	logf(sqlstr, n)

	rows, err := db.Query(ctx, sqlstr, n)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	// load results
	var res []*Organization
	for rows.Next() {
		o := Organization{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&o.OrganizationID, &o.Name, &o.Description, &o.Metadata, &o.CreatedAt, &o.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &o)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Exists returns true when the Organization exists in the database.
func (o *Organization) Exists() bool {
	return o._exists
}

// Deleted returns true when the Organization has been marked for deletion from
// the database.
func (o *Organization) Deleted() bool {
	return o._deleted
}

// Insert inserts the Organization to the database.
func (o *Organization) Insert(ctx context.Context, db DB) error {
	switch {
	case o._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case o._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.organizations (` +
		`name, description, metadata` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING organization_id`
	// run
	logf(sqlstr, o.Name, o.Description, o.Metadata)
	if err := db.QueryRow(ctx, sqlstr, o.Name, o.Description, o.Metadata).Scan(&o.OrganizationID); err != nil {
		return logerror(err)
	}
	// set exists
	o._exists = true
	return nil
}

// Update updates a Organization in the database.
func (o *Organization) Update(ctx context.Context, db DB) error {
	switch {
	case !o._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case o._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.organizations SET ` +
		`name = $1, description = $2, metadata = $3 ` +
		`WHERE organization_id = $4`
	// run
	logf(sqlstr, o.Name, o.Description, o.Metadata, o.CreatedAt, o.UpdatedAt, o.OrganizationID)
	if _, err := db.Exec(ctx, sqlstr, o.Name, o.Description, o.Metadata, o.CreatedAt, o.UpdatedAt, o.OrganizationID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Organization to the database.
func (o *Organization) Save(ctx context.Context, db DB) error {
	if o.Exists() {
		return o.Update(ctx, db)
	}
	return o.Insert(ctx, db)
}

// Upsert performs an upsert for Organization.
func (o *Organization) Upsert(ctx context.Context, db DB) error {
	switch {
	case o._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.organizations (` +
		`organization_id, name, description, metadata` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (organization_id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, description = EXCLUDED.description, metadata = EXCLUDED.metadata `
	// run
	logf(sqlstr, o.OrganizationID, o.Name, o.Description, o.Metadata)
	if _, err := db.Exec(ctx, sqlstr, o.OrganizationID, o.Name, o.Description, o.Metadata); err != nil {
		return logerror(err)
	}
	// set exists
	o._exists = true
	return nil
}

// Delete deletes the Organization from the database.
func (o *Organization) Delete(ctx context.Context, db DB) error {
	switch {
	case !o._exists: // doesn't exist
		return nil
	case o._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.organizations ` +
		`WHERE organization_id = $1`
	// run
	logf(sqlstr, o.OrganizationID)
	if _, err := db.Exec(ctx, sqlstr, o.OrganizationID); err != nil {
		return logerror(err)
	}
	// set deleted
	o._deleted = true
	return nil
}

// OrganizationByName retrieves a row from 'public.organizations' as a Organization.
//
// Generated from index 'organizations_name_key'.
func OrganizationByName(ctx context.Context, db DB, name string) (*Organization, error) {
	// query
	const sqlstr = `SELECT ` +
		`organization_id, name, description, metadata, created_at, updated_at ` +
		`FROM public.organizations ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	o := Organization{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, name).Scan(&o.OrganizationID, &o.Name, &o.Description, &o.Metadata, &o.CreatedAt, &o.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &o, nil
}

// OrganizationByOrganizationID retrieves a row from 'public.organizations' as a Organization.
//
// Generated from index 'organizations_pkey'.
func OrganizationByOrganizationID(ctx context.Context, db DB, organizationID int) (*Organization, error) {
	// query
	const sqlstr = `SELECT ` +
		`organization_id, name, description, metadata, created_at, updated_at ` +
		`FROM public.organizations ` +
		`WHERE organization_id = $1`
	// run
	logf(sqlstr, organizationID)
	o := Organization{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, organizationID).Scan(&o.OrganizationID, &o.Name, &o.Description, &o.Metadata, &o.CreatedAt, &o.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &o, nil
}

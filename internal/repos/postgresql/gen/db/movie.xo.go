package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5"
)

// Movie represents a row from 'public.movies'.
// Change properties via SQL column comments, joined with " && ":
//   - "properties":<p1>,<p2>,...
//   - private to exclude a field from JSON.
//   - not-required to make a schema field not required.
//   - "type":<pkg.type> to override the type annotation.
//   - "cardinality":<O2O|M2O|M2M> to generate/override joins explicitly. Only O2O is inferred.
//   - "tags":<tags> to append literal struct tag strings.
type Movie struct {
	MovieID  int    `json:"movieID" db:"movie_id" required:"true"`  // movie_id
	Title    string `json:"title" db:"title" required:"true"`       // title
	Year     int    `json:"year" db:"year" required:"true"`         // year
	Synopsis string `json:"synopsis" db:"synopsis" required:"true"` // synopsis

}

// MovieCreateParams represents insert params for 'public.movies'.
type MovieCreateParams struct {
	Title    string `json:"title" required:"true"`    // title
	Year     int    `json:"year" required:"true"`     // year
	Synopsis string `json:"synopsis" required:"true"` // synopsis
}

// CreateMovie creates a new Movie in the database with the given params.
func CreateMovie(ctx context.Context, db DB, params *MovieCreateParams) (*Movie, error) {
	m := &Movie{
		Title:    params.Title,
		Year:     params.Year,
		Synopsis: params.Synopsis,
	}

	return m.Insert(ctx, db)
}

// MovieUpdateParams represents update params for 'public.movies'.
type MovieUpdateParams struct {
	Title    *string `json:"title" required:"true"`    // title
	Year     *int    `json:"year" required:"true"`     // year
	Synopsis *string `json:"synopsis" required:"true"` // synopsis
}

// SetUpdateParams updates public.movies struct fields with the specified params.
func (m *Movie) SetUpdateParams(params *MovieUpdateParams) {
	if params.Title != nil {
		m.Title = *params.Title
	}
	if params.Year != nil {
		m.Year = *params.Year
	}
	if params.Synopsis != nil {
		m.Synopsis = *params.Synopsis
	}
}

type MovieSelectConfig struct {
	limit   string
	orderBy string
	joins   MovieJoins
	filters map[string][]any
}
type MovieSelectConfigOption func(*MovieSelectConfig)

// WithMovieLimit limits row selection.
func WithMovieLimit(limit int) MovieSelectConfigOption {
	return func(s *MovieSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

type MovieOrderBy string

const ()

type MovieJoins struct {
}

// WithMovieJoin joins with the given tables.
func WithMovieJoin(joins MovieJoins) MovieSelectConfigOption {
	return func(s *MovieSelectConfig) {
		s.joins = MovieJoins{}
	}
}

// WithMovieFilters adds the given filters, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	filters := map[string][]any{
//		"NOT (col.name = any ($i))": {[]string{"excl_name_1", "excl_name_2"}},
//		`(col.created_at > $i OR
//		col.is_closed = $i)`: {time.Now().Add(-24 * time.Hour), true},
//	}
func WithMovieFilters(filters map[string][]any) MovieSelectConfigOption {
	return func(s *MovieSelectConfig) {
		s.filters = filters
	}
}

// Insert inserts the Movie to the database.
func (m *Movie) Insert(ctx context.Context, db DB) (*Movie, error) {
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO public.movies (
	title, year, synopsis
	) VALUES (
	$1, $2, $3
	) RETURNING * `
	// run
	logf(sqlstr, m.Title, m.Year, m.Synopsis)

	rows, err := db.Query(ctx, sqlstr, m.Title, m.Year, m.Synopsis)
	if err != nil {
		return nil, logerror(fmt.Errorf("Movie/Insert/db.Query: %w", &XoError{Entity: "Movie", Err: err}))
	}
	newm, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[Movie])
	if err != nil {
		return nil, logerror(fmt.Errorf("Movie/Insert/pgx.CollectOneRow: %w", &XoError{Entity: "Movie", Err: err}))
	}

	*m = newm

	return m, nil
}

// Update updates a Movie in the database.
func (m *Movie) Update(ctx context.Context, db DB) (*Movie, error) {
	// update with composite primary key
	sqlstr := `UPDATE public.movies SET 
	title = $1, year = $2, synopsis = $3 
	WHERE movie_id = $4 
	RETURNING * `
	// run
	logf(sqlstr, m.Title, m.Year, m.Synopsis, m.MovieID)

	rows, err := db.Query(ctx, sqlstr, m.Title, m.Year, m.Synopsis, m.MovieID)
	if err != nil {
		return nil, logerror(fmt.Errorf("Movie/Update/db.Query: %w", &XoError{Entity: "Movie", Err: err}))
	}
	newm, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[Movie])
	if err != nil {
		return nil, logerror(fmt.Errorf("Movie/Update/pgx.CollectOneRow: %w", &XoError{Entity: "Movie", Err: err}))
	}
	*m = newm

	return m, nil
}

// Upsert upserts a Movie in the database.
// Requires appropriate PK(s) to be set beforehand.
func (m *Movie) Upsert(ctx context.Context, db DB, params *MovieCreateParams) (*Movie, error) {
	var err error

	m.Title = params.Title
	m.Year = params.Year
	m.Synopsis = params.Synopsis

	m, err = m.Insert(ctx, db)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code != pgerrcode.UniqueViolation {
				return nil, fmt.Errorf("UpsertUser/Insert: %w", &XoError{Entity: "Movie", Err: err})
			}
			m, err = m.Update(ctx, db)
			if err != nil {
				return nil, fmt.Errorf("UpsertUser/Update: %w", &XoError{Entity: "Movie", Err: err})
			}
		}
	}

	return m, err
}

// Delete deletes the Movie from the database.
func (m *Movie) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM public.movies 
	WHERE movie_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, m.MovieID); err != nil {
		return logerror(err)
	}
	return nil
}

// MoviePaginatedByMovieIDAsc returns a cursor-paginated list of Movie in Asc order.
func MoviePaginatedByMovieIDAsc(ctx context.Context, db DB, movieID int, opts ...MovieSelectConfigOption) ([]Movie, error) {
	c := &MovieSelectConfig{joins: MovieJoins{}, filters: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	movies.movie_id,
	movies.title,
	movies.year,
	movies.synopsis %s 
	 FROM public.movies %s 
	 WHERE movies.movie_id > $1
	 %s   %s 
  ORDER BY 
		movie_id Asc`, selects, joins, filters, groupbys)
	sqlstr += c.limit
	sqlstr = "/* MoviePaginatedByMovieIDAsc */\n" + sqlstr

	// run

	rows, err := db.Query(ctx, sqlstr, append([]any{movieID}, filterParams...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("Movie/Paginated/Asc/db.Query: %w", &XoError{Entity: "Movie", Err: err}))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[Movie])
	if err != nil {
		return nil, logerror(fmt.Errorf("Movie/Paginated/Asc/pgx.CollectRows: %w", &XoError{Entity: "Movie", Err: err}))
	}
	return res, nil
}

// MoviePaginatedByMovieIDDesc returns a cursor-paginated list of Movie in Desc order.
func MoviePaginatedByMovieIDDesc(ctx context.Context, db DB, movieID int, opts ...MovieSelectConfigOption) ([]Movie, error) {
	c := &MovieSelectConfig{joins: MovieJoins{}, filters: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	movies.movie_id,
	movies.title,
	movies.year,
	movies.synopsis %s 
	 FROM public.movies %s 
	 WHERE movies.movie_id < $1
	 %s   %s 
  ORDER BY 
		movie_id Desc`, selects, joins, filters, groupbys)
	sqlstr += c.limit
	sqlstr = "/* MoviePaginatedByMovieIDDesc */\n" + sqlstr

	// run

	rows, err := db.Query(ctx, sqlstr, append([]any{movieID}, filterParams...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("Movie/Paginated/Desc/db.Query: %w", &XoError{Entity: "Movie", Err: err}))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[Movie])
	if err != nil {
		return nil, logerror(fmt.Errorf("Movie/Paginated/Desc/pgx.CollectRows: %w", &XoError{Entity: "Movie", Err: err}))
	}
	return res, nil
}

// MovieByMovieID retrieves a row from 'public.movies' as a Movie.
//
// Generated from index 'movies_pkey'.
func MovieByMovieID(ctx context.Context, db DB, movieID int, opts ...MovieSelectConfigOption) (*Movie, error) {
	c := &MovieSelectConfig{joins: MovieJoins{}, filters: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	movies.movie_id,
	movies.title,
	movies.year,
	movies.synopsis %s 
	 FROM public.movies %s 
	 WHERE movies.movie_id = $1
	 %s   %s 
`, selects, joins, filters, groupbys)
	sqlstr += c.orderBy
	sqlstr += c.limit
	sqlstr = "/* MovieByMovieID */\n" + sqlstr

	// run
	// logf(sqlstr, movieID)
	rows, err := db.Query(ctx, sqlstr, append([]any{movieID}, filterParams...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("movies/MovieByMovieID/db.Query: %w", &XoError{Entity: "Movie", Err: err}))
	}
	m, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[Movie])
	if err != nil {
		return nil, logerror(fmt.Errorf("movies/MovieByMovieID/pgx.CollectOneRow: %w", &XoError{Entity: "Movie", Err: err}))
	}

	return &m, nil
}

package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"strings"
	"time"
)

// WorkItemsDemoProjectPublic represents fields that may be exposed from 'public.work_items_demo_project'
// and embedded in other response models.
// Include "property:private" in a SQL column comment to exclude a field.
// Joins may be explicitly added in the Response struct.
type WorkItemsDemoProjectPublic struct {
	WorkItemID    int64     `json:"workItemID" required:"true"`    // work_item_id
	Ref           string    `json:"ref" required:"true"`           // ref
	Line          string    `json:"line" required:"true"`          // line
	LastMessageAt time.Time `json:"lastMessageAt" required:"true"` // last_message_at
	Reopened      bool      `json:"reopened" required:"true"`      // reopened
}

// WorkItemsDemoProject represents a row from 'public.work_items_demo_project'.
type WorkItemsDemoProject struct {
	WorkItemID    int64     `json:"work_item_id" db:"work_item_id"`       // work_item_id
	Ref           string    `json:"ref" db:"ref"`                         // ref
	Line          string    `json:"line" db:"line"`                       // line
	LastMessageAt time.Time `json:"last_message_at" db:"last_message_at"` // last_message_at
	Reopened      bool      `json:"reopened" db:"reopened"`               // reopened

	WorkItem *WorkItem `json:"work_item" db:"work_item"` // O2O
	// xo fields
	_exists, _deleted bool
}

func (x *WorkItemsDemoProject) ToPublic() WorkItemsDemoProjectPublic {
	return WorkItemsDemoProjectPublic{
		WorkItemID: x.WorkItemID, Ref: x.Ref, Line: x.Line, LastMessageAt: x.LastMessageAt, Reopened: x.Reopened,
	}
}

type WorkItemsDemoProjectSelectConfig struct {
	limit   string
	orderBy string
	joins   WorkItemsDemoProjectJoins
}
type WorkItemsDemoProjectSelectConfigOption func(*WorkItemsDemoProjectSelectConfig)

// WithWorkItemsDemoProjectLimit limits row selection.
func WithWorkItemsDemoProjectLimit(limit int) WorkItemsDemoProjectSelectConfigOption {
	return func(s *WorkItemsDemoProjectSelectConfig) {
		s.limit = fmt.Sprintf(" limit %d ", limit)
	}
}

type WorkItemsDemoProjectOrderBy = string

const (
	WorkItemsDemoProjectLastMessageAtDescNullsFirst WorkItemsDemoProjectOrderBy = " last_message_at DESC NULLS FIRST "
	WorkItemsDemoProjectLastMessageAtDescNullsLast  WorkItemsDemoProjectOrderBy = " last_message_at DESC NULLS LAST "
	WorkItemsDemoProjectLastMessageAtAscNullsFirst  WorkItemsDemoProjectOrderBy = " last_message_at ASC NULLS FIRST "
	WorkItemsDemoProjectLastMessageAtAscNullsLast   WorkItemsDemoProjectOrderBy = " last_message_at ASC NULLS LAST "
)

// WithWorkItemsDemoProjectOrderBy orders results by the given columns.
func WithWorkItemsDemoProjectOrderBy(rows ...WorkItemsDemoProjectOrderBy) WorkItemsDemoProjectSelectConfigOption {
	return func(s *WorkItemsDemoProjectSelectConfig) {
		if len(rows) == 0 {
			s.orderBy = ""
			return
		}
		s.orderBy = " order by "
		s.orderBy += strings.Join(rows, ", ")
	}
}

type WorkItemsDemoProjectJoins struct {
	WorkItem bool
}

// WithWorkItemsDemoProjectJoin orders results by the given columns.
func WithWorkItemsDemoProjectJoin(joins WorkItemsDemoProjectJoins) WorkItemsDemoProjectSelectConfigOption {
	return func(s *WorkItemsDemoProjectSelectConfig) {
		s.joins = joins
	}
}

// Exists returns true when the WorkItemsDemoProject exists in the database.
func (widp *WorkItemsDemoProject) Exists() bool {
	return widp._exists
}

// Deleted returns true when the WorkItemsDemoProject has been marked for deletion from
// the database.
func (widp *WorkItemsDemoProject) Deleted() bool {
	return widp._deleted
}

// Insert inserts the WorkItemsDemoProject to the database.
func (widp *WorkItemsDemoProject) Insert(ctx context.Context, db DB) error {
	switch {
	case widp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case widp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	sqlstr := `INSERT INTO public.work_items_demo_project (` +
		`work_item_id, ref, line, last_message_at, reopened` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) `
	// run
	logf(sqlstr, widp.WorkItemID, widp.Ref, widp.Line, widp.LastMessageAt, widp.Reopened)
	if _, err := db.Exec(ctx, sqlstr, widp.WorkItemID, widp.Ref, widp.Line, widp.LastMessageAt, widp.Reopened); err != nil {
		return logerror(err)
	}
	// set exists
	widp._exists = true
	return nil
}

// Update updates a WorkItemsDemoProject in the database.
func (widp *WorkItemsDemoProject) Update(ctx context.Context, db DB) error {
	switch {
	case !widp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case widp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	sqlstr := `UPDATE public.work_items_demo_project SET ` +
		`ref = $1, line = $2, last_message_at = $3, reopened = $4 ` +
		`WHERE work_item_id = $5 ` +
		`RETURNING work_item_id `
	// run
	logf(sqlstr, widp.Ref, widp.Line, widp.LastMessageAt, widp.Reopened, widp.WorkItemID)
	if err := db.QueryRow(ctx, sqlstr, widp.Ref, widp.Line, widp.LastMessageAt, widp.Reopened, widp.WorkItemID).Scan(); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the WorkItemsDemoProject to the database.
func (widp *WorkItemsDemoProject) Save(ctx context.Context, db DB) error {
	if widp.Exists() {
		return widp.Update(ctx, db)
	}
	return widp.Insert(ctx, db)
}

// Upsert performs an upsert for WorkItemsDemoProject.
func (widp *WorkItemsDemoProject) Upsert(ctx context.Context, db DB) error {
	switch {
	case widp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	sqlstr := `INSERT INTO public.work_items_demo_project (` +
		`work_item_id, ref, line, last_message_at, reopened` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (work_item_id) DO ` +
		`UPDATE SET ` +
		`ref = EXCLUDED.ref, line = EXCLUDED.line, last_message_at = EXCLUDED.last_message_at, reopened = EXCLUDED.reopened  `
	// run
	logf(sqlstr, widp.WorkItemID, widp.Ref, widp.Line, widp.LastMessageAt, widp.Reopened)
	if _, err := db.Exec(ctx, sqlstr, widp.WorkItemID, widp.Ref, widp.Line, widp.LastMessageAt, widp.Reopened); err != nil {
		return logerror(err)
	}
	// set exists
	widp._exists = true
	return nil
}

// Delete deletes the WorkItemsDemoProject from the database.
func (widp *WorkItemsDemoProject) Delete(ctx context.Context, db DB) error {
	switch {
	case !widp._exists: // doesn't exist
		return nil
	case widp._deleted: // deleted
		return nil
	}
	// delete with single primary key
	sqlstr := `DELETE FROM public.work_items_demo_project ` +
		`WHERE work_item_id = $1 `
	// run
	logf(sqlstr, widp.WorkItemID)
	if _, err := db.Exec(ctx, sqlstr, widp.WorkItemID); err != nil {
		return logerror(err)
	}
	// set deleted
	widp._deleted = true
	return nil
}

// WorkItemsDemoProjectByWorkItemID retrieves a row from 'public.work_items_demo_project' as a WorkItemsDemoProject.
//
// Generated from index 'work_items_demo_project_pkey'.
func WorkItemsDemoProjectByWorkItemID(ctx context.Context, db DB, workItemID int64, opts ...WorkItemsDemoProjectSelectConfigOption) (*WorkItemsDemoProject, error) {
	c := &WorkItemsDemoProjectSelectConfig{joins: WorkItemsDemoProjectJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`work_items_demo_project.work_item_id,
work_items_demo_project.ref,
work_items_demo_project.line,
work_items_demo_project.last_message_at,
work_items_demo_project.reopened,
(case when $1::boolean = true then row_to_json(work_items.*) end)::jsonb as work_item ` +
		`FROM public.work_items_demo_project ` +
		`-- O2O join generated from "work_items_demo_project_work_item_id_fkey"
left join work_items on work_items.work_item_id = work_items_demo_project.work_item_id` +
		` WHERE work_items_demo_project.work_item_id = $2 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	logf(sqlstr, workItemID)
	widp := WorkItemsDemoProject{
		_exists: true,
	}

	if err := db.QueryRow(ctx, sqlstr, c.joins.WorkItem, workItemID).Scan(&widp.WorkItemID, &widp.Ref, &widp.Line, &widp.LastMessageAt, &widp.Reopened, &widp.WorkItem); err != nil {
		return nil, logerror(err)
	}
	return &widp, nil
}

// WorkItemsDemoProjectByRefLine retrieves a row from 'public.work_items_demo_project' as a WorkItemsDemoProject.
//
// Generated from index 'work_items_demo_project_ref_line_idx'.
func WorkItemsDemoProjectByRefLine(ctx context.Context, db DB, ref, line string, opts ...WorkItemsDemoProjectSelectConfigOption) ([]*WorkItemsDemoProject, error) {
	c := &WorkItemsDemoProjectSelectConfig{joins: WorkItemsDemoProjectJoins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`work_items_demo_project.work_item_id,
work_items_demo_project.ref,
work_items_demo_project.line,
work_items_demo_project.last_message_at,
work_items_demo_project.reopened,
(case when $1::boolean = true then row_to_json(work_items.*) end)::jsonb as work_item ` +
		`FROM public.work_items_demo_project ` +
		`-- O2O join generated from "work_items_demo_project_work_item_id_fkey"
left join work_items on work_items.work_item_id = work_items_demo_project.work_item_id` +
		` WHERE work_items_demo_project.ref = $2 AND work_items_demo_project.line = $3 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	logf(sqlstr, ref, line)
	rows, err := db.Query(ctx, sqlstr, c.joins.WorkItem, ref, line)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*WorkItemsDemoProject
	for rows.Next() {
		widp := WorkItemsDemoProject{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&widp.WorkItemID, &widp.Ref, &widp.Line, &widp.LastMessageAt, &widp.Reopened); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &widp)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// FKWorkItem_WorkItemID returns the WorkItem associated with the WorkItemsDemoProject's (WorkItemID).
//
// Generated from foreign key 'work_items_demo_project_work_item_id_fkey'.
func (widp *WorkItemsDemoProject) FKWorkItem_WorkItemID(ctx context.Context, db DB) (*WorkItem, error) {
	return WorkItemByWorkItemID(ctx, db, widp.WorkItemID)
}

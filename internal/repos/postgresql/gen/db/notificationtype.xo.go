package db

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// NotificationType is the 'notification_type' enum type from schema 'public'.
type NotificationType uint16

// NotificationType values.
const (
	// NotificationTypePersonal is the 'personal' notification_type.
	NotificationTypePersonal NotificationType = 1
	// NotificationTypeGlobal is the 'global' notification_type.
	NotificationTypeGlobal NotificationType = 2
)

// String satisfies the fmt.Stringer interface.
func (nt NotificationType) String() string {
	switch nt {
	case NotificationTypePersonal:
		return "personal"
	case NotificationTypeGlobal:
		return "global"
	}
	return fmt.Sprintf("NotificationType(%d)", nt)
}

// MarshalText marshals NotificationType into text.
func (nt NotificationType) MarshalText() ([]byte, error) {
	return []byte(nt.String()), nil
}

// UnmarshalText unmarshals NotificationType from text.
func (nt *NotificationType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "personal":
		*nt = NotificationTypePersonal
	case "global":
		*nt = NotificationTypeGlobal
	default:
		return ErrInvalidNotificationType(str)
	}
	return nil
}

// Value satisfies the driver.Valuer interface.
func (nt NotificationType) Value() (driver.Value, error) {
	return nt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (nt *NotificationType) Scan(v interface{}) error {
	switch buf := v.(type) {
	case []byte:
		return nt.UnmarshalText(buf)
	case string:
		return nt.UnmarshalText([]byte(buf))
	}

	return ErrInvalidNotificationType(fmt.Sprintf("%T", v))
}

// NullNotificationType represents a null 'notification_type' enum for schema 'public'.
type NullNotificationType struct {
	NotificationType NotificationType
	// Valid is true if NotificationType is not null.
	Valid bool
}

// Value satisfies the driver.Valuer interface.
func (nnt NullNotificationType) Value() (driver.Value, error) {
	if !nnt.Valid {
		return nil, nil
	}
	return nnt.NotificationType.Value()
}

// Scan satisfies the sql.Scanner interface.
func (nnt *NullNotificationType) Scan(v interface{}) error {
	if v == nil {
		nnt.NotificationType, nnt.Valid = 0, false
		return nil
	}
	err := nnt.NotificationType.Scan(v)
	nnt.Valid = err == nil
	return err
}

// ErrInvalidNotificationType is the invalid NotificationType error.
type ErrInvalidNotificationType string

// Error satisfies the error interface.
func (err ErrInvalidNotificationType) Error() string {
	return fmt.Sprintf("invalid NotificationType(%s)", string(err))
}

func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypePersonal,
		NotificationTypeGlobal,
	}
}

package db

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// NotificationType is the 'notification_type' enum type from schema 'public'.
type NotificationType string

// NotificationType values.
const (
	// NotificationTypePersonal is the 'personal' notification_type.
	NotificationTypePersonal NotificationType = "personal"
	// NotificationTypeGlobal is the 'global' notification_type.
	NotificationTypeGlobal NotificationType = "global"
)

// Value satisfies the driver.Valuer interface.
func (nt NotificationType) Value() (driver.Value, error) {
	return string(nt), nil
}

// Scan satisfies the sql.Scanner interface.
func (nt *NotificationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*nt = NotificationType(s)
	case string:
		*nt = NotificationType(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationType: %T", src)
	}
	return nil
}

// ErrInvalidNotificationType is the invalid NotificationType error.
type ErrInvalidNotificationType string

// Error satisfies the error interface.
func (err ErrInvalidNotificationType) Error() string {
	return fmt.Sprintf("invalid NotificationType(%s)", string(err))
}

func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypePersonal,
		NotificationTypeGlobal,
	}
}

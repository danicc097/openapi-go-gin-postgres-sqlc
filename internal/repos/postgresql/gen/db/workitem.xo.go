package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// WorkItem represents a row from 'public.work_items'.
type WorkItem struct {
	WorkItemID   int64        `json:"work_item_id"`   // work_item_id
	Title        string       `json:"title"`          // title
	Metadata     []byte       `json:"metadata"`       // metadata
	ProjectID    int          `json:"project_id"`     // project_id
	KanbanStepID int          `json:"kanban_step_id"` // kanban_step_id
	CreatedAt    time.Time    `json:"created_at"`     // created_at
	UpdatedAt    time.Time    `json:"updated_at"`     // updated_at
	DeletedAt    sql.NullTime `json:"deleted_at"`     // deleted_at
	// xo fields
	_exists, _deleted bool
}

// TODO only create if exists
// GetMostRecentWorkItem returns n most recent rows from 'work_items',
// ordered by "created_at" in descending order.
func GetMostRecentWorkItem(ctx context.Context, db DB, n int) ([]*WorkItem, error) {
	// list
	const sqlstr = `SELECT ` +
		`work_item_id, title, metadata, project_id, kanban_step_id, created_at, updated_at, deleted_at ` +
		`FROM public.work_items ` +
		`ORDER BY created_at DESC LIMIT $1`
	// run
	logf(sqlstr, n)

	rows, err := db.Query(ctx, sqlstr, n)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	// load results
	var res []*WorkItem
	for rows.Next() {
		wi := WorkItem{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&wi.WorkItemID, &wi.Title, &wi.Metadata, &wi.ProjectID, &wi.KanbanStepID, &wi.CreatedAt, &wi.UpdatedAt, &wi.DeletedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &wi)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Exists returns true when the WorkItem exists in the database.
func (wi *WorkItem) Exists() bool {
	return wi._exists
}

// Deleted returns true when the WorkItem has been marked for deletion from
// the database.
func (wi *WorkItem) Deleted() bool {
	return wi._deleted
}

// Insert inserts the WorkItem to the database.
func (wi *WorkItem) Insert(ctx context.Context, db DB) error {
	switch {
	case wi._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case wi._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.work_items (` +
		`title, metadata, project_id, kanban_step_id, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING work_item_id`
	// run
	logf(sqlstr, wi.Title, wi.Metadata, wi.ProjectID, wi.KanbanStepID, wi.DeletedAt)
	if err := db.QueryRow(ctx, sqlstr, wi.Title, wi.Metadata, wi.ProjectID, wi.KanbanStepID, wi.DeletedAt).Scan(&wi.WorkItemID); err != nil {
		return logerror(err)
	}
	// set exists
	wi._exists = true
	return nil
}

// Update updates a WorkItem in the database.
func (wi *WorkItem) Update(ctx context.Context, db DB) error {
	switch {
	case !wi._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case wi._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.work_items SET ` +
		`title = $1, metadata = $2, project_id = $3, kanban_step_id = $4, deleted_at = $5 ` +
		`WHERE work_item_id = $6`
	// run
	logf(sqlstr, wi.Title, wi.Metadata, wi.ProjectID, wi.KanbanStepID, wi.CreatedAt, wi.UpdatedAt, wi.DeletedAt, wi.WorkItemID)
	if _, err := db.Exec(ctx, sqlstr, wi.Title, wi.Metadata, wi.ProjectID, wi.KanbanStepID, wi.CreatedAt, wi.UpdatedAt, wi.DeletedAt, wi.WorkItemID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the WorkItem to the database.
func (wi *WorkItem) Save(ctx context.Context, db DB) error {
	if wi.Exists() {
		return wi.Update(ctx, db)
	}
	return wi.Insert(ctx, db)
}

// Upsert performs an upsert for WorkItem.
func (wi *WorkItem) Upsert(ctx context.Context, db DB) error {
	switch {
	case wi._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.work_items (` +
		`work_item_id, title, metadata, project_id, kanban_step_id, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (work_item_id) DO ` +
		`UPDATE SET ` +
		`title = EXCLUDED.title, metadata = EXCLUDED.metadata, project_id = EXCLUDED.project_id, kanban_step_id = EXCLUDED.kanban_step_id, deleted_at = EXCLUDED.deleted_at `
	// run
	logf(sqlstr, wi.WorkItemID, wi.Title, wi.Metadata, wi.ProjectID, wi.KanbanStepID, wi.DeletedAt)
	if _, err := db.Exec(ctx, sqlstr, wi.WorkItemID, wi.Title, wi.Metadata, wi.ProjectID, wi.KanbanStepID, wi.DeletedAt); err != nil {
		return logerror(err)
	}
	// set exists
	wi._exists = true
	return nil
}

// Delete deletes the WorkItem from the database.
func (wi *WorkItem) Delete(ctx context.Context, db DB) error {
	switch {
	case !wi._exists: // doesn't exist
		return nil
	case wi._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.work_items ` +
		`WHERE work_item_id = $1`
	// run
	logf(sqlstr, wi.WorkItemID)
	if _, err := db.Exec(ctx, sqlstr, wi.WorkItemID); err != nil {
		return logerror(err)
	}
	// set deleted
	wi._deleted = true
	return nil
}

// WorkItemByWorkItemID retrieves a row from 'public.work_items' as a WorkItem.
//
// Generated from index 'work_items_pkey'.
func WorkItemByWorkItemID(ctx context.Context, db DB, workItemID int64) (*WorkItem, error) {
	// query
	const sqlstr = `SELECT ` +
		`work_item_id, title, metadata, project_id, kanban_step_id, created_at, updated_at, deleted_at ` +
		`FROM public.work_items ` +
		`WHERE work_item_id = $1`
	// run
	logf(sqlstr, workItemID)
	wi := WorkItem{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, workItemID).Scan(&wi.WorkItemID, &wi.Title, &wi.Metadata, &wi.ProjectID, &wi.KanbanStepID, &wi.CreatedAt, &wi.UpdatedAt, &wi.DeletedAt); err != nil {
		return nil, logerror(err)
	}
	return &wi, nil
}

// KanbanStep returns the KanbanStep associated with the WorkItem's (KanbanStepID).
//
// Generated from foreign key 'work_items_kanban_step_id_fkey'.
func (wi *WorkItem) KanbanStep(ctx context.Context, db DB) (*KanbanStep, error) {
	return KanbanStepByKanbanStepID(ctx, db, wi.KanbanStepID)
}

// Project returns the Project associated with the WorkItem's (ProjectID).
//
// Generated from foreign key 'work_items_project_id_fkey'.
func (wi *WorkItem) Project(ctx context.Context, db DB) (*Project, error) {
	return ProjectByProjectID(ctx, db, wi.ProjectID)
}

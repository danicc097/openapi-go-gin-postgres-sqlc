package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// KanbanStep represents a row from 'public.kanban_steps'.
type KanbanStep struct {
	KanbanStepID  int    `json:"kanban_step_id"` // kanban_step_id
	ProjectID     int    `json:"project_id"`     // project_id
	Name          string `json:"name"`           // name
	Description   string `json:"description"`    // description
	TimeTrackable bool   `json:"time_trackable"` // time_trackable
	Disabled      bool   `json:"disabled"`       // disabled
	// xo fields
	_exists, _deleted bool
}

// GetMostRecentKanbanStep returns n most recent rows from 'kanban_steps',
// ordered by "created_at" in descending order.
func GetMostRecentKanbanStep(ctx context.Context, db DB, n int) ([]*KanbanStep, error) {
	// list
	const sqlstr = `SELECT ` +
		`kanban_step_id, project_id, name, description, time_trackable, disabled ` +
		`FROM public.kanban_steps ` +
		`ORDER BY created_at DESC LIMIT $1`
	// run
	logf(sqlstr, n)

	rows, err := db.Query(ctx, sqlstr, n)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	// load results
	var res []*KanbanStep
	for rows.Next() {
		ks := KanbanStep{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ks.KanbanStepID, &ks.ProjectID, &ks.Name, &ks.Description, &ks.TimeTrackable, &ks.Disabled); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ks)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Exists returns true when the KanbanStep exists in the database.
func (ks *KanbanStep) Exists() bool {
	return ks._exists
}

// Deleted returns true when the KanbanStep has been marked for deletion from
// the database.
func (ks *KanbanStep) Deleted() bool {
	return ks._deleted
}

// Insert inserts the KanbanStep to the database.
func (ks *KanbanStep) Insert(ctx context.Context, db DB) error {
	switch {
	case ks._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ks._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.kanban_steps (` +
		`kanban_step_id, project_id, name, description, time_trackable, disabled` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, ks.KanbanStepID, ks.ProjectID, ks.Name, ks.Description, ks.TimeTrackable, ks.Disabled)
	if _, err := db.Exec(ctx, sqlstr, ks.KanbanStepID, ks.ProjectID, ks.Name, ks.Description, ks.TimeTrackable, ks.Disabled); err != nil {
		return logerror(err)
	}
	// set exists
	ks._exists = true
	return nil
}

// Update updates a KanbanStep in the database.
func (ks *KanbanStep) Update(ctx context.Context, db DB) error {
	switch {
	case !ks._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ks._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.kanban_steps SET ` +
		`project_id = $1, name = $2, description = $3, time_trackable = $4, disabled = $5 ` +
		`WHERE kanban_step_id = $6`
	// run
	logf(sqlstr, ks.ProjectID, ks.Name, ks.Description, ks.TimeTrackable, ks.Disabled, ks.KanbanStepID)
	if _, err := db.Exec(ctx, sqlstr, ks.ProjectID, ks.Name, ks.Description, ks.TimeTrackable, ks.Disabled, ks.KanbanStepID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the KanbanStep to the database.
func (ks *KanbanStep) Save(ctx context.Context, db DB) error {
	if ks.Exists() {
		return ks.Update(ctx, db)
	}
	return ks.Insert(ctx, db)
}

// Upsert performs an upsert for KanbanStep.
func (ks *KanbanStep) Upsert(ctx context.Context, db DB) error {
	switch {
	case ks._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.kanban_steps (` +
		`kanban_step_id, project_id, name, description, time_trackable, disabled` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (kanban_step_id) DO ` +
		`UPDATE SET ` +
		`project_id = EXCLUDED.project_id, name = EXCLUDED.name, description = EXCLUDED.description, time_trackable = EXCLUDED.time_trackable, disabled = EXCLUDED.disabled `
	// run
	logf(sqlstr, ks.KanbanStepID, ks.ProjectID, ks.Name, ks.Description, ks.TimeTrackable, ks.Disabled)
	if _, err := db.Exec(ctx, sqlstr, ks.KanbanStepID, ks.ProjectID, ks.Name, ks.Description, ks.TimeTrackable, ks.Disabled); err != nil {
		return logerror(err)
	}
	// set exists
	ks._exists = true
	return nil
}

// Delete deletes the KanbanStep from the database.
func (ks *KanbanStep) Delete(ctx context.Context, db DB) error {
	switch {
	case !ks._exists: // doesn't exist
		return nil
	case ks._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.kanban_steps ` +
		`WHERE kanban_step_id = $1`
	// run
	logf(sqlstr, ks.KanbanStepID)
	if _, err := db.Exec(ctx, sqlstr, ks.KanbanStepID); err != nil {
		return logerror(err)
	}
	// set deleted
	ks._deleted = true
	return nil
}

// KanbanStepByKanbanStepID retrieves a row from 'public.kanban_steps' as a KanbanStep.
//
// Generated from index 'kanban_steps_pkey'.
func KanbanStepByKanbanStepID(ctx context.Context, db DB, kanbanStepID int) (*KanbanStep, error) {
	// query
	const sqlstr = `SELECT ` +
		`kanban_step_id, project_id, name, description, time_trackable, disabled ` +
		`FROM public.kanban_steps ` +
		`WHERE kanban_step_id = $1`
	// run
	logf(sqlstr, kanbanStepID)
	ks := KanbanStep{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, kanbanStepID).Scan(&ks.KanbanStepID, &ks.ProjectID, &ks.Name, &ks.Description, &ks.TimeTrackable, &ks.Disabled); err != nil {
		return nil, logerror(err)
	}
	return &ks, nil
}

// Project returns the Project associated with the KanbanStep's (ProjectID).
//
// Generated from foreign key 'kanban_steps_project_id_fkey'.
func (ks *KanbanStep) Project(ctx context.Context, db DB) (*Project, error) {
	return ProjectByProjectID(ctx, db, ks.ProjectID)
}

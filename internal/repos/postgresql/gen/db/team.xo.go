package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/jackc/pgtype"
)

// Team represents a row from 'public.teams'.
type Team struct {
	TeamID      int          `json:"team_id" db:"team_id"`         // team_id
	ProjectID   int          `json:"project_id" db:"project_id"`   // project_id
	Name        string       `json:"name" db:"name"`               // name
	Description string       `json:"description" db:"description"` // description
	Metadata    pgtype.JSONB `json:"metadata" db:"metadata"`       // metadata
	CreatedAt   time.Time    `json:"created_at" db:"created_at"`   // created_at
	UpdatedAt   time.Time    `json:"updated_at" db:"updated_at"`   // updated_at
	// xo fields
	_exists, _deleted bool
}

type TeamSelectConfig struct {
	limit    string
	orderBy  string
	joinWith []TeamJoinBy
}

type TeamSelectConfigOption func(*TeamSelectConfig)

// TeamWithLimit limits row selection.
func TeamWithLimit(limit int) TeamSelectConfigOption {
	return func(s *TeamSelectConfig) {
		s.limit = fmt.Sprintf(" limit %d ", limit)
	}
}

type TeamOrderBy = string

const (
	TeamCreatedAtDescNullsFirst TeamOrderBy = "CreatedAt DescNullsFirst"
	TeamCreatedAtDescNullsLast  TeamOrderBy = "CreatedAt DescNullsLast"
	TeamCreatedAtAscNullsFirst  TeamOrderBy = "CreatedAt AscNullsFirst"
	TeamCreatedAtAscNullsLast   TeamOrderBy = "CreatedAt AscNullsLast"
	TeamUpdatedAtDescNullsFirst TeamOrderBy = "UpdatedAt DescNullsFirst"
	TeamUpdatedAtDescNullsLast  TeamOrderBy = "UpdatedAt DescNullsLast"
	TeamUpdatedAtAscNullsFirst  TeamOrderBy = "UpdatedAt AscNullsFirst"
	TeamUpdatedAtAscNullsLast   TeamOrderBy = "UpdatedAt AscNullsLast"
)

// TeamWithOrderBy orders results by the given columns.
func TeamWithOrderBy(rows ...TeamOrderBy) TeamSelectConfigOption {
	return func(s *TeamSelectConfig) {
		s.orderBy = strings.Join(rows, ", ")
	}
}

type TeamJoinBy = string

// Exists returns true when the Team exists in the database.
func (t *Team) Exists() bool {
	return t._exists
}

// Deleted returns true when the Team has been marked for deletion from
// the database.
func (t *Team) Deleted() bool {
	return t._deleted
}

// Insert inserts the Team to the database.
func (t *Team) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO public.teams (` +
		`project_id, name, description, metadata` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING team_id `
	// run
	logf(sqlstr, t.ProjectID, t.Name, t.Description, t.Metadata)
	if err := db.QueryRow(ctx, sqlstr, t.ProjectID, t.Name, t.Description, t.Metadata).Scan(&t.TeamID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a Team in the database.
func (t *Team) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	sqlstr := `UPDATE public.teams SET ` +
		`project_id = $1, name = $2, description = $3, metadata = $4 ` +
		`WHERE team_id = $5 `
	// run
	logf(sqlstr, t.ProjectID, t.Name, t.Description, t.Metadata, t.CreatedAt, t.UpdatedAt, t.TeamID)
	if _, err := db.Exec(ctx, sqlstr, t.ProjectID, t.Name, t.Description, t.Metadata, t.CreatedAt, t.UpdatedAt, t.TeamID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Team to the database.
func (t *Team) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for Team.
func (t *Team) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	sqlstr := `INSERT INTO public.teams (` +
		`team_id, project_id, name, description, metadata` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (team_id) DO ` +
		`UPDATE SET ` +
		`project_id = EXCLUDED.project_id, name = EXCLUDED.name, description = EXCLUDED.description, metadata = EXCLUDED.metadata  `
	// run
	logf(sqlstr, t.TeamID, t.ProjectID, t.Name, t.Description, t.Metadata)
	if _, err := db.Exec(ctx, sqlstr, t.TeamID, t.ProjectID, t.Name, t.Description, t.Metadata); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the Team from the database.
func (t *Team) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	sqlstr := `DELETE FROM public.teams ` +
		`WHERE team_id = $1 `
	// run
	logf(sqlstr, t.TeamID)
	if _, err := db.Exec(ctx, sqlstr, t.TeamID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TeamByNameProjectID retrieves a row from 'public.teams' as a Team.
//
// Generated from index 'teams_name_project_id_key'.
func TeamByNameProjectID(ctx context.Context, db DB, name string, projectID int, opts ...TeamSelectConfigOption) (*Team, error) {
	c := &TeamSelectConfig{}
	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`team_id, project_id, name, description, metadata, created_at, updated_at ` +
		`FROM public.teams ` +
		`WHERE name = $1 AND project_id = $2 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	logf(sqlstr, name, projectID)
	t := Team{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, name, projectID).Scan(&t.TeamID, &t.ProjectID, &t.Name, &t.Description, &t.Metadata, &t.CreatedAt, &t.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// TeamByTeamID retrieves a row from 'public.teams' as a Team.
//
// Generated from index 'teams_pkey'.
func TeamByTeamID(ctx context.Context, db DB, teamID int, opts ...TeamSelectConfigOption) (*Team, error) {
	c := &TeamSelectConfig{}
	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`team_id, project_id, name, description, metadata, created_at, updated_at ` +
		`FROM public.teams ` +
		`WHERE team_id = $1 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	logf(sqlstr, teamID)
	t := Team{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, teamID).Scan(&t.TeamID, &t.ProjectID, &t.Name, &t.Description, &t.Metadata, &t.CreatedAt, &t.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// Project returns the Project associated with the Team's (ProjectID).
//
// Generated from foreign key 'teams_project_id_fkey'.
func (t *Team) Project(ctx context.Context, db DB) (*Project, error) {
	return ProjectByProjectID(ctx, db, t.ProjectID)
}

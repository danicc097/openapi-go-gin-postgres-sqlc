package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	models "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5"
)

// EntityNotification represents a row from 'public.entity_notifications'.
// Change properties via SQL column comments, joined with " && ":
//   - "properties":<p1>,<p2>,...
//     -- private: exclude a field from JSON.
//     -- not-required: make a schema field not required.
//     -- hidden: exclude field from OpenAPI generation.
//     -- refs-ignore: generate a field whose constraints are ignored by the referenced table,
//     i.e. no joins will be generated.
//     -- share-ref-constraints: for a FK column, it will generate the same M2O and M2M join fields the ref column has.
//   - "type":<pkg.type> to override the type annotation. An openapi schema named <type> must exist.
//   - "cardinality":<O2O|M2O|M2M> to generate/override joins explicitly. Only O2O is inferred.
//   - "tags":<tags> to append literal struct tag strings.
type EntityNotification struct {
	EntityNotificationID EntityNotificationID `json:"entityNotificationID" db:"entity_notification_id" required:"true" nullable:"false"`   // entity_notification_id
	ID                   string               `json:"id" db:"id" required:"true" nullable:"false"`                                         // id
	Message              string               `json:"message" db:"message" required:"true" nullable:"false"`                               // message
	Topic                models.Topics        `json:"topic" db:"topic" required:"true" nullable:"false" ref:"#/components/schemas/Topics"` // topic
	CreatedAt            time.Time            `json:"createdAt" db:"created_at" required:"true" nullable:"false"`                          // created_at

}

// EntityNotificationCreateParams represents insert params for 'public.entity_notifications'.
type EntityNotificationCreateParams struct {
	ID      string        `json:"id" required:"true" nullable:"false"`                                      // id
	Message string        `json:"message" required:"true" nullable:"false"`                                 // message
	Topic   models.Topics `json:"topic" required:"true" nullable:"false" ref:"#/components/schemas/Topics"` // topic
}

// EntityNotificationParams represents common params for both insert and update of 'public.entity_notifications'.
type EntityNotificationParams interface {
	GetID() *string
	GetMessage() *string
	GetTopic() *models.Topics
}

func (p EntityNotificationCreateParams) GetID() *string {
	x := p.ID
	return &x
}
func (p EntityNotificationUpdateParams) GetID() *string {
	return p.ID
}

func (p EntityNotificationCreateParams) GetMessage() *string {
	x := p.Message
	return &x
}
func (p EntityNotificationUpdateParams) GetMessage() *string {
	return p.Message
}

func (p EntityNotificationCreateParams) GetTopic() *models.Topics {
	x := p.Topic
	return &x
}
func (p EntityNotificationUpdateParams) GetTopic() *models.Topics {
	return p.Topic
}

type EntityNotificationID int

// CreateEntityNotification creates a new EntityNotification in the database with the given params.
func CreateEntityNotification(ctx context.Context, db DB, params *EntityNotificationCreateParams) (*EntityNotification, error) {
	en := &EntityNotification{
		ID:      params.ID,
		Message: params.Message,
		Topic:   params.Topic,
	}

	return en.Insert(ctx, db)
}

type EntityNotificationSelectConfig struct {
	limit   string
	orderBy map[string]models.Direction
	joins   EntityNotificationJoins
	filters map[string][]any
	having  map[string][]any
}
type EntityNotificationSelectConfigOption func(*EntityNotificationSelectConfig)

// WithEntityNotificationLimit limits row selection.
func WithEntityNotificationLimit(limit int) EntityNotificationSelectConfigOption {
	return func(s *EntityNotificationSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

// WithEntityNotificationOrderBy accumulates orders results by the given columns.
// A nil entry removes the existing column sort, if any.
func WithEntityNotificationOrderBy(rows map[string]*models.Direction) EntityNotificationSelectConfigOption {
	return func(s *EntityNotificationSelectConfig) {
		te := EntityFields[TableEntityEntityNotification]
		for dbcol, dir := range rows {
			if _, ok := te[dbcol]; !ok {
				continue
			}
			if dir == nil {
				delete(s.orderBy, dbcol)
				continue
			}
			s.orderBy[dbcol] = *dir
		}
	}
}

type EntityNotificationJoins struct {
}

// WithEntityNotificationJoin joins with the given tables.
func WithEntityNotificationJoin(joins EntityNotificationJoins) EntityNotificationSelectConfigOption {
	return func(s *EntityNotificationSelectConfig) {
		s.joins = EntityNotificationJoins{}
	}
}

// WithEntityNotificationFilters adds the given WHERE clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	filters := map[string][]any{
//		"NOT (col.name = any ($i))": {[]string{"excl_name_1", "excl_name_2"}},
//		`(col.created_at > $i OR
//		col.is_closed = $i)`: {time.Now().Add(-24 * time.Hour), true},
//	}
func WithEntityNotificationFilters(filters map[string][]any) EntityNotificationSelectConfigOption {
	return func(s *EntityNotificationSelectConfig) {
		s.filters = filters
	}
}

// WithEntityNotificationHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
// WithUserHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	// filter a given aggregate of assigned users to return results where at least one of them has id of userId.
//	// See xo_join_* alias used by the join db tag in the SelectSQL string.
//	filters := map[string][]any{
//	"$i = ANY(ARRAY_AGG(xo_join_assigned_users_join.user_id))": {userId},
//	}
func WithEntityNotificationHavingClause(conditions map[string][]any) EntityNotificationSelectConfigOption {
	return func(s *EntityNotificationSelectConfig) {
		s.having = conditions
	}
}

// EntityNotificationUpdateParams represents update params for 'public.entity_notifications'.
type EntityNotificationUpdateParams struct {
	ID      *string        `json:"id" nullable:"false"`                                      // id
	Message *string        `json:"message" nullable:"false"`                                 // message
	Topic   *models.Topics `json:"topic" nullable:"false" ref:"#/components/schemas/Topics"` // topic
}

// SetUpdateParams updates public.entity_notifications struct fields with the specified params.
func (en *EntityNotification) SetUpdateParams(params *EntityNotificationUpdateParams) {
	if params.ID != nil {
		en.ID = *params.ID
	}
	if params.Message != nil {
		en.Message = *params.Message
	}
	if params.Topic != nil {
		en.Topic = *params.Topic
	}
}

// Insert inserts the EntityNotification to the database.
func (en *EntityNotification) Insert(ctx context.Context, db DB) (*EntityNotification, error) {
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO public.entity_notifications (
	id, message, topic
	) VALUES (
	$1, $2, $3
	) RETURNING * `
	// run
	logf(sqlstr, en.ID, en.Message, en.Topic)

	rows, err := db.Query(ctx, sqlstr, en.ID, en.Message, en.Topic)
	if err != nil {
		return nil, logerror(fmt.Errorf("EntityNotification/Insert/db.Query: %w", &XoError{Entity: "Entity notification", Err: err}))
	}
	newen, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[EntityNotification])
	if err != nil {
		return nil, logerror(fmt.Errorf("EntityNotification/Insert/pgx.CollectOneRow: %w", &XoError{Entity: "Entity notification", Err: err}))
	}

	*en = newen

	return en, nil
}

// Update updates a EntityNotification in the database.
func (en *EntityNotification) Update(ctx context.Context, db DB) (*EntityNotification, error) {
	// update with composite primary key
	sqlstr := `UPDATE public.entity_notifications SET 
	id = $1, message = $2, topic = $3 
	WHERE entity_notification_id = $4 
	RETURNING * `
	// run
	logf(sqlstr, en.ID, en.Message, en.Topic, en.EntityNotificationID)

	rows, err := db.Query(ctx, sqlstr, en.ID, en.Message, en.Topic, en.EntityNotificationID)
	if err != nil {
		return nil, logerror(fmt.Errorf("EntityNotification/Update/db.Query: %w", &XoError{Entity: "Entity notification", Err: err}))
	}
	newen, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[EntityNotification])
	if err != nil {
		return nil, logerror(fmt.Errorf("EntityNotification/Update/pgx.CollectOneRow: %w", &XoError{Entity: "Entity notification", Err: err}))
	}
	*en = newen

	return en, nil
}

// Upsert upserts a EntityNotification in the database.
// Requires appropriate PK(s) to be set beforehand.
func (en *EntityNotification) Upsert(ctx context.Context, db DB, params *EntityNotificationCreateParams) (*EntityNotification, error) {
	var err error

	en.ID = params.ID
	en.Message = params.Message
	en.Topic = params.Topic

	en, err = en.Insert(ctx, db)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code != pgerrcode.UniqueViolation {
				return nil, fmt.Errorf("UpsertEntityNotification/Insert: %w", &XoError{Entity: "Entity notification", Err: err})
			}
			en, err = en.Update(ctx, db)
			if err != nil {
				return nil, fmt.Errorf("UpsertEntityNotification/Update: %w", &XoError{Entity: "Entity notification", Err: err})
			}
		}
	}

	return en, err
}

// Delete deletes the EntityNotification from the database.
func (en *EntityNotification) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM public.entity_notifications 
	WHERE entity_notification_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, en.EntityNotificationID); err != nil {
		return logerror(err)
	}
	return nil
}

// EntityNotificationPaginated returns a cursor-paginated list of EntityNotification.
// At least one cursor is required.
func EntityNotificationPaginated(ctx context.Context, db DB, cursors models.PaginationCursors, opts ...EntityNotificationSelectConfigOption) ([]EntityNotification, error) {
	c := &EntityNotificationSelectConfig{joins: EntityNotificationJoins{},
		filters: make(map[string][]any),
		having:  make(map[string][]any),
		orderBy: make(map[string]models.Direction),
	}

	for _, o := range opts {
		o(c)
	}

	for _, cursor := range cursors {
		if cursor.Value == nil {

			return nil, logerror(fmt.Errorf("XoTestsUser/Paginated/cursorValue: %w", &XoError{Entity: "User", Err: fmt.Errorf("no cursor value for column: %s", cursor.Column)}))
		}
		field, ok := EntityFields[TableEntityEntityNotification][cursor.Column]
		if !ok {
			return nil, logerror(fmt.Errorf("EntityNotification/Paginated/cursor: %w", &XoError{Entity: "Entity notification", Err: fmt.Errorf("invalid cursor column: %s", cursor.Column)}))
		}

		op := "<"
		if cursor.Direction == models.DirectionAsc {
			op = ">"
		}
		c.filters[fmt.Sprintf("entity_notifications.%s %s $i", field.Db, op)] = []any{*cursor.Value}
		c.orderBy[field.Db] = cursor.Direction // no need to duplicate opts
	}

	paramStart := 0 // all filters will come from the user
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters += " where " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderByClause := ""
	if len(c.orderBy) > 0 {
		orderByClause += " order by "
	} else {
		return nil, logerror(fmt.Errorf("EntityNotification/Paginated/orderBy: %w", &XoError{Entity: "Entity notification", Err: fmt.Errorf("at least one sorted column is required")}))
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderByClause += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	entity_notifications.created_at,
	entity_notifications.entity_notification_id,
	entity_notifications.id,
	entity_notifications.message,
	entity_notifications.topic %s 
	 FROM public.entity_notifications %s 
	 %s  %s %s %s`, selects, joins, filters, groupByClause, havingClause, orderByClause)
	sqlstr += c.limit
	sqlstr = "/* EntityNotificationPaginated */\n" + sqlstr

	// run

	rows, err := db.Query(ctx, sqlstr, append(filterParams, havingParams...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("EntityNotification/Paginated/db.Query: %w", &XoError{Entity: "Entity notification", Err: err}))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[EntityNotification])
	if err != nil {
		return nil, logerror(fmt.Errorf("EntityNotification/Paginated/pgx.CollectRows: %w", &XoError{Entity: "Entity notification", Err: err}))
	}
	return res, nil
}

// EntityNotificationByEntityNotificationID retrieves a row from 'public.entity_notifications' as a EntityNotification.
//
// Generated from index 'entity_notifications_pkey'.
func EntityNotificationByEntityNotificationID(ctx context.Context, db DB, entityNotificationID EntityNotificationID, opts ...EntityNotificationSelectConfigOption) (*EntityNotification, error) {
	c := &EntityNotificationSelectConfig{joins: EntityNotificationJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderBy := ""
	if len(c.orderBy) > 0 {
		orderBy += " order by "
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderBy += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	entity_notifications.created_at,
	entity_notifications.entity_notification_id,
	entity_notifications.id,
	entity_notifications.message,
	entity_notifications.topic %s 
	 FROM public.entity_notifications %s 
	 WHERE entity_notifications.entity_notification_id = $1
	 %s   %s 
  %s 
`, selects, joins, filters, groupByClause, havingClause)
	sqlstr += orderBy
	sqlstr += c.limit
	sqlstr = "/* EntityNotificationByEntityNotificationID */\n" + sqlstr

	// run
	// logf(sqlstr, entityNotificationID)
	rows, err := db.Query(ctx, sqlstr, append([]any{entityNotificationID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("entity_notifications/EntityNotificationByEntityNotificationID/db.Query: %w", &XoError{Entity: "Entity notification", Err: err}))
	}
	en, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[EntityNotification])
	if err != nil {
		return nil, logerror(fmt.Errorf("entity_notifications/EntityNotificationByEntityNotificationID/pgx.CollectOneRow: %w", &XoError{Entity: "Entity notification", Err: err}))
	}

	return &en, nil
}

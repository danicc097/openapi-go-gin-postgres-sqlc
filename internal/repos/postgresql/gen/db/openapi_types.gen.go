// Package db provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package db

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   ActivityID `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    ProjectID  `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   KanbanStepID           `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         TeamID                 `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     WorkItemID             `json:"workItemID"`
	WorkItemTypeID WorkItemTypeID         `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           DbWorkItemCreateParams        `json:"base"`
	DemoTwoProject DbDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember              `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        DbWorkItemCreateParams     `json:"base"`
	DemoProject DbDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember           `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName     `json:"projectName"`
	TagIDs      []WorkItemTagID `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]DbWorkItemTagCreateParams `json:"tags"`
	Teams *[]DbTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      ActivityID  `json:"activityID"`
	Comment         string      `json:"comment"`
	DurationMinutes *int        `json:"durationMinutes"`
	Start           time.Time   `json:"start"`
	TeamID          *TeamID     `json:"teamID"`
	UserID          DbUserID    `json:"userID"`
	WorkItemID      *WorkItemID `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string     `json:"message"`
	UserID     DbUserID   `json:"userID"`
	WorkItemID WorkItemID `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbActivity defines the model for DbActivity.
type DbActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// DbActivityCreateParams defines the model for DbActivityCreateParams.
type DbActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// DbCacheDemoWorkItemJoins defines the model for DbCacheDemoWorkItemJoins.
type DbCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// DbDemoTwoWorkItem defines the model for DbDemoTwoWorkItem.
type DbDemoTwoWorkItem = DemoTwoWorkItem

// DbDemoTwoWorkItemCreateParams defines the model for DbDemoTwoWorkItemCreateParams.
type DbDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// DbDemoWorkItem defines the model for DbDemoWorkItem.
type DbDemoWorkItem = DemoWorkItem

// DbDemoWorkItemCreateParams defines the model for DbDemoWorkItemCreateParams.
type DbDemoWorkItemCreateParams = DemoWorkItemCreateParams

// DbKanbanStep defines the model for DbKanbanStep.
type DbKanbanStep = KanbanStep

// DbNotification defines the model for DbNotification.
type DbNotification = Notification

// DbNotificationID defines the model for DbNotificationID.
type DbNotificationID = interface{}

// DbProject defines the model for DbProject.
type DbProject = Project

// DbProjectID defines the model for DbProjectID.
type DbProjectID = interface{}

// DbTeam defines the model for DbTeam.
type DbTeam = Team

// DbTeamCreateParams defines the model for DbTeamCreateParams.
type DbTeamCreateParams = TeamCreateParams

// DbTimeEntry defines the model for DbTimeEntry.
type DbTimeEntry = TimeEntry

// DbUser defines the model for DbUser.
type DbUser = User

// DbUserAPIKey defines the model for DbUserAPIKey.
type DbUserAPIKey = UserAPIKey

// DbUserID defines the model for DbUserID.
type DbUserID = UserID

// DbUserJoins defines the model for DbUserJoins.
type DbUserJoins = UserJoins

// DbUserNotification defines the model for DbUserNotification.
type DbUserNotification struct {
	NotificationID     int      `json:"notificationID"`
	Read               bool     `json:"read"`
	UserID             DbUserID `json:"userID"`
	UserNotificationID int      `json:"userNotificationID"`
}

// DbUserWIAUWorkItem defines the model for DbUserWIAUWorkItem.
type DbUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbUserWIAWorkItem defines the model for DbUserWIAWorkItem.
type DbUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItem defines the model for DbWorkItem.
type DbWorkItem = WorkItem

// DbWorkItemComment defines the model for DbWorkItemComment.
type DbWorkItemComment = WorkItemComment

// DbWorkItemCreateParams defines the model for DbWorkItemCreateParams.
type DbWorkItemCreateParams = WorkItemCreateParams

// DbWorkItemID defines the model for DbWorkItemID.
type DbWorkItemID = interface{}

// DbWorkItemM2MAssigneeWIA defines the model for DbWorkItemM2MAssigneeWIA.
type DbWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// DbWorkItemRole defines the model for DbWorkItemRole.
type DbWorkItemRole = string

// DbWorkItemTag defines the model for DbWorkItemTag.
type DbWorkItemTag = WorkItemTag

// DbWorkItemTagCreateParams defines the model for DbWorkItemTagCreateParams.
type DbWorkItemTagCreateParams = WorkItemTagCreateParams

// DbWorkItemType defines the model for DbWorkItemType.
type DbWorkItemType = WorkItemType

// DbWorkItemTypeID defines the model for DbWorkItemTypeID.
type DbWorkItemTypeID = interface{}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                  `json:"closedAt"`
	CreatedAt       time.Time                   `json:"createdAt"`
	DeletedAt       *time.Time                  `json:"deletedAt"`
	DemoTwoWorkItem DbDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                      `json:"description"`
	KanbanStepID    KanbanStepID                `json:"kanbanStepID"`
	Members         *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName          `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *TeamID              `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID           `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID       `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	DemoWorkItem DbDemoWorkItem              `json:"demoWorkItem"`
	Description  string                      `json:"description"`
	KanbanStepID KanbanStepID                `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName          `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *TeamID              `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID           `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID       `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *DbCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *DbUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       DbNotification     `json:"notification"`
	NotificationID     NotificationID     `json:"notificationID"`
	Read               bool               `json:"read"`
	UserID             DbUserID           `json:"userID"`
	UserNotificationID UserNotificationID `json:"userNotificationID"`
}

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the db column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID DbUserID     `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]DbTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]DbWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]DbWorkItemTag            `json:"workItemTags"`
	WorkItemType     *DbWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   ProjectID `json:"projectID"`
	TeamID      TeamID    `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      ActivityID  `json:"activityID"`
	Comment         string      `json:"comment"`
	DurationMinutes *int        `json:"durationMinutes"`
	Start           time.Time   `json:"start"`
	TeamID          *TeamID     `json:"teamID"`
	TimeEntryID     TimeEntryID `json:"timeEntryID"`
	UserID          DbUserID    `json:"userID"`
	WorkItemID      *WorkItemID `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *ActivityID `json:"activityID,omitempty"`
	Comment         *string     `json:"comment,omitempty"`
	DurationMinutes *int        `json:"durationMinutes"`
	Start           *time.Time  `json:"start,omitempty"`
	TeamID          *int        `json:"teamID"`
	UserID          *DbUserID   `json:"userID,omitempty"`
	WorkItemID      *int        `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string     `json:"message,omitempty"`
	UserID     *DbUserID   `json:"userID,omitempty"`
	WorkItemID *WorkItemID `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int          `json:"age"`
	ApiKey                   *DbUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time     `json:"createdAt"`
	DeletedAt                *time.Time    `json:"deletedAt"`
	Email                    string        `json:"email"`
	FirstName                *string       `json:"firstName"`
	FullName                 *string       `json:"fullName"`
	HasGlobalNotifications   bool          `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool          `json:"hasPersonalNotifications"`
	LastName                 *string       `json:"lastName"`
	Projects                 *[]DbProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role      `json:"role"`
	Scopes    Scopes    `json:"scopes"`
	Teams     *[]DbTeam `json:"teams"`
	UpdatedAt time.Time `json:"updatedAt"`
	UserID    DbUserID  `json:"userID"`
	Username  string    `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	Description  string                      `json:"description"`
	KanbanStepID KanbanStepID                `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName          `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *TeamID              `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       WorkItemID           `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   WorkItemTypeID       `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time         `json:"createdAt"`
	Message           string            `json:"message"`
	UpdatedAt         time.Time         `json:"updatedAt"`
	UserID            DbUserID          `json:"userID"`
	WorkItemCommentID WorkItemCommentID `json:"workItemCommentID"`
	WorkItemID        WorkItemID        `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string        `json:"color"`
	DeletedAt     *time.Time    `json:"deletedAt"`
	Description   string        `json:"description"`
	Name          string        `json:"name"`
	ProjectID     ProjectID     `json:"projectID"`
	WorkItemTagID WorkItemTagID `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string         `json:"color"`
	Description    string         `json:"description"`
	Name           string         `json:"name"`
	ProjectID      ProjectID      `json:"projectID"`
	WorkItemTypeID WorkItemTypeID `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Xj2yhFvh+mwTuS++TNPi/wMAAP//LIHEBhRHAQA=",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

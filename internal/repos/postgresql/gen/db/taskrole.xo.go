package db

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// TaskRole is the 'task_role' enum type from schema 'public'.
type TaskRole uint16

// TaskRole values.
const (
	// TaskRolePreparer is the 'preparer' task_role.
	TaskRolePreparer TaskRole = 1
	// TaskRoleReviewer is the 'reviewer' task_role.
	TaskRoleReviewer TaskRole = 2
)

// String satisfies the fmt.Stringer interface.
func (tr TaskRole) String() string {
	switch tr {
	case TaskRolePreparer:
		return "preparer"
	case TaskRoleReviewer:
		return "reviewer"
	}
	return fmt.Sprintf("TaskRole(%d)", tr)
}

// MarshalText marshals TaskRole into text.
func (tr TaskRole) MarshalText() ([]byte, error) {
	return []byte(tr.String()), nil
}

// UnmarshalText unmarshals TaskRole from text.
func (tr *TaskRole) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "preparer":
		*tr = TaskRolePreparer
	case "reviewer":
		*tr = TaskRoleReviewer
	default:
		return ErrInvalidTaskRole(str)
	}
	return nil
}

// Value satisfies the driver.Valuer interface.
func (tr TaskRole) Value() (driver.Value, error) {
	return tr.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (tr *TaskRole) Scan(v interface{}) error {
	switch buf := v.(type) {
	case []byte:
		return tr.UnmarshalText(buf)
	case string:
		return tr.UnmarshalText([]byte(buf))
	}

	return ErrInvalidTaskRole(fmt.Sprintf("%T", v))
}

// NullTaskRole represents a null 'task_role' enum for schema 'public'.
type NullTaskRole struct {
	TaskRole TaskRole
	// Valid is true if TaskRole is not null.
	Valid bool
}

// Value satisfies the driver.Valuer interface.
func (ntr NullTaskRole) Value() (driver.Value, error) {
	if !ntr.Valid {
		return nil, nil
	}
	return ntr.TaskRole.Value()
}

// Scan satisfies the sql.Scanner interface.
func (ntr *NullTaskRole) Scan(v interface{}) error {
	if v == nil {
		ntr.TaskRole, ntr.Valid = 0, false
		return nil
	}
	err := ntr.TaskRole.Scan(v)
	ntr.Valid = err == nil
	return err
}

// ErrInvalidTaskRole is the invalid TaskRole error.
type ErrInvalidTaskRole string

// Error satisfies the error interface.
func (err ErrInvalidTaskRole) Error() string {
	return fmt.Sprintf("invalid TaskRole(%s)", string(err))
}

func AllTaskRoleValues() []TaskRole {
	return []TaskRole{
		TaskRolePreparer,
		TaskRoleReviewer,
	}
}

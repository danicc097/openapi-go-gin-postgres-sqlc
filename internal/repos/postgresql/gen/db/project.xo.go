package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Project represents a row from 'public.projects'.
type Project struct {
	ProjectID      int       `json:"project_id"`      // project_id
	OrganizationID int       `json:"organization_id"` // organization_id
	Name           string    `json:"name"`            // name
	Description    string    `json:"description"`     // description
	Metadata       []byte    `json:"metadata"`        // metadata
	CreatedAt      time.Time `json:"created_at"`      // created_at
	UpdatedAt      time.Time `json:"updated_at"`      // updated_at
	// xo fields
	_exists, _deleted bool
}

// GetMostRecentProject returns n most recent rows from 'projects',
// ordered by "created_at" in descending order.
func GetMostRecentProject(ctx context.Context, db DB, n int) ([]*Project, error) {
	// list
	const sqlstr = `SELECT ` +
		`project_id, organization_id, name, description, metadata, created_at, updated_at ` +
		`FROM public.projects ` +
		`ORDER BY created_at DESC LIMIT $1`
	// run
	logf(sqlstr, n)

	rows, err := db.Query(ctx, sqlstr, n)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	// load results
	var res []*Project
	for rows.Next() {
		p := Project{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.ProjectID, &p.OrganizationID, &p.Name, &p.Description, &p.Metadata, &p.CreatedAt, &p.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Exists returns true when the Project exists in the database.
func (p *Project) Exists() bool {
	return p._exists
}

// Deleted returns true when the Project has been marked for deletion from
// the database.
func (p *Project) Deleted() bool {
	return p._deleted
}

// Insert inserts the Project to the database.
func (p *Project) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.projects (` +
		`organization_id, name, description, metadata` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING project_id`
	// run
	logf(sqlstr, p.OrganizationID, p.Name, p.Description, p.Metadata)
	if err := db.QueryRow(ctx, sqlstr, p.OrganizationID, p.Name, p.Description, p.Metadata).Scan(&p.ProjectID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a Project in the database.
func (p *Project) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.projects SET ` +
		`organization_id = $1, name = $2, description = $3, metadata = $4 ` +
		`WHERE project_id = $5`
	// run
	logf(sqlstr, p.OrganizationID, p.Name, p.Description, p.Metadata, p.CreatedAt, p.UpdatedAt, p.ProjectID)
	if _, err := db.Exec(ctx, sqlstr, p.OrganizationID, p.Name, p.Description, p.Metadata, p.CreatedAt, p.UpdatedAt, p.ProjectID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Project to the database.
func (p *Project) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for Project.
func (p *Project) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.projects (` +
		`project_id, organization_id, name, description, metadata` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (project_id) DO ` +
		`UPDATE SET ` +
		`organization_id = EXCLUDED.organization_id, name = EXCLUDED.name, description = EXCLUDED.description, metadata = EXCLUDED.metadata `
	// run
	logf(sqlstr, p.ProjectID, p.OrganizationID, p.Name, p.Description, p.Metadata)
	if _, err := db.Exec(ctx, sqlstr, p.ProjectID, p.OrganizationID, p.Name, p.Description, p.Metadata); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the Project from the database.
func (p *Project) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.projects ` +
		`WHERE project_id = $1`
	// run
	logf(sqlstr, p.ProjectID)
	if _, err := db.Exec(ctx, sqlstr, p.ProjectID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// ProjectByName retrieves a row from 'public.projects' as a Project.
//
// Generated from index 'projects_name_key'.
func ProjectByName(ctx context.Context, db DB, name string) (*Project, error) {
	// query
	const sqlstr = `SELECT ` +
		`project_id, organization_id, name, description, metadata, created_at, updated_at ` +
		`FROM public.projects ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	p := Project{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, name).Scan(&p.ProjectID, &p.OrganizationID, &p.Name, &p.Description, &p.Metadata, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// ProjectByProjectID retrieves a row from 'public.projects' as a Project.
//
// Generated from index 'projects_pkey'.
func ProjectByProjectID(ctx context.Context, db DB, projectID int) (*Project, error) {
	// query
	const sqlstr = `SELECT ` +
		`project_id, organization_id, name, description, metadata, created_at, updated_at ` +
		`FROM public.projects ` +
		`WHERE project_id = $1`
	// run
	logf(sqlstr, projectID)
	p := Project{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, projectID).Scan(&p.ProjectID, &p.OrganizationID, &p.Name, &p.Description, &p.Metadata, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// Organization returns the Organization associated with the Project's (OrganizationID).
//
// Generated from foreign key 'projects_organization_id_fkey'.
func (p *Project) Organization(ctx context.Context, db DB) (*Organization, error) {
	return OrganizationByOrganizationID(ctx, db, p.OrganizationID)
}

package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"

	models "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5"
)

// ExtraSchemaBookAuthorsSurrogateKey represents a row from 'extra_schema.book_authors_surrogate_key'.
// Change properties via SQL column comments, joined with " && ":
//   - "properties":<p1>,<p2>,...
//     -- private: exclude a field from JSON.
//     -- not-required: make a schema field not required.
//     -- hidden: exclude field from OpenAPI generation.
//     -- refs-ignore: generate a field whose constraints are ignored by the referenced table,
//     i.e. no joins will be generated.
//     -- share-ref-constraints: for a FK column, it will generate the same M2O and M2M join fields the ref column has.
//   - "type":<pkg.type> to override the type annotation. An openapi schema named <type> must exist.
//   - "cardinality":<O2O|M2O|M2M> to generate/override joins explicitly. Only O2O is inferred.
//   - "tags":<tags> to append literal struct tag strings.
type ExtraSchemaBookAuthorsSurrogateKey struct {
	BookAuthorsSurrogateKeyID ExtraSchemaBookAuthorsSurrogateKeyID `json:"bookAuthorsSurrogateKeyID" db:"book_authors_surrogate_key_id" required:"true" nullable:"false"` // book_authors_surrogate_key_id
	BookID                    ExtraSchemaBookID                    `json:"bookID" db:"book_id" required:"true" nullable:"false"`                                          // book_id
	AuthorID                  ExtraSchemaUserID                    `json:"authorID" db:"author_id" required:"true" nullable:"false"`                                      // author_id
	Pseudonym                 *string                              `json:"pseudonym" db:"pseudonym"`                                                                      // pseudonym

	BooksJoin   *[]ExtraSchemaBookAuthorsSurrogateKeyM2MBookBASK   `json:"-" db:"book_authors_surrogate_key_books" openapi-go:"ignore"`   // M2M book_authors_surrogate_key
	AuthorsJoin *[]ExtraSchemaBookAuthorsSurrogateKeyM2MAuthorBASK `json:"-" db:"book_authors_surrogate_key_authors" openapi-go:"ignore"` // M2M book_authors_surrogate_key

}

// ExtraSchemaBookAuthorsSurrogateKeyCreateParams represents insert params for 'extra_schema.book_authors_surrogate_key'.
type ExtraSchemaBookAuthorsSurrogateKeyCreateParams struct {
	AuthorID  ExtraSchemaUserID `json:"authorID" required:"true" nullable:"false"` // author_id
	BookID    ExtraSchemaBookID `json:"bookID" required:"true" nullable:"false"`   // book_id
	Pseudonym *string           `json:"pseudonym"`                                 // pseudonym
}

// ExtraSchemaBookAuthorsSurrogateKeyParams represents common params for both insert and update of 'extra_schema.book_authors_surrogate_key'.
type ExtraSchemaBookAuthorsSurrogateKeyParams interface {
	GetAuthorID() *ExtraSchemaUserID
	GetBookID() *ExtraSchemaBookID
	GetPseudonym() *string
}

func (p ExtraSchemaBookAuthorsSurrogateKeyCreateParams) GetAuthorID() *ExtraSchemaUserID {
	x := p.AuthorID
	return &x
}
func (p ExtraSchemaBookAuthorsSurrogateKeyUpdateParams) GetAuthorID() *ExtraSchemaUserID {
	return p.AuthorID
}

func (p ExtraSchemaBookAuthorsSurrogateKeyCreateParams) GetBookID() *ExtraSchemaBookID {
	x := p.BookID
	return &x
}
func (p ExtraSchemaBookAuthorsSurrogateKeyUpdateParams) GetBookID() *ExtraSchemaBookID {
	return p.BookID
}

func (p ExtraSchemaBookAuthorsSurrogateKeyCreateParams) GetPseudonym() *string {
	return p.Pseudonym
}
func (p ExtraSchemaBookAuthorsSurrogateKeyUpdateParams) GetPseudonym() *string {
	if p.Pseudonym != nil {
		return *p.Pseudonym
	}
	return nil
}

type ExtraSchemaBookAuthorsSurrogateKeyID int

// CreateExtraSchemaBookAuthorsSurrogateKey creates a new ExtraSchemaBookAuthorsSurrogateKey in the database with the given params.
func CreateExtraSchemaBookAuthorsSurrogateKey(ctx context.Context, db DB, params *ExtraSchemaBookAuthorsSurrogateKeyCreateParams) (*ExtraSchemaBookAuthorsSurrogateKey, error) {
	esbask := &ExtraSchemaBookAuthorsSurrogateKey{
		AuthorID:  params.AuthorID,
		BookID:    params.BookID,
		Pseudonym: params.Pseudonym,
	}

	return esbask.Insert(ctx, db)
}

type ExtraSchemaBookAuthorsSurrogateKeySelectConfig struct {
	limit   string
	orderBy map[string]models.Direction
	joins   ExtraSchemaBookAuthorsSurrogateKeyJoins
	filters map[string][]any
	having  map[string][]any
}
type ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption func(*ExtraSchemaBookAuthorsSurrogateKeySelectConfig)

// WithExtraSchemaBookAuthorsSurrogateKeyLimit limits row selection.
func WithExtraSchemaBookAuthorsSurrogateKeyLimit(limit int) ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption {
	return func(s *ExtraSchemaBookAuthorsSurrogateKeySelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

// WithExtraSchemaBookAuthorsSurrogateKeyOrderBy accumulates orders results by the given columns.
// A nil entry removes the existing column sort, if any.
func WithExtraSchemaBookAuthorsSurrogateKeyOrderBy(rows map[string]*models.Direction) ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption {
	return func(s *ExtraSchemaBookAuthorsSurrogateKeySelectConfig) {
		te := ExtraSchemaEntityFields[ExtraSchemaTableEntityExtraSchemaBookAuthorsSurrogateKey]
		for dbcol, dir := range rows {
			if _, ok := te[dbcol]; !ok {
				continue
			}
			if dir == nil {
				delete(s.orderBy, dbcol)
				continue
			}
			s.orderBy[dbcol] = *dir
		}
	}
}

type ExtraSchemaBookAuthorsSurrogateKeyJoins struct {
	Books   bool `json:"books" required:"true" nullable:"false"`   // M2M book_authors_surrogate_key
	Authors bool `json:"authors" required:"true" nullable:"false"` // M2M book_authors_surrogate_key
}

// WithExtraSchemaBookAuthorsSurrogateKeyJoin joins with the given tables.
func WithExtraSchemaBookAuthorsSurrogateKeyJoin(joins ExtraSchemaBookAuthorsSurrogateKeyJoins) ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption {
	return func(s *ExtraSchemaBookAuthorsSurrogateKeySelectConfig) {
		s.joins = ExtraSchemaBookAuthorsSurrogateKeyJoins{
			Books:   s.joins.Books || joins.Books,
			Authors: s.joins.Authors || joins.Authors,
		}
	}
}

// ExtraSchemaBookAuthorsSurrogateKeyM2MBookBASK represents a M2M join against "extra_schema.book_authors_surrogate_key"
type ExtraSchemaBookAuthorsSurrogateKeyM2MBookBASK struct {
	Book      ExtraSchemaBook `json:"book" db:"books" required:"true"`
	Pseudonym *string         `json:"pseudonym" db:"pseudonym" required:"true" `
}

// ExtraSchemaBookAuthorsSurrogateKeyM2MAuthorBASK represents a M2M join against "extra_schema.book_authors_surrogate_key"
type ExtraSchemaBookAuthorsSurrogateKeyM2MAuthorBASK struct {
	User      ExtraSchemaUser `json:"user" db:"users" required:"true"`
	Pseudonym *string         `json:"pseudonym" db:"pseudonym" required:"true" `
}

// WithExtraSchemaBookAuthorsSurrogateKeyFilters adds the given WHERE clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	filters := map[string][]any{
//		"NOT (col.name = any ($i))": {[]string{"excl_name_1", "excl_name_2"}},
//		`(col.created_at > $i OR
//		col.is_closed = $i)`: {time.Now().Add(-24 * time.Hour), true},
//	}
func WithExtraSchemaBookAuthorsSurrogateKeyFilters(filters map[string][]any) ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption {
	return func(s *ExtraSchemaBookAuthorsSurrogateKeySelectConfig) {
		s.filters = filters
	}
}

// WithExtraSchemaBookAuthorsSurrogateKeyHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
// WithUserHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	// filter a given aggregate of assigned users to return results where at least one of them has id of userId.
//	// See xo_join_* alias used by the join db tag in the SelectSQL string.
//	filters := map[string][]any{
//	"$i = ANY(ARRAY_AGG(xo_join_assigned_users_join.user_id))": {userId},
//	}
func WithExtraSchemaBookAuthorsSurrogateKeyHavingClause(conditions map[string][]any) ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption {
	return func(s *ExtraSchemaBookAuthorsSurrogateKeySelectConfig) {
		s.having = conditions
	}
}

const extraSchemaBookAuthorsSurrogateKeyTableBooksJoinSQL = `-- M2M join generated from "book_authors_surrogate_key_book_id_fkey"
left join (
	select
		book_authors_surrogate_key.author_id as book_authors_surrogate_key_author_id
		, book_authors_surrogate_key.pseudonym as pseudonym
		, books.book_id as __books_book_id
		, row(books.*) as __books
	from
		extra_schema.book_authors_surrogate_key
	join extra_schema.books on books.book_id = book_authors_surrogate_key.book_id
	group by
		book_authors_surrogate_key_author_id
		, books.book_id
		, pseudonym
) as xo_join_book_authors_surrogate_key_books on xo_join_book_authors_surrogate_key_books.book_authors_surrogate_key_author_id = book_authors_surrogate_key.author_id
`

const extraSchemaBookAuthorsSurrogateKeyTableBooksSelectSQL = `COALESCE(
		ARRAY_AGG( DISTINCT (
		xo_join_book_authors_surrogate_key_books.__books
		, xo_join_book_authors_surrogate_key_books.pseudonym
		)) filter (where xo_join_book_authors_surrogate_key_books.__books_book_id is not null), '{}') as book_authors_surrogate_key_books`

const extraSchemaBookAuthorsSurrogateKeyTableBooksGroupBySQL = `book_authors_surrogate_key.author_id, book_authors_surrogate_key.book_authors_surrogate_key_id`

const extraSchemaBookAuthorsSurrogateKeyTableAuthorsJoinSQL = `-- M2M join generated from "book_authors_surrogate_key_author_id_fkey"
left join (
	select
		book_authors_surrogate_key.book_id as book_authors_surrogate_key_book_id
		, book_authors_surrogate_key.pseudonym as pseudonym
		, users.user_id as __users_user_id
		, row(users.*) as __users
	from
		extra_schema.book_authors_surrogate_key
	join extra_schema.users on users.user_id = book_authors_surrogate_key.author_id
	group by
		book_authors_surrogate_key_book_id
		, users.user_id
		, pseudonym
) as xo_join_book_authors_surrogate_key_authors on xo_join_book_authors_surrogate_key_authors.book_authors_surrogate_key_book_id = book_authors_surrogate_key.book_id
`

const extraSchemaBookAuthorsSurrogateKeyTableAuthorsSelectSQL = `COALESCE(
		ARRAY_AGG( DISTINCT (
		xo_join_book_authors_surrogate_key_authors.__users
		, xo_join_book_authors_surrogate_key_authors.pseudonym
		)) filter (where xo_join_book_authors_surrogate_key_authors.__users_user_id is not null), '{}') as book_authors_surrogate_key_authors`

const extraSchemaBookAuthorsSurrogateKeyTableAuthorsGroupBySQL = `book_authors_surrogate_key.book_id, book_authors_surrogate_key.book_authors_surrogate_key_id`

// ExtraSchemaBookAuthorsSurrogateKeyUpdateParams represents update params for 'extra_schema.book_authors_surrogate_key'.
type ExtraSchemaBookAuthorsSurrogateKeyUpdateParams struct {
	AuthorID  *ExtraSchemaUserID `json:"authorID" nullable:"false"` // author_id
	BookID    *ExtraSchemaBookID `json:"bookID" nullable:"false"`   // book_id
	Pseudonym **string           `json:"pseudonym"`                 // pseudonym
}

// SetUpdateParams updates extra_schema.book_authors_surrogate_key struct fields with the specified params.
func (esbask *ExtraSchemaBookAuthorsSurrogateKey) SetUpdateParams(params *ExtraSchemaBookAuthorsSurrogateKeyUpdateParams) {
	if params.AuthorID != nil {
		esbask.AuthorID = *params.AuthorID
	}
	if params.BookID != nil {
		esbask.BookID = *params.BookID
	}
	if params.Pseudonym != nil {
		esbask.Pseudonym = *params.Pseudonym
	}
}

// Insert inserts the ExtraSchemaBookAuthorsSurrogateKey to the database.
func (esbask *ExtraSchemaBookAuthorsSurrogateKey) Insert(ctx context.Context, db DB) (*ExtraSchemaBookAuthorsSurrogateKey, error) {
	// insert (primary key generated and returned by database)
	sqlstr := `INSERT INTO extra_schema.book_authors_surrogate_key (
	author_id, book_id, pseudonym
	) VALUES (
	$1, $2, $3
	) RETURNING * `
	// run
	logf(sqlstr, esbask.AuthorID, esbask.BookID, esbask.Pseudonym)

	rows, err := db.Query(ctx, sqlstr, esbask.AuthorID, esbask.BookID, esbask.Pseudonym)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/Insert/db.Query: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	newesbask, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[ExtraSchemaBookAuthorsSurrogateKey])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/Insert/pgx.CollectOneRow: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}

	*esbask = newesbask

	return esbask, nil
}

// Update updates a ExtraSchemaBookAuthorsSurrogateKey in the database.
func (esbask *ExtraSchemaBookAuthorsSurrogateKey) Update(ctx context.Context, db DB) (*ExtraSchemaBookAuthorsSurrogateKey, error) {
	// update with composite primary key
	sqlstr := `UPDATE extra_schema.book_authors_surrogate_key SET 
	author_id = $1, book_id = $2, pseudonym = $3 
	WHERE book_authors_surrogate_key_id = $4 
	RETURNING * `
	// run
	logf(sqlstr, esbask.AuthorID, esbask.BookID, esbask.Pseudonym, esbask.BookAuthorsSurrogateKeyID)

	rows, err := db.Query(ctx, sqlstr, esbask.AuthorID, esbask.BookID, esbask.Pseudonym, esbask.BookAuthorsSurrogateKeyID)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/Update/db.Query: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	newesbask, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[ExtraSchemaBookAuthorsSurrogateKey])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/Update/pgx.CollectOneRow: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	*esbask = newesbask

	return esbask, nil
}

// Upsert upserts a ExtraSchemaBookAuthorsSurrogateKey in the database.
// Requires appropriate PK(s) to be set beforehand.
func (esbask *ExtraSchemaBookAuthorsSurrogateKey) Upsert(ctx context.Context, db DB, params *ExtraSchemaBookAuthorsSurrogateKeyCreateParams) (*ExtraSchemaBookAuthorsSurrogateKey, error) {
	var err error

	esbask.AuthorID = params.AuthorID
	esbask.BookID = params.BookID
	esbask.Pseudonym = params.Pseudonym

	esbask, err = esbask.Insert(ctx, db)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code != pgerrcode.UniqueViolation {
				return nil, fmt.Errorf("UpsertExtraSchemaBookAuthorsSurrogateKey/Insert: %w", &XoError{Entity: "Book authors surrogate key", Err: err})
			}
			esbask, err = esbask.Update(ctx, db)
			if err != nil {
				return nil, fmt.Errorf("UpsertExtraSchemaBookAuthorsSurrogateKey/Update: %w", &XoError{Entity: "Book authors surrogate key", Err: err})
			}
		}
	}

	return esbask, err
}

// Delete deletes the ExtraSchemaBookAuthorsSurrogateKey from the database.
func (esbask *ExtraSchemaBookAuthorsSurrogateKey) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM extra_schema.book_authors_surrogate_key 
	WHERE book_authors_surrogate_key_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, esbask.BookAuthorsSurrogateKeyID); err != nil {
		return logerror(err)
	}
	return nil
}

// ExtraSchemaBookAuthorsSurrogateKeyPaginated returns a cursor-paginated list of ExtraSchemaBookAuthorsSurrogateKey.
// At least one cursor is required.
func ExtraSchemaBookAuthorsSurrogateKeyPaginated(ctx context.Context, db DB, cursor models.PaginationCursor, opts ...ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption) ([]ExtraSchemaBookAuthorsSurrogateKey, error) {
	c := &ExtraSchemaBookAuthorsSurrogateKeySelectConfig{joins: ExtraSchemaBookAuthorsSurrogateKeyJoins{},
		filters: make(map[string][]any),
		having:  make(map[string][]any),
		orderBy: make(map[string]models.Direction),
	}

	for _, o := range opts {
		o(c)
	}

	if cursor.Value == nil {

		return nil, logerror(fmt.Errorf("XoTestsUser/Paginated/cursorValue: %w", &XoError{Entity: "User", Err: fmt.Errorf("no cursor value for column: %s", cursor.Column)}))
	}
	field, ok := ExtraSchemaEntityFields[ExtraSchemaTableEntityExtraSchemaBookAuthorsSurrogateKey][cursor.Column]
	if !ok {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/Paginated/cursor: %w", &XoError{Entity: "Book authors surrogate key", Err: fmt.Errorf("invalid cursor column: %s", cursor.Column)}))
	}

	op := "<"
	if cursor.Direction == models.DirectionAsc {
		op = ">"
	}
	c.filters[fmt.Sprintf("book_authors_surrogate_key.%s %s $i", field.Db, op)] = []any{*cursor.Value}
	c.orderBy[field.Db] = cursor.Direction // no need to duplicate opts

	paramStart := 0 // all filters will come from the user
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters += " where " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderByClause := ""
	if len(c.orderBy) > 0 {
		orderByClause += " order by "
	} else {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/Paginated/orderBy: %w", &XoError{Entity: "Book authors surrogate key", Err: fmt.Errorf("at least one sorted column is required")}))
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderByClause += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Books {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksGroupBySQL)
	}

	if c.joins.Authors {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	book_authors_surrogate_key.author_id,
	book_authors_surrogate_key.book_authors_surrogate_key_id,
	book_authors_surrogate_key.book_id,
	book_authors_surrogate_key.pseudonym %s 
	 FROM extra_schema.book_authors_surrogate_key %s 
	 %s  %s %s %s`, selects, joins, filters, groupByClause, havingClause, orderByClause)
	sqlstr += c.limit
	sqlstr = "/* ExtraSchemaBookAuthorsSurrogateKeyPaginated */\n" + sqlstr

	// run

	rows, err := db.Query(ctx, sqlstr, append(filterParams, havingParams...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/Paginated/db.Query: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[ExtraSchemaBookAuthorsSurrogateKey])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/Paginated/pgx.CollectRows: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	return res, nil
}

// ExtraSchemaBookAuthorsSurrogateKeyByBookIDAuthorID retrieves a row from 'extra_schema.book_authors_surrogate_key' as a ExtraSchemaBookAuthorsSurrogateKey.
//
// Generated from index 'book_authors_surrogate_key_book_id_author_id_key'.
func ExtraSchemaBookAuthorsSurrogateKeyByBookIDAuthorID(ctx context.Context, db DB, bookID ExtraSchemaBookID, authorID ExtraSchemaUserID, opts ...ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption) (*ExtraSchemaBookAuthorsSurrogateKey, error) {
	c := &ExtraSchemaBookAuthorsSurrogateKeySelectConfig{joins: ExtraSchemaBookAuthorsSurrogateKeyJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 2
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderBy := ""
	if len(c.orderBy) > 0 {
		orderBy += " order by "
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderBy += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Books {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksGroupBySQL)
	}

	if c.joins.Authors {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	book_authors_surrogate_key.author_id,
	book_authors_surrogate_key.book_authors_surrogate_key_id,
	book_authors_surrogate_key.book_id,
	book_authors_surrogate_key.pseudonym %s 
	 FROM extra_schema.book_authors_surrogate_key %s 
	 WHERE book_authors_surrogate_key.book_id = $1 AND book_authors_surrogate_key.author_id = $2
	 %s   %s 
  %s 
`, selects, joins, filters, groupByClause, havingClause)
	sqlstr += orderBy
	sqlstr += c.limit
	sqlstr = "/* ExtraSchemaBookAuthorsSurrogateKeyByBookIDAuthorID */\n" + sqlstr

	// run
	// logf(sqlstr, bookID, authorID)
	rows, err := db.Query(ctx, sqlstr, append([]any{bookID, authorID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("book_authors_surrogate_key/BookAuthorsSurrogateKeyByBookIDAuthorID/db.Query: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	esbask, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[ExtraSchemaBookAuthorsSurrogateKey])
	if err != nil {
		return nil, logerror(fmt.Errorf("book_authors_surrogate_key/BookAuthorsSurrogateKeyByBookIDAuthorID/pgx.CollectOneRow: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}

	return &esbask, nil
}

// ExtraSchemaBookAuthorsSurrogateKeysByBookID retrieves a row from 'extra_schema.book_authors_surrogate_key' as a ExtraSchemaBookAuthorsSurrogateKey.
//
// Generated from index 'book_authors_surrogate_key_book_id_author_id_key'.
func ExtraSchemaBookAuthorsSurrogateKeysByBookID(ctx context.Context, db DB, bookID ExtraSchemaBookID, opts ...ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption) ([]ExtraSchemaBookAuthorsSurrogateKey, error) {
	c := &ExtraSchemaBookAuthorsSurrogateKeySelectConfig{joins: ExtraSchemaBookAuthorsSurrogateKeyJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderBy := ""
	if len(c.orderBy) > 0 {
		orderBy += " order by "
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderBy += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Books {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksGroupBySQL)
	}

	if c.joins.Authors {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	book_authors_surrogate_key.author_id,
	book_authors_surrogate_key.book_authors_surrogate_key_id,
	book_authors_surrogate_key.book_id,
	book_authors_surrogate_key.pseudonym %s 
	 FROM extra_schema.book_authors_surrogate_key %s 
	 WHERE book_authors_surrogate_key.book_id = $1
	 %s   %s 
  %s 
`, selects, joins, filters, groupByClause, havingClause)
	sqlstr += orderBy
	sqlstr += c.limit
	sqlstr = "/* ExtraSchemaBookAuthorsSurrogateKeysByBookID */\n" + sqlstr

	// run
	// logf(sqlstr, bookID)
	rows, err := db.Query(ctx, sqlstr, append([]any{bookID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/BookAuthorsSurrogateKeyByBookIDAuthorID/Query: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[ExtraSchemaBookAuthorsSurrogateKey])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/BookAuthorsSurrogateKeyByBookIDAuthorID/pgx.CollectRows: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	return res, nil
}

// ExtraSchemaBookAuthorsSurrogateKeysByAuthorID retrieves a row from 'extra_schema.book_authors_surrogate_key' as a ExtraSchemaBookAuthorsSurrogateKey.
//
// Generated from index 'book_authors_surrogate_key_book_id_author_id_key'.
func ExtraSchemaBookAuthorsSurrogateKeysByAuthorID(ctx context.Context, db DB, authorID ExtraSchemaUserID, opts ...ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption) ([]ExtraSchemaBookAuthorsSurrogateKey, error) {
	c := &ExtraSchemaBookAuthorsSurrogateKeySelectConfig{joins: ExtraSchemaBookAuthorsSurrogateKeyJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderBy := ""
	if len(c.orderBy) > 0 {
		orderBy += " order by "
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderBy += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Books {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksGroupBySQL)
	}

	if c.joins.Authors {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	book_authors_surrogate_key.author_id,
	book_authors_surrogate_key.book_authors_surrogate_key_id,
	book_authors_surrogate_key.book_id,
	book_authors_surrogate_key.pseudonym %s 
	 FROM extra_schema.book_authors_surrogate_key %s 
	 WHERE book_authors_surrogate_key.author_id = $1
	 %s   %s 
  %s 
`, selects, joins, filters, groupByClause, havingClause)
	sqlstr += orderBy
	sqlstr += c.limit
	sqlstr = "/* ExtraSchemaBookAuthorsSurrogateKeysByAuthorID */\n" + sqlstr

	// run
	// logf(sqlstr, authorID)
	rows, err := db.Query(ctx, sqlstr, append([]any{authorID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/BookAuthorsSurrogateKeyByBookIDAuthorID/Query: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	defer rows.Close()
	// process

	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[ExtraSchemaBookAuthorsSurrogateKey])
	if err != nil {
		return nil, logerror(fmt.Errorf("ExtraSchemaBookAuthorsSurrogateKey/BookAuthorsSurrogateKeyByBookIDAuthorID/pgx.CollectRows: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	return res, nil
}

// ExtraSchemaBookAuthorsSurrogateKeyByBookAuthorsSurrogateKeyID retrieves a row from 'extra_schema.book_authors_surrogate_key' as a ExtraSchemaBookAuthorsSurrogateKey.
//
// Generated from index 'book_authors_surrogate_key_pkey'.
func ExtraSchemaBookAuthorsSurrogateKeyByBookAuthorsSurrogateKeyID(ctx context.Context, db DB, bookAuthorsSurrogateKeyID ExtraSchemaBookAuthorsSurrogateKeyID, opts ...ExtraSchemaBookAuthorsSurrogateKeySelectConfigOption) (*ExtraSchemaBookAuthorsSurrogateKey, error) {
	c := &ExtraSchemaBookAuthorsSurrogateKeySelectConfig{joins: ExtraSchemaBookAuthorsSurrogateKeyJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	orderBy := ""
	if len(c.orderBy) > 0 {
		orderBy += " order by "
	}
	i := 0
	orderBys := make([]string, len(c.orderBy))
	for dbcol, dir := range c.orderBy {
		orderBys[i] = dbcol + " " + string(dir)
		i++
	}
	orderBy += " " + strings.Join(orderBys, ", ") + " "

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	if c.joins.Books {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableBooksGroupBySQL)
	}

	if c.joins.Authors {
		selectClauses = append(selectClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsSelectSQL)
		joinClauses = append(joinClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsJoinSQL)
		groupByClauses = append(groupByClauses, extraSchemaBookAuthorsSurrogateKeyTableAuthorsGroupBySQL)
	}

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupByClause := ""
	if len(groupByClauses) > 0 {
		groupByClause = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	book_authors_surrogate_key.author_id,
	book_authors_surrogate_key.book_authors_surrogate_key_id,
	book_authors_surrogate_key.book_id,
	book_authors_surrogate_key.pseudonym %s 
	 FROM extra_schema.book_authors_surrogate_key %s 
	 WHERE book_authors_surrogate_key.book_authors_surrogate_key_id = $1
	 %s   %s 
  %s 
`, selects, joins, filters, groupByClause, havingClause)
	sqlstr += orderBy
	sqlstr += c.limit
	sqlstr = "/* ExtraSchemaBookAuthorsSurrogateKeyByBookAuthorsSurrogateKeyID */\n" + sqlstr

	// run
	// logf(sqlstr, bookAuthorsSurrogateKeyID)
	rows, err := db.Query(ctx, sqlstr, append([]any{bookAuthorsSurrogateKeyID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("book_authors_surrogate_key/BookAuthorsSurrogateKeyByBookAuthorsSurrogateKeyID/db.Query: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}
	esbask, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[ExtraSchemaBookAuthorsSurrogateKey])
	if err != nil {
		return nil, logerror(fmt.Errorf("book_authors_surrogate_key/BookAuthorsSurrogateKeyByBookAuthorsSurrogateKeyID/pgx.CollectOneRow: %w", &XoError{Entity: "Book authors surrogate key", Err: err}))
	}

	return &esbask, nil
}

// FKUser_AuthorID returns the User associated with the ExtraSchemaBookAuthorsSurrogateKey's (AuthorID).
//
// Generated from foreign key 'book_authors_surrogate_key_author_id_fkey'.
func (esbask *ExtraSchemaBookAuthorsSurrogateKey) FKUser_AuthorID(ctx context.Context, db DB) (*ExtraSchemaUser, error) {
	return ExtraSchemaUserByUserID(ctx, db, esbask.AuthorID)
}

// FKBook_BookID returns the Book associated with the ExtraSchemaBookAuthorsSurrogateKey's (BookID).
//
// Generated from foreign key 'book_authors_surrogate_key_book_id_fkey'.
func (esbask *ExtraSchemaBookAuthorsSurrogateKey) FKBook_BookID(ctx context.Context, db DB) (*ExtraSchemaBook, error) {
	return ExtraSchemaBookByBookID(ctx, db, esbask.BookID)
}

package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"strings"
	"time"
)

// WorkItemsProject2Public represents fields that may be exposed from 'public.work_items_project_2'
// and embedded in other response models.
// Include "property:private" in a SQL column comment to exclude a field.
// Joins may be explicitly added in the Response struct.
type WorkItemsProject2Public struct {
	WorkItemID            int64      `json:"workItemID" required:"true"`            // work_item_id
	CustomDateForProject2 *time.Time `json:"customDateForProject2" required:"true"` // custom_date_for_project_2
}

// WorkItemsProject2 represents a row from 'public.work_items_project_2'.
type WorkItemsProject2 struct {
	WorkItemID            int64      `json:"work_item_id" db:"work_item_id"`                           // work_item_id
	CustomDateForProject2 *time.Time `json:"custom_date_for_project_2" db:"custom_date_for_project_2"` // custom_date_for_project_2

	WorkItem *WorkItem `json:"work_item" db:"work_item"` // O2O
	// xo fields
	_exists, _deleted bool
}

func (x *WorkItemsProject2) ToPublic() WorkItemsProject2Public {
	return WorkItemsProject2Public{
		WorkItemID: x.WorkItemID, CustomDateForProject2: x.CustomDateForProject2,
	}
}

type WorkItemsProject2SelectConfig struct {
	limit   string
	orderBy string
	joins   WorkItemsProject2Joins
}
type WorkItemsProject2SelectConfigOption func(*WorkItemsProject2SelectConfig)

// WithWorkItemsProject2Limit limits row selection.
func WithWorkItemsProject2Limit(limit int) WorkItemsProject2SelectConfigOption {
	return func(s *WorkItemsProject2SelectConfig) {
		s.limit = fmt.Sprintf(" limit %d ", limit)
	}
}

type WorkItemsProject2OrderBy = string

const (
	WorkItemsProject2CustomDateForProject2DescNullsFirst WorkItemsProject2OrderBy = " custom_date_for_project_2 DESC NULLS FIRST "
	WorkItemsProject2CustomDateForProject2DescNullsLast  WorkItemsProject2OrderBy = " custom_date_for_project_2 DESC NULLS LAST "
	WorkItemsProject2CustomDateForProject2AscNullsFirst  WorkItemsProject2OrderBy = " custom_date_for_project_2 ASC NULLS FIRST "
	WorkItemsProject2CustomDateForProject2AscNullsLast   WorkItemsProject2OrderBy = " custom_date_for_project_2 ASC NULLS LAST "
)

// WithWorkItemsProject2OrderBy orders results by the given columns.
func WithWorkItemsProject2OrderBy(rows ...WorkItemsProject2OrderBy) WorkItemsProject2SelectConfigOption {
	return func(s *WorkItemsProject2SelectConfig) {
		if len(rows) == 0 {
			s.orderBy = ""
			return
		}
		s.orderBy = " order by "
		s.orderBy += strings.Join(rows, ", ")
	}
}

type WorkItemsProject2Joins struct {
	WorkItem bool
}

// WithWorkItemsProject2Join orders results by the given columns.
func WithWorkItemsProject2Join(joins WorkItemsProject2Joins) WorkItemsProject2SelectConfigOption {
	return func(s *WorkItemsProject2SelectConfig) {
		s.joins = joins
	}
}

// Exists returns true when the WorkItemsProject2 exists in the database.
func (wip *WorkItemsProject2) Exists() bool {
	return wip._exists
}

// Deleted returns true when the WorkItemsProject2 has been marked for deletion from
// the database.
func (wip *WorkItemsProject2) Deleted() bool {
	return wip._deleted
}

// Insert inserts the WorkItemsProject2 to the database.
func (wip *WorkItemsProject2) Insert(ctx context.Context, db DB) error {
	switch {
	case wip._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case wip._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	sqlstr := `INSERT INTO public.work_items_project_2 (` +
		`work_item_id, custom_date_for_project_2` +
		`) VALUES (` +
		`$1, $2` +
		`) `
	// run
	logf(sqlstr, wip.WorkItemID, wip.CustomDateForProject2)
	if _, err := db.Exec(ctx, sqlstr, wip.WorkItemID, wip.CustomDateForProject2); err != nil {
		return logerror(err)
	}
	// set exists
	wip._exists = true
	return nil
}

// Update updates a WorkItemsProject2 in the database.
func (wip *WorkItemsProject2) Update(ctx context.Context, db DB) error {
	switch {
	case !wip._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case wip._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	sqlstr := `UPDATE public.work_items_project_2 SET ` +
		`custom_date_for_project_2 = $1 ` +
		`WHERE work_item_id = $2 ` +
		`RETURNING work_item_id `
	// run
	logf(sqlstr, wip.CustomDateForProject2, wip.WorkItemID)
	if err := db.QueryRow(ctx, sqlstr, wip.CustomDateForProject2, wip.WorkItemID).Scan(); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the WorkItemsProject2 to the database.
func (wip *WorkItemsProject2) Save(ctx context.Context, db DB) error {
	if wip.Exists() {
		return wip.Update(ctx, db)
	}
	return wip.Insert(ctx, db)
}

// Upsert performs an upsert for WorkItemsProject2.
func (wip *WorkItemsProject2) Upsert(ctx context.Context, db DB) error {
	switch {
	case wip._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	sqlstr := `INSERT INTO public.work_items_project_2 (` +
		`work_item_id, custom_date_for_project_2` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (work_item_id) DO ` +
		`UPDATE SET ` +
		`custom_date_for_project_2 = EXCLUDED.custom_date_for_project_2  `
	// run
	logf(sqlstr, wip.WorkItemID, wip.CustomDateForProject2)
	if _, err := db.Exec(ctx, sqlstr, wip.WorkItemID, wip.CustomDateForProject2); err != nil {
		return logerror(err)
	}
	// set exists
	wip._exists = true
	return nil
}

// Delete deletes the WorkItemsProject2 from the database.
func (wip *WorkItemsProject2) Delete(ctx context.Context, db DB) error {
	switch {
	case !wip._exists: // doesn't exist
		return nil
	case wip._deleted: // deleted
		return nil
	}
	// delete with single primary key
	sqlstr := `DELETE FROM public.work_items_project_2 ` +
		`WHERE work_item_id = $1 `
	// run
	logf(sqlstr, wip.WorkItemID)
	if _, err := db.Exec(ctx, sqlstr, wip.WorkItemID); err != nil {
		return logerror(err)
	}
	// set deleted
	wip._deleted = true
	return nil
}

// WorkItemsProject2ByWorkItemID retrieves a row from 'public.work_items_project_2' as a WorkItemsProject2.
//
// Generated from index 'work_items_project_2_pkey'.
func WorkItemsProject2ByWorkItemID(ctx context.Context, db DB, workItemID int64, opts ...WorkItemsProject2SelectConfigOption) (*WorkItemsProject2, error) {
	c := &WorkItemsProject2SelectConfig{joins: WorkItemsProject2Joins{}}

	for _, o := range opts {
		o(c)
	}

	// query
	sqlstr := `SELECT ` +
		`work_items_project_2.work_item_id,
work_items_project_2.custom_date_for_project_2,
(case when $1::boolean = true then row_to_json(work_items.*) end)::jsonb as work_item ` +
		`FROM public.work_items_project_2 ` +
		`-- O2O join generated from "work_items_project_2_work_item_id_fkey"
left join work_items on work_items.work_item_id = work_items_project_2.work_item_id` +
		` WHERE work_items_project_2.work_item_id = $2 `
	sqlstr += c.orderBy
	sqlstr += c.limit

	// run
	logf(sqlstr, workItemID)
	wip := WorkItemsProject2{
		_exists: true,
	}

	if err := db.QueryRow(ctx, sqlstr, c.joins.WorkItem, workItemID).Scan(&wip.WorkItemID, &wip.CustomDateForProject2, &wip.WorkItem); err != nil {
		return nil, logerror(err)
	}
	return &wip, nil
}

// FKWorkItem_WorkItemID returns the WorkItem associated with the WorkItemsProject2's (WorkItemID).
//
// Generated from foreign key 'work_items_project_2_work_item_id_fkey'.
func (wip *WorkItemsProject2) FKWorkItem_WorkItemID(ctx context.Context, db DB) (*WorkItem, error) {
	return WorkItemByWorkItemID(ctx, db, wip.WorkItemID)
}

package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	models "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5"
)

// CacheDemoTwoWorkItem represents a row from 'cache.demo_two_work_items'.
// Change properties via SQL column comments, joined with " && ":
//   - "properties":<p1>,<p2>,...
//     -- private to exclude a field from JSON.
//     -- not-required to make a schema field not required.
//     -- hidden to exclude field from OpenAPI generation.
//   - "type":<pkg.type> to override the type annotation. An openapi schema named <type> must exist.
//   - "cardinality":<O2O|M2O|M2M> to generate/override joins explicitly. Only O2O is inferred.
//   - "tags":<tags> to append literal struct tag strings.
type CacheDemoTwoWorkItem struct {
	CustomDateForProject2 *time.Time             `json:"customDateForProject2" db:"custom_date_for_project_2"`                                                  // custom_date_for_project_2
	WorkItemID            CacheDemoTwoWorkItemID `json:"workItemID" db:"work_item_id" required:"true" nullable:"false" ref:"#/components/schemas/DbWorkItemID"` // work_item_id
	Title                 string                 `json:"title" db:"title" required:"true" nullable:"false"`                                                     // title
	Description           string                 `json:"description" db:"description" required:"true" nullable:"false"`                                         // description
	WorkItemTypeID        int                    `json:"workItemTypeID" db:"work_item_type_id" required:"true" nullable:"false"`                                // work_item_type_id
	Metadata              map[string]any         `json:"metadata" db:"metadata" required:"true" nullable:"false"`                                               // metadata
	TeamID                int                    `json:"teamID" db:"team_id" required:"true" nullable:"false"`                                                  // team_id
	KanbanStepID          int                    `json:"kanbanStepID" db:"kanban_step_id" required:"true" nullable:"false"`                                     // kanban_step_id
	ClosedAt              *time.Time             `json:"closedAt" db:"closed_at"`                                                                               // closed_at
	TargetDate            time.Time              `json:"targetDate" db:"target_date" required:"true" nullable:"false"`                                          // target_date
	CreatedAt             time.Time              `json:"createdAt" db:"created_at" required:"true" nullable:"false"`                                            // created_at
	UpdatedAt             time.Time              `json:"updatedAt" db:"updated_at" required:"true" nullable:"false"`                                            // updated_at
	DeletedAt             *time.Time             `json:"deletedAt" db:"deleted_at"`                                                                             // deleted_at
}

// CacheDemoTwoWorkItemCreateParams represents insert params for 'cache.demo_two_work_items'.
type CacheDemoTwoWorkItemCreateParams struct {
	ClosedAt              *time.Time             `json:"closedAt"`                                                                            // closed_at
	CreatedAt             time.Time              `json:"createdAt" required:"true" nullable:"false"`                                          // created_at
	CustomDateForProject2 *time.Time             `json:"customDateForProject2"`                                                               // custom_date_for_project_2
	Description           string                 `json:"description" required:"true" nullable:"false"`                                        // description
	KanbanStepID          int                    `json:"kanbanStepID" required:"true" nullable:"false"`                                       // kanban_step_id
	Metadata              map[string]any         `json:"metadata" required:"true" nullable:"false"`                                           // metadata
	TargetDate            time.Time              `json:"targetDate" required:"true" nullable:"false"`                                         // target_date
	TeamID                int                    `json:"teamID" required:"true" nullable:"false"`                                             // team_id
	Title                 string                 `json:"title" required:"true" nullable:"false"`                                              // title
	UpdatedAt             time.Time              `json:"updatedAt" required:"true" nullable:"false"`                                          // updated_at
	WorkItemID            CacheDemoTwoWorkItemID `json:"workItemID" required:"true" nullable:"false" ref:"#/components/schemas/DbWorkItemID"` // work_item_id
	WorkItemTypeID        int                    `json:"workItemTypeID" required:"true" nullable:"false"`                                     // work_item_type_id
}

type CacheDemoTwoWorkItemID WorkItemID

// CreateCacheDemoTwoWorkItem creates a new CacheDemoTwoWorkItem in the database with the given params.
func CreateCacheDemoTwoWorkItem(ctx context.Context, db DB, params *CacheDemoTwoWorkItemCreateParams) (*CacheDemoTwoWorkItem, error) {
	cdtwi := &CacheDemoTwoWorkItem{
		ClosedAt:              params.ClosedAt,
		CreatedAt:             params.CreatedAt,
		CustomDateForProject2: params.CustomDateForProject2,
		Description:           params.Description,
		KanbanStepID:          params.KanbanStepID,
		Metadata:              params.Metadata,
		TargetDate:            params.TargetDate,
		TeamID:                params.TeamID,
		Title:                 params.Title,
		UpdatedAt:             params.UpdatedAt,
		WorkItemID:            params.WorkItemID,
		WorkItemTypeID:        params.WorkItemTypeID,
	}

	return cdtwi.Insert(ctx, db)
}

type CacheDemoTwoWorkItemSelectConfig struct {
	limit   string
	orderBy string
	joins   CacheDemoTwoWorkItemJoins
	filters map[string][]any
	having  map[string][]any

	deletedAt string
}
type CacheDemoTwoWorkItemSelectConfigOption func(*CacheDemoTwoWorkItemSelectConfig)

// WithCacheDemoTwoWorkItemLimit limits row selection.
func WithCacheDemoTwoWorkItemLimit(limit int) CacheDemoTwoWorkItemSelectConfigOption {
	return func(s *CacheDemoTwoWorkItemSelectConfig) {
		if limit > 0 {
			s.limit = fmt.Sprintf(" limit %d ", limit)
		}
	}
}

// WithDeletedCacheDemoTwoWorkItemOnly limits result to records marked as deleted.
func WithDeletedCacheDemoTwoWorkItemOnly() CacheDemoTwoWorkItemSelectConfigOption {
	return func(s *CacheDemoTwoWorkItemSelectConfig) {
		s.deletedAt = " not null "
	}
}

type CacheDemoTwoWorkItemOrderBy string

const (
	CacheDemoTwoWorkItemClosedAtDescNullsFirst              CacheDemoTwoWorkItemOrderBy = " closed_at DESC NULLS FIRST "
	CacheDemoTwoWorkItemClosedAtDescNullsLast               CacheDemoTwoWorkItemOrderBy = " closed_at DESC NULLS LAST "
	CacheDemoTwoWorkItemClosedAtAscNullsFirst               CacheDemoTwoWorkItemOrderBy = " closed_at ASC NULLS FIRST "
	CacheDemoTwoWorkItemClosedAtAscNullsLast                CacheDemoTwoWorkItemOrderBy = " closed_at ASC NULLS LAST "
	CacheDemoTwoWorkItemCreatedAtDescNullsFirst             CacheDemoTwoWorkItemOrderBy = " created_at DESC NULLS FIRST "
	CacheDemoTwoWorkItemCreatedAtDescNullsLast              CacheDemoTwoWorkItemOrderBy = " created_at DESC NULLS LAST "
	CacheDemoTwoWorkItemCreatedAtAscNullsFirst              CacheDemoTwoWorkItemOrderBy = " created_at ASC NULLS FIRST "
	CacheDemoTwoWorkItemCreatedAtAscNullsLast               CacheDemoTwoWorkItemOrderBy = " created_at ASC NULLS LAST "
	CacheDemoTwoWorkItemCustomDateForProject2DescNullsFirst CacheDemoTwoWorkItemOrderBy = " custom_date_for_project_2 DESC NULLS FIRST "
	CacheDemoTwoWorkItemCustomDateForProject2DescNullsLast  CacheDemoTwoWorkItemOrderBy = " custom_date_for_project_2 DESC NULLS LAST "
	CacheDemoTwoWorkItemCustomDateForProject2AscNullsFirst  CacheDemoTwoWorkItemOrderBy = " custom_date_for_project_2 ASC NULLS FIRST "
	CacheDemoTwoWorkItemCustomDateForProject2AscNullsLast   CacheDemoTwoWorkItemOrderBy = " custom_date_for_project_2 ASC NULLS LAST "
	CacheDemoTwoWorkItemDeletedAtDescNullsFirst             CacheDemoTwoWorkItemOrderBy = " deleted_at DESC NULLS FIRST "
	CacheDemoTwoWorkItemDeletedAtDescNullsLast              CacheDemoTwoWorkItemOrderBy = " deleted_at DESC NULLS LAST "
	CacheDemoTwoWorkItemDeletedAtAscNullsFirst              CacheDemoTwoWorkItemOrderBy = " deleted_at ASC NULLS FIRST "
	CacheDemoTwoWorkItemDeletedAtAscNullsLast               CacheDemoTwoWorkItemOrderBy = " deleted_at ASC NULLS LAST "
	CacheDemoTwoWorkItemTargetDateDescNullsFirst            CacheDemoTwoWorkItemOrderBy = " target_date DESC NULLS FIRST "
	CacheDemoTwoWorkItemTargetDateDescNullsLast             CacheDemoTwoWorkItemOrderBy = " target_date DESC NULLS LAST "
	CacheDemoTwoWorkItemTargetDateAscNullsFirst             CacheDemoTwoWorkItemOrderBy = " target_date ASC NULLS FIRST "
	CacheDemoTwoWorkItemTargetDateAscNullsLast              CacheDemoTwoWorkItemOrderBy = " target_date ASC NULLS LAST "
	CacheDemoTwoWorkItemUpdatedAtDescNullsFirst             CacheDemoTwoWorkItemOrderBy = " updated_at DESC NULLS FIRST "
	CacheDemoTwoWorkItemUpdatedAtDescNullsLast              CacheDemoTwoWorkItemOrderBy = " updated_at DESC NULLS LAST "
	CacheDemoTwoWorkItemUpdatedAtAscNullsFirst              CacheDemoTwoWorkItemOrderBy = " updated_at ASC NULLS FIRST "
	CacheDemoTwoWorkItemUpdatedAtAscNullsLast               CacheDemoTwoWorkItemOrderBy = " updated_at ASC NULLS LAST "
)

// WithCacheDemoTwoWorkItemOrderBy orders results by the given columns.
func WithCacheDemoTwoWorkItemOrderBy(rows ...CacheDemoTwoWorkItemOrderBy) CacheDemoTwoWorkItemSelectConfigOption {
	return func(s *CacheDemoTwoWorkItemSelectConfig) {
		if len(rows) > 0 {
			orderStrings := make([]string, len(rows))
			for i, row := range rows {
				orderStrings[i] = string(row)
			}
			s.orderBy = " order by "
			s.orderBy += strings.Join(orderStrings, ", ")
		}
	}
}

type CacheDemoTwoWorkItemJoins struct{}

// WithCacheDemoTwoWorkItemJoin joins with the given tables.
func WithCacheDemoTwoWorkItemJoin(joins CacheDemoTwoWorkItemJoins) CacheDemoTwoWorkItemSelectConfigOption {
	return func(s *CacheDemoTwoWorkItemSelectConfig) {
		s.joins = CacheDemoTwoWorkItemJoins{}
	}
}

// WithCacheDemoTwoWorkItemFilters adds the given WHERE clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	filters := map[string][]any{
//		"NOT (col.name = any ($i))": {[]string{"excl_name_1", "excl_name_2"}},
//		`(col.created_at > $i OR
//		col.is_closed = $i)`: {time.Now().Add(-24 * time.Hour), true},
//	}
func WithCacheDemoTwoWorkItemFilters(filters map[string][]any) CacheDemoTwoWorkItemSelectConfigOption {
	return func(s *CacheDemoTwoWorkItemSelectConfig) {
		s.filters = filters
	}
}

// WithCacheDemoTwoWorkItemHavingClause adds the given HAVING clause conditions, which can be dynamically parameterized
// with $i to prevent SQL injection.
// Example:
//
//	// filter a given aggregate of assigned users to return results where at least one of them has id of userId
//	filters := map[string][]any{
//	"$i = ANY(ARRAY_AGG(assigned_users_join.user_id))": {userId},
//	}
func WithCacheDemoTwoWorkItemHavingClause(conditions map[string][]any) CacheDemoTwoWorkItemSelectConfigOption {
	return func(s *CacheDemoTwoWorkItemSelectConfig) {
		s.having = conditions
	}
}

// CacheDemoTwoWorkItemUpdateParams represents update params for 'cache.demo_two_work_items'.
type CacheDemoTwoWorkItemUpdateParams struct {
	ClosedAt              **time.Time             `json:"closedAt"`                                                            // closed_at
	CreatedAt             *time.Time              `json:"createdAt" nullable:"false"`                                          // created_at
	CustomDateForProject2 **time.Time             `json:"customDateForProject2"`                                               // custom_date_for_project_2
	Description           *string                 `json:"description" nullable:"false"`                                        // description
	KanbanStepID          *int                    `json:"kanbanStepID" nullable:"false"`                                       // kanban_step_id
	Metadata              *map[string]any         `json:"metadata" nullable:"false"`                                           // metadata
	TargetDate            *time.Time              `json:"targetDate" nullable:"false"`                                         // target_date
	TeamID                *int                    `json:"teamID" nullable:"false"`                                             // team_id
	Title                 *string                 `json:"title" nullable:"false"`                                              // title
	UpdatedAt             *time.Time              `json:"updatedAt" nullable:"false"`                                          // updated_at
	WorkItemID            *CacheDemoTwoWorkItemID `json:"workItemID" nullable:"false" ref:"#/components/schemas/DbWorkItemID"` // work_item_id
	WorkItemTypeID        *int                    `json:"workItemTypeID" nullable:"false"`                                     // work_item_type_id
}

// SetUpdateParams updates cache.demo_two_work_items struct fields with the specified params.
func (cdtwi *CacheDemoTwoWorkItem) SetUpdateParams(params *CacheDemoTwoWorkItemUpdateParams) {
	if params.ClosedAt != nil {
		cdtwi.ClosedAt = *params.ClosedAt
	}
	if params.CreatedAt != nil {
		cdtwi.CreatedAt = *params.CreatedAt
	}
	if params.CustomDateForProject2 != nil {
		cdtwi.CustomDateForProject2 = *params.CustomDateForProject2
	}
	if params.Description != nil {
		cdtwi.Description = *params.Description
	}
	if params.KanbanStepID != nil {
		cdtwi.KanbanStepID = *params.KanbanStepID
	}
	if params.Metadata != nil {
		cdtwi.Metadata = *params.Metadata
	}
	if params.TargetDate != nil {
		cdtwi.TargetDate = *params.TargetDate
	}
	if params.TeamID != nil {
		cdtwi.TeamID = *params.TeamID
	}
	if params.Title != nil {
		cdtwi.Title = *params.Title
	}
	if params.UpdatedAt != nil {
		cdtwi.UpdatedAt = *params.UpdatedAt
	}
	if params.WorkItemID != nil {
		cdtwi.WorkItemID = *params.WorkItemID
	}
	if params.WorkItemTypeID != nil {
		cdtwi.WorkItemTypeID = *params.WorkItemTypeID
	}
}

// Insert inserts the CacheDemoTwoWorkItem to the database.
func (cdtwi *CacheDemoTwoWorkItem) Insert(ctx context.Context, db DB) (*CacheDemoTwoWorkItem, error) {
	// insert (manual)
	sqlstr := `INSERT INTO cache.demo_two_work_items (
	closed_at, created_at, custom_date_for_project_2, deleted_at, description, kanban_step_id, metadata, target_date, team_id, title, updated_at, work_item_id, work_item_type_id
	) VALUES (
	$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
	)
	 RETURNING * `
	// run
	logf(sqlstr, cdtwi.ClosedAt, cdtwi.CreatedAt, cdtwi.CustomDateForProject2, cdtwi.DeletedAt, cdtwi.Description, cdtwi.KanbanStepID, cdtwi.Metadata, cdtwi.TargetDate, cdtwi.TeamID, cdtwi.Title, cdtwi.UpdatedAt, cdtwi.WorkItemID, cdtwi.WorkItemTypeID)
	rows, err := db.Query(ctx, sqlstr, cdtwi.ClosedAt, cdtwi.CreatedAt, cdtwi.CustomDateForProject2, cdtwi.DeletedAt, cdtwi.Description, cdtwi.KanbanStepID, cdtwi.Metadata, cdtwi.TargetDate, cdtwi.TeamID, cdtwi.Title, cdtwi.UpdatedAt, cdtwi.WorkItemID, cdtwi.WorkItemTypeID)
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoTwoWorkItem/Insert/db.Query: %w", &XoError{Entity: "Demo two work item", Err: err}))
	}
	newcdtwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[CacheDemoTwoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoTwoWorkItem/Insert/pgx.CollectOneRow: %w", &XoError{Entity: "Demo two work item", Err: err}))
	}
	*cdtwi = newcdtwi

	return cdtwi, nil
}

// Update updates a CacheDemoTwoWorkItem in the database.
func (cdtwi *CacheDemoTwoWorkItem) Update(ctx context.Context, db DB) (*CacheDemoTwoWorkItem, error) {
	// update with composite primary key
	sqlstr := `UPDATE cache.demo_two_work_items SET 
	closed_at = $1, created_at = $2, custom_date_for_project_2 = $3, deleted_at = $4, description = $5, kanban_step_id = $6, metadata = $7, target_date = $8, team_id = $9, title = $10, updated_at = $11, work_item_type_id = $12 
	WHERE work_item_id = $13 
	RETURNING * `
	// run
	logf(sqlstr, cdtwi.ClosedAt, cdtwi.CreatedAt, cdtwi.CustomDateForProject2, cdtwi.DeletedAt, cdtwi.Description, cdtwi.KanbanStepID, cdtwi.Metadata, cdtwi.TargetDate, cdtwi.TeamID, cdtwi.Title, cdtwi.UpdatedAt, cdtwi.WorkItemTypeID, cdtwi.WorkItemID)

	rows, err := db.Query(ctx, sqlstr, cdtwi.ClosedAt, cdtwi.CreatedAt, cdtwi.CustomDateForProject2, cdtwi.DeletedAt, cdtwi.Description, cdtwi.KanbanStepID, cdtwi.Metadata, cdtwi.TargetDate, cdtwi.TeamID, cdtwi.Title, cdtwi.UpdatedAt, cdtwi.WorkItemTypeID, cdtwi.WorkItemID)
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoTwoWorkItem/Update/db.Query: %w", &XoError{Entity: "Demo two work item", Err: err}))
	}
	newcdtwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[CacheDemoTwoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoTwoWorkItem/Update/pgx.CollectOneRow: %w", &XoError{Entity: "Demo two work item", Err: err}))
	}
	*cdtwi = newcdtwi

	return cdtwi, nil
}

// Upsert upserts a CacheDemoTwoWorkItem in the database.
// Requires appropriate PK(s) to be set beforehand.
func (cdtwi *CacheDemoTwoWorkItem) Upsert(ctx context.Context, db DB, params *CacheDemoTwoWorkItemCreateParams) (*CacheDemoTwoWorkItem, error) {
	var err error

	cdtwi.ClosedAt = params.ClosedAt
	cdtwi.CreatedAt = params.CreatedAt
	cdtwi.CustomDateForProject2 = params.CustomDateForProject2
	cdtwi.Description = params.Description
	cdtwi.KanbanStepID = params.KanbanStepID
	cdtwi.Metadata = params.Metadata
	cdtwi.TargetDate = params.TargetDate
	cdtwi.TeamID = params.TeamID
	cdtwi.Title = params.Title
	cdtwi.UpdatedAt = params.UpdatedAt
	cdtwi.WorkItemID = params.WorkItemID
	cdtwi.WorkItemTypeID = params.WorkItemTypeID

	cdtwi, err = cdtwi.Insert(ctx, db)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code != pgerrcode.UniqueViolation {
				return nil, fmt.Errorf("UpsertUser/Insert: %w", &XoError{Entity: "Demo two work item", Err: err})
			}
			cdtwi, err = cdtwi.Update(ctx, db)
			if err != nil {
				return nil, fmt.Errorf("UpsertUser/Update: %w", &XoError{Entity: "Demo two work item", Err: err})
			}
		}
	}

	return cdtwi, err
}

// Delete deletes the CacheDemoTwoWorkItem from the database.
func (cdtwi *CacheDemoTwoWorkItem) Delete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `DELETE FROM cache.demo_two_work_items 
	WHERE work_item_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, cdtwi.WorkItemID); err != nil {
		return logerror(err)
	}
	return nil
}

// SoftDelete soft deletes the CacheDemoTwoWorkItem from the database via 'deleted_at'.
func (cdtwi *CacheDemoTwoWorkItem) SoftDelete(ctx context.Context, db DB) error {
	// delete with single primary key
	sqlstr := `UPDATE cache.demo_two_work_items 
	SET deleted_at = NOW() 
	WHERE work_item_id = $1 `
	// run
	if _, err := db.Exec(ctx, sqlstr, cdtwi.WorkItemID); err != nil {
		return logerror(err)
	}
	// set deleted
	cdtwi.DeletedAt = newPointer(time.Now())

	return nil
}

// Restore restores a soft deleted CacheDemoTwoWorkItem from the database.
func (cdtwi *CacheDemoTwoWorkItem) Restore(ctx context.Context, db DB) (*CacheDemoTwoWorkItem, error) {
	cdtwi.DeletedAt = nil
	newcdtwi, err := cdtwi.Update(ctx, db)
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoTwoWorkItem/Restore/pgx.CollectRows: %w", &XoError{Entity: "Demo two work item", Err: err}))
	}
	return newcdtwi, nil
}

// CacheDemoTwoWorkItemPaginatedByWorkItemID returns a cursor-paginated list of CacheDemoTwoWorkItem.
func CacheDemoTwoWorkItemPaginatedByWorkItemID(ctx context.Context, db DB, workItemID CacheDemoTwoWorkItemID, direction models.Direction, opts ...CacheDemoTwoWorkItemSelectConfigOption) ([]CacheDemoTwoWorkItem, error) {
	c := &CacheDemoTwoWorkItemSelectConfig{deletedAt: " null ", joins: CacheDemoTwoWorkItemJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	operator := "<"
	if direction == models.DirectionAsc {
		operator = ">"
	}

	sqlstr := fmt.Sprintf(`SELECT 
	demo_two_work_items.closed_at,
	demo_two_work_items.created_at,
	demo_two_work_items.custom_date_for_project_2,
	demo_two_work_items.deleted_at,
	demo_two_work_items.description,
	demo_two_work_items.kanban_step_id,
	demo_two_work_items.metadata,
	demo_two_work_items.target_date,
	demo_two_work_items.team_id,
	demo_two_work_items.title,
	demo_two_work_items.updated_at,
	demo_two_work_items.work_item_id,
	demo_two_work_items.work_item_type_id %s 
	 FROM cache.demo_two_work_items %s 
	 WHERE demo_two_work_items.work_item_id %s $1
	 %s   AND demo_two_work_items.deleted_at is %s  %s 
  %s 
  ORDER BY 
		work_item_id %s `, selects, joins, operator, filters, c.deletedAt, groupbys, havingClause, direction)
	sqlstr += c.limit
	sqlstr = "/* CacheDemoTwoWorkItemPaginatedByWorkItemID */\n" + sqlstr

	// run

	rows, err := db.Query(ctx, sqlstr, append([]any{workItemID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoTwoWorkItem/Paginated/db.Query: %w", &XoError{Entity: "Demo two work item", Err: err}))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByNameLax[CacheDemoTwoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("CacheDemoTwoWorkItem/Paginated/pgx.CollectRows: %w", &XoError{Entity: "Demo two work item", Err: err}))
	}
	return res, nil
}

// CacheDemoTwoWorkItemByWorkItemID retrieves a row from 'cache.demo_two_work_items' as a CacheDemoTwoWorkItem.
//
// Generated from index 'cache_demo_two_work_items_work_item_id_pk'.
func CacheDemoTwoWorkItemByWorkItemID(ctx context.Context, db DB, workItemID CacheDemoTwoWorkItemID, opts ...CacheDemoTwoWorkItemSelectConfigOption) (*CacheDemoTwoWorkItem, error) {
	c := &CacheDemoTwoWorkItemSelectConfig{deletedAt: " null ", joins: CacheDemoTwoWorkItemJoins{}, filters: make(map[string][]any), having: make(map[string][]any)}

	for _, o := range opts {
		o(c)
	}

	paramStart := 1
	nth := func() string {
		paramStart++
		return strconv.Itoa(paramStart)
	}

	var filterClauses []string
	var filterParams []any
	for filterTmpl, params := range c.filters {
		filter := filterTmpl
		for strings.Contains(filter, "$i") {
			filter = strings.Replace(filter, "$i", "$"+nth(), 1)
		}
		filterClauses = append(filterClauses, filter)
		filterParams = append(filterParams, params...)
	}

	filters := ""
	if len(filterClauses) > 0 {
		filters = " AND " + strings.Join(filterClauses, " AND ") + " "
	}

	var havingClauses []string
	var havingParams []any
	for havingTmpl, params := range c.having {
		having := havingTmpl
		for strings.Contains(having, "$i") {
			having = strings.Replace(having, "$i", "$"+nth(), 1)
		}
		havingClauses = append(havingClauses, having)
		havingParams = append(havingParams, params...)
	}

	havingClause := "" // must be empty if no actual clause passed, else it errors out
	if len(havingClauses) > 0 {
		havingClause = " HAVING " + strings.Join(havingClauses, " AND ") + " "
	}

	var selectClauses []string
	var joinClauses []string
	var groupByClauses []string

	selects := ""
	if len(selectClauses) > 0 {
		selects = ", " + strings.Join(selectClauses, " ,\n ") + " "
	}
	joins := strings.Join(joinClauses, " \n ") + " "
	groupbys := ""
	if len(groupByClauses) > 0 {
		groupbys = "GROUP BY " + strings.Join(groupByClauses, " ,\n ") + " "
	}

	sqlstr := fmt.Sprintf(`SELECT 
	demo_two_work_items.closed_at,
	demo_two_work_items.created_at,
	demo_two_work_items.custom_date_for_project_2,
	demo_two_work_items.deleted_at,
	demo_two_work_items.description,
	demo_two_work_items.kanban_step_id,
	demo_two_work_items.metadata,
	demo_two_work_items.target_date,
	demo_two_work_items.team_id,
	demo_two_work_items.title,
	demo_two_work_items.updated_at,
	demo_two_work_items.work_item_id,
	demo_two_work_items.work_item_type_id %s 
	 FROM cache.demo_two_work_items %s 
	 WHERE demo_two_work_items.work_item_id = $1
	 %s   AND demo_two_work_items.deleted_at is %s  %s 
  %s 
`, selects, joins, filters, c.deletedAt, groupbys, havingClause)
	sqlstr += c.orderBy
	sqlstr += c.limit
	sqlstr = "/* CacheDemoTwoWorkItemByWorkItemID */\n" + sqlstr

	// run
	// logf(sqlstr, workItemID)
	rows, err := db.Query(ctx, sqlstr, append([]any{workItemID}, append(filterParams, havingParams...)...)...)
	if err != nil {
		return nil, logerror(fmt.Errorf("demo_two_work_items/DemoTwoWorkItemByWorkItemID/db.Query: %w", &XoError{Entity: "Demo two work item", Err: err}))
	}
	cdtwi, err := pgx.CollectOneRow(rows, pgx.RowToStructByNameLax[CacheDemoTwoWorkItem])
	if err != nil {
		return nil, logerror(fmt.Errorf("demo_two_work_items/DemoTwoWorkItemByWorkItemID/pgx.CollectOneRow: %w", &XoError{Entity: "Demo two work item", Err: err}))
	}

	return &cdtwi, nil
}

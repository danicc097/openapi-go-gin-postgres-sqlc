package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/google/uuid"
)

// UserOrganization represents a row from 'public.user_organization'.
type UserOrganization struct {
	OrganizationID int       `json:"organization_id"` // organization_id
	UserID         uuid.UUID `json:"user_id"`         // user_id
	// xo fields
	_exists, _deleted bool
}

// GetMostRecentUserOrganization returns n most recent rows from 'user_organization',
// ordered by "created_at" in descending order.
func GetMostRecentUserOrganization(ctx context.Context, db DB, n int) ([]*UserOrganization, error) {
	// list
	const sqlstr = `SELECT ` +
		`organization_id, user_id ` +
		`FROM public.user_organization ` +
		`ORDER BY created_at DESC LIMIT $1`
	// run
	logf(sqlstr, n)

	rows, err := db.Query(ctx, sqlstr, n)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	// load results
	var res []*UserOrganization
	for rows.Next() {
		uo := UserOrganization{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&uo.OrganizationID, &uo.UserID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &uo)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Exists returns true when the UserOrganization exists in the database.
func (uo *UserOrganization) Exists() bool {
	return uo._exists
}

// Deleted returns true when the UserOrganization has been marked for deletion from
// the database.
func (uo *UserOrganization) Deleted() bool {
	return uo._deleted
}

// Insert inserts the UserOrganization to the database.
func (uo *UserOrganization) Insert(ctx context.Context, db DB) error {
	switch {
	case uo._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case uo._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.user_organization (` +
		`organization_id, user_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, uo.OrganizationID, uo.UserID)
	if _, err := db.Exec(ctx, sqlstr, uo.OrganizationID, uo.UserID); err != nil {
		return logerror(err)
	}
	// set exists
	uo._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the UserOrganization from the database.
func (uo *UserOrganization) Delete(ctx context.Context, db DB) error {
	switch {
	case !uo._exists: // doesn't exist
		return nil
	case uo._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.user_organization ` +
		`WHERE organization_id = $1 AND user_id = $2`
	// run
	logf(sqlstr, uo.OrganizationID, uo.UserID)
	if _, err := db.Exec(ctx, sqlstr, uo.OrganizationID, uo.UserID); err != nil {
		return logerror(err)
	}
	// set deleted
	uo._deleted = true
	return nil
}

// UserOrganizationByOrganizationIDUserID retrieves a row from 'public.user_organization' as a UserOrganization.
//
// Generated from index 'user_organization_organization_id_user_id_idx'.
func UserOrganizationByOrganizationIDUserID(ctx context.Context, db DB, organizationID int, userID uuid.UUID) ([]*UserOrganization, error) {
	// query
	const sqlstr = `SELECT ` +
		`organization_id, user_id ` +
		`FROM public.user_organization ` +
		`WHERE organization_id = $1 AND user_id = $2`
	// run
	logf(sqlstr, organizationID, userID)
	rows, err := db.Query(ctx, sqlstr, organizationID, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserOrganization
	for rows.Next() {
		uo := UserOrganization{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&uo.OrganizationID, &uo.UserID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &uo)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserOrganizationByUserIDOrganizationID retrieves a row from 'public.user_organization' as a UserOrganization.
//
// Generated from index 'user_organization_pkey'.
func UserOrganizationByUserIDOrganizationID(ctx context.Context, db DB, userID uuid.UUID, organizationID int) (*UserOrganization, error) {
	// query
	const sqlstr = `SELECT ` +
		`organization_id, user_id ` +
		`FROM public.user_organization ` +
		`WHERE user_id = $1 AND organization_id = $2`
	// run
	logf(sqlstr, userID, organizationID)
	uo := UserOrganization{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, userID, organizationID).Scan(&uo.OrganizationID, &uo.UserID); err != nil {
		return nil, logerror(err)
	}
	return &uo, nil
}

// UserOrganizationByUserID retrieves a row from 'public.user_organization' as a UserOrganization.
//
// Generated from index 'user_organization_user_idx'.
func UserOrganizationByUserID(ctx context.Context, db DB, userID uuid.UUID) ([]*UserOrganization, error) {
	// query
	const sqlstr = `SELECT ` +
		`organization_id, user_id ` +
		`FROM public.user_organization ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.Query(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserOrganization
	for rows.Next() {
		uo := UserOrganization{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&uo.OrganizationID, &uo.UserID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &uo)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Organization returns the Organization associated with the UserOrganization's (OrganizationID).
//
// Generated from foreign key 'user_organization_organization_id_fkey'.
func (uo *UserOrganization) Organization(ctx context.Context, db DB) (*Organization, error) {
	return OrganizationByOrganizationID(ctx, db, uo.OrganizationID)
}

// User returns the User associated with the UserOrganization's (UserID).
//
// Generated from foreign key 'user_organization_user_id_fkey'.
func (uo *UserOrganization) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, uo.UserID)
}

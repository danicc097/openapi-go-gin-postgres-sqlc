package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Task represents a row from 'public.tasks'.
type Task struct {
	TaskID    int64        `json:"task_id"`    // task_id
	Title     string       `json:"title"`      // title
	Metadata  []byte       `json:"metadata"`   // metadata
	CreatedAt time.Time    `json:"created_at"` // created_at
	UpdatedAt time.Time    `json:"updated_at"` // updated_at
	DeletedAt sql.NullTime `json:"deleted_at"` // deleted_at
	// xo fields
	_exists, _deleted bool
}

// GetMostRecentTask returns n most recent rows from 'tasks',
// ordered by "created_at" in descending order.
func GetMostRecentTask(ctx context.Context, db DB, n int) ([]*Task, error) {
	// list
	const sqlstr = `SELECT ` +
		`task_id, title, metadata, created_at, updated_at, deleted_at ` +
		`FROM public.tasks ` +
		`ORDER BY created_at DESC LIMIT $1`
	// run
	logf(sqlstr, n)

	rows, err := db.Query(ctx, sqlstr, n)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	// load results
	var res []*Task
	for rows.Next() {
		t := Task{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&t.TaskID, &t.Title, &t.Metadata, &t.CreatedAt, &t.UpdatedAt, &t.DeletedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &t)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Exists returns true when the Task exists in the database.
func (t *Task) Exists() bool {
	return t._exists
}

// Deleted returns true when the Task has been marked for deletion from
// the database.
func (t *Task) Deleted() bool {
	return t._deleted
}

// Insert inserts the Task to the database.
func (t *Task) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.tasks (` +
		`title, metadata, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING task_id`
	// run
	logf(sqlstr, t.Title, t.Metadata, t.DeletedAt)
	if err := db.QueryRow(ctx, sqlstr, t.Title, t.Metadata, t.DeletedAt).Scan(&t.TaskID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a Task in the database.
func (t *Task) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.tasks SET ` +
		`title = $1, metadata = $2, deleted_at = $3 ` +
		`WHERE task_id = $4`
	// run
	logf(sqlstr, t.Title, t.Metadata, t.CreatedAt, t.UpdatedAt, t.DeletedAt, t.TaskID)
	if _, err := db.Exec(ctx, sqlstr, t.Title, t.Metadata, t.CreatedAt, t.UpdatedAt, t.DeletedAt, t.TaskID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Task to the database.
func (t *Task) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for Task.
func (t *Task) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.tasks (` +
		`task_id, title, metadata, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (task_id) DO ` +
		`UPDATE SET ` +
		`title = EXCLUDED.title, metadata = EXCLUDED.metadata, deleted_at = EXCLUDED.deleted_at `
	// run
	logf(sqlstr, t.TaskID, t.Title, t.Metadata, t.DeletedAt)
	if _, err := db.Exec(ctx, sqlstr, t.TaskID, t.Title, t.Metadata, t.DeletedAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the Task from the database.
func (t *Task) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.tasks ` +
		`WHERE task_id = $1`
	// run
	logf(sqlstr, t.TaskID)
	if _, err := db.Exec(ctx, sqlstr, t.TaskID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TaskByTaskID retrieves a row from 'public.tasks' as a Task.
//
// Generated from index 'tasks_pkey'.
func TaskByTaskID(ctx context.Context, db DB, taskID int64) (*Task, error) {
	// query
	const sqlstr = `SELECT ` +
		`task_id, title, metadata, created_at, updated_at, deleted_at ` +
		`FROM public.tasks ` +
		`WHERE task_id = $1`
	// run
	logf(sqlstr, taskID)
	t := Task{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, taskID).Scan(&t.TaskID, &t.Title, &t.Metadata, &t.CreatedAt, &t.UpdatedAt, &t.DeletedAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

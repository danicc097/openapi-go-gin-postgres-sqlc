package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ProjectKanbanStep represents a row from 'public.project_kanban_steps'.
type ProjectKanbanStep struct {
	KanbanStepID int   `json:"kanban_step_id"` // kanban_step_id
	ProjectID    int   `json:"project_id"`     // project_id
	StepOrder    int16 `json:"step_order"`     // step_order
	// xo fields
	_exists, _deleted bool
}

// GetMostRecentProjectKanbanStep returns n most recent rows from 'project_kanban_steps',
// ordered by "created_at" in descending order.
func GetMostRecentProjectKanbanStep(ctx context.Context, db DB, n int) ([]*ProjectKanbanStep, error) {
	// list
	const sqlstr = `SELECT ` +
		`kanban_step_id, project_id, step_order ` +
		`FROM public.project_kanban_steps ` +
		`ORDER BY created_at DESC LIMIT $1`
	// run
	logf(sqlstr, n)

	rows, err := db.Query(ctx, sqlstr, n)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()

	// load results
	var res []*ProjectKanbanStep
	for rows.Next() {
		pks := ProjectKanbanStep{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&pks.KanbanStepID, &pks.ProjectID, &pks.StepOrder); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &pks)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Exists returns true when the ProjectKanbanStep exists in the database.
func (pks *ProjectKanbanStep) Exists() bool {
	return pks._exists
}

// Deleted returns true when the ProjectKanbanStep has been marked for deletion from
// the database.
func (pks *ProjectKanbanStep) Deleted() bool {
	return pks._deleted
}

// Insert inserts the ProjectKanbanStep to the database.
func (pks *ProjectKanbanStep) Insert(ctx context.Context, db DB) error {
	switch {
	case pks._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pks._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.project_kanban_steps (` +
		`kanban_step_id, project_id, step_order` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`
	// run
	logf(sqlstr, pks.KanbanStepID, pks.ProjectID, pks.StepOrder)
	if _, err := db.Exec(ctx, sqlstr, pks.KanbanStepID, pks.ProjectID, pks.StepOrder); err != nil {
		return logerror(err)
	}
	// set exists
	pks._exists = true
	return nil
}

// Update updates a ProjectKanbanStep in the database.
func (pks *ProjectKanbanStep) Update(ctx context.Context, db DB) error {
	switch {
	case !pks._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pks._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.project_kanban_steps SET ` +
		`step_order = $1 ` +
		`WHERE kanban_step_id = $2 AND project_id = $3`
	// run
	logf(sqlstr, pks.StepOrder, pks.KanbanStepID, pks.ProjectID)
	if _, err := db.Exec(ctx, sqlstr, pks.StepOrder, pks.KanbanStepID, pks.ProjectID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the ProjectKanbanStep to the database.
func (pks *ProjectKanbanStep) Save(ctx context.Context, db DB) error {
	if pks.Exists() {
		return pks.Update(ctx, db)
	}
	return pks.Insert(ctx, db)
}

// Upsert performs an upsert for ProjectKanbanStep.
func (pks *ProjectKanbanStep) Upsert(ctx context.Context, db DB) error {
	switch {
	case pks._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.project_kanban_steps (` +
		`kanban_step_id, project_id, step_order` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (kanban_step_id, project_id) DO ` +
		`UPDATE SET ` +
		`step_order = EXCLUDED.step_order `
	// run
	logf(sqlstr, pks.KanbanStepID, pks.ProjectID, pks.StepOrder)
	if _, err := db.Exec(ctx, sqlstr, pks.KanbanStepID, pks.ProjectID, pks.StepOrder); err != nil {
		return logerror(err)
	}
	// set exists
	pks._exists = true
	return nil
}

// Delete deletes the ProjectKanbanStep from the database.
func (pks *ProjectKanbanStep) Delete(ctx context.Context, db DB) error {
	switch {
	case !pks._exists: // doesn't exist
		return nil
	case pks._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.project_kanban_steps ` +
		`WHERE kanban_step_id = $1 AND project_id = $2`
	// run
	logf(sqlstr, pks.KanbanStepID, pks.ProjectID)
	if _, err := db.Exec(ctx, sqlstr, pks.KanbanStepID, pks.ProjectID); err != nil {
		return logerror(err)
	}
	// set deleted
	pks._deleted = true
	return nil
}

// ProjectKanbanStepsByProjectIDKanbanStepID retrieves a row from 'public.project_kanban_steps' as a ProjectKanbanStep.
//
// Generated from index 'kanban_step_project_project_id_kanban_step_id_idx'.
func ProjectKanbanStepsByProjectIDKanbanStepID(ctx context.Context, db DB, projectID, kanbanStepID int) ([]*ProjectKanbanStep, error) {
	// query
	const sqlstr = `SELECT ` +
		`kanban_step_id, project_id, step_order ` +
		`FROM public.project_kanban_steps ` +
		`WHERE project_id = $1 AND kanban_step_id = $2`
	// run
	logf(sqlstr, projectID, kanbanStepID)
	rows, err := db.Query(ctx, sqlstr, projectID, kanbanStepID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ProjectKanbanStep
	for rows.Next() {
		pks := ProjectKanbanStep{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&pks.KanbanStepID, &pks.ProjectID, &pks.StepOrder); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &pks)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ProjectKanbanStepByKanbanStepIDProjectID retrieves a row from 'public.project_kanban_steps' as a ProjectKanbanStep.
//
// Generated from index 'project_kanban_steps_pkey'.
func ProjectKanbanStepByKanbanStepIDProjectID(ctx context.Context, db DB, kanbanStepID, projectID int) (*ProjectKanbanStep, error) {
	// query
	const sqlstr = `SELECT ` +
		`kanban_step_id, project_id, step_order ` +
		`FROM public.project_kanban_steps ` +
		`WHERE kanban_step_id = $1 AND project_id = $2`
	// run
	logf(sqlstr, kanbanStepID, projectID)
	pks := ProjectKanbanStep{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, kanbanStepID, projectID).Scan(&pks.KanbanStepID, &pks.ProjectID, &pks.StepOrder); err != nil {
		return nil, logerror(err)
	}
	return &pks, nil
}

// KanbanStep returns the KanbanStep associated with the ProjectKanbanStep's (KanbanStepID).
//
// Generated from foreign key 'project_kanban_steps_kanban_step_id_fkey'.
func (pks *ProjectKanbanStep) KanbanStep(ctx context.Context, db DB) (*KanbanStep, error) {
	return KanbanStepByKanbanStepID(ctx, db, pks.KanbanStepID)
}

// Project returns the Project associated with the ProjectKanbanStep's (ProjectID).
//
// Generated from foreign key 'project_kanban_steps_project_id_fkey'.
func (pks *ProjectKanbanStep) Project(ctx context.Context, db DB) (*Project, error) {
	return ProjectByProjectID(ctx, db, pks.ProjectID)
}

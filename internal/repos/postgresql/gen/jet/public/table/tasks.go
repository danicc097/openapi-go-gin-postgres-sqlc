//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Tasks = newTasksTable("public", "tasks", "")

type tasksTable struct {
	postgres.Table

	//Columns
	TaskID     postgres.ColumnInteger
	TaskTypeID postgres.ColumnInteger
	WorkItemID postgres.ColumnInteger
	Title      postgres.ColumnString
	Metadata   postgres.ColumnString
	Finished   postgres.ColumnBool
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz
	DeletedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TasksTable struct {
	tasksTable

	EXCLUDED tasksTable
}

// AS creates new TasksTable with assigned alias
func (a TasksTable) AS(alias string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TasksTable with assigned schema name
func (a TasksTable) FromSchema(schemaName string) *TasksTable {
	return newTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TasksTable with assigned table prefix
func (a TasksTable) WithPrefix(prefix string) *TasksTable {
	return newTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TasksTable with assigned table suffix
func (a TasksTable) WithSuffix(suffix string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTasksTable(schemaName, tableName, alias string) *TasksTable {
	return &TasksTable{
		tasksTable: newTasksTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newTasksTableImpl("", "excluded", ""),
	}
}

func newTasksTableImpl(schemaName, tableName, alias string) tasksTable {
	var (
		TaskIDColumn     = postgres.IntegerColumn("task_id")
		TaskTypeIDColumn = postgres.IntegerColumn("task_type_id")
		WorkItemIDColumn = postgres.IntegerColumn("work_item_id")
		TitleColumn      = postgres.StringColumn("title")
		MetadataColumn   = postgres.StringColumn("metadata")
		FinishedColumn   = postgres.BoolColumn("finished")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampzColumn("deleted_at")
		allColumns       = postgres.ColumnList{TaskIDColumn, TaskTypeIDColumn, WorkItemIDColumn, TitleColumn, MetadataColumn, FinishedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns   = postgres.ColumnList{TaskTypeIDColumn, WorkItemIDColumn, TitleColumn, MetadataColumn, FinishedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return tasksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TaskID:     TaskIDColumn,
		TaskTypeID: TaskTypeIDColumn,
		WorkItemID: WorkItemIDColumn,
		Title:      TitleColumn,
		Metadata:   MetadataColumn,
		Finished:   FinishedColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

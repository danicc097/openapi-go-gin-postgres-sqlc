//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkItemsProject2 = newWorkItemsProject2Table("public", "work_items_project_2", "")

type workItemsProject2Table struct {
	postgres.Table

	//Columns
	WorkItemID            postgres.ColumnInteger
	CustomDateForProject2 postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkItemsProject2Table struct {
	workItemsProject2Table

	EXCLUDED workItemsProject2Table
}

// AS creates new WorkItemsProject2Table with assigned alias
func (a WorkItemsProject2Table) AS(alias string) *WorkItemsProject2Table {
	return newWorkItemsProject2Table(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkItemsProject2Table with assigned schema name
func (a WorkItemsProject2Table) FromSchema(schemaName string) *WorkItemsProject2Table {
	return newWorkItemsProject2Table(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkItemsProject2Table with assigned table prefix
func (a WorkItemsProject2Table) WithPrefix(prefix string) *WorkItemsProject2Table {
	return newWorkItemsProject2Table(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkItemsProject2Table with assigned table suffix
func (a WorkItemsProject2Table) WithSuffix(suffix string) *WorkItemsProject2Table {
	return newWorkItemsProject2Table(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkItemsProject2Table(schemaName, tableName, alias string) *WorkItemsProject2Table {
	return &WorkItemsProject2Table{
		workItemsProject2Table: newWorkItemsProject2TableImpl(schemaName, tableName, alias),
		EXCLUDED:               newWorkItemsProject2TableImpl("", "excluded", ""),
	}
}

func newWorkItemsProject2TableImpl(schemaName, tableName, alias string) workItemsProject2Table {
	var (
		WorkItemIDColumn            = postgres.IntegerColumn("work_item_id")
		CustomDateForProject2Column = postgres.TimestampzColumn("custom_date_for_project_2")
		allColumns                  = postgres.ColumnList{WorkItemIDColumn, CustomDateForProject2Column}
		mutableColumns              = postgres.ColumnList{CustomDateForProject2Column}
	)

	return workItemsProject2Table{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemID:            WorkItemIDColumn,
		CustomDateForProject2: CustomDateForProject2Column,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkItemsProject1 = newWorkItemsProject1Table("public", "work_items_project_1", "")

type workItemsProject1Table struct {
	postgres.Table

	//Columns
	WorkItemID            postgres.ColumnInteger
	CustomDateForProject1 postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkItemsProject1Table struct {
	workItemsProject1Table

	EXCLUDED workItemsProject1Table
}

// AS creates new WorkItemsProject1Table with assigned alias
func (a WorkItemsProject1Table) AS(alias string) *WorkItemsProject1Table {
	return newWorkItemsProject1Table(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkItemsProject1Table with assigned schema name
func (a WorkItemsProject1Table) FromSchema(schemaName string) *WorkItemsProject1Table {
	return newWorkItemsProject1Table(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkItemsProject1Table with assigned table prefix
func (a WorkItemsProject1Table) WithPrefix(prefix string) *WorkItemsProject1Table {
	return newWorkItemsProject1Table(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkItemsProject1Table with assigned table suffix
func (a WorkItemsProject1Table) WithSuffix(suffix string) *WorkItemsProject1Table {
	return newWorkItemsProject1Table(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkItemsProject1Table(schemaName, tableName, alias string) *WorkItemsProject1Table {
	return &WorkItemsProject1Table{
		workItemsProject1Table: newWorkItemsProject1TableImpl(schemaName, tableName, alias),
		EXCLUDED:               newWorkItemsProject1TableImpl("", "excluded", ""),
	}
}

func newWorkItemsProject1TableImpl(schemaName, tableName, alias string) workItemsProject1Table {
	var (
		WorkItemIDColumn            = postgres.IntegerColumn("work_item_id")
		CustomDateForProject1Column = postgres.TimestampzColumn("custom_date_for_project_1")
		allColumns                  = postgres.ColumnList{WorkItemIDColumn, CustomDateForProject1Column}
		mutableColumns              = postgres.ColumnList{CustomDateForProject1Column}
	)

	return workItemsProject1Table{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemID:            WorkItemIDColumn,
		CustomDateForProject1: CustomDateForProject1Column,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkItemComments = newWorkItemCommentsTable("public", "work_item_comments", "")

type workItemCommentsTable struct {
	postgres.Table

	//Columns
	WorkItemCommentID postgres.ColumnInteger
	WorkItemID        postgres.ColumnInteger
	UserID            postgres.ColumnString
	Message           postgres.ColumnString
	CreatedAt         postgres.ColumnTimestampz
	UpdatedAt         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkItemCommentsTable struct {
	workItemCommentsTable

	EXCLUDED workItemCommentsTable
}

// AS creates new WorkItemCommentsTable with assigned alias
func (a WorkItemCommentsTable) AS(alias string) *WorkItemCommentsTable {
	return newWorkItemCommentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkItemCommentsTable with assigned schema name
func (a WorkItemCommentsTable) FromSchema(schemaName string) *WorkItemCommentsTable {
	return newWorkItemCommentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkItemCommentsTable with assigned table prefix
func (a WorkItemCommentsTable) WithPrefix(prefix string) *WorkItemCommentsTable {
	return newWorkItemCommentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkItemCommentsTable with assigned table suffix
func (a WorkItemCommentsTable) WithSuffix(suffix string) *WorkItemCommentsTable {
	return newWorkItemCommentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkItemCommentsTable(schemaName, tableName, alias string) *WorkItemCommentsTable {
	return &WorkItemCommentsTable{
		workItemCommentsTable: newWorkItemCommentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newWorkItemCommentsTableImpl("", "excluded", ""),
	}
}

func newWorkItemCommentsTableImpl(schemaName, tableName, alias string) workItemCommentsTable {
	var (
		WorkItemCommentIDColumn = postgres.IntegerColumn("work_item_comment_id")
		WorkItemIDColumn        = postgres.IntegerColumn("work_item_id")
		UserIDColumn            = postgres.StringColumn("user_id")
		MessageColumn           = postgres.StringColumn("message")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampzColumn("updated_at")
		allColumns              = postgres.ColumnList{WorkItemCommentIDColumn, WorkItemIDColumn, UserIDColumn, MessageColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns          = postgres.ColumnList{WorkItemIDColumn, UserIDColumn, MessageColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return workItemCommentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemCommentID: WorkItemCommentIDColumn,
		WorkItemID:        WorkItemIDColumn,
		UserID:            UserIDColumn,
		Message:           MessageColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkItemTags = newWorkItemTagsTable("public", "work_item_tags", "")

type workItemTagsTable struct {
	postgres.Table

	//Columns
	WorkItemTagID postgres.ColumnInteger
	Name          postgres.ColumnString
	Description   postgres.ColumnString
	Color         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkItemTagsTable struct {
	workItemTagsTable

	EXCLUDED workItemTagsTable
}

// AS creates new WorkItemTagsTable with assigned alias
func (a WorkItemTagsTable) AS(alias string) *WorkItemTagsTable {
	return newWorkItemTagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkItemTagsTable with assigned schema name
func (a WorkItemTagsTable) FromSchema(schemaName string) *WorkItemTagsTable {
	return newWorkItemTagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkItemTagsTable with assigned table prefix
func (a WorkItemTagsTable) WithPrefix(prefix string) *WorkItemTagsTable {
	return newWorkItemTagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkItemTagsTable with assigned table suffix
func (a WorkItemTagsTable) WithSuffix(suffix string) *WorkItemTagsTable {
	return newWorkItemTagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkItemTagsTable(schemaName, tableName, alias string) *WorkItemTagsTable {
	return &WorkItemTagsTable{
		workItemTagsTable: newWorkItemTagsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newWorkItemTagsTableImpl("", "excluded", ""),
	}
}

func newWorkItemTagsTableImpl(schemaName, tableName, alias string) workItemTagsTable {
	var (
		WorkItemTagIDColumn = postgres.IntegerColumn("work_item_tag_id")
		NameColumn          = postgres.StringColumn("name")
		DescriptionColumn   = postgres.StringColumn("description")
		ColorColumn         = postgres.StringColumn("color")
		allColumns          = postgres.ColumnList{WorkItemTagIDColumn, NameColumn, DescriptionColumn, ColorColumn}
		mutableColumns      = postgres.ColumnList{NameColumn, DescriptionColumn, ColorColumn}
	)

	return workItemTagsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemTagID: WorkItemTagIDColumn,
		Name:          NameColumn,
		Description:   DescriptionColumn,
		Color:         ColorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkItemAssignee = newWorkItemAssigneeTable("public", "work_item_assignee", "")

type workItemAssigneeTable struct {
	postgres.Table

	// Columns
	WorkItemID postgres.ColumnInteger
	Assignee   postgres.ColumnString
	Role       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkItemAssigneeTable struct {
	workItemAssigneeTable

	EXCLUDED workItemAssigneeTable
}

// AS creates new WorkItemAssigneeTable with assigned alias
func (a WorkItemAssigneeTable) AS(alias string) *WorkItemAssigneeTable {
	return newWorkItemAssigneeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkItemAssigneeTable with assigned schema name
func (a WorkItemAssigneeTable) FromSchema(schemaName string) *WorkItemAssigneeTable {
	return newWorkItemAssigneeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkItemAssigneeTable with assigned table prefix
func (a WorkItemAssigneeTable) WithPrefix(prefix string) *WorkItemAssigneeTable {
	return newWorkItemAssigneeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkItemAssigneeTable with assigned table suffix
func (a WorkItemAssigneeTable) WithSuffix(suffix string) *WorkItemAssigneeTable {
	return newWorkItemAssigneeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkItemAssigneeTable(schemaName, tableName, alias string) *WorkItemAssigneeTable {
	return &WorkItemAssigneeTable{
		workItemAssigneeTable: newWorkItemAssigneeTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newWorkItemAssigneeTableImpl("", "excluded", ""),
	}
}

func newWorkItemAssigneeTableImpl(schemaName, tableName, alias string) workItemAssigneeTable {
	var (
		WorkItemIDColumn = postgres.IntegerColumn("work_item_id")
		AssigneeColumn   = postgres.StringColumn("assignee")
		RoleColumn       = postgres.StringColumn("role")
		allColumns       = postgres.ColumnList{WorkItemIDColumn, AssigneeColumn, RoleColumn}
		mutableColumns   = postgres.ColumnList{RoleColumn}
	)

	return workItemAssigneeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemID: WorkItemIDColumn,
		Assignee:   AssigneeColumn,
		Role:       RoleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

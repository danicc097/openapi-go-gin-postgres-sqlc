//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserNotifications = newUserNotificationsTable("public", "user_notifications", "")

type userNotificationsTable struct {
	postgres.Table

	// Columns
	UserNotificationID postgres.ColumnInteger
	NotificationID     postgres.ColumnInteger
	Read               postgres.ColumnBool
	UserID             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserNotificationsTable struct {
	userNotificationsTable

	EXCLUDED userNotificationsTable
}

// AS creates new UserNotificationsTable with assigned alias
func (a UserNotificationsTable) AS(alias string) *UserNotificationsTable {
	return newUserNotificationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserNotificationsTable with assigned schema name
func (a UserNotificationsTable) FromSchema(schemaName string) *UserNotificationsTable {
	return newUserNotificationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserNotificationsTable with assigned table prefix
func (a UserNotificationsTable) WithPrefix(prefix string) *UserNotificationsTable {
	return newUserNotificationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserNotificationsTable with assigned table suffix
func (a UserNotificationsTable) WithSuffix(suffix string) *UserNotificationsTable {
	return newUserNotificationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserNotificationsTable(schemaName, tableName, alias string) *UserNotificationsTable {
	return &UserNotificationsTable{
		userNotificationsTable: newUserNotificationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newUserNotificationsTableImpl("", "excluded", ""),
	}
}

func newUserNotificationsTableImpl(schemaName, tableName, alias string) userNotificationsTable {
	var (
		UserNotificationIDColumn = postgres.IntegerColumn("user_notification_id")
		NotificationIDColumn     = postgres.IntegerColumn("notification_id")
		ReadColumn               = postgres.BoolColumn("read")
		UserIDColumn             = postgres.StringColumn("user_id")
		allColumns               = postgres.ColumnList{UserNotificationIDColumn, NotificationIDColumn, ReadColumn, UserIDColumn}
		mutableColumns           = postgres.ColumnList{NotificationIDColumn, ReadColumn, UserIDColumn}
	)

	return userNotificationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserNotificationID: UserNotificationIDColumn,
		NotificationID:     NotificationIDColumn,
		Read:               ReadColumn,
		UserID:             UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	UserID                   postgres.ColumnString
	Username                 postgres.ColumnString
	Email                    postgres.ColumnString
	Age                      postgres.ColumnInteger
	FirstName                postgres.ColumnString
	LastName                 postgres.ColumnString
	FullName                 postgres.ColumnString
	ExternalID               postgres.ColumnString
	APIKeyID                 postgres.ColumnInteger
	Scopes                   postgres.ColumnString
	RoleRank                 postgres.ColumnInteger
	HasPersonalNotifications postgres.ColumnBool
	HasGlobalNotifications   postgres.ColumnBool
	CreatedAt                postgres.ColumnTimestampz
	UpdatedAt                postgres.ColumnTimestampz
	DeletedAt                postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		UserIDColumn                   = postgres.StringColumn("user_id")
		UsernameColumn                 = postgres.StringColumn("username")
		EmailColumn                    = postgres.StringColumn("email")
		AgeColumn                      = postgres.IntegerColumn("age")
		FirstNameColumn                = postgres.StringColumn("first_name")
		LastNameColumn                 = postgres.StringColumn("last_name")
		FullNameColumn                 = postgres.StringColumn("full_name")
		ExternalIDColumn               = postgres.StringColumn("external_id")
		APIKeyIDColumn                 = postgres.IntegerColumn("api_key_id")
		ScopesColumn                   = postgres.StringColumn("scopes")
		RoleRankColumn                 = postgres.IntegerColumn("role_rank")
		HasPersonalNotificationsColumn = postgres.BoolColumn("has_personal_notifications")
		HasGlobalNotificationsColumn   = postgres.BoolColumn("has_global_notifications")
		CreatedAtColumn                = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn                = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn                = postgres.TimestampzColumn("deleted_at")
		allColumns                     = postgres.ColumnList{UserIDColumn, UsernameColumn, EmailColumn, AgeColumn, FirstNameColumn, LastNameColumn, FullNameColumn, ExternalIDColumn, APIKeyIDColumn, ScopesColumn, RoleRankColumn, HasPersonalNotificationsColumn, HasGlobalNotificationsColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns                 = postgres.ColumnList{UsernameColumn, EmailColumn, AgeColumn, FirstNameColumn, LastNameColumn, ExternalIDColumn, APIKeyIDColumn, ScopesColumn, RoleRankColumn, HasPersonalNotificationsColumn, HasGlobalNotificationsColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:                   UserIDColumn,
		Username:                 UsernameColumn,
		Email:                    EmailColumn,
		Age:                      AgeColumn,
		FirstName:                FirstNameColumn,
		LastName:                 LastNameColumn,
		FullName:                 FullNameColumn,
		ExternalID:               ExternalIDColumn,
		APIKeyID:                 APIKeyIDColumn,
		Scopes:                   ScopesColumn,
		RoleRank:                 RoleRankColumn,
		HasPersonalNotifications: HasPersonalNotificationsColumn,
		HasGlobalNotifications:   HasGlobalNotificationsColumn,
		CreatedAt:                CreatedAtColumn,
		UpdatedAt:                UpdatedAtColumn,
		DeletedAt:                DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

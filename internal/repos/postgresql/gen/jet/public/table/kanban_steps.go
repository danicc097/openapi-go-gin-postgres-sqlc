//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var KanbanSteps = newKanbanStepsTable("public", "kanban_steps", "")

type kanbanStepsTable struct {
	postgres.Table

	//Columns
	KanbanStepID  postgres.ColumnInteger
	ProjectID     postgres.ColumnInteger
	StepOrder     postgres.ColumnInteger
	Name          postgres.ColumnString
	Description   postgres.ColumnString
	Color         postgres.ColumnString
	TimeTrackable postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type KanbanStepsTable struct {
	kanbanStepsTable

	EXCLUDED kanbanStepsTable
}

// AS creates new KanbanStepsTable with assigned alias
func (a KanbanStepsTable) AS(alias string) *KanbanStepsTable {
	return newKanbanStepsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new KanbanStepsTable with assigned schema name
func (a KanbanStepsTable) FromSchema(schemaName string) *KanbanStepsTable {
	return newKanbanStepsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new KanbanStepsTable with assigned table prefix
func (a KanbanStepsTable) WithPrefix(prefix string) *KanbanStepsTable {
	return newKanbanStepsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new KanbanStepsTable with assigned table suffix
func (a KanbanStepsTable) WithSuffix(suffix string) *KanbanStepsTable {
	return newKanbanStepsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newKanbanStepsTable(schemaName, tableName, alias string) *KanbanStepsTable {
	return &KanbanStepsTable{
		kanbanStepsTable: newKanbanStepsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newKanbanStepsTableImpl("", "excluded", ""),
	}
}

func newKanbanStepsTableImpl(schemaName, tableName, alias string) kanbanStepsTable {
	var (
		KanbanStepIDColumn  = postgres.IntegerColumn("kanban_step_id")
		ProjectIDColumn     = postgres.IntegerColumn("project_id")
		StepOrderColumn     = postgres.IntegerColumn("step_order")
		NameColumn          = postgres.StringColumn("name")
		DescriptionColumn   = postgres.StringColumn("description")
		ColorColumn         = postgres.StringColumn("color")
		TimeTrackableColumn = postgres.BoolColumn("time_trackable")
		allColumns          = postgres.ColumnList{KanbanStepIDColumn, ProjectIDColumn, StepOrderColumn, NameColumn, DescriptionColumn, ColorColumn, TimeTrackableColumn}
		mutableColumns      = postgres.ColumnList{ProjectIDColumn, StepOrderColumn, NameColumn, DescriptionColumn, ColorColumn, TimeTrackableColumn}
	)

	return kanbanStepsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		KanbanStepID:  KanbanStepIDColumn,
		ProjectID:     ProjectIDColumn,
		StepOrder:     StepOrderColumn,
		Name:          NameColumn,
		Description:   DescriptionColumn,
		Color:         ColorColumn,
		TimeTrackable: TimeTrackableColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

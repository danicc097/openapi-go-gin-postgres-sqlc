//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkItemWorkItemTag = newWorkItemWorkItemTagTable("public", "work_item_work_item_tag", "")

type workItemWorkItemTagTable struct {
	postgres.Table

	//Columns
	WorkItemTagID postgres.ColumnInteger
	WorkItemID    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkItemWorkItemTagTable struct {
	workItemWorkItemTagTable

	EXCLUDED workItemWorkItemTagTable
}

// AS creates new WorkItemWorkItemTagTable with assigned alias
func (a WorkItemWorkItemTagTable) AS(alias string) *WorkItemWorkItemTagTable {
	return newWorkItemWorkItemTagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkItemWorkItemTagTable with assigned schema name
func (a WorkItemWorkItemTagTable) FromSchema(schemaName string) *WorkItemWorkItemTagTable {
	return newWorkItemWorkItemTagTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkItemWorkItemTagTable with assigned table prefix
func (a WorkItemWorkItemTagTable) WithPrefix(prefix string) *WorkItemWorkItemTagTable {
	return newWorkItemWorkItemTagTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkItemWorkItemTagTable with assigned table suffix
func (a WorkItemWorkItemTagTable) WithSuffix(suffix string) *WorkItemWorkItemTagTable {
	return newWorkItemWorkItemTagTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkItemWorkItemTagTable(schemaName, tableName, alias string) *WorkItemWorkItemTagTable {
	return &WorkItemWorkItemTagTable{
		workItemWorkItemTagTable: newWorkItemWorkItemTagTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newWorkItemWorkItemTagTableImpl("", "excluded", ""),
	}
}

func newWorkItemWorkItemTagTableImpl(schemaName, tableName, alias string) workItemWorkItemTagTable {
	var (
		WorkItemTagIDColumn = postgres.IntegerColumn("work_item_tag_id")
		WorkItemIDColumn    = postgres.IntegerColumn("work_item_id")
		allColumns          = postgres.ColumnList{WorkItemTagIDColumn, WorkItemIDColumn}
		mutableColumns      = postgres.ColumnList{}
	)

	return workItemWorkItemTagTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemTagID: WorkItemTagIDColumn,
		WorkItemID:    WorkItemIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

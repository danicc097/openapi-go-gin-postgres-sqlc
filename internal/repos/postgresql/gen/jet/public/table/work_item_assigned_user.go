//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkItemAssignedUser = newWorkItemAssignedUserTable("public", "work_item_assigned_user", "")

type workItemAssignedUserTable struct {
	postgres.Table

	// Columns
	WorkItemID   postgres.ColumnInteger
	AssignedUser postgres.ColumnString
	Role         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkItemAssignedUserTable struct {
	workItemAssignedUserTable

	EXCLUDED workItemAssignedUserTable
}

// AS creates new WorkItemAssignedUserTable with assigned alias
func (a WorkItemAssignedUserTable) AS(alias string) *WorkItemAssignedUserTable {
	return newWorkItemAssignedUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkItemAssignedUserTable with assigned schema name
func (a WorkItemAssignedUserTable) FromSchema(schemaName string) *WorkItemAssignedUserTable {
	return newWorkItemAssignedUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkItemAssignedUserTable with assigned table prefix
func (a WorkItemAssignedUserTable) WithPrefix(prefix string) *WorkItemAssignedUserTable {
	return newWorkItemAssignedUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkItemAssignedUserTable with assigned table suffix
func (a WorkItemAssignedUserTable) WithSuffix(suffix string) *WorkItemAssignedUserTable {
	return newWorkItemAssignedUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkItemAssignedUserTable(schemaName, tableName, alias string) *WorkItemAssignedUserTable {
	return &WorkItemAssignedUserTable{
		workItemAssignedUserTable: newWorkItemAssignedUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newWorkItemAssignedUserTableImpl("", "excluded", ""),
	}
}

func newWorkItemAssignedUserTableImpl(schemaName, tableName, alias string) workItemAssignedUserTable {
	var (
		WorkItemIDColumn   = postgres.IntegerColumn("work_item_id")
		AssignedUserColumn = postgres.StringColumn("assigned_user")
		RoleColumn         = postgres.StringColumn("role")
		allColumns         = postgres.ColumnList{WorkItemIDColumn, AssignedUserColumn, RoleColumn}
		mutableColumns     = postgres.ColumnList{RoleColumn}
	)

	return workItemAssignedUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemID:   WorkItemIDColumn,
		AssignedUser: AssignedUserColumn,
		Role:         RoleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

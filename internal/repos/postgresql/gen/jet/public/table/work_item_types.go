//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkItemTypes = newWorkItemTypesTable("public", "work_item_types", "")

type workItemTypesTable struct {
	postgres.Table

	//Columns
	WorkItemTypeID postgres.ColumnInteger
	ProjectID      postgres.ColumnInteger
	Name           postgres.ColumnString
	Description    postgres.ColumnString
	Color          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkItemTypesTable struct {
	workItemTypesTable

	EXCLUDED workItemTypesTable
}

// AS creates new WorkItemTypesTable with assigned alias
func (a WorkItemTypesTable) AS(alias string) *WorkItemTypesTable {
	return newWorkItemTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkItemTypesTable with assigned schema name
func (a WorkItemTypesTable) FromSchema(schemaName string) *WorkItemTypesTable {
	return newWorkItemTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkItemTypesTable with assigned table prefix
func (a WorkItemTypesTable) WithPrefix(prefix string) *WorkItemTypesTable {
	return newWorkItemTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkItemTypesTable with assigned table suffix
func (a WorkItemTypesTable) WithSuffix(suffix string) *WorkItemTypesTable {
	return newWorkItemTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkItemTypesTable(schemaName, tableName, alias string) *WorkItemTypesTable {
	return &WorkItemTypesTable{
		workItemTypesTable: newWorkItemTypesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newWorkItemTypesTableImpl("", "excluded", ""),
	}
}

func newWorkItemTypesTableImpl(schemaName, tableName, alias string) workItemTypesTable {
	var (
		WorkItemTypeIDColumn = postgres.IntegerColumn("work_item_type_id")
		ProjectIDColumn      = postgres.IntegerColumn("project_id")
		NameColumn           = postgres.StringColumn("name")
		DescriptionColumn    = postgres.StringColumn("description")
		ColorColumn          = postgres.StringColumn("color")
		allColumns           = postgres.ColumnList{WorkItemTypeIDColumn, ProjectIDColumn, NameColumn, DescriptionColumn, ColorColumn}
		mutableColumns       = postgres.ColumnList{ProjectIDColumn, NameColumn, DescriptionColumn, ColorColumn}
	)

	return workItemTypesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemTypeID: WorkItemTypeIDColumn,
		ProjectID:      ProjectIDColumn,
		Name:           NameColumn,
		Description:    DescriptionColumn,
		Color:          ColorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Movies = newMoviesTable("public", "movies", "")

type moviesTable struct {
	postgres.Table

	//Columns
	MovieID  postgres.ColumnInteger
	Title    postgres.ColumnString
	Year     postgres.ColumnInteger
	Synopsis postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MoviesTable struct {
	moviesTable

	EXCLUDED moviesTable
}

// AS creates new MoviesTable with assigned alias
func (a MoviesTable) AS(alias string) *MoviesTable {
	return newMoviesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MoviesTable with assigned schema name
func (a MoviesTable) FromSchema(schemaName string) *MoviesTable {
	return newMoviesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MoviesTable with assigned table prefix
func (a MoviesTable) WithPrefix(prefix string) *MoviesTable {
	return newMoviesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MoviesTable with assigned table suffix
func (a MoviesTable) WithSuffix(suffix string) *MoviesTable {
	return newMoviesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMoviesTable(schemaName, tableName, alias string) *MoviesTable {
	return &MoviesTable{
		moviesTable: newMoviesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newMoviesTableImpl("", "excluded", ""),
	}
}

func newMoviesTableImpl(schemaName, tableName, alias string) moviesTable {
	var (
		MovieIDColumn  = postgres.IntegerColumn("movie_id")
		TitleColumn    = postgres.StringColumn("title")
		YearColumn     = postgres.IntegerColumn("year")
		SynopsisColumn = postgres.StringColumn("synopsis")
		allColumns     = postgres.ColumnList{MovieIDColumn, TitleColumn, YearColumn, SynopsisColumn}
		mutableColumns = postgres.ColumnList{TitleColumn, YearColumn, SynopsisColumn}
	)

	return moviesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		MovieID:  MovieIDColumn,
		Title:    TitleColumn,
		Year:     YearColumn,
		Synopsis: SynopsisColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SchemaPostMigrations = newSchemaPostMigrationsTable("public", "schema_post_migrations", "")

type schemaPostMigrationsTable struct {
	postgres.Table

	// Columns
	Version postgres.ColumnInteger
	Dirty   postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SchemaPostMigrationsTable struct {
	schemaPostMigrationsTable

	EXCLUDED schemaPostMigrationsTable
}

// AS creates new SchemaPostMigrationsTable with assigned alias
func (a SchemaPostMigrationsTable) AS(alias string) *SchemaPostMigrationsTable {
	return newSchemaPostMigrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SchemaPostMigrationsTable with assigned schema name
func (a SchemaPostMigrationsTable) FromSchema(schemaName string) *SchemaPostMigrationsTable {
	return newSchemaPostMigrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SchemaPostMigrationsTable with assigned table prefix
func (a SchemaPostMigrationsTable) WithPrefix(prefix string) *SchemaPostMigrationsTable {
	return newSchemaPostMigrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SchemaPostMigrationsTable with assigned table suffix
func (a SchemaPostMigrationsTable) WithSuffix(suffix string) *SchemaPostMigrationsTable {
	return newSchemaPostMigrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSchemaPostMigrationsTable(schemaName, tableName, alias string) *SchemaPostMigrationsTable {
	return &SchemaPostMigrationsTable{
		schemaPostMigrationsTable: newSchemaPostMigrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newSchemaPostMigrationsTableImpl("", "excluded", ""),
	}
}

func newSchemaPostMigrationsTableImpl(schemaName, tableName, alias string) schemaPostMigrationsTable {
	var (
		VersionColumn  = postgres.IntegerColumn("version")
		DirtyColumn    = postgres.BoolColumn("dirty")
		allColumns     = postgres.ColumnList{VersionColumn, DirtyColumn}
		mutableColumns = postgres.ColumnList{DirtyColumn}
	)

	return schemaPostMigrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version: VersionColumn,
		Dirty:   DirtyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

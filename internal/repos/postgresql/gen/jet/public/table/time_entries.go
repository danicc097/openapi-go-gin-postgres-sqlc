//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TimeEntries = newTimeEntriesTable("public", "time_entries", "")

type timeEntriesTable struct {
	postgres.Table

	//Columns
	TimeEntryID     postgres.ColumnInteger
	WorkItemID      postgres.ColumnInteger
	ActivityID      postgres.ColumnInteger
	TeamID          postgres.ColumnInteger
	UserID          postgres.ColumnString
	Comment         postgres.ColumnString
	Start           postgres.ColumnTimestampz
	DurationMinutes postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TimeEntriesTable struct {
	timeEntriesTable

	EXCLUDED timeEntriesTable
}

// AS creates new TimeEntriesTable with assigned alias
func (a TimeEntriesTable) AS(alias string) *TimeEntriesTable {
	return newTimeEntriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TimeEntriesTable with assigned schema name
func (a TimeEntriesTable) FromSchema(schemaName string) *TimeEntriesTable {
	return newTimeEntriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TimeEntriesTable with assigned table prefix
func (a TimeEntriesTable) WithPrefix(prefix string) *TimeEntriesTable {
	return newTimeEntriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TimeEntriesTable with assigned table suffix
func (a TimeEntriesTable) WithSuffix(suffix string) *TimeEntriesTable {
	return newTimeEntriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTimeEntriesTable(schemaName, tableName, alias string) *TimeEntriesTable {
	return &TimeEntriesTable{
		timeEntriesTable: newTimeEntriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newTimeEntriesTableImpl("", "excluded", ""),
	}
}

func newTimeEntriesTableImpl(schemaName, tableName, alias string) timeEntriesTable {
	var (
		TimeEntryIDColumn     = postgres.IntegerColumn("time_entry_id")
		WorkItemIDColumn      = postgres.IntegerColumn("work_item_id")
		ActivityIDColumn      = postgres.IntegerColumn("activity_id")
		TeamIDColumn          = postgres.IntegerColumn("team_id")
		UserIDColumn          = postgres.StringColumn("user_id")
		CommentColumn         = postgres.StringColumn("comment")
		StartColumn           = postgres.TimestampzColumn("start")
		DurationMinutesColumn = postgres.IntegerColumn("duration_minutes")
		allColumns            = postgres.ColumnList{TimeEntryIDColumn, WorkItemIDColumn, ActivityIDColumn, TeamIDColumn, UserIDColumn, CommentColumn, StartColumn, DurationMinutesColumn}
		mutableColumns        = postgres.ColumnList{WorkItemIDColumn, ActivityIDColumn, TeamIDColumn, UserIDColumn, CommentColumn, StartColumn, DurationMinutesColumn}
	)

	return timeEntriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TimeEntryID:     TimeEntryIDColumn,
		WorkItemID:      WorkItemIDColumn,
		ActivityID:      ActivityIDColumn,
		TeamID:          TeamIDColumn,
		UserID:          UserIDColumn,
		Comment:         CommentColumn,
		Start:           StartColumn,
		DurationMinutes: DurationMinutesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

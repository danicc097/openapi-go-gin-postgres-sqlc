//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserProject = newUserProjectTable("public", "user_project", "")

type userProjectTable struct {
	postgres.Table

	// Columns
	ProjectID postgres.ColumnInteger
	Member    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserProjectTable struct {
	userProjectTable

	EXCLUDED userProjectTable
}

// AS creates new UserProjectTable with assigned alias
func (a UserProjectTable) AS(alias string) *UserProjectTable {
	return newUserProjectTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserProjectTable with assigned schema name
func (a UserProjectTable) FromSchema(schemaName string) *UserProjectTable {
	return newUserProjectTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserProjectTable with assigned table prefix
func (a UserProjectTable) WithPrefix(prefix string) *UserProjectTable {
	return newUserProjectTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserProjectTable with assigned table suffix
func (a UserProjectTable) WithSuffix(suffix string) *UserProjectTable {
	return newUserProjectTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserProjectTable(schemaName, tableName, alias string) *UserProjectTable {
	return &UserProjectTable{
		userProjectTable: newUserProjectTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newUserProjectTableImpl("", "excluded", ""),
	}
}

func newUserProjectTableImpl(schemaName, tableName, alias string) userProjectTable {
	var (
		ProjectIDColumn = postgres.IntegerColumn("project_id")
		MemberColumn    = postgres.StringColumn("member")
		allColumns      = postgres.ColumnList{ProjectIDColumn, MemberColumn}
		mutableColumns  = postgres.ColumnList{}
	)

	return userProjectTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ProjectID: ProjectIDColumn,
		Member:    MemberColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

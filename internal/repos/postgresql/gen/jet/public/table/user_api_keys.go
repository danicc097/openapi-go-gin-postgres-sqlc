//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserAPIKeys = newUserAPIKeysTable("public", "user_api_keys", "")

type userAPIKeysTable struct {
	postgres.Table

	//Columns
	UserAPIKeyID postgres.ColumnInteger
	APIKey       postgres.ColumnString
	ExpiresOn    postgres.ColumnTimestampz
	UserID       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserAPIKeysTable struct {
	userAPIKeysTable

	EXCLUDED userAPIKeysTable
}

// AS creates new UserAPIKeysTable with assigned alias
func (a UserAPIKeysTable) AS(alias string) *UserAPIKeysTable {
	return newUserAPIKeysTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserAPIKeysTable with assigned schema name
func (a UserAPIKeysTable) FromSchema(schemaName string) *UserAPIKeysTable {
	return newUserAPIKeysTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserAPIKeysTable with assigned table prefix
func (a UserAPIKeysTable) WithPrefix(prefix string) *UserAPIKeysTable {
	return newUserAPIKeysTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserAPIKeysTable with assigned table suffix
func (a UserAPIKeysTable) WithSuffix(suffix string) *UserAPIKeysTable {
	return newUserAPIKeysTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserAPIKeysTable(schemaName, tableName, alias string) *UserAPIKeysTable {
	return &UserAPIKeysTable{
		userAPIKeysTable: newUserAPIKeysTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newUserAPIKeysTableImpl("", "excluded", ""),
	}
}

func newUserAPIKeysTableImpl(schemaName, tableName, alias string) userAPIKeysTable {
	var (
		UserAPIKeyIDColumn = postgres.IntegerColumn("user_api_key_id")
		APIKeyColumn       = postgres.StringColumn("api_key")
		ExpiresOnColumn    = postgres.TimestampzColumn("expires_on")
		UserIDColumn       = postgres.StringColumn("user_id")
		allColumns         = postgres.ColumnList{UserAPIKeyIDColumn, APIKeyColumn, ExpiresOnColumn, UserIDColumn}
		mutableColumns     = postgres.ColumnList{APIKeyColumn, ExpiresOnColumn, UserIDColumn}
	)

	return userAPIKeysTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserAPIKeyID: UserAPIKeyIDColumn,
		APIKey:       APIKeyColumn,
		ExpiresOn:    ExpiresOnColumn,
		UserID:       UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Notifications = newNotificationsTable("public", "notifications", "")

type notificationsTable struct {
	postgres.Table

	// Columns
	NotificationID   postgres.ColumnInteger
	ReceiverRank     postgres.ColumnInteger
	Title            postgres.ColumnString
	Body             postgres.ColumnString
	Labels           postgres.ColumnString
	Link             postgres.ColumnString
	CreatedAt        postgres.ColumnTimestampz
	Sender           postgres.ColumnString
	Receiver         postgres.ColumnString
	NotificationType postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NotificationsTable struct {
	notificationsTable

	EXCLUDED notificationsTable
}

// AS creates new NotificationsTable with assigned alias
func (a NotificationsTable) AS(alias string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NotificationsTable with assigned schema name
func (a NotificationsTable) FromSchema(schemaName string) *NotificationsTable {
	return newNotificationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NotificationsTable with assigned table prefix
func (a NotificationsTable) WithPrefix(prefix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NotificationsTable with assigned table suffix
func (a NotificationsTable) WithSuffix(suffix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNotificationsTable(schemaName, tableName, alias string) *NotificationsTable {
	return &NotificationsTable{
		notificationsTable: newNotificationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newNotificationsTableImpl("", "excluded", ""),
	}
}

func newNotificationsTableImpl(schemaName, tableName, alias string) notificationsTable {
	var (
		NotificationIDColumn   = postgres.IntegerColumn("notification_id")
		ReceiverRankColumn     = postgres.IntegerColumn("receiver_rank")
		TitleColumn            = postgres.StringColumn("title")
		BodyColumn             = postgres.StringColumn("body")
		LabelsColumn           = postgres.StringColumn("labels")
		LinkColumn             = postgres.StringColumn("link")
		CreatedAtColumn        = postgres.TimestampzColumn("created_at")
		SenderColumn           = postgres.StringColumn("sender")
		ReceiverColumn         = postgres.StringColumn("receiver")
		NotificationTypeColumn = postgres.StringColumn("notification_type")
		allColumns             = postgres.ColumnList{NotificationIDColumn, ReceiverRankColumn, TitleColumn, BodyColumn, LabelsColumn, LinkColumn, CreatedAtColumn, SenderColumn, ReceiverColumn, NotificationTypeColumn}
		mutableColumns         = postgres.ColumnList{ReceiverRankColumn, TitleColumn, BodyColumn, LabelsColumn, LinkColumn, CreatedAtColumn, SenderColumn, ReceiverColumn, NotificationTypeColumn}
	)

	return notificationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		NotificationID:   NotificationIDColumn,
		ReceiverRank:     ReceiverRankColumn,
		Title:            TitleColumn,
		Body:             BodyColumn,
		Labels:           LabelsColumn,
		Link:             LinkColumn,
		CreatedAt:        CreatedAtColumn,
		Sender:           SenderColumn,
		Receiver:         ReceiverColumn,
		NotificationType: NotificationTypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

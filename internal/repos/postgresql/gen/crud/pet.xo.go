package crud

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Pet represents a row from 'public.pets'.
type Pet struct {
	PetID    int64          `json:"pet_id"`    // pet_id
	AnimalID sql.NullInt64  `json:"animal_id"` // animal_id
	Color    sql.NullString `json:"color"`     // color
	Metadata []byte         `json:"metadata"`  // metadata
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Pet exists in the database.
func (p *Pet) Exists() bool {
	return p._exists
}

// Deleted returns true when the Pet has been marked for deletion from
// the database.
func (p *Pet) Deleted() bool {
	return p._deleted
}

// Insert inserts the Pet to the database.
func (p *Pet) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.pets (` +
		`animal_id, color, metadata` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING pet_id`
	// run
	logf(sqlstr, p.AnimalID, p.Color, p.Metadata)
	if err := db.QueryRow(ctx, sqlstr, p.AnimalID, p.Color, p.Metadata).Scan(&p.PetID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a Pet in the database.
func (p *Pet) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.pets SET ` +
		`animal_id = $1, color = $2, metadata = $3 ` +
		`WHERE pet_id = $4`
	// run
	logf(sqlstr, p.AnimalID, p.Color, p.Metadata, p.PetID)
	if _, err := db.Exec(ctx, sqlstr, p.AnimalID, p.Color, p.Metadata, p.PetID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Pet to the database.
func (p *Pet) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for Pet.
func (p *Pet) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.pets (` +
		`pet_id, animal_id, color, metadata` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (pet_id) DO ` +
		`UPDATE SET ` +
		`animal_id = EXCLUDED.animal_id, color = EXCLUDED.color, metadata = EXCLUDED.metadata `
	// run
	logf(sqlstr, p.PetID, p.AnimalID, p.Color, p.Metadata)
	if _, err := db.Exec(ctx, sqlstr, p.PetID, p.AnimalID, p.Color, p.Metadata); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the Pet from the database.
func (p *Pet) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.pets ` +
		`WHERE pet_id = $1`
	// run
	logf(sqlstr, p.PetID)
	if _, err := db.Exec(ctx, sqlstr, p.PetID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PetByPetID retrieves a row from 'public.pets' as a Pet.
//
// Generated from index 'pets_pkey'.
func PetByPetID(ctx context.Context, db DB, petID int64) (*Pet, error) {
	// query
	const sqlstr = `SELECT ` +
		`pet_id, animal_id, color, metadata ` +
		`FROM public.pets ` +
		`WHERE pet_id = $1`
	// run
	logf(sqlstr, petID)
	p := Pet{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, petID).Scan(&p.PetID, &p.AnimalID, &p.Color, &p.Metadata); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// Animal returns the Animal associated with the Pet's (AnimalID).
//
// Generated from foreign key 'pets_animal_id_fkey'.
func (p *Pet) Animal(ctx context.Context, db DB) (*Animal, error) {
	return AnimalByAnimalID(ctx, db, p.AnimalID.Int64)
}

// Package crud contains generated code for schema 'public'.
package crud

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Animal represents a row from 'public.animals'.
type Animal struct {
	AnimalID int64  `json:"animal_id"` // animal_id
	Name     string `json:"name"`      // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Animal exists in the database.
func (a *Animal) Exists() bool {
	return a._exists
}

// Deleted returns true when the Animal has been marked for deletion from
// the database.
func (a *Animal) Deleted() bool {
	return a._deleted
}

// Insert inserts the Animal to the database.
func (a *Animal) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.animals (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING animal_id`
	// run
	logf(sqlstr, a.Name)
	if err := db.QueryRow(ctx, sqlstr, a.Name).Scan(&a.AnimalID); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Update updates a Animal in the database.
func (a *Animal) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.animals SET ` +
		`name = $1 ` +
		`WHERE animal_id = $2`
	// run
	logf(sqlstr, a.Name, a.AnimalID)
	if _, err := db.Exec(ctx, sqlstr, a.Name, a.AnimalID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Animal to the database.
func (a *Animal) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for Animal.
func (a *Animal) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.animals (` +
		`animal_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (animal_id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, a.AnimalID, a.Name)
	if _, err := db.Exec(ctx, sqlstr, a.AnimalID, a.Name); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the Animal from the database.
func (a *Animal) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.animals ` +
		`WHERE animal_id = $1`
	// run
	logf(sqlstr, a.AnimalID)
	if _, err := db.Exec(ctx, sqlstr, a.AnimalID); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AnimalByName retrieves a row from 'public.animals' as a Animal.
//
// Generated from index 'animals_name_key'.
func AnimalByName(ctx context.Context, db DB, name string) (*Animal, error) {
	// query
	const sqlstr = `SELECT ` +
		`animal_id, name ` +
		`FROM public.animals ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	a := Animal{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, name).Scan(&a.AnimalID, &a.Name); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AnimalByAnimalID retrieves a row from 'public.animals' as a Animal.
//
// Generated from index 'animals_pkey'.
func AnimalByAnimalID(ctx context.Context, db DB, animalID int64) (*Animal, error) {
	// query
	const sqlstr = `SELECT ` +
		`animal_id, name ` +
		`FROM public.animals ` +
		`WHERE animal_id = $1`
	// run
	logf(sqlstr, animalID)
	a := Animal{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, animalID).Scan(&a.AnimalID, &a.Name); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

package crud

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// PetTag represents a row from 'public.pet_tags'.
type PetTag struct {
	PetTagID int64  `json:"pet_tag_id"` // pet_tag_id
	Name     string `json:"name"`       // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the PetTag exists in the database.
func (pt *PetTag) Exists() bool {
	return pt._exists
}

// Deleted returns true when the PetTag has been marked for deletion from
// the database.
func (pt *PetTag) Deleted() bool {
	return pt._deleted
}

// Insert inserts the PetTag to the database.
func (pt *PetTag) Insert(ctx context.Context, db DB) error {
	switch {
	case pt._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pt._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.pet_tags (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING pet_tag_id`
	// run
	logf(sqlstr, pt.Name)
	if err := db.QueryRow(ctx, sqlstr, pt.Name).Scan(&pt.PetTagID); err != nil {
		return logerror(err)
	}
	// set exists
	pt._exists = true
	return nil
}

// Update updates a PetTag in the database.
func (pt *PetTag) Update(ctx context.Context, db DB) error {
	switch {
	case !pt._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pt._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.pet_tags SET ` +
		`name = $1 ` +
		`WHERE pet_tag_id = $2`
	// run
	logf(sqlstr, pt.Name, pt.PetTagID)
	if _, err := db.Exec(ctx, sqlstr, pt.Name, pt.PetTagID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the PetTag to the database.
func (pt *PetTag) Save(ctx context.Context, db DB) error {
	if pt.Exists() {
		return pt.Update(ctx, db)
	}
	return pt.Insert(ctx, db)
}

// Upsert performs an upsert for PetTag.
func (pt *PetTag) Upsert(ctx context.Context, db DB) error {
	switch {
	case pt._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.pet_tags (` +
		`pet_tag_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (pet_tag_id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, pt.PetTagID, pt.Name)
	if _, err := db.Exec(ctx, sqlstr, pt.PetTagID, pt.Name); err != nil {
		return logerror(err)
	}
	// set exists
	pt._exists = true
	return nil
}

// Delete deletes the PetTag from the database.
func (pt *PetTag) Delete(ctx context.Context, db DB) error {
	switch {
	case !pt._exists: // doesn't exist
		return nil
	case pt._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.pet_tags ` +
		`WHERE pet_tag_id = $1`
	// run
	logf(sqlstr, pt.PetTagID)
	if _, err := db.Exec(ctx, sqlstr, pt.PetTagID); err != nil {
		return logerror(err)
	}
	// set deleted
	pt._deleted = true
	return nil
}

// PetTagByName retrieves a row from 'public.pet_tags' as a PetTag.
//
// Generated from index 'pet_tags_name_key'.
func PetTagByName(ctx context.Context, db DB, name string) (*PetTag, error) {
	// query
	const sqlstr = `SELECT ` +
		`pet_tag_id, name ` +
		`FROM public.pet_tags ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	pt := PetTag{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, name).Scan(&pt.PetTagID, &pt.Name); err != nil {
		return nil, logerror(err)
	}
	return &pt, nil
}

// PetTagByPetTagID retrieves a row from 'public.pet_tags' as a PetTag.
//
// Generated from index 'pet_tags_pkey'.
func PetTagByPetTagID(ctx context.Context, db DB, petTagID int64) (*PetTag, error) {
	// query
	const sqlstr = `SELECT ` +
		`pet_tag_id, name ` +
		`FROM public.pet_tags ` +
		`WHERE pet_tag_id = $1`
	// run
	logf(sqlstr, petTagID)
	pt := PetTag{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, petTagID).Scan(&pt.PetTagID, &pt.Name); err != nil {
		return nil, logerror(err)
	}
	return &pt, nil
}

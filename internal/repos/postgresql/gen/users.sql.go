// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const GetUser = `-- name: GetUser :one
select
  username,
  email,
  role,
  is_superuser,
  created_at,
  updated_at,
  user_id
  -- case when @get_db_data::boolean then
  --   (user_id)
  -- end as user_id, -- TODO sqlc.yaml overrides sql.NullInt64
from
  users
where (email = LOWER($1)::text
  or $1::text is null)
and (username = $2::text
  or $2::text is null)
and (user_id = $3::int
  or $3::int is null)
limit 1
`

type GetUserParams struct {
	Email    sql.NullString `db:"email" json:"email"`
	Username sql.NullString `db:"username" json:"username"`
	UserID   sql.NullInt32  `db:"user_id" json:"user_id"`
}

type GetUserRow struct {
	Username    string    `db:"username" json:"username"`
	Email       string    `db:"email" json:"email"`
	Role        Role      `db:"role" json:"role"`
	IsSuperuser bool      `db:"is_superuser" json:"is_superuser"`
	CreatedAt   time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time `db:"updated_at" json:"updated_at"`
	UserID      uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) GetUser(ctx context.Context, db DBTX, arg GetUserParams) (GetUserRow, error) {
	row := db.QueryRow(ctx, GetUser, arg.Email, arg.Username, arg.UserID)
	var i GetUserRow
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Role,
		&i.IsSuperuser,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const ListAllUsers = `-- name: ListAllUsers :many
select
  user_id,
  username,
  email,
  role,
  is_superuser,
  created_at,
  updated_at
from
  users
`

type ListAllUsersRow struct {
	UserID      uuid.UUID `db:"user_id" json:"user_id"`
	Username    string    `db:"username" json:"username"`
	Email       string    `db:"email" json:"email"`
	Role        Role      `db:"role" json:"role"`
	IsSuperuser bool      `db:"is_superuser" json:"is_superuser"`
	CreatedAt   time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) ListAllUsers(ctx context.Context, db DBTX) ([]ListAllUsersRow, error) {
	rows, err := db.Query(ctx, ListAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllUsersRow{}
	for rows.Next() {
		var i ListAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Role,
			&i.IsSuperuser,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUserById = `-- name: UpdateUserById :exec
update
  users
set
  username = COALESCE($1, username),
  email = COALESCE(LOWER($2), email)
where
  user_id = $3
`

type UpdateUserByIdParams struct {
	Username sql.NullString `db:"username" json:"username"`
	Email    sql.NullString `db:"email" json:"email"`
	UserID   uuid.UUID      `db:"user_id" json:"user_id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, db DBTX, arg UpdateUserByIdParams) error {
	_, err := db.Exec(ctx, UpdateUserById, arg.Username, arg.Email, arg.UserID)
	return err
}

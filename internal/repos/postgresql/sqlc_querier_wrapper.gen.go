// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/sqlc.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package postgresql

import (
	"context"
	"fmt"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// QuerierWrapper implements db.Querier and wraps errors with the associated query name.
type QuerierWrapper struct{ db.Querier }

// NewQuerierWrapper returns QuerierWrapper with wrapped pgx errors.
func NewQuerierWrapper(base db.Querier) QuerierWrapper {
	return QuerierWrapper{
		Querier: base,
	}
}

func (w QuerierWrapper) GetUser(ctx context.Context, db db.DBTX, arg db.GetUserParams) (g1 db.GetUserRow, err error) {
	/* defer newOTelSpan().Build(ctx).End() */

	g1, err = w.Querier.GetUser(ctx, db, arg)
	if err != nil {
		err = fmt.Errorf("Querier: %w", parseDBErrorDetail(err))
	}
	return
}

func (w QuerierWrapper) GetUserNotifications(ctx context.Context, db db.DBTX, arg db.GetUserNotificationsParams) (ga1 []db.GetUserNotificationsRow, err error) {
	/* defer newOTelSpan().Build(ctx).End() */

	ga1, err = w.Querier.GetUserNotifications(ctx, db, arg)
	if err != nil {
		err = fmt.Errorf("Querier: %w", parseDBErrorDetail(err))
	}
	return
}

func (w QuerierWrapper) RegisterNewUser(ctx context.Context, db db.DBTX, arg db.RegisterNewUserParams) (r1 db.RegisterNewUserRow, err error) {
	/* defer newOTelSpan().Build(ctx).End() */

	r1, err = w.Querier.RegisterNewUser(ctx, db, arg)
	if err != nil {
		err = fmt.Errorf("Querier: %w", parseDBErrorDetail(err))
	}
	return
}

func (w QuerierWrapper) Test(ctx context.Context, db db.DBTX) (err error) {
	/* defer newOTelSpan().Build(ctx).End() */

	err = w.Querier.Test(ctx, db)
	if err != nil {
		err = fmt.Errorf("Querier: %w", parseDBErrorDetail(err))
	}
	return
}

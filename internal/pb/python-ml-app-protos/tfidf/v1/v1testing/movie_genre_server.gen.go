// Code generated by counterfeiter. DO NOT EDIT.
package v1testing

import (
	"context"
	"sync"

	v1 "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/pb/python-ml-app-protos/tfidf/v1"
)

type FakeMovieGenreServer struct {
v1.UnimplementedMovieGenreServer
	PredictStub        func(context.Context, *v1.PredictRequest) (*v1.PredictReply, error)
	predictMutex       sync.RWMutex
	predictArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.PredictRequest
	}
	predictReturns struct {
		result1 *v1.PredictReply
		result2 error
	}
	predictReturnsOnCall map[int]struct {
		result1 *v1.PredictReply
		result2 error
	}
	TrainStub        func(context.Context, *v1.TrainRequest) (*v1.TrainReply, error)
	trainMutex       sync.RWMutex
	trainArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.TrainRequest
	}
	trainReturns struct {
		result1 *v1.TrainReply
		result2 error
	}
	trainReturnsOnCall map[int]struct {
		result1 *v1.TrainReply
		result2 error
	}
	mustEmbedUnimplementedMovieGenreServerStub        func()
	mustEmbedUnimplementedMovieGenreServerMutex       sync.RWMutex
	mustEmbedUnimplementedMovieGenreServerArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMovieGenreServer) Predict(arg1 context.Context, arg2 *v1.PredictRequest) (*v1.PredictReply, error) {
	fake.predictMutex.Lock()
	ret, specificReturn := fake.predictReturnsOnCall[len(fake.predictArgsForCall)]
	fake.predictArgsForCall = append(fake.predictArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.PredictRequest
	}{arg1, arg2})
	stub := fake.PredictStub
	fakeReturns := fake.predictReturns
	fake.recordInvocation("Predict", []interface{}{arg1, arg2})
	fake.predictMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMovieGenreServer) PredictCallCount() int {
	fake.predictMutex.RLock()
	defer fake.predictMutex.RUnlock()
	return len(fake.predictArgsForCall)
}

func (fake *FakeMovieGenreServer) PredictCalls(stub func(context.Context, *v1.PredictRequest) (*v1.PredictReply, error)) {
	fake.predictMutex.Lock()
	defer fake.predictMutex.Unlock()
	fake.PredictStub = stub
}

func (fake *FakeMovieGenreServer) PredictArgsForCall(i int) (context.Context, *v1.PredictRequest) {
	fake.predictMutex.RLock()
	defer fake.predictMutex.RUnlock()
	argsForCall := fake.predictArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMovieGenreServer) PredictReturns(result1 *v1.PredictReply, result2 error) {
	fake.predictMutex.Lock()
	defer fake.predictMutex.Unlock()
	fake.PredictStub = nil
	fake.predictReturns = struct {
		result1 *v1.PredictReply
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieGenreServer) PredictReturnsOnCall(i int, result1 *v1.PredictReply, result2 error) {
	fake.predictMutex.Lock()
	defer fake.predictMutex.Unlock()
	fake.PredictStub = nil
	if fake.predictReturnsOnCall == nil {
		fake.predictReturnsOnCall = make(map[int]struct {
			result1 *v1.PredictReply
			result2 error
		})
	}
	fake.predictReturnsOnCall[i] = struct {
		result1 *v1.PredictReply
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieGenreServer) Train(arg1 context.Context, arg2 *v1.TrainRequest) (*v1.TrainReply, error) {
	fake.trainMutex.Lock()
	ret, specificReturn := fake.trainReturnsOnCall[len(fake.trainArgsForCall)]
	fake.trainArgsForCall = append(fake.trainArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.TrainRequest
	}{arg1, arg2})
	stub := fake.TrainStub
	fakeReturns := fake.trainReturns
	fake.recordInvocation("Train", []interface{}{arg1, arg2})
	fake.trainMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMovieGenreServer) TrainCallCount() int {
	fake.trainMutex.RLock()
	defer fake.trainMutex.RUnlock()
	return len(fake.trainArgsForCall)
}

func (fake *FakeMovieGenreServer) TrainCalls(stub func(context.Context, *v1.TrainRequest) (*v1.TrainReply, error)) {
	fake.trainMutex.Lock()
	defer fake.trainMutex.Unlock()
	fake.TrainStub = stub
}

func (fake *FakeMovieGenreServer) TrainArgsForCall(i int) (context.Context, *v1.TrainRequest) {
	fake.trainMutex.RLock()
	defer fake.trainMutex.RUnlock()
	argsForCall := fake.trainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMovieGenreServer) TrainReturns(result1 *v1.TrainReply, result2 error) {
	fake.trainMutex.Lock()
	defer fake.trainMutex.Unlock()
	fake.TrainStub = nil
	fake.trainReturns = struct {
		result1 *v1.TrainReply
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieGenreServer) TrainReturnsOnCall(i int, result1 *v1.TrainReply, result2 error) {
	fake.trainMutex.Lock()
	defer fake.trainMutex.Unlock()
	fake.TrainStub = nil
	if fake.trainReturnsOnCall == nil {
		fake.trainReturnsOnCall = make(map[int]struct {
			result1 *v1.TrainReply
			result2 error
		})
	}
	fake.trainReturnsOnCall[i] = struct {
		result1 *v1.TrainReply
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieGenreServer) mustEmbedUnimplementedMovieGenreServer() {
	fake.mustEmbedUnimplementedMovieGenreServerMutex.Lock()
	fake.mustEmbedUnimplementedMovieGenreServerArgsForCall = append(fake.mustEmbedUnimplementedMovieGenreServerArgsForCall, struct {
	}{})
	stub := fake.mustEmbedUnimplementedMovieGenreServerStub
	fake.recordInvocation("mustEmbedUnimplementedMovieGenreServer", []interface{}{})
	fake.mustEmbedUnimplementedMovieGenreServerMutex.Unlock()
	if stub != nil {
		fake.mustEmbedUnimplementedMovieGenreServerStub()
	}
}

func (fake *FakeMovieGenreServer) MustEmbedUnimplementedMovieGenreServerCallCount() int {
	fake.mustEmbedUnimplementedMovieGenreServerMutex.RLock()
	defer fake.mustEmbedUnimplementedMovieGenreServerMutex.RUnlock()
	return len(fake.mustEmbedUnimplementedMovieGenreServerArgsForCall)
}

func (fake *FakeMovieGenreServer) MustEmbedUnimplementedMovieGenreServerCalls(stub func()) {
	fake.mustEmbedUnimplementedMovieGenreServerMutex.Lock()
	defer fake.mustEmbedUnimplementedMovieGenreServerMutex.Unlock()
	fake.mustEmbedUnimplementedMovieGenreServerStub = stub
}

func (fake *FakeMovieGenreServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.predictMutex.RLock()
	defer fake.predictMutex.RUnlock()
	fake.trainMutex.RLock()
	defer fake.trainMutex.RUnlock()
	fake.mustEmbedUnimplementedMovieGenreServerMutex.RLock()
	defer fake.mustEmbedUnimplementedMovieGenreServerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMovieGenreServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.MovieGenreServer = new(FakeMovieGenreServer)

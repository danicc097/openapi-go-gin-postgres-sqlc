// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// NotificationType is generated from database enum 'notification_type'.
const (
	NotificationTypeGlobal   NotificationType = "global"
	NotificationTypePersonal NotificationType = "personal"
)

// AllNotificationTypeValues returns all possible values for NotificationType.
func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypeGlobal,
		NotificationTypePersonal,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// Project is generated from projects table.
const (
	ProjectDemo    Project = "demo"
	ProjectDemoTwo Project = "demo_two"
)

// AllProjectValues returns all possible values for Project.
func AllProjectValues() []Project {
	return []Project{
		ProjectDemo,
		ProjectDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// WorkItemRole is generated from database enum 'work_item_role'.
const (
	WorkItemRolePreparer WorkItemRole = "preparer"
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// AllWorkItemRoleValues returns all possible values for WorkItemRole.
func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

// Activity defines the model for Activity.
type Activity struct {
	ActivityID   int        `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    int        `json:"projectID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           DbWorkItemCreateParams        `json:"base"`
	DemoTwoProject DbDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember              `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
	TagIDs      []int   `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        DbWorkItemCreateParams     `json:"base"`
	DemoProject DbDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember           `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
	TagIDs      []int   `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]DbWorkItemTagCreateParams `json:"tags"`
	Teams *[]DbTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string   `json:"message"`
	UserID     DbUserID `json:"userID"`
	WorkItemID int      `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbActivity defines the model for DbActivity.
type DbActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// DbActivityCreateParams defines the model for DbActivityCreateParams.
type DbActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// DbCacheDemoWorkItemJoins defines the model for DbCacheDemoWorkItemJoins.
type DbCacheDemoWorkItemJoins struct {
	Assignees        bool `json:"assignees"`
	KanbanStep       bool `json:"kanbanStep"`
	Team             bool `json:"team"`
	TimeEntries      bool `json:"timeEntries"`
	WorkItemComments bool `json:"workItemComments"`
	WorkItemTags     bool `json:"workItemTags"`
	WorkItemType     bool `json:"workItemType"`
}

// DbDemoTwoWorkItem defines the model for DbDemoTwoWorkItem.
type DbDemoTwoWorkItem struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
	WorkItemID            int        `json:"workItemID"`
}

// DbDemoTwoWorkItemCreateParams defines the model for DbDemoTwoWorkItemCreateParams.
type DbDemoTwoWorkItemCreateParams struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
}

// DbDemoWorkItem defines the model for DbDemoWorkItem.
type DbDemoWorkItem struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
	WorkItemID    int       `json:"workItemID"`
}

// DbDemoWorkItemCreateParams defines the model for DbDemoWorkItemCreateParams.
type DbDemoWorkItemCreateParams struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
}

// DbKanbanStep defines the model for DbKanbanStep.
type DbKanbanStep struct {
	Color         string `json:"color"`
	Description   string `json:"description"`
	KanbanStepID  int    `json:"kanbanStepID"`
	Name          string `json:"name"`
	ProjectID     int    `json:"projectID"`
	StepOrder     int    `json:"stepOrder"`
	TimeTrackable bool   `json:"timeTrackable"`
}

// DbNotification defines the model for DbNotification.
type DbNotification struct {
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Labels         []string  `json:"labels"`
	Link           *string   `json:"link"`
	NotificationID int       `json:"notificationID"`

	// NotificationType is generated from database enum 'notification_type'.
	NotificationType NotificationType `json:"notificationType"`
	Receiver         *DbUserID        `json:"receiver,omitempty"`
	Sender           DbUserID         `json:"sender"`
	Title            string           `json:"title"`
}

// DbNotificationID defines the model for DbNotificationID.
type DbNotificationID = interface{}

// DbProject defines the model for DbProject.
type DbProject struct {
	BoardConfig ProjectConfig `json:"boardConfig"`
	CreatedAt   time.Time     `json:"createdAt"`
	Description string        `json:"description"`

	// Name is generated from projects table.
	Name      Project   `json:"name"`
	ProjectID int       `json:"projectID"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// DbProjectID defines the model for DbProjectID.
type DbProjectID = interface{}

// DbTeam defines the model for DbTeam.
type DbTeam struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// DbTeamCreateParams defines the model for DbTeamCreateParams.
type DbTeamCreateParams struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbTimeEntry defines the model for DbTimeEntry.
type DbTimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// DbUser defines the model for DbUser.
type DbUser struct {
	Age                      *int       `json:"age"`
	CreatedAt                time.Time  `json:"createdAt"`
	DeletedAt                *time.Time `json:"deletedAt"`
	Email                    string     `json:"email"`
	FirstName                *string    `json:"firstName"`
	FullName                 *string    `json:"fullName"`
	HasGlobalNotifications   bool       `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool       `json:"hasPersonalNotifications"`
	LastName                 *string    `json:"lastName"`
	Scopes                   Scopes     `json:"scopes"`
	UpdatedAt                time.Time  `json:"updatedAt"`
	UserID                   DbUserID   `json:"userID"`
	Username                 string     `json:"username"`
}

// DbUserAPIKey defines the model for DbUserAPIKey.
type DbUserAPIKey struct {
	ApiKey    string    `json:"apiKey"`
	ExpiresOn time.Time `json:"expiresOn"`
	UserID    DbUserID  `json:"userID"`
}

// DbUserID defines the model for DbUserID.
type DbUserID = uuid.UUID

// DbUserJoins defines the model for DbUserJoins.
type DbUserJoins struct {
	AssigneeWorkItems     bool `json:"assigneeWorkItems"`
	MemberProjects        bool `json:"memberProjects"`
	MemberTeams           bool `json:"memberTeams"`
	ReceiverNotifications bool `json:"receiverNotifications"`
	SenderNotifications   bool `json:"senderNotifications"`
	TimeEntries           bool `json:"timeEntries"`
	UserAPIKey            bool `json:"userAPIKey"`
	UserNotifications     bool `json:"userNotifications"`
	WorkItemComments      bool `json:"workItemComments"`
}

// DbUserNotification defines the model for DbUserNotification.
type DbUserNotification struct {
	NotificationID     int      `json:"notificationID"`
	Read               bool     `json:"read"`
	UserID             DbUserID `json:"userID"`
	UserNotificationID int      `json:"userNotificationID"`
}

// DbUserWIAUWorkItem defines the model for DbUserWIAUWorkItem.
type DbUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbUserWIAWorkItem defines the model for DbUserWIAWorkItem.
type DbUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItem defines the model for DbWorkItem.
type DbWorkItem struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     int                    `json:"workItemID"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemComment defines the model for DbWorkItemComment.
type DbWorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// DbWorkItemCreateParams defines the model for DbWorkItemCreateParams.
type DbWorkItemCreateParams struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemID defines the model for DbWorkItemID.
type DbWorkItemID = interface{}

// DbWorkItemM2MAssigneeWIA defines the model for DbWorkItemM2MAssigneeWIA.
type DbWorkItemM2MAssigneeWIA struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItemRole defines the model for DbWorkItemRole.
type DbWorkItemRole = string

// DbWorkItemTag defines the model for DbWorkItemTag.
type DbWorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// DbWorkItemTagCreateParams defines the model for DbWorkItemTagCreateParams.
type DbWorkItemTagCreateParams struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbWorkItemType defines the model for DbWorkItemType.
type DbWorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// DbWorkItemTypeID defines the model for DbWorkItemTypeID.
type DbWorkItemTypeID = interface{}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItem defines the model for DemoTwoWorkItem.
type DemoTwoWorkItem struct {
	ClosedAt        *time.Time                  `json:"closedAt"`
	CreatedAt       time.Time                   `json:"createdAt"`
	DeletedAt       *time.Time                  `json:"deletedAt"`
	DemoTwoWorkItem DbDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                      `json:"description"`
	KanbanStepID    int                         `json:"kanbanStepID"`
	Members         *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItem defines the model for DemoWorkItem.
type DemoWorkItem struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	DemoWorkItem DbDemoWorkItem              `json:"demoWorkItem"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *DbCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *DbUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	Cursors PaginationCursors `json:"cursors"`

	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// Notification defines the model for Notification.
type Notification struct {
	Notification       DbNotification `json:"notification"`
	NotificationID     int            `json:"notificationID"`
	Read               bool           `json:"read"`
	UserID             DbUserID       `json:"userID"`
	UserNotificationID int            `json:"userNotificationID"`
}

// NotificationType is generated from database enum 'notification_type'.
type NotificationType string

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]Notification `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]User        `json:"items"`
	Page  PaginationPage `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the db column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationCursors defines the model for PaginationCursors.
type PaginationCursors = []PaginationCursor

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// Project is generated from projects table.
type Project string

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID DbUserID     `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]DbTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]DbWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]DbWorkItemTag            `json:"workItemTags"`
	WorkItemType     *DbWorkItemType             `json:"workItemType,omitempty"`
}

// Team defines the model for Team.
type Team struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntry defines the model for TimeEntry.
type TimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *int       `json:"activityID,omitempty"`
	Comment         *string    `json:"comment,omitempty"`
	DurationMinutes *int       `json:"durationMinutes"`
	Start           *time.Time `json:"start,omitempty"`
	TeamID          *int       `json:"teamID"`
	UserID          *DbUserID  `json:"userID,omitempty"`
	WorkItemID      *int       `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string   `json:"message,omitempty"`
	UserID     *DbUserID `json:"userID,omitempty"`
	WorkItemID *int      `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// User defines the model for User.
type User struct {
	Age                      *int          `json:"age"`
	ApiKey                   *DbUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time     `json:"createdAt"`
	DeletedAt                *time.Time    `json:"deletedAt"`
	Email                    string        `json:"email"`
	FirstName                *string       `json:"firstName"`
	FullName                 *string       `json:"fullName"`
	HasGlobalNotifications   bool          `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool          `json:"hasPersonalNotifications"`
	LastName                 *string       `json:"lastName"`
	Projects                 *[]DbProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role      `json:"role"`
	Scopes    Scopes    `json:"scopes"`
	Teams     *[]DbTeam `json:"teams"`
	UpdatedAt time.Time `json:"updatedAt"`
	UserID    DbUserID  `json:"userID"`
	Username  string    `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItem defines the model for WorkItem.
type WorkItem struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// WorkItemComment defines the model for WorkItemComment.
type WorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// WorkItemRole is generated from database enum 'work_item_role'.
type WorkItemRole string

// WorkItemTag defines the model for WorkItemTag.
type WorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// WorkItemType defines the model for WorkItemType.
type WorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// ProjectName is generated from projects table.
type ProjectName = Project

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName Project `form:"projectName" json:"projectName"`
	Topics      Topics  `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    string    `form:"cursor" json:"cursor"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      string                            `form:"cursor" json:"cursor"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
	Filter      *struct {
		Bools   *[]bool `json:"bools,omitempty"`
		Ints    *[]int  `json:"ints,omitempty"`
		Objects *[]struct {
			NestedObj *string `json:"nestedObj,omitempty"`
		} `json:"objects,omitempty"`
		Post *[]string `json:"post,omitempty"`
	} `json:"filter,omitempty"`
	Nested *struct {
		Obj *struct {
			NestedObj *string `json:"nestedObj,omitempty"`
		} `json:"obj,omitempty"`
	} `json:"nested,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItem returns the union data inside the WorkItem as a DemoWorkItem
func (t WorkItem) AsDemoWorkItem() (DemoWorkItem, error) {
	var body DemoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItem returns the union data inside the WorkItem as a DemoTwoWorkItem
func (t WorkItem) AsDemoTwoWorkItem() (DemoTwoWorkItem, error) {
	var body DemoTwoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoTwoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItem()
	case "demo_two":
		return t.AsDemoTwoWorkItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

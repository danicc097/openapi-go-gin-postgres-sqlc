// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// NotificationType is generated from database enum 'notification_type'.
const (
	NotificationTypeGlobal   NotificationType = "global"
	NotificationTypePersonal NotificationType = "personal"
)

// AllNotificationTypeValues returns all possible values for NotificationType.
func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypeGlobal,
		NotificationTypePersonal,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// WorkItemRole is generated from database enum 'work_item_role'.
const (
	WorkItemRolePreparer WorkItemRole = "preparer"
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// AllWorkItemRoleValues returns all possible values for WorkItemRole.
func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

// ActivityResponse defines the model for ActivityResponse.
type ActivityResponse struct {
	ActivityID   int        `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    int        `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CacheDemoWorkItemResponse defines the model for CacheDemoWorkItemResponse.
type CacheDemoWorkItemResponse struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     int                    `json:"workItemID"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           DbWorkItemCreateParams        `json:"base"`
	DemoTwoProject DbDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember              `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        DbWorkItemCreateParams     `json:"base"`
	DemoProject DbDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember           `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]DbWorkItemTagCreateParams `json:"tags"`
	Teams *[]DbTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string   `json:"message"`
	UserID     DbUserID `json:"userID"`
	WorkItemID int      `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbActivity defines the model for DbActivity.
type DbActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// DbActivityCreateParams defines the model for DbActivityCreateParams.
type DbActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// DbCacheDemoWorkItemJoins defines the model for DbCacheDemoWorkItemJoins.
type DbCacheDemoWorkItemJoins struct {
	Assignees        bool `json:"assignees"`
	KanbanStep       bool `json:"kanbanStep"`
	Team             bool `json:"team"`
	TimeEntries      bool `json:"timeEntries"`
	WorkItemComments bool `json:"workItemComments"`
	WorkItemTags     bool `json:"workItemTags"`
	WorkItemType     bool `json:"workItemType"`
}

// DbDemoTwoWorkItem defines the model for DbDemoTwoWorkItem.
type DbDemoTwoWorkItem struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
	WorkItemID            int        `json:"workItemID"`
}

// DbDemoTwoWorkItemCreateParams defines the model for DbDemoTwoWorkItemCreateParams.
type DbDemoTwoWorkItemCreateParams struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
}

// DbDemoWorkItem defines the model for DbDemoWorkItem.
type DbDemoWorkItem struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
	WorkItemID    int       `json:"workItemID"`
}

// DbDemoWorkItemCreateParams defines the model for DbDemoWorkItemCreateParams.
type DbDemoWorkItemCreateParams struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
}

// DbKanbanStep defines the model for DbKanbanStep.
type DbKanbanStep struct {
	Color         string `json:"color"`
	Description   string `json:"description"`
	KanbanStepID  int    `json:"kanbanStepID"`
	Name          string `json:"name"`
	ProjectID     int    `json:"projectID"`
	StepOrder     int    `json:"stepOrder"`
	TimeTrackable bool   `json:"timeTrackable"`
}

// DbNotification defines the model for DbNotification.
type DbNotification struct {
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Labels         []string  `json:"labels"`
	Link           *string   `json:"link"`
	NotificationID int       `json:"notificationID"`

	// NotificationType is generated from database enum 'notification_type'.
	NotificationType NotificationType `json:"notificationType"`
	Receiver         *DbUserID        `json:"receiver,omitempty"`
	Sender           DbUserID         `json:"sender"`
	Title            string           `json:"title"`
}

// DbNotificationID defines the model for DbNotificationID.
type DbNotificationID = interface{}

// DbProject defines the model for DbProject.
type DbProject struct {
	BoardConfig ProjectConfig `json:"boardConfig"`
	CreatedAt   time.Time     `json:"createdAt"`
	Description string        `json:"description"`

	// Name is generated from projects table.
	Name      ProjectName `json:"name"`
	ProjectID int         `json:"projectID"`
	UpdatedAt time.Time   `json:"updatedAt"`
}

// DbProjectID defines the model for DbProjectID.
type DbProjectID = interface{}

// DbTeam defines the model for DbTeam.
type DbTeam struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// DbTeamCreateParams defines the model for DbTeamCreateParams.
type DbTeamCreateParams struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbTimeEntry defines the model for DbTimeEntry.
type DbTimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// DbUser defines the model for DbUser.
type DbUser struct {
	Age                      *int       `json:"age"`
	CreatedAt                time.Time  `json:"createdAt"`
	DeletedAt                *time.Time `json:"deletedAt"`
	Email                    string     `json:"email"`
	FirstName                *string    `json:"firstName"`
	FullName                 *string    `json:"fullName"`
	HasGlobalNotifications   bool       `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool       `json:"hasPersonalNotifications"`
	LastName                 *string    `json:"lastName"`
	Scopes                   Scopes     `json:"scopes"`
	UpdatedAt                time.Time  `json:"updatedAt"`
	UserID                   DbUserID   `json:"userID"`
	Username                 string     `json:"username"`
}

// DbUserAPIKey defines the model for DbUserAPIKey.
type DbUserAPIKey struct {
	ApiKey    string    `json:"apiKey"`
	ExpiresOn time.Time `json:"expiresOn"`
	UserID    DbUserID  `json:"userID"`
}

// DbUserID defines the model for DbUserID.
type DbUserID = uuid.UUID

// DbUserJoins defines the model for DbUserJoins.
type DbUserJoins struct {
	AssigneeWorkItems     bool `json:"assigneeWorkItems"`
	MemberProjects        bool `json:"memberProjects"`
	MemberTeams           bool `json:"memberTeams"`
	ReceiverNotifications bool `json:"receiverNotifications"`
	SenderNotifications   bool `json:"senderNotifications"`
	TimeEntries           bool `json:"timeEntries"`
	UserAPIKey            bool `json:"userAPIKey"`
	UserNotifications     bool `json:"userNotifications"`
	WorkItemComments      bool `json:"workItemComments"`
}

// DbUserNotification defines the model for DbUserNotification.
type DbUserNotification struct {
	NotificationID     int      `json:"notificationID"`
	Read               bool     `json:"read"`
	UserID             DbUserID `json:"userID"`
	UserNotificationID int      `json:"userNotificationID"`
}

// DbUserWIAUWorkItem defines the model for DbUserWIAUWorkItem.
type DbUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbUserWIAWorkItem defines the model for DbUserWIAWorkItem.
type DbUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItem defines the model for DbWorkItem.
type DbWorkItem struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     int                    `json:"workItemID"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemComment defines the model for DbWorkItemComment.
type DbWorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// DbWorkItemCreateParams defines the model for DbWorkItemCreateParams.
type DbWorkItemCreateParams struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemID defines the model for DbWorkItemID.
type DbWorkItemID = interface{}

// DbWorkItemM2MAssigneeWIA defines the model for DbWorkItemM2MAssigneeWIA.
type DbWorkItemM2MAssigneeWIA struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItemRole defines the model for DbWorkItemRole.
type DbWorkItemRole = string

// DbWorkItemTag defines the model for DbWorkItemTag.
type DbWorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// DbWorkItemTagCreateParams defines the model for DbWorkItemTagCreateParams.
type DbWorkItemTagCreateParams struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbWorkItemType defines the model for DbWorkItemType.
type DbWorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// DbWorkItemTypeID defines the model for DbWorkItemTypeID.
type DbWorkItemTypeID = interface{}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItemResponse defines the model for DemoTwoWorkItemResponse.
type DemoTwoWorkItemResponse struct {
	ClosedAt        *time.Time                  `json:"closedAt"`
	CreatedAt       time.Time                   `json:"createdAt"`
	DeletedAt       *time.Time                  `json:"deletedAt"`
	DemoTwoWorkItem DbDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                      `json:"description"`
	KanbanStepID    int                         `json:"kanbanStepID"`
	Members         *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName          `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItemResponse defines the model for DemoWorkItemResponse.
type DemoWorkItemResponse struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	DemoWorkItem DbDemoWorkItem              `json:"demoWorkItem"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName          `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *DbCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *DbUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// NotificationResponse defines the model for NotificationResponse.
type NotificationResponse struct {
	Notification       DbNotification `json:"notification"`
	NotificationID     int            `json:"notificationID"`
	Read               bool           `json:"read"`
	UserID             DbUserID       `json:"userID"`
	UserNotificationID int            `json:"userNotificationID"`
}

// NotificationType is generated from database enum 'notification_type'.
type NotificationType string

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItemResponse `json:"items"`
	Page  PaginationPage               `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]NotificationResponse `json:"items"`
	Page  PaginationPage          `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]UserResponse `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the db column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID DbUserID     `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]DbTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]DbWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]DbWorkItemTag            `json:"workItemTags"`
	WorkItemType     *DbWorkItemType             `json:"workItemType,omitempty"`
}

// TeamResponse defines the model for TeamResponse.
type TeamResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntryResponse defines the model for TimeEntryResponse.
type TimeEntryResponse struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *int       `json:"activityID,omitempty"`
	Comment         *string    `json:"comment,omitempty"`
	DurationMinutes *int       `json:"durationMinutes"`
	Start           *time.Time `json:"start,omitempty"`
	TeamID          *int       `json:"teamID"`
	UserID          *DbUserID  `json:"userID,omitempty"`
	WorkItemID      *int       `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string   `json:"message,omitempty"`
	UserID     *DbUserID `json:"userID,omitempty"`
	WorkItemID *int      `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UserResponse defines the model for UserResponse.
type UserResponse struct {
	Age                      *int          `json:"age"`
	ApiKey                   *DbUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time     `json:"createdAt"`
	DeletedAt                *time.Time    `json:"deletedAt"`
	Email                    string        `json:"email"`
	FirstName                *string       `json:"firstName"`
	FullName                 *string       `json:"fullName"`
	HasGlobalNotifications   bool          `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool          `json:"hasPersonalNotifications"`
	LastName                 *string       `json:"lastName"`
	Projects                 *[]DbProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role      `json:"role"`
	Scopes    Scopes    `json:"scopes"`
	Teams     *[]DbTeam `json:"teams"`
	UpdatedAt time.Time `json:"updatedAt"`
	UserID    DbUserID  `json:"userID"`
	Username  string    `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName          `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// WorkItemCommentResponse defines the model for WorkItemCommentResponse.
type WorkItemCommentResponse struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemRole is generated from database enum 'work_item_role'.
type WorkItemRole string

// WorkItemTagResponse defines the model for WorkItemTagResponse.
type WorkItemTagResponse struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// WorkItemTypeResponse defines the model for WorkItemTypeResponse.
type WorkItemTypeResponse struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItemResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItemResponse()
	case "demo_two":
		return t.AsDemoTwoWorkItemResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

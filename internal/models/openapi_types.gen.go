// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// NotificationType is generated from database enum 'notification_type'.
const (
	NotificationTypeGlobal   NotificationType = "global"
	NotificationTypePersonal NotificationType = "personal"
)

// AllNotificationTypeValues returns all possible values for NotificationType.
func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypeGlobal,
		NotificationTypePersonal,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// Project is generated from projects table.
const (
	ProjectDemo    Project = "demo"
	ProjectDemoTwo Project = "demo_two"
)

// AllProjectValues returns all possible values for Project.
func AllProjectValues() []Project {
	return []Project{
		ProjectDemo,
		ProjectDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// WorkItemRole is generated from database enum 'work_item_role'.
const (
	WorkItemRolePreparer WorkItemRole = "preparer"
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// AllWorkItemRoleValues returns all possible values for WorkItemRole.
func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

// Activity defines the model for Activity.
type Activity struct {
	ActivityID   int        `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    int        `json:"projectID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           DbWorkItemCreateParams        `json:"base"`
	DemoTwoProject DbDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember              `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
	TagIDs      []int   `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        DbWorkItemCreateParams     `json:"base"`
	DemoProject DbDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember           `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
	TagIDs      []int   `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]DbWorkItemTagCreateParams `json:"tags"`
	Teams *[]DbTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string   `json:"message"`
	UserID     DbUserID `json:"userID"`
	WorkItemID int      `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbActivity defines the model for DbActivity.
type DbActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// DbActivityCreateParams defines the model for DbActivityCreateParams.
type DbActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// DbCacheDemoWorkItemJoins defines the model for DbCacheDemoWorkItemJoins.
type DbCacheDemoWorkItemJoins struct {
	Assignees        bool `json:"assignees"`
	KanbanStep       bool `json:"kanbanStep"`
	Team             bool `json:"team"`
	TimeEntries      bool `json:"timeEntries"`
	WorkItemComments bool `json:"workItemComments"`
	WorkItemTags     bool `json:"workItemTags"`
	WorkItemType     bool `json:"workItemType"`
}

// DbDemoTwoWorkItem defines the model for DbDemoTwoWorkItem.
type DbDemoTwoWorkItem struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
	WorkItemID            int        `json:"workItemID"`
}

// DbDemoTwoWorkItemCreateParams defines the model for DbDemoTwoWorkItemCreateParams.
type DbDemoTwoWorkItemCreateParams struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
}

// DbDemoWorkItem defines the model for DbDemoWorkItem.
type DbDemoWorkItem struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
	WorkItemID    int       `json:"workItemID"`
}

// DbDemoWorkItemCreateParams defines the model for DbDemoWorkItemCreateParams.
type DbDemoWorkItemCreateParams struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
}

// DbKanbanStep defines the model for DbKanbanStep.
type DbKanbanStep struct {
	Color         string `json:"color"`
	Description   string `json:"description"`
	KanbanStepID  int    `json:"kanbanStepID"`
	Name          string `json:"name"`
	ProjectID     int    `json:"projectID"`
	StepOrder     int    `json:"stepOrder"`
	TimeTrackable bool   `json:"timeTrackable"`
}

// DbNotification defines the model for DbNotification.
type DbNotification struct {
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Labels         []string  `json:"labels"`
	Link           *string   `json:"link"`
	NotificationID int       `json:"notificationID"`

	// NotificationType is generated from database enum 'notification_type'.
	NotificationType NotificationType `json:"notificationType"`
	Receiver         *DbUserID        `json:"receiver,omitempty"`
	Sender           DbUserID         `json:"sender"`
	Title            string           `json:"title"`
}

// DbNotificationID defines the model for DbNotificationID.
type DbNotificationID = interface{}

// DbProject defines the model for DbProject.
type DbProject struct {
	BoardConfig ProjectConfig `json:"boardConfig"`
	CreatedAt   time.Time     `json:"createdAt"`
	Description string        `json:"description"`

	// Name is generated from projects table.
	Name      Project   `json:"name"`
	ProjectID int       `json:"projectID"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// DbProjectID defines the model for DbProjectID.
type DbProjectID = interface{}

// DbTeam defines the model for DbTeam.
type DbTeam struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// DbTeamCreateParams defines the model for DbTeamCreateParams.
type DbTeamCreateParams struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbTimeEntry defines the model for DbTimeEntry.
type DbTimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// DbUser defines the model for DbUser.
type DbUser struct {
	Age                      *int       `json:"age"`
	CreatedAt                time.Time  `json:"createdAt"`
	DeletedAt                *time.Time `json:"deletedAt"`
	Email                    string     `json:"email"`
	FirstName                *string    `json:"firstName"`
	FullName                 *string    `json:"fullName"`
	HasGlobalNotifications   bool       `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool       `json:"hasPersonalNotifications"`
	LastName                 *string    `json:"lastName"`
	Scopes                   Scopes     `json:"scopes"`
	UpdatedAt                time.Time  `json:"updatedAt"`
	UserID                   DbUserID   `json:"userID"`
	Username                 string     `json:"username"`
}

// DbUserAPIKey defines the model for DbUserAPIKey.
type DbUserAPIKey struct {
	ApiKey    string    `json:"apiKey"`
	ExpiresOn time.Time `json:"expiresOn"`
	UserID    DbUserID  `json:"userID"`
}

// DbUserID defines the model for DbUserID.
type DbUserID = uuid.UUID

// DbUserJoins defines the model for DbUserJoins.
type DbUserJoins struct {
	AssigneeWorkItems     bool `json:"assigneeWorkItems"`
	MemberProjects        bool `json:"memberProjects"`
	MemberTeams           bool `json:"memberTeams"`
	ReceiverNotifications bool `json:"receiverNotifications"`
	SenderNotifications   bool `json:"senderNotifications"`
	TimeEntries           bool `json:"timeEntries"`
	UserAPIKey            bool `json:"userAPIKey"`
	UserNotifications     bool `json:"userNotifications"`
	WorkItemComments      bool `json:"workItemComments"`
}

// DbUserNotification defines the model for DbUserNotification.
type DbUserNotification struct {
	NotificationID     int      `json:"notificationID"`
	Read               bool     `json:"read"`
	UserID             DbUserID `json:"userID"`
	UserNotificationID int      `json:"userNotificationID"`
}

// DbUserWIAUWorkItem defines the model for DbUserWIAUWorkItem.
type DbUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbUserWIAWorkItem defines the model for DbUserWIAWorkItem.
type DbUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItem defines the model for DbWorkItem.
type DbWorkItem struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     int                    `json:"workItemID"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemComment defines the model for DbWorkItemComment.
type DbWorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// DbWorkItemCreateParams defines the model for DbWorkItemCreateParams.
type DbWorkItemCreateParams struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemID defines the model for DbWorkItemID.
type DbWorkItemID = interface{}

// DbWorkItemM2MAssigneeWIA defines the model for DbWorkItemM2MAssigneeWIA.
type DbWorkItemM2MAssigneeWIA struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItemRole defines the model for DbWorkItemRole.
type DbWorkItemRole = string

// DbWorkItemTag defines the model for DbWorkItemTag.
type DbWorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// DbWorkItemTagCreateParams defines the model for DbWorkItemTagCreateParams.
type DbWorkItemTagCreateParams struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbWorkItemType defines the model for DbWorkItemType.
type DbWorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// DbWorkItemTypeID defines the model for DbWorkItemTypeID.
type DbWorkItemTypeID = interface{}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItem defines the model for DemoTwoWorkItem.
type DemoTwoWorkItem struct {
	ClosedAt        *time.Time                  `json:"closedAt"`
	CreatedAt       time.Time                   `json:"createdAt"`
	DeletedAt       *time.Time                  `json:"deletedAt"`
	DemoTwoWorkItem DbDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                      `json:"description"`
	KanbanStepID    int                         `json:"kanbanStepID"`
	Members         *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItem defines the model for DemoWorkItem.
type DemoWorkItem struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	DemoWorkItem DbDemoWorkItem              `json:"demoWorkItem"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *DbCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *DbUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	Cursor PaginationCursor `json:"cursor"`

	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// Notification defines the model for Notification.
type Notification struct {
	Notification       DbNotification `json:"notification"`
	NotificationID     int            `json:"notificationID"`
	Read               bool           `json:"read"`
	UserID             DbUserID       `json:"userID"`
	UserNotificationID int            `json:"userNotificationID"`
}

// NotificationType is generated from database enum 'notification_type'.
type NotificationType string

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]Notification `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]User        `json:"items"`
	Page  PaginationPage `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the db column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// Project is generated from projects table.
type Project string

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID DbUserID     `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]DbTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]DbWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]DbWorkItemTag            `json:"workItemTags"`
	WorkItemType     *DbWorkItemType             `json:"workItemType,omitempty"`
}

// Team defines the model for Team.
type Team struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntry defines the model for TimeEntry.
type TimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *int       `json:"activityID,omitempty"`
	Comment         *string    `json:"comment,omitempty"`
	DurationMinutes *int       `json:"durationMinutes"`
	Start           *time.Time `json:"start,omitempty"`
	TeamID          *int       `json:"teamID"`
	UserID          *DbUserID  `json:"userID,omitempty"`
	WorkItemID      *int       `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string   `json:"message,omitempty"`
	UserID     *DbUserID `json:"userID,omitempty"`
	WorkItemID *int      `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// User defines the model for User.
type User struct {
	Age                      *int          `json:"age"`
	ApiKey                   *DbUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time     `json:"createdAt"`
	DeletedAt                *time.Time    `json:"deletedAt"`
	Email                    string        `json:"email"`
	FirstName                *string       `json:"firstName"`
	FullName                 *string       `json:"fullName"`
	HasGlobalNotifications   bool          `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool          `json:"hasPersonalNotifications"`
	LastName                 *string       `json:"lastName"`
	Projects                 *[]DbProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role      `json:"role"`
	Scopes    Scopes    `json:"scopes"`
	Teams     *[]DbTeam `json:"teams"`
	UpdatedAt time.Time `json:"updatedAt"`
	UserID    DbUserID  `json:"userID"`
	Username  string    `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItem defines the model for WorkItem.
type WorkItem struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// WorkItemComment defines the model for WorkItemComment.
type WorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// WorkItemRole is generated from database enum 'work_item_role'.
type WorkItemRole string

// WorkItemTag defines the model for WorkItemTag.
type WorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// WorkItemType defines the model for WorkItemType.
type WorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// ProjectName is generated from projects table.
type ProjectName = Project

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName Project `form:"projectName" json:"projectName"`
	Topics      Topics  `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    string    `form:"cursor" json:"cursor"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      string                            `form:"cursor" json:"cursor"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
	Filter      *struct {
		Bools   *[]bool `json:"bools,omitempty"`
		Ints    *[]int  `json:"ints,omitempty"`
		Objects *[]struct {
			NestedObj *string `json:"nestedObj,omitempty"`
		} `json:"objects,omitempty"`
		Post *[]string `json:"post,omitempty"`
	} `json:"filter,omitempty"`
	Nested *struct {
		Obj *struct {
			NestedObj *string `json:"nestedObj,omitempty"`
		} `json:"obj,omitempty"`
	} `json:"nested,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItem returns the union data inside the WorkItem as a DemoWorkItem
func (t WorkItem) AsDemoWorkItem() (DemoWorkItem, error) {
	var body DemoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItem returns the union data inside the WorkItem as a DemoTwoWorkItem
func (t WorkItem) AsDemoTwoWorkItem() (DemoTwoWorkItem, error) {
	var body DemoTwoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoTwoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItem()
	case "demo_two":
		return t.AsDemoTwoWorkItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// NotificationType is generated from database enum 'notification_type'.
const (
	NotificationTypeGlobal   NotificationType = "global"
	NotificationTypePersonal NotificationType = "personal"
)

// AllNotificationTypeValues returns all possible values for NotificationType.
func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypeGlobal,
		NotificationTypePersonal,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// WorkItemRole is generated from database enum 'work_item_role'.
const (
	WorkItemRolePreparer WorkItemRole = "preparer"
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// AllWorkItemRoleValues returns all possible values for WorkItemRole.
func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

// Activity defines the model for Activity.
type Activity struct {
	ActivityID   int        `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    int        `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CacheDemoWorkItem defines the model for CacheDemoWorkItem.
type CacheDemoWorkItem struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	LastMessageAt  time.Time              `json:"lastMessageAt"`
	Line           string                 `json:"line"`
	Metadata       map[string]interface{} `json:"metadata"`
	Ref            string                 `json:"ref"`
	Reopened       bool                   `json:"reopened"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     int                    `json:"workItemID"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           DbWorkItemCreateParams        `json:"base"`
	DemoTwoProject DbDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember              `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        DbWorkItemCreateParams     `json:"base"`
	DemoProject DbDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember           `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
	TagIDs      []int       `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]DbWorkItemTagCreateParams `json:"tags"`
	Teams *[]DbTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string   `json:"message"`
	UserID     DbUserID `json:"userID"`
	WorkItemID int      `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbActivity defines the model for DbActivity.
type DbActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// DbActivityCreateParams defines the model for DbActivityCreateParams.
type DbActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// DbCacheDemoWorkItemJoins defines the model for DbCacheDemoWorkItemJoins.
type DbCacheDemoWorkItemJoins struct {
	Assignees        bool `json:"assignees"`
	KanbanStep       bool `json:"kanbanStep"`
	Team             bool `json:"team"`
	TimeEntries      bool `json:"timeEntries"`
	WorkItemComments bool `json:"workItemComments"`
	WorkItemTags     bool `json:"workItemTags"`
	WorkItemType     bool `json:"workItemType"`
}

// DbDemoTwoWorkItem defines the model for DbDemoTwoWorkItem.
type DbDemoTwoWorkItem struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
	WorkItemID            int        `json:"workItemID"`
}

// DbDemoTwoWorkItemCreateParams defines the model for DbDemoTwoWorkItemCreateParams.
type DbDemoTwoWorkItemCreateParams struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
}

// DbDemoWorkItem defines the model for DbDemoWorkItem.
type DbDemoWorkItem struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
	WorkItemID    int       `json:"workItemID"`
}

// DbDemoWorkItemCreateParams defines the model for DbDemoWorkItemCreateParams.
type DbDemoWorkItemCreateParams struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
}

// DbKanbanStep defines the model for DbKanbanStep.
type DbKanbanStep struct {
	Color         string `json:"color"`
	Description   string `json:"description"`
	KanbanStepID  int    `json:"kanbanStepID"`
	Name          string `json:"name"`
	ProjectID     int    `json:"projectID"`
	StepOrder     int    `json:"stepOrder"`
	TimeTrackable bool   `json:"timeTrackable"`
}

// DbNotification defines the model for DbNotification.
type DbNotification struct {
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Labels         []string  `json:"labels"`
	Link           *string   `json:"link"`
	NotificationID int       `json:"notificationID"`

	// NotificationType is generated from database enum 'notification_type'.
	NotificationType NotificationType `json:"notificationType"`
	Receiver         *DbUserID        `json:"receiver,omitempty"`
	Sender           DbUserID         `json:"sender"`
	Title            string           `json:"title"`
}

// DbNotificationID defines the model for DbNotificationID.
type DbNotificationID = interface{}

// DbProject defines the model for DbProject.
type DbProject struct {
	BoardConfig ProjectConfig `json:"boardConfig"`
	CreatedAt   time.Time     `json:"createdAt"`
	Description string        `json:"description"`

	// Name is generated from projects table.
	Name      ProjectName `json:"name"`
	ProjectID int         `json:"projectID"`
	UpdatedAt time.Time   `json:"updatedAt"`
}

// DbProjectID defines the model for DbProjectID.
type DbProjectID = interface{}

// DbTeam defines the model for DbTeam.
type DbTeam struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// DbTeamCreateParams defines the model for DbTeamCreateParams.
type DbTeamCreateParams struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbTimeEntry defines the model for DbTimeEntry.
type DbTimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// DbUser defines the model for DbUser.
type DbUser struct {
	Age                      *int       `json:"age"`
	CreatedAt                time.Time  `json:"createdAt"`
	DeletedAt                *time.Time `json:"deletedAt"`
	Email                    string     `json:"email"`
	FirstName                *string    `json:"firstName"`
	FullName                 *string    `json:"fullName"`
	HasGlobalNotifications   bool       `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool       `json:"hasPersonalNotifications"`
	LastName                 *string    `json:"lastName"`
	Scopes                   Scopes     `json:"scopes"`
	UpdatedAt                time.Time  `json:"updatedAt"`
	UserID                   DbUserID   `json:"userID"`
	Username                 string     `json:"username"`
}

// DbUserAPIKey defines the model for DbUserAPIKey.
type DbUserAPIKey struct {
	ApiKey    string    `json:"apiKey"`
	ExpiresOn time.Time `json:"expiresOn"`
	UserID    DbUserID  `json:"userID"`
}

// DbUserID defines the model for DbUserID.
type DbUserID = uuid.UUID

// DbUserJoins defines the model for DbUserJoins.
type DbUserJoins struct {
	AssigneeWorkItems     bool `json:"assigneeWorkItems"`
	MemberProjects        bool `json:"memberProjects"`
	MemberTeams           bool `json:"memberTeams"`
	ReceiverNotifications bool `json:"receiverNotifications"`
	SenderNotifications   bool `json:"senderNotifications"`
	TimeEntries           bool `json:"timeEntries"`
	UserAPIKey            bool `json:"userAPIKey"`
	UserNotifications     bool `json:"userNotifications"`
	WorkItemComments      bool `json:"workItemComments"`
}

// DbUserNotification defines the model for DbUserNotification.
type DbUserNotification struct {
	NotificationID     int      `json:"notificationID"`
	Read               bool     `json:"read"`
	UserID             DbUserID `json:"userID"`
	UserNotificationID int      `json:"userNotificationID"`
}

// DbUserWIAUWorkItem defines the model for DbUserWIAUWorkItem.
type DbUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbUserWIAWorkItem defines the model for DbUserWIAWorkItem.
type DbUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItem defines the model for DbWorkItem.
type DbWorkItem struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     int                    `json:"workItemID"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemComment defines the model for DbWorkItemComment.
type DbWorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// DbWorkItemCreateParams defines the model for DbWorkItemCreateParams.
type DbWorkItemCreateParams struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemID defines the model for DbWorkItemID.
type DbWorkItemID = interface{}

// DbWorkItemM2MAssigneeWIA defines the model for DbWorkItemM2MAssigneeWIA.
type DbWorkItemM2MAssigneeWIA struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItemRole defines the model for DbWorkItemRole.
type DbWorkItemRole = string

// DbWorkItemTag defines the model for DbWorkItemTag.
type DbWorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// DbWorkItemTagCreateParams defines the model for DbWorkItemTagCreateParams.
type DbWorkItemTagCreateParams struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbWorkItemType defines the model for DbWorkItemType.
type DbWorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// DbWorkItemTypeID defines the model for DbWorkItemTypeID.
type DbWorkItemTypeID = interface{}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItem defines the model for DemoTwoWorkItem.
type DemoTwoWorkItem struct {
	ClosedAt        *time.Time                  `json:"closedAt"`
	CreatedAt       time.Time                   `json:"createdAt"`
	DeletedAt       *time.Time                  `json:"deletedAt"`
	DemoTwoWorkItem DbDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                      `json:"description"`
	KanbanStepID    int                         `json:"kanbanStepID"`
	Members         *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName          `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItem defines the model for DemoWorkItem.
type DemoWorkItem struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	DemoWorkItem DbDemoWorkItem              `json:"demoWorkItem"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName          `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *DbCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *DbUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// Notification defines the model for Notification.
type Notification struct {
	Notification       DbNotification `json:"notification"`
	NotificationID     int            `json:"notificationID"`
	Read               bool           `json:"read"`
	UserID             DbUserID       `json:"userID"`
	UserNotificationID int            `json:"userNotificationID"`
}

// NotificationType is generated from database enum 'notification_type'.
type NotificationType string

// PaginatedDemoWorkItemsResponse defines the model for PaginatedDemoWorkItemsResponse.
type PaginatedDemoWorkItemsResponse struct {
	Items *[]CacheDemoWorkItem `json:"items"`
	Page  PaginationPage       `json:"page"`
}

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]Notification `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]User        `json:"items"`
	Page  PaginationPage `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the db column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName ProjectName `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID DbUserID     `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]DbTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]DbWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]DbWorkItemTag            `json:"workItemTags"`
	WorkItemType     *DbWorkItemType             `json:"workItemType,omitempty"`
}

// Team defines the model for Team.
type Team struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntry defines the model for TimeEntry.
type TimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *int       `json:"activityID,omitempty"`
	Comment         *string    `json:"comment,omitempty"`
	DurationMinutes *int       `json:"durationMinutes"`
	Start           *time.Time `json:"start,omitempty"`
	TeamID          *int       `json:"teamID"`
	UserID          *DbUserID  `json:"userID,omitempty"`
	WorkItemID      *int       `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string   `json:"message,omitempty"`
	UserID     *DbUserID `json:"userID,omitempty"`
	WorkItemID *int      `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// User defines the model for User.
type User struct {
	Age                      *int          `json:"age"`
	ApiKey                   *DbUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time     `json:"createdAt"`
	DeletedAt                *time.Time    `json:"deletedAt"`
	Email                    string        `json:"email"`
	FirstName                *string       `json:"firstName"`
	FullName                 *string       `json:"fullName"`
	HasGlobalNotifications   bool          `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool          `json:"hasPersonalNotifications"`
	LastName                 *string       `json:"lastName"`
	Projects                 *[]DbProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role      `json:"role"`
	Scopes    Scopes    `json:"scopes"`
	Teams     *[]DbTeam `json:"teams"`
	UpdatedAt time.Time `json:"updatedAt"`
	UserID    DbUserID  `json:"userID"`
	Username  string    `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItem defines the model for WorkItem.
type WorkItem struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      ProjectName          `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// WorkItemComment defines the model for WorkItemComment.
type WorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// WorkItemRole is generated from database enum 'work_item_role'.
type WorkItemRole string

// WorkItemTag defines the model for WorkItemTag.
type WorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// WorkItemType defines the model for WorkItemType.
type WorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName ProjectName `form:"projectName" json:"projectName"`
	Topics      Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                  `form:"limit" json:"limit"`
	Direction   Direction                            `form:"direction" json:"direction"`
	Cursor      *string                              `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItem returns the union data inside the WorkItem as a DemoWorkItem
func (t WorkItem) AsDemoWorkItem() (DemoWorkItem, error) {
	var body DemoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItem returns the union data inside the WorkItem as a DemoTwoWorkItem
func (t WorkItem) AsDemoTwoWorkItem() (DemoTwoWorkItem, error) {
	var body DemoTwoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoTwoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItem()
	case "demo_two":
		return t.AsDemoTwoWorkItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9a3fbNrJ/hYfbc7p7rmTZjpsm+nTdOO11m4c3tpvdk/p2IRKWUJMEC4C2VV/993vw",
	"IAmSIAnqZdnhlzYW8RjMCzPAzODB9XAY4whGjLrjBxfegzAOoPj3JYWE//8WBAkUH0OAAncs///f4r97",
	"Hg7dgRsDSu8w8d1x/s+Bm1BIIhBCd5z/c7FY8OYEhJBBIuY5I/gP6LEPouWD60PqERQzhCN3nH50ROdB",
	"Cp87dn0YYvFDHGAfuuNrEFA4cFEkYGAzd+CquWNt/IFL4J8JItB3x4wkcOBSbwZDwCf+hsBrd+z+bZSj",
	"ZCS/0pEO42LgUjYXQFAkoFkM3MvL05Mq9PxXB/kwYugaQVJYwMHhC3j03cvvh/DV68nw4NB/MQRH370c",
	"Hh2+fHlwdPD90f7+vt0Ckd+4rhgwBgnv9r9f9oevwfD66uHVYpj9+8ji3weHC3fgsnksVs0IiqbuwL0f",
	"TvFQ/ZgkyN8TWNB+H6IwxoRxKFJGSAS0YgFjd4rYLJlwJhpNMZ4GcCS+LwwoXqRLEjxz7DF0i9hcrI/g",
	"GBKGJNcC9UWSQwGHIgankHBC+TCADPrHAqhrTELAODcBBocMCQ6JkiAAEz65xGRx1WIIjcYP1e+InhHs",
	"JxwQqDWYYBxAEPEWkeL1SlfFq2bgFzqVv+gr1Tuq0YtgloC6ylaFJ7ybpBmMhpSRxOMIyRDMvyDKP0IC",
	"WMpfi4F7HM1/TTVDkesJjAmkXH4cEM0doT8GDoq8IPFRNHX+wzH8nwqmFwP3DfBm8ASG+DMmN6cMhlX6",
	"egGmq5HPIxA0c4CB4htnmhsQTUB0zmBcx7kBoOw9pBRMYRfYAxSZeS2EDPiACR0BfB9x0EBwpmN7UeYT",
	"wYLXBq3CVco3pukJxDGMON+YBIEBMoXsBDBovyAGQViHI4ZYYF5tEvtdqX6nmLBusvT7xTyGVhLLUacI",
	"UianhqjCxOmSyuJcmlujZoagEk8VkK1LgY6bdsVQFdFaDfFGTJFqkk/wzwRSVpXojanTEvYb9KEawmL1",
	"xiW1YIBj6+IuQ1gtIiaAwjZD5GSSDiPHPuOmFJUKRsyiLJX2cUpQlYcLYThRBhpiMKRtA55Dcos8SN+L",
	"fm6uOQAhYK7tbamd18HcYmB6elIExSD6helKtC/agCVUDSTms3nyxdsyRA2FLfhiC0zRiSO+VnZYLy90",
	"ZAQ1+Q8YEL+WERiY2qM/54gLMC3TssZWySjD948uU11AEHabY2GJSxNiWnDJgVl6q1lmI+m0c+jQtS0E",
	"hfBtxEj9xtnm6ng4DGHEjCv1EwL4At6jKGFyuBqSaQNSBghbxlBrHzqhkMi2zbx2KdtVrLO2GZp8pxRP",
	"6QIzaKypWiZVC2kzJSsnriVwKM1Dsz27IsJaEJROnU1U6G+LmJqFWqJHw4uPuMiFKAIMi0OpEMQxx4QQ",
	"6hDXrb9JJfN+v7M7i76GrV1uYJxW8w/VY6bFwMUR/Hjtjr8006cevsXAtqcJuqsKMi/AtJbPPBxIrGpO",
	"3d/+/uV4+CMYXgvn7uXi//Q/Xyz+8Y27hJNrp18lOINV9Kxh1ZZMxx2qrxFR2rJrMXUyWeXc7dkdmhUw",
	"UjCAtufjdlv9Ei6wWGTF6f8Zo8iwTEApmkYQUvMa8vOImtMgCMKaL2qHRXVD3xV3mpZWF8qWbmghvlRb",
	"lBCqrUiBXxqiCPpAw5AB5hKAZlqUVL5BSSWU4fAEMPgjJsqCPlz+4LKT2dBkI5igb5aata5kUQtPPSrX",
	"feS61rPTZQkzsDyHbN9CSuhr2DdqjxaeEspLKC0jTuFTIrceiwIfvxQ04SMZGe1XDsttOtyPgvFH4sv7",
	"Y9MpfQgvCPBupLh20LKVbTufqWYLT22k4pw2vP2LrttrOfsDZugaeSDFcun0DvtzIwKXuIQKwAQGxmMv",
	"zeUuHeUEKLppcI81g1NbRi03aG3S/bHJRflQbi/I6kF0KxnD1nGlMPK79ai7BirxVWnR+V2LIFuG8eJl",
	"iYLGgA6zqH8oY1b8qh3KljkGEP8Njq7R1PJYVDVe9mbTzhHpcDzbohs6X8SZz27rjXYdg8vfc+UkahD+",
	"M22p4ocLZcGWNPrm6NJVMzddnq5KmezesZVElkTJULqac7W+U10JUHra97xPZFO/pXYxWz6y1eEZFP34",
	"7IiyfJJrI+Y5ORsEPY2FK5Fbns224/JxQk5UvJ6B164RodnNW+s410kQWDeeAfpTgCcg0Pe9Gmd7BugZ",
	"JBRHVq25vW0NBvVwDNtvKWWr5cJDuvN/HhDZpowyjs66pOTMltaAvloqrLIdChFoEZHjs9NfoEkvxkj9",
	"XmXS+xgRSD9Gm0N8+QhQAqNP3eHGp7DQFnRIIPOQT8+fHHx3/erF8MD7zh8efX/4/fD1K/9g+Or14ZHn",
	"+QfX3v6BDI58agGbLYhoOS5MTwZqBF/ewCtbq7HNRXpzXW2QOh4WikZa+BYNW08lk4JMmL9bzGNzuFkJ",
	"NTMt17y28hllFaoKDYoILyx0YCCrYQlm2+qyNHWVZ2wcVQKBX4/w7jr7Q+ucBvX9oexcVrxNAWa96skQ",
	"8vn0+LL+jJLgoNVDy+4HsYxWT6itP21cGocdB7AZ5CcEcR9tXJWhJaODv66A3l0O1NXYumF3LkVorOXs",
	"ojFsZRt2dmmzaSN3J1LnY5bitDOTPQ+dWZ10bzKHtp2CzVdpKyuyr0CldJb/oqiXpFgXdF2gM6lPFUZp",
	"2uY9Kj9rTH95f/j+OLW4To+f0Hb7CdfQoRC9utELso1vtMue02qBAJ3Uk2xvcwQrkNhFF3FaWOihcsDx",
	"cwqiKi5UXYHt1ursOaurkZNZMJvgLRkr085cKdD8Vxji/I62ehPgIupkYznXBIeO1NC/U97eYVyw99yB",
	"C6Mk5As9QZT/xH2yT9J95v+85A6zQ+AtgnfuwOWQOChyYoKnBFLdkdWOWczLkLEva4U5A7QzGM/R6aks",
	"rFMK1LqsnG6ZMrUbuUWmxpIW1SqpN6vYYvaXTooTbRNQsiscm+yWTXiU+slcR6qnJr4F6Nb+69KpQl2g",
	"sAkBKWn4p+VjD8xpg5m6sNjgSj1sdTJfiNXmwFf+Oyfz7xwSw/7AR3IO3IH8x6E7cI8jzGaQOKwYsmKz",
	"azzPLaPbftFvFv1m0W8W/WZhs1l03CnstomN7REd9gJEoJdqvXQUQD2F6+pIi4H7lhBM3ohKRmWQP+X1",
	"YigDkQ+Ij/6CvvM/FxdnDuT9xGZF936LPmAG6fi3aOh8e0bQLWDwWycE5IY6IEqbYmcCnRnyfRhxR41A",
	"GuOIwr3fIm3Nl9FNhO/4L2ocd+B+wOxHnETc6TuNbkGA/GMyTdT563FAIPDnb+8RFfeflxFI2AwTDmn2",
	"J4wY8gSquAspsql+5eMAxXufFCyFHz+enrzJpxSHYtlfIkAl/1Nc15uw+xNklRydfyaQzM8KpbaKm/Yf",
	"6a18s1DWJP9YJHHbQFXLZLxzQgiM2CWFZF2LyaMRLOGvB6EJ8jMwRRH/kXekrcBb6V41JsKRvFRfDKyO",
	"duWRrmln5/IlxLKlhJMSLHWvkQuUO6gEYrK6iDOYzlMNa8dedf4Ay3tyLsAT7M+dGLDZwEHXDojm7qAp",
	"Al7u2O47NYJb3ZMoAyyhXS8HmMUOliu5xcC9zYQ8Q3JTX06NX0tdqjGQ6Y7GVCyYXEqKXwXlVQ2xf61C",
	"VEfAIjmOM3PRkU2oc42Jk69QsgjVKdO01so6c7qdpEurmq+C/Qxb3kn61y0ssirlmwGd4TvORsDxQBDg",
	"hFmxz/t0tpZKIhlUV3lfE6oNFLGPc2lXa4WxLNM5nmSUTLGBhWFVwEytyv5gSG1ps6u4zTgBFDrcpnC+",
	"1eESlta3uo0Vq0BNd+BORWBmB3Mr20z0fZSmtkTDbmIli9WCXhZmfazu9+32qzPeupLHIe/IJYztdGxB",
	"QjvyChFt60JeRe52F2/m9bfjTVgw68KXvDHeaTwV19uGH6PuvkYBa78/z0f4UbbnpokKvm3Uu5n3ZTZh",
	"EwqHFJJbSFSobwXiNwmhpu3fw0ESRo3WIJtB5+fzjx9EQV4HX4sf/ImjupqO2HRn0XJdg7zocL1d6nhi",
	"GbK+aLWaaDlUIxt9kK7TZCZViNJSfGYC2R2EkS2NjwWDD9Jup5EXJFTUfOjW38MRA8Lhset3xuFXdR5g",
	"GLP5Uh0jn35GIg68e98/ExAsBe518tdfS4E7Fec05GIGohW7fyRvOfgXeJlxAkjpsjCkfVcCIMLs7bIk",
	"532XppzIwVqSY6r1laRSfa+cK7vySk3jd+spBW9xZadg9T41u8N7dRTWBQjehxa0Y7bptid4txXk05Wl",
	"BqKNkpRwaWeBqVY0KDpNd6WqSNMsmaJI5b4oxjVSqQmZSWY0EdA5usCgpkO1eu6p7pyAwnMY0exzDbo1",
	"J2udbNBe+mQp6mY5OTXXRZZQV67K9G08zpoJh8pBkQ/voe9M5sqmcET+UQOUZ8pWLPnP8J7ldk5bLZg6",
	"czAdvt4M1CpUVoFY9u6soVyphSWrg9QGeF5poKykYOB3OJvUR/uR9zVVo5hBoAo52FewuEU0AQH6C5Ru",
	"WVNOMB1sGqCp+i30rY9YXQGSgYvor4ii2s/10XciUc7wgc7w3RscBCCmVuVlNADLnXXoBoXHIK7qsWF+",
	"X6N6rKGYzXBPpJ7cyOom2p9gpJG+bXMTHEC69wfFkXMD51SffKpK06nwYuDfgsiT3po7cEMQgan6ECK+",
	"DdAkhuRY/GEPp7xusQBU5uCaIVUIHMq7fQUyHWvnWHR8RxCD2V8ykCFL7c2+MgjCIYWMoWia/5qOX/mQ",
	"5sSP5Q2l/gv0EdP/zma8w+RmyKVxyMA071j8WfUu/lgdYpwFSeYtVUa+aeT0U2X09IOaoSP5OtSoFtQ2",
	"6JxS8eq1RdSvkLRM5LVgQ67g+QwQ6LcU6NtmvMkWwjMeJ6JidyMm2u0aE5fUylNfzWad1WwqtLiQ9SLr",
	"kN+XmXk+ZWYsisxc4BgZbsIlVrVHxOTV6/n5Wwfewog5AaKMD1awQY7j+AROkqlKWODYuJSc6Uqxlik6",
	"/C9ZJ+Q4gIRRoxssALNXeHIdhl1VAvCoz8G0UMkMYS3FZPMNPThgBarVcwKqaf+cwHqVhh2BrF8GkO1F",
	"bZmEzfTS93UnJ7ytkwahaScoDDtyF9KfG0yNVs1TSkskfdEdlKvFYAljNzVyu1VdMrnuORqsUdC0aK3Q",
	"lfszyOrdql9OsH7QnJ18aLWxijNjgqYoAkEwl14gR74jT4KdScIkBCDzyrMiPr/9Fj+8WzjfDq/+6xtz",
	"Zc/tzliP+B19mcJK1ro+NlHstePvI3TCgM2rB6UeO/7qQbfl27xlsGJFv7yiWTuTq8JIfR3AR6gDGGtV",
	"wyz99bTuq4Wvvrm9cblXuGxg/rorHdYVpqiqlMZyh5eJCsZ/su8rt8YCe+xeUE8Ftb7BEYP3LAGBgyLJ",
	"NoXo6tySqAsivoVkginMIohV8FAauVycPX++ujJ+duvZzFhqhLS9Fp8rFpyCYVrB9kPSQzo1uP4znAS+",
	"A4I7MKfOBIpQ5oibuhxv6iKkFLDceqzF1ybn08LIs6hxNZhF9LKeNbns61ylpKe2B7kM6frreIOrFPva",
	"3rgAQ2NESNrsB2AKnfyai8v1aa992muf9vrc0l7bzaqCRqw1r/qqhDtYldC6JmG5vlvHRJo8X5mb6sUs",
	"GgJjQGR9ORFrAIlutqQTO+q23DJsoC82tyvF5qxKzfX119aO7obqa6IeupcQxObnXKllBf1/v5HnX4ij",
	"WEX2pVhx74cgRsMbUQ483Rvlidli4E4gl+HfQSIj5eSfP6YS8fPnC+H687ncsfqaDzNjLHYXHCzuhhpO",
	"zGMY8bmneDhF0TDGlE0JpEP6Z+CJR9o8qPKYFKjHMfBmcHi4t8/1IQnUHHQ8Gt3d3e0B8XkPk+lI9aWj",
	"d6dv3n44f8v77M1YGOhO3scYRsdnp04LHLeQUAkwH2RfeCuyhzt2X+zt771QXrxA9yi9mxs95Ld0C7l4",
	"ESM1fuDd5R3cqS9yYvnv2XOtfKw8/fxLRSdL1tNumfVrlKODgxcH4rmEQEQrX4OAwoEkvB58OC5el+c8",
	"LNVZxaVPGb540OFP9o71YRoOO/yJ8ajDBxHyvP3X34+aiDDi05MIBCMCY0xH6cc/g9EURiN/IgSRsrkg",
	"K0UCF9zdS/PfBWUO94+qPHieeB6kdI9T9Wj/oNqgXC1CtHtR104VmeCN/vUvqeMipswiEMeBOvQa/UGl",
	"qsoR3ZZvnmaZVwK05RFJulJX1wKCfQoi/OWKe82ZSvhyxbFEkzAEZM6pJFjRSXljTxiWU6q/xusKLzpl",
	"mGHlqlL7lt9aloMZrxYDdwpZVRZ+gqwXhM0Lwv7aWDOjloEze9nSZWsKWYtgyZB0b1YVi2K0Sy8Za5UM",
	"cfv4g3r9cy08ZQ5OWhStRWUi95L56JIpPesN7noibP6KwzgSOQ+j9MTduAeKTIgz6Qa3cAeD92wUBwCV",
	"0Jq/YxVjMU75oqGCz4+/9LzAeYHj3eFIozoXpLkpVRaQnyRpEzYbhfOY4FvkQzLyQBBMgHdTS+j38zPV",
	"9k3atETxF/uHVTynjUVwaT6GHnDkpglcYpTsMqsy1MUMOpef3jkMO3cz5M3EbZUXIBgxR11pTaBDoMzI",
	"h74zART6Do7EZOP0wzAhyPEwvkEiCamyNeRsJwJEFFYx8r1UKkqoC/BUsnQL3t6JdpXtUOxlfyZQxPCm",
	"m1nCZkMdYJs9LQP8yoYwn9ToHJ1mujiBAtiKOtoYop9DPQJhtByKRQQyrcXpW/nZCpXF6on1SOyQQ2me",
	"iMlw5mXnUNHQCwsDWChSgaIhZUTlUjQguayCFHZ13KufJPb1ikN0lFBIRmndlDo/yFwNxo5CAQpFopa1",
	"0VZLAr0Wx3JUKNRAMU8iq4MU2LotTXqTPk1LHZ5+96zdPX+CLM0Sh74Ie3Ci8vuFSjyKv0spUQb+3hyE",
	"Qa1ofJSN/g3C4CfI3E58cD9Mh84Rl53vT1AEyNzKWFIHh/8+fv/OuUYB3JNoy/DwCbKERNRhM0SdW0jm",
	"TtqFxtCTrZuNwN7+W42DTQadxLrceEYP2i62GDUq4uxx+ZLmNQGcNylucZvUV1ocZBU56tPeaoJNFEOL",
	"B/tlGD+3PkGagq4JdvrLVQO6szNycfuDqQHxMuup/sijM/LX7+YXQezk5h/0bv7WNyd5mb5BN18lzjcx",
	"/iQtPtKibNKKIDuqcQpQNjLeDikdL6uf0oJ8VWhl17GvwKzX+Y5c8ZqowGYwRbwaWCUSmsjQcFQycOOE",
	"1R1xr5sC61f6FeQvbK4ZZXOV9+Y7VMrHdRIE8711HF6ujzz18oMixBAI0F+wftc+zdqsz2ra1MatK7FO",
	"m3fjNfLqOxR1FKalyvu7yC4ZOJyIe3t7/1A6MIJ3TXpwKQrzmVpNMlUKYVepqudZb9kUk2k9vRlmZYZx",
	"XtNNMP534/ZdKGnUyqXF8LRdZVZDFuiWebYQLN2zrhXrck7kjMjAVOdgLdRyKT/CWN/LUiLmMbQXCRlC",
	"uPMyoaUGP5ZQyEpNvVR0kop5DI1iIRLXWtg5S/FocdE+Z21XYuSa+wgci4K4ldsSrf5jzW2JDBxv7rtJ",
	"1zBPdtu0U55Ry9InF7blg0xfsQiHNVuZm4lzynJqlo9xukiH6ENgn0cIbI15Wh+22jPsroeq9u6ZbZhq",
	"LfM3hqf2ErDzIamdD0d66XuUUNSGwxGGQjiEESPtl6d6JcsNHriV6+Zt+9Qtz5bvucvu6A2F0BEsVOCx",
	"DI8VRnvQKq3a2O4a321nNygUgl1hSyiM05vyz8SUzxi5jt0brPqelZ+Ykd/vBp0sfQvZaDb6ewF5aj7A",
	"UvZaL6GP6A20Cim310RSQdiYUqC9kO9ukMLy5dgqavDN+iKRAjydQt9BUVZcT6FF/KlhxDrNQjwm26dX",
	"qEKENSOlT8faZ05xggYBvvsERQpU1iNT9fJP02wUAuLN/ql+tENHhaKi+1lOU03d+hDGH1UVua3kkxTf",
	"K+7zSDrkkdAGEX9AvoVXqrReo5FyeXl6UmOhuAeHL+DRdy+/H8JXryfDg0P/xRAcffdyeHT48uXB0cH3",
	"R/v7+66VCSPKvtZL0NMsUruUvyofBZCXpoWgyF4McgeWZjVknclcPbFZkIT6WL+aSJPCU3atJn4vONsX",
	"nE0Z//prHQbmVQ8PSWbLSpFtzzfYlOWoB0l3FKSEqjpv+V4zKrzkojivWX6OCz16YXo2wqS/ALQ2garb",
	"KUUlgQ3mEAgoOd87IPLVw6nr2nMK76VK460Y0ftQKFVpYdA1hvhu5vCpXE1z+eOnz6WR+suG53HZYBMb",
	"3HDf0PP0k7x16KPoO947WIpJo13Vy8rTvIBYNumlF9fHvISwktiSVTePoWbWiZrYXew6Y57KhgU7Ldy9",
	"BslOh+pNu2dm2jUnuFgYdz1jP1X7rk8I62rgtQmLnYnXS8yTtfK6pnH2Ursbdl57Gmdm6VmlHiP5cuDm",
	"E4cfOWl4c6mXpURbA3EqhLGOftHeduwDYB4lbOUN8GZQf+BylyJXdLj6CJblKqFmUmkjuA/503CyOmW7",
	"z4yM4rtZI2lNBtLT95PX6F+a2aPdrexp/5Rcyc2ZCbr7VcdLrV5Xr0x6hqrxDDpvX558hdS6QFH+aukO",
	"s9/2/Gkjch7Zycleee69amufzeGS4ShhMLnWKVKvWguEqUGKRcJapO+h8gBxh7uYJyGST2lHGGwadfoz",
	"06tjUB+tv896HvdZ61FBFi969kqkVyJPTYns9ybTY18f2ttLtteIvQLqFdAOK6BNX8Uu4zr2enAXLmQ3",
	"4Dqmb9IKCMmtWRP68NYduAkJ3LE7Yyym49EowB4IZpiy8av91/uj20ODGoCHsNIvnIM43oOHcC8bYQRi",
	"ZB4gJtivGYF/Mg8hW5f+ErKl0PVQfcdN7hXUAROcsLSWQJp1JFK/BErzp7CzC7kq1/XvblvvG+79kOOI",
	"zfUnFreCXNO0K6H5rXnAHUQ4103DTDeNH56Pjr0fwntGwLno/gPGNzLfkp4nhOApYPAXuB3RtQFjNW6z",
	"m2AHua8I+GNQY72ofxp4/gRvEbx7DGynM68T59qYO435kyQM5z9jFG0b8drE68J7ccidRvv2jYm6udeF",
	"/KdgVuTQnoHp2wBKF7sB+9upb1AD13MO6C6RQ9QnODt9BNtHn3ldolAac+cxv1siICH6ipg/PzXdLut/",
	"Xs+h79uaEXcP5zcgmoDonMF4K6jWp1sJw78UB9o9xIb4FsGt4FTNtBI632dj7B4mo23bhdH6jMEnYAGq",
	"OHeEozeiPmgBwesqI1qcRyR0tM+T5n3k8yiadUgEKUycJZu0zr3mxJYCFO9QiFgrBMsk6fBp5LNtW5GT",
	"bK6VRORMG2X3pEOta1g8VR0/dLsYEkNRSBAINMr8AORB7pqps0oQLIdTvs60Bf55vs9ACTTmJeq3gcuv",
	"oLA+hyfZrlecrMsV3nn/N9kNpzf5KjxdvsqtH3dWJ12Zo5+AeZskyG/dczfM28+9TmuK50fXHl9FVVw+",
	"aiXCbgv642uL6tPxvFUEP+OIUw2lonbiFrH63Ks+FnArTJ9tIvfZl1ta/H8AAAD///mBMZnCNQEA",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// NotificationType is generated from database enum 'notification_type'.
const (
	NotificationTypeGlobal   NotificationType = "global"
	NotificationTypePersonal NotificationType = "personal"
)

// AllNotificationTypeValues returns all possible values for NotificationType.
func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypeGlobal,
		NotificationTypePersonal,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// Project is generated from projects table.
const (
	ProjectDemo    Project = "demo"
	ProjectDemoTwo Project = "demo_two"
)

// AllProjectValues returns all possible values for Project.
func AllProjectValues() []Project {
	return []Project{
		ProjectDemo,
		ProjectDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// WorkItemRole is generated from database enum 'work_item_role'.
const (
	WorkItemRolePreparer WorkItemRole = "preparer"
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// AllWorkItemRoleValues returns all possible values for WorkItemRole.
func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

/* Ignoring existing struct (rest/models.go) Activity */

// AnyValue represents any value, including `null`
type AnyValue = interface{}

/* Ignoring existing struct (rest/models.go) CacheDemoWorkItem */

/* Ignoring existing struct (rest/models.go) CreateActivityRequest */

/* Ignoring existing struct (rest/models.go) CreateDemoTwoWorkItemRequest */

/* Ignoring existing struct (rest/models.go) CreateDemoWorkItemRequest */

/* Ignoring existing struct (rest/models.go) CreateProjectBoardRequest */

/* Ignoring existing struct (rest/models.go) CreateTeamRequest */

/* Ignoring existing struct (rest/models.go) CreateTimeEntryRequest */

/* Ignoring existing struct (rest/models.go) CreateWorkItemCommentRequest */

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

/* Ignoring existing struct (rest/models.go) CreateWorkItemTagRequest */

/* Ignoring existing struct (rest/models.go) CreateWorkItemTypeRequest */

/* Skipping definition of db struct DbActivity */

/* Skipping definition of db struct DbActivityCreateParams */

/* Skipping definition of db struct DbCacheDemoWorkItemJoins */

/* Skipping definition of db struct DbDemoTwoWorkItem */

/* Skipping definition of db struct DbDemoTwoWorkItemCreateParams */

/* Skipping definition of db struct DbDemoWorkItem */

/* Skipping definition of db struct DbDemoWorkItemCreateParams */

/* Skipping definition of db struct DbKanbanStep */

/* Skipping definition of db struct DbNotification */

/* Skipping definition of db struct DbNotificationID */

/* Skipping definition of db struct DbProject */

/* Skipping definition of db struct DbProjectID */

/* Skipping definition of db struct DbTeam */

/* Skipping definition of db struct DbTeamCreateParams */

/* Skipping definition of db struct DbTimeEntry */

/* Skipping definition of db struct DbUser */

/* Skipping definition of db struct DbUserAPIKey */

/* Skipping definition of db struct DbUserID */

/* Skipping definition of db struct DbUserJoins */

/* Skipping definition of db struct DbUserNotification */

/* Skipping definition of db struct DbUserWIAUWorkItem */

/* Skipping definition of db struct DbUserWIAWorkItem */

/* Skipping definition of db struct DbWorkItem */

/* Skipping definition of db struct DbWorkItemComment */

/* Skipping definition of db struct DbWorkItemCreateParams */

/* Skipping definition of db struct DbWorkItemID */

/* Skipping definition of db struct DbWorkItemM2MAssigneeWIA */

/* Skipping definition of db struct DbWorkItemRole */

/* Skipping definition of db struct DbWorkItemTag */

/* Skipping definition of db struct DbWorkItemTagCreateParams */

/* Skipping definition of db struct DbWorkItemType */

/* Skipping definition of db struct DbWorkItemTypeID */

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

/* Ignoring existing struct (rest/models.go) DemoTwoWorkItem */

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

/* Ignoring existing struct (rest/models.go) DemoWorkItem */

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

/* Ignoring existing struct (rest/models.go) GetCacheDemoWorkItemQueryParameters */

/* Ignoring existing struct (rest/models.go) GetCurrentUserQueryParameters */

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

/* Ignoring existing struct (rest/models.go) Notification */

// NotificationType is generated from database enum 'notification_type'.
type NotificationType string

/* Ignoring existing struct (rest/models.go) PaginatedDemoWorkItemsResponse */

/* Ignoring existing struct (rest/models.go) PaginatedNotificationsResponse */

/* Ignoring existing struct (rest/models.go) PaginatedUsersResponse */

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the db column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

/* Ignoring existing struct (rest/models.go) PaginationPage */

// Project is generated from projects table.
type Project string

/* Ignoring existing struct (rest/models.go) ProjectBoard */

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

/* Ignoring existing struct (rest/models.go) ServicesMember */

/* Ignoring existing struct (rest/models.go) SharedWorkItemJoins */

/* Ignoring existing struct (rest/models.go) Team */

/* Ignoring existing struct (rest/models.go) TimeEntry */

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

/* Ignoring existing struct (rest/models.go) UpdateActivityRequest */

/* Ignoring existing struct (rest/models.go) UpdateTeamRequest */

/* Ignoring existing struct (rest/models.go) UpdateTimeEntryRequest */

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

/* Ignoring existing struct (rest/models.go) UpdateWorkItemCommentRequest */

/* Ignoring existing struct (rest/models.go) UpdateWorkItemTagRequest */

/* Ignoring existing struct (rest/models.go) UpdateWorkItemTypeRequest */

/* Ignoring existing struct (rest/models.go) User */

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItem defines the model for WorkItem.
type WorkItem struct {
	union           json.RawMessage
	FromQueryParams bool
}

/* Ignoring existing struct (rest/models.go) WorkItemBase */

/* Ignoring existing struct (rest/models.go) WorkItemComment */

// WorkItemRole is generated from database enum 'work_item_role'.
type WorkItemRole string

/* Ignoring existing struct (rest/models.go) WorkItemTag */

/* Ignoring existing struct (rest/models.go) WorkItemType */

// ProjectName is generated from projects table.
type ProjectName = Project

// UUID defines the model for UUID.
type UUID = uuid.UUID

// Ignoring parameter definition for MyProviderLoginParams.

// Ignoring parameter definition for EventsParams.

// Ignoring parameter definition for GetPaginatedNotificationsParams.

// Ignoring parameter definition for GetProjectWorkitemsParams.

// Ignoring parameter definition for GetPaginatedUsersParams.

// Ignoring parameter definition for GetPaginatedWorkItemParams.

/* Ignoring body for existing struct (rest/models.go) UpdateActivityRequest */

/* Ignoring body for existing struct (rest/models.go) CreateActivityRequest */

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

/* Ignoring body for existing struct (rest/models.go) CreateProjectBoardRequest */

/* Ignoring body for existing struct (rest/models.go) CreateTeamRequest */

/* Ignoring body for existing struct (rest/models.go) CreateWorkItemTagRequest */

/* Ignoring body for existing struct (rest/models.go) CreateWorkItemTypeRequest */

/* Ignoring body for existing struct (rest/models.go) UpdateTeamRequest */

/* Ignoring body for existing struct (rest/models.go) CreateTimeEntryRequest */

/* Ignoring body for existing struct (rest/models.go) UpdateTimeEntryRequest */

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

/* Ignoring body for existing struct (rest/models.go) UpdateWorkItemTagRequest */

/* Ignoring body for existing struct (rest/models.go) UpdateWorkItemTypeRequest */

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

/* Ignoring body for existing struct (rest/models.go) CreateWorkItemCommentRequest */

/* Ignoring body for existing struct (rest/models.go) UpdateWorkItemCommentRequest */

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//m3Z6X7FpAQA=",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

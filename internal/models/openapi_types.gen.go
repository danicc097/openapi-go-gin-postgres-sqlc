// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// NotificationType is generated from database enum 'notification_type'.
const (
	NotificationTypeGlobal   NotificationType = "global"
	NotificationTypePersonal NotificationType = "personal"
)

// AllNotificationTypeValues returns all possible values for NotificationType.
func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypeGlobal,
		NotificationTypePersonal,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// Project is generated from projects table.
const (
	ProjectDemo    Project = "demo"
	ProjectDemoTwo Project = "demo_two"
)

// AllProjectValues returns all possible values for Project.
func AllProjectValues() []Project {
	return []Project{
		ProjectDemo,
		ProjectDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// WorkItemRole is generated from database enum 'work_item_role'.
const (
	WorkItemRolePreparer WorkItemRole = "preparer"
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// AllWorkItemRoleValues returns all possible values for WorkItemRole.
func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

// Activity defines the model for Activity.
type Activity struct {
	ActivityID   int        `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    int        `json:"projectID"`
}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           DbWorkItemCreateParams        `json:"base"`
	DemoTwoProject DbDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember              `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
	TagIDs      []int   `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        DbWorkItemCreateParams     `json:"base"`
	DemoProject DbDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember           `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
	TagIDs      []int   `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]DbWorkItemTagCreateParams `json:"tags"`
	Teams *[]DbTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string   `json:"message"`
	UserID     DbUserID `json:"userID"`
	WorkItemID int      `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbActivity defines the model for DbActivity.
type DbActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// DbActivityCreateParams defines the model for DbActivityCreateParams.
type DbActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// DbCacheDemoWorkItemJoins defines the model for DbCacheDemoWorkItemJoins.
type DbCacheDemoWorkItemJoins struct {
	Assignees        bool `json:"assignees"`
	KanbanStep       bool `json:"kanbanStep"`
	Team             bool `json:"team"`
	TimeEntries      bool `json:"timeEntries"`
	WorkItemComments bool `json:"workItemComments"`
	WorkItemTags     bool `json:"workItemTags"`
	WorkItemType     bool `json:"workItemType"`
}

// DbDemoTwoWorkItem defines the model for DbDemoTwoWorkItem.
type DbDemoTwoWorkItem struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
	WorkItemID            int        `json:"workItemID"`
}

// DbDemoTwoWorkItemCreateParams defines the model for DbDemoTwoWorkItemCreateParams.
type DbDemoTwoWorkItemCreateParams struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
}

// DbDemoWorkItem defines the model for DbDemoWorkItem.
type DbDemoWorkItem struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
	WorkItemID    int       `json:"workItemID"`
}

// DbDemoWorkItemCreateParams defines the model for DbDemoWorkItemCreateParams.
type DbDemoWorkItemCreateParams struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
}

// DbKanbanStep defines the model for DbKanbanStep.
type DbKanbanStep struct {
	Color         string `json:"color"`
	Description   string `json:"description"`
	KanbanStepID  int    `json:"kanbanStepID"`
	Name          string `json:"name"`
	ProjectID     int    `json:"projectID"`
	StepOrder     int    `json:"stepOrder"`
	TimeTrackable bool   `json:"timeTrackable"`
}

// DbNotification defines the model for DbNotification.
type DbNotification struct {
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Labels         []string  `json:"labels"`
	Link           *string   `json:"link"`
	NotificationID int       `json:"notificationID"`

	// NotificationType is generated from database enum 'notification_type'.
	NotificationType NotificationType `json:"notificationType"`
	Receiver         *DbUserID        `json:"receiver,omitempty"`
	Sender           DbUserID         `json:"sender"`
	Title            string           `json:"title"`
}

// DbNotificationID defines the model for DbNotificationID.
type DbNotificationID = interface{}

// DbProject defines the model for DbProject.
type DbProject struct {
	BoardConfig ProjectConfig `json:"boardConfig"`
	CreatedAt   time.Time     `json:"createdAt"`
	Description string        `json:"description"`

	// Name is generated from projects table.
	Name      Project   `json:"name"`
	ProjectID int       `json:"projectID"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// DbProjectID defines the model for DbProjectID.
type DbProjectID = interface{}

// DbTeam defines the model for DbTeam.
type DbTeam struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// DbTeamCreateParams defines the model for DbTeamCreateParams.
type DbTeamCreateParams struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbTimeEntry defines the model for DbTimeEntry.
type DbTimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// DbUser defines the model for DbUser.
type DbUser struct {
	Age                      *int       `json:"age"`
	CreatedAt                time.Time  `json:"createdAt"`
	DeletedAt                *time.Time `json:"deletedAt"`
	Email                    string     `json:"email"`
	FirstName                *string    `json:"firstName"`
	FullName                 *string    `json:"fullName"`
	HasGlobalNotifications   bool       `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool       `json:"hasPersonalNotifications"`
	LastName                 *string    `json:"lastName"`
	Scopes                   Scopes     `json:"scopes"`
	UpdatedAt                time.Time  `json:"updatedAt"`
	UserID                   DbUserID   `json:"userID"`
	Username                 string     `json:"username"`
}

// DbUserAPIKey defines the model for DbUserAPIKey.
type DbUserAPIKey struct {
	ApiKey    string    `json:"apiKey"`
	ExpiresOn time.Time `json:"expiresOn"`
	UserID    DbUserID  `json:"userID"`
}

// DbUserID defines the model for DbUserID.
type DbUserID = uuid.UUID

// DbUserJoins defines the model for DbUserJoins.
type DbUserJoins struct {
	AssigneeWorkItems     bool `json:"assigneeWorkItems"`
	MemberProjects        bool `json:"memberProjects"`
	MemberTeams           bool `json:"memberTeams"`
	ReceiverNotifications bool `json:"receiverNotifications"`
	SenderNotifications   bool `json:"senderNotifications"`
	TimeEntries           bool `json:"timeEntries"`
	UserAPIKey            bool `json:"userAPIKey"`
	UserNotifications     bool `json:"userNotifications"`
	WorkItemComments      bool `json:"workItemComments"`
}

// DbUserNotification defines the model for DbUserNotification.
type DbUserNotification struct {
	NotificationID     int      `json:"notificationID"`
	Read               bool     `json:"read"`
	UserID             DbUserID `json:"userID"`
	UserNotificationID int      `json:"userNotificationID"`
}

// DbUserWIAUWorkItem defines the model for DbUserWIAUWorkItem.
type DbUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbUserWIAWorkItem defines the model for DbUserWIAWorkItem.
type DbUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItem defines the model for DbWorkItem.
type DbWorkItem struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     int                    `json:"workItemID"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemComment defines the model for DbWorkItemComment.
type DbWorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// DbWorkItemCreateParams defines the model for DbWorkItemCreateParams.
type DbWorkItemCreateParams struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemID defines the model for DbWorkItemID.
type DbWorkItemID = interface{}

// DbWorkItemM2MAssigneeWIA defines the model for DbWorkItemM2MAssigneeWIA.
type DbWorkItemM2MAssigneeWIA struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItemRole defines the model for DbWorkItemRole.
type DbWorkItemRole = string

// DbWorkItemTag defines the model for DbWorkItemTag.
type DbWorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// DbWorkItemTagCreateParams defines the model for DbWorkItemTagCreateParams.
type DbWorkItemTagCreateParams struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbWorkItemType defines the model for DbWorkItemType.
type DbWorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// DbWorkItemTypeID defines the model for DbWorkItemTypeID.
type DbWorkItemTypeID = interface{}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItem defines the model for DemoTwoWorkItem.
type DemoTwoWorkItem struct {
	ClosedAt        *time.Time                  `json:"closedAt"`
	CreatedAt       time.Time                   `json:"createdAt"`
	DeletedAt       *time.Time                  `json:"deletedAt"`
	DemoTwoWorkItem DbDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                      `json:"description"`
	KanbanStepID    int                         `json:"kanbanStepID"`
	Members         *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItem defines the model for DemoWorkItem.
type DemoWorkItem struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	DemoWorkItem DbDemoWorkItem              `json:"demoWorkItem"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *DbCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *DbUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// Notification defines the model for Notification.
type Notification struct {
	Notification       DbNotification `json:"notification"`
	NotificationID     int            `json:"notificationID"`
	Read               bool           `json:"read"`
	UserID             DbUserID       `json:"userID"`
	UserNotificationID int            `json:"userNotificationID"`
}

// NotificationType is generated from database enum 'notification_type'.
type NotificationType string

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]Notification `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]User        `json:"items"`
	Page  PaginationPage `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// Project is generated from projects table.
type Project string

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID DbUserID     `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]DbTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]DbWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]DbWorkItemTag            `json:"workItemTags"`
	WorkItemType     *DbWorkItemType             `json:"workItemType,omitempty"`
}

// Team defines the model for Team.
type Team struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntry defines the model for TimeEntry.
type TimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *int       `json:"activityID,omitempty"`
	Comment         *string    `json:"comment,omitempty"`
	DurationMinutes *int       `json:"durationMinutes"`
	Start           *time.Time `json:"start,omitempty"`
	TeamID          *int       `json:"teamID"`
	UserID          *DbUserID  `json:"userID,omitempty"`
	WorkItemID      *int       `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string   `json:"message,omitempty"`
	UserID     *DbUserID `json:"userID,omitempty"`
	WorkItemID *int      `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// User defines the model for User.
type User struct {
	Age                      *int          `json:"age"`
	ApiKey                   *DbUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time     `json:"createdAt"`
	DeletedAt                *time.Time    `json:"deletedAt"`
	Email                    string        `json:"email"`
	FirstName                *string       `json:"firstName"`
	FullName                 *string       `json:"fullName"`
	HasGlobalNotifications   bool          `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool          `json:"hasPersonalNotifications"`
	LastName                 *string       `json:"lastName"`
	Projects                 *[]DbProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role      `json:"role"`
	Scopes    Scopes    `json:"scopes"`
	Teams     *[]DbTeam `json:"teams"`
	UpdatedAt time.Time `json:"updatedAt"`
	UserID    DbUserID  `json:"userID"`
	Username  string    `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItem defines the model for WorkItem.
type WorkItem struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// WorkItemComment defines the model for WorkItemComment.
type WorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// WorkItemRole is generated from database enum 'work_item_role'.
type WorkItemRole string

// WorkItemTag defines the model for WorkItemTag.
type WorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// WorkItemType defines the model for WorkItemType.
type WorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// ProjectName is generated from projects table.
type ProjectName = Project

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName Project `form:"projectName" json:"projectName"`
	Topics      Topics  `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    string    `form:"cursor" json:"cursor"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      string                            `form:"cursor" json:"cursor"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
	Filter      *struct {
		Bools   *[]bool `json:"bools,omitempty"`
		Ints    *[]int  `json:"ints,omitempty"`
		Objects *[]struct {
			NestedObj *string `json:"nestedObj,omitempty"`
		} `json:"objects,omitempty"`
		Post *[]string `json:"post,omitempty"`
	} `json:"filter,omitempty"`
	Nested *struct {
		Obj *struct {
			NestedObj *string `json:"nestedObj,omitempty"`
		} `json:"obj,omitempty"`
	} `json:"nested,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItem returns the union data inside the WorkItem as a DemoWorkItem
func (t WorkItem) AsDemoWorkItem() (DemoWorkItem, error) {
	var body DemoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItem returns the union data inside the WorkItem as a DemoTwoWorkItem
func (t WorkItem) AsDemoTwoWorkItem() (DemoTwoWorkItem, error) {
	var body DemoTwoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoTwoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItem()
	case "demo_two":
		return t.AsDemoTwoWorkItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

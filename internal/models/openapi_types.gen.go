// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	uuid "github.com/google/uuid"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// NotificationType is generated from database enum 'notification_type'.
const (
	NotificationTypeGlobal   NotificationType = "global"
	NotificationTypePersonal NotificationType = "personal"
)

// AllNotificationTypeValues returns all possible values for NotificationType.
func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypeGlobal,
		NotificationTypePersonal,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// Project is generated from projects table.
const (
	ProjectDemo    Project = "demo"
	ProjectDemoTwo Project = "demo_two"
)

// AllProjectValues returns all possible values for Project.
func AllProjectValues() []Project {
	return []Project{
		ProjectDemo,
		ProjectDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// WorkItemRole is generated from database enum 'work_item_role'.
const (
	WorkItemRolePreparer WorkItemRole = "preparer"
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// AllWorkItemRoleValues returns all possible values for WorkItemRole.
func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

// Activity defines the model for Activity.
type Activity struct {
	ActivityID   int        `json:"activityID"`
	DeletedAt    *time.Time `json:"deletedAt"`
	Description  string     `json:"description"`
	IsProductive bool       `json:"isProductive"`
	Name         string     `json:"name"`
	ProjectID    int        `json:"projectID"`
}

// AnyValue represents any value, including `null`
type AnyValue = interface{}

// CreateActivityRequest defines the model for CreateActivityRequest.
type CreateActivityRequest struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
}

// CreateDemoTwoWorkItemRequest defines the model for CreateDemoTwoWorkItemRequest.
type CreateDemoTwoWorkItemRequest struct {
	Base           DbWorkItemCreateParams        `json:"base"`
	DemoTwoProject DbDemoTwoWorkItemCreateParams `json:"demoTwoProject"`
	Members        []ServicesMember              `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
	TagIDs      []int   `json:"tagIDs"`
}

// CreateDemoWorkItemRequest defines the model for CreateDemoWorkItemRequest.
type CreateDemoWorkItemRequest struct {
	Base        DbWorkItemCreateParams     `json:"base"`
	DemoProject DbDemoWorkItemCreateParams `json:"demoProject"`
	Members     []ServicesMember           `json:"members"`

	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
	TagIDs      []int   `json:"tagIDs"`
}

// CreateProjectBoardRequest defines the model for CreateProjectBoardRequest.
type CreateProjectBoardRequest struct {
	Tags  *[]DbWorkItemTagCreateParams `json:"tags"`
	Teams *[]DbTeamCreateParams        `json:"teams"`
}

// CreateTeamRequest defines the model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateTimeEntryRequest defines the model for CreateTimeEntryRequest.
type CreateTimeEntryRequest struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// CreateWorkItemCommentRequest defines the model for CreateWorkItemCommentRequest.
type CreateWorkItemCommentRequest struct {
	Message    string   `json:"message"`
	UserID     DbUserID `json:"userID"`
	WorkItemID int      `json:"workItemID"`
}

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

// CreateWorkItemTagRequest defines the model for CreateWorkItemTagRequest.
type CreateWorkItemTagRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateWorkItemTypeRequest defines the model for CreateWorkItemTypeRequest.
type CreateWorkItemTypeRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbActivity defines the model for DbActivity.
type DbActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// DbActivityCreateParams defines the model for DbActivityCreateParams.
type DbActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// DbCacheDemoWorkItemJoins defines the model for DbCacheDemoWorkItemJoins.
type DbCacheDemoWorkItemJoins struct {
	Assignees        bool `json:"assignees"`
	KanbanStep       bool `json:"kanbanStep"`
	Team             bool `json:"team"`
	TimeEntries      bool `json:"timeEntries"`
	WorkItemComments bool `json:"workItemComments"`
	WorkItemTags     bool `json:"workItemTags"`
	WorkItemType     bool `json:"workItemType"`
}

// DbDemoTwoWorkItem defines the model for DbDemoTwoWorkItem.
type DbDemoTwoWorkItem struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
	WorkItemID            int        `json:"workItemID"`
}

// DbDemoTwoWorkItemCreateParams defines the model for DbDemoTwoWorkItemCreateParams.
type DbDemoTwoWorkItemCreateParams struct {
	CustomDateForProject2 *time.Time `json:"customDateForProject2"`
}

// DbDemoWorkItem defines the model for DbDemoWorkItem.
type DbDemoWorkItem struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
	WorkItemID    int       `json:"workItemID"`
}

// DbDemoWorkItemCreateParams defines the model for DbDemoWorkItemCreateParams.
type DbDemoWorkItemCreateParams struct {
	LastMessageAt time.Time `json:"lastMessageAt"`
	Line          string    `json:"line"`
	Ref           string    `json:"ref"`
	Reopened      bool      `json:"reopened"`
}

// DbKanbanStep defines the model for DbKanbanStep.
type DbKanbanStep struct {
	Color         string `json:"color"`
	Description   string `json:"description"`
	KanbanStepID  int    `json:"kanbanStepID"`
	Name          string `json:"name"`
	ProjectID     int    `json:"projectID"`
	StepOrder     int    `json:"stepOrder"`
	TimeTrackable bool   `json:"timeTrackable"`
}

// DbNotification defines the model for DbNotification.
type DbNotification struct {
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Labels         []string  `json:"labels"`
	Link           *string   `json:"link"`
	NotificationID int       `json:"notificationID"`

	// NotificationType is generated from database enum 'notification_type'.
	NotificationType NotificationType `json:"notificationType"`
	Receiver         *DbUserID        `json:"receiver,omitempty"`
	Sender           DbUserID         `json:"sender"`
	Title            string           `json:"title"`
}

// DbNotificationID defines the model for DbNotificationID.
type DbNotificationID = interface{}

// DbProject defines the model for DbProject.
type DbProject struct {
	BoardConfig ProjectConfig `json:"boardConfig"`
	CreatedAt   time.Time     `json:"createdAt"`
	Description string        `json:"description"`

	// Name is generated from projects table.
	Name      Project   `json:"name"`
	ProjectID int       `json:"projectID"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// DbProjectID defines the model for DbProjectID.
type DbProjectID = interface{}

// DbTeam defines the model for DbTeam.
type DbTeam struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// DbTeamCreateParams defines the model for DbTeamCreateParams.
type DbTeamCreateParams struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbTimeEntry defines the model for DbTimeEntry.
type DbTimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// DbUser defines the model for DbUser.
type DbUser struct {
	Age                      *int       `json:"age"`
	CreatedAt                time.Time  `json:"createdAt"`
	DeletedAt                *time.Time `json:"deletedAt"`
	Email                    string     `json:"email"`
	FirstName                *string    `json:"firstName"`
	FullName                 *string    `json:"fullName"`
	HasGlobalNotifications   bool       `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool       `json:"hasPersonalNotifications"`
	LastName                 *string    `json:"lastName"`
	Scopes                   Scopes     `json:"scopes"`
	UpdatedAt                time.Time  `json:"updatedAt"`
	UserID                   DbUserID   `json:"userID"`
	Username                 string     `json:"username"`
}

// DbUserAPIKey defines the model for DbUserAPIKey.
type DbUserAPIKey struct {
	ApiKey    string    `json:"apiKey"`
	ExpiresOn time.Time `json:"expiresOn"`
	UserID    DbUserID  `json:"userID"`
}

// DbUserID defines the model for DbUserID.
type DbUserID = uuid.UUID

// DbUserJoins defines the model for DbUserJoins.
type DbUserJoins struct {
	AssigneeWorkItems     bool `json:"assigneeWorkItems"`
	MemberProjects        bool `json:"memberProjects"`
	MemberTeams           bool `json:"memberTeams"`
	ReceiverNotifications bool `json:"receiverNotifications"`
	SenderNotifications   bool `json:"senderNotifications"`
	TimeEntries           bool `json:"timeEntries"`
	UserAPIKey            bool `json:"userAPIKey"`
	UserNotifications     bool `json:"userNotifications"`
	WorkItemComments      bool `json:"workItemComments"`
}

// DbUserNotification defines the model for DbUserNotification.
type DbUserNotification struct {
	NotificationID     int      `json:"notificationID"`
	Read               bool     `json:"read"`
	UserID             DbUserID `json:"userID"`
	UserNotificationID int      `json:"userNotificationID"`
}

// DbUserWIAUWorkItem defines the model for DbUserWIAUWorkItem.
type DbUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbUserWIAWorkItem defines the model for DbUserWIAWorkItem.
type DbUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItem defines the model for DbWorkItem.
type DbWorkItem struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	CreatedAt      time.Time              `json:"createdAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	WorkItemID     int                    `json:"workItemID"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemComment defines the model for DbWorkItemComment.
type DbWorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// DbWorkItemCreateParams defines the model for DbWorkItemCreateParams.
type DbWorkItemCreateParams struct {
	ClosedAt       *time.Time             `json:"closedAt"`
	Description    string                 `json:"description"`
	KanbanStepID   int                    `json:"kanbanStepID"`
	Metadata       map[string]interface{} `json:"metadata"`
	TargetDate     time.Time              `json:"targetDate"`
	TeamID         int                    `json:"teamID"`
	Title          string                 `json:"title"`
	WorkItemTypeID int                    `json:"workItemTypeID"`
}

// DbWorkItemID defines the model for DbWorkItemID.
type DbWorkItemID = interface{}

// DbWorkItemM2MAssigneeWIA defines the model for DbWorkItemM2MAssigneeWIA.
type DbWorkItemM2MAssigneeWIA struct {
	// Role is generated from database enum 'work_item_role'.
	Role WorkItemRole `json:"role"`
	User DbUser       `json:"user"`
}

// DbWorkItemRole defines the model for DbWorkItemRole.
type DbWorkItemRole = string

// DbWorkItemTag defines the model for DbWorkItemTag.
type DbWorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// DbWorkItemTagCreateParams defines the model for DbWorkItemTagCreateParams.
type DbWorkItemTagCreateParams struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DbWorkItemType defines the model for DbWorkItemType.
type DbWorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// DbWorkItemTypeID defines the model for DbWorkItemTypeID.
type DbWorkItemTypeID = interface{}

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

// DemoTwoWorkItem defines the model for DemoTwoWorkItem.
type DemoTwoWorkItem struct {
	ClosedAt        *time.Time                  `json:"closedAt"`
	CreatedAt       time.Time                   `json:"createdAt"`
	DeletedAt       *time.Time                  `json:"deletedAt"`
	DemoTwoWorkItem DbDemoTwoWorkItem           `json:"demoTwoWorkItem"`
	Description     string                      `json:"description"`
	KanbanStepID    int                         `json:"kanbanStepID"`
	Members         *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata        map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

// DemoWorkItem defines the model for DemoWorkItem.
type DemoWorkItem struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	DemoWorkItem DbDemoWorkItem              `json:"demoWorkItem"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

// GetCacheDemoWorkItemQueryParameters defines the model for GetCacheDemoWorkItemQueryParameters.
type GetCacheDemoWorkItemQueryParameters struct {
	Joins *DbCacheDemoWorkItemJoins `json:"joins,omitempty"`
}

// GetCurrentUserQueryParameters defines the model for GetCurrentUserQueryParameters.
type GetCurrentUserQueryParameters struct {
	Joins *DbUserJoins `json:"joins,omitempty"`
}

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            ErrorCode            `json:"type"`
	ValidationError *HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// Notification defines the model for Notification.
type Notification struct {
	Notification       DbNotification `json:"notification"`
	NotificationID     int            `json:"notificationID"`
	Read               bool           `json:"read"`
	UserID             DbUserID       `json:"userID"`
	UserNotificationID int            `json:"userNotificationID"`
}

// NotificationType is generated from database enum 'notification_type'.
type NotificationType string

// PaginatedNotificationsResponse defines the model for PaginatedNotificationsResponse.
type PaginatedNotificationsResponse struct {
	Items *[]Notification `json:"items"`
	Page  PaginationPage  `json:"page"`
}

// PaginatedUsersResponse defines the model for PaginatedUsersResponse.
type PaginatedUsersResponse struct {
	Items *[]User        `json:"items"`
	Page  PaginationPage `json:"page"`
}

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *PaginationFilter `json:"filter,omitempty"`
	Sort   *Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the db column
	Column    string    `json:"column"`
	Direction Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode PaginationFilterModes `json:"filterMode"`
	Value      *[]string             `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                 `json:"caseSensitive"`
	FilterMode    PaginationFilterModes `json:"filterMode"`
	Value         *string               `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]Pagination

// PaginationPage defines the model for PaginationPage.
type PaginationPage struct {
	NextCursor *string `json:"nextCursor,omitempty"`
}

// Project is generated from projects table.
type Project string

// ProjectBoard defines the model for ProjectBoard.
type ProjectBoard struct {
	// ProjectName is generated from projects table.
	ProjectName Project `json:"projectName"`
}

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]ProjectConfigField   `json:"fields,omitempty"`
	Header        *[]string               `json:"header,omitempty"`
	Visualization *map[string]interface{} `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   WorkItemRole `json:"role"`
	UserID DbUserID     `json:"userID"`
}

// SharedWorkItemJoins defines the model for SharedWorkItemJoins.
type SharedWorkItemJoins struct {
	Members          *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	TimeEntries      *[]DbTimeEntry              `json:"timeEntries"`
	WorkItemComments *[]DbWorkItemComment        `json:"workItemComments"`
	WorkItemTags     *[]DbWorkItemTag            `json:"workItemTags"`
	WorkItemType     *DbWorkItemType             `json:"workItemType,omitempty"`
}

// Team defines the model for Team.
type Team struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Name        string    `json:"name"`
	ProjectID   int       `json:"projectID"`
	TeamID      int       `json:"teamID"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

// TimeEntry defines the model for TimeEntry.
type TimeEntry struct {
	ActivityID      int       `json:"activityID"`
	Comment         string    `json:"comment"`
	DurationMinutes *int      `json:"durationMinutes"`
	Start           time.Time `json:"start"`
	TeamID          *int      `json:"teamID"`
	TimeEntryID     int       `json:"timeEntryID"`
	UserID          DbUserID  `json:"userID"`
	WorkItemID      *int      `json:"workItemID"`
}

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []Topic

// UpdateActivityRequest defines the model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Description  *string `json:"description,omitempty"`
	IsProductive *bool   `json:"isProductive,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// UpdateTeamRequest defines the model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateTimeEntryRequest defines the model for UpdateTimeEntryRequest.
type UpdateTimeEntryRequest struct {
	ActivityID      *int       `json:"activityID,omitempty"`
	Comment         *string    `json:"comment,omitempty"`
	DurationMinutes *int       `json:"durationMinutes"`
	Start           *time.Time `json:"start,omitempty"`
	TeamID          *int       `json:"teamID"`
	UserID          *DbUserID  `json:"userID,omitempty"`
	WorkItemID      *int       `json:"workItemID"`
}

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *Role   `json:"role,omitempty"`
	Scopes *Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

// UpdateWorkItemCommentRequest defines the model for UpdateWorkItemCommentRequest.
type UpdateWorkItemCommentRequest struct {
	Message    *string   `json:"message,omitempty"`
	UserID     *DbUserID `json:"userID,omitempty"`
	WorkItemID *int      `json:"workItemID,omitempty"`
}

// UpdateWorkItemTagRequest defines the model for UpdateWorkItemTagRequest.
type UpdateWorkItemTagRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// UpdateWorkItemTypeRequest defines the model for UpdateWorkItemTypeRequest.
type UpdateWorkItemTypeRequest struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// User defines the model for User.
type User struct {
	Age                      *int          `json:"age"`
	ApiKey                   *DbUserAPIKey `json:"apiKey,omitempty"`
	CreatedAt                time.Time     `json:"createdAt"`
	DeletedAt                *time.Time    `json:"deletedAt"`
	Email                    string        `json:"email"`
	FirstName                *string       `json:"firstName"`
	FullName                 *string       `json:"fullName"`
	HasGlobalNotifications   bool          `json:"hasGlobalNotifications"`
	HasPersonalNotifications bool          `json:"hasPersonalNotifications"`
	LastName                 *string       `json:"lastName"`
	Projects                 *[]DbProject  `json:"projects"`

	// Role is generated from roles.json keys.
	Role      Role      `json:"role"`
	Scopes    Scopes    `json:"scopes"`
	Teams     *[]DbTeam `json:"teams"`
	UpdatedAt time.Time `json:"updatedAt"`
	UserID    DbUserID  `json:"userID"`
	Username  string    `json:"username"`
}

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItem defines the model for WorkItem.
type WorkItem struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemBase defines the model for WorkItemBase.
type WorkItemBase struct {
	ClosedAt     *time.Time                  `json:"closedAt"`
	CreatedAt    time.Time                   `json:"createdAt"`
	DeletedAt    *time.Time                  `json:"deletedAt"`
	Description  string                      `json:"description"`
	KanbanStepID int                         `json:"kanbanStepID"`
	Members      *[]DbWorkItemM2MAssigneeWIA `json:"members"`
	Metadata     map[string]interface{}      `json:"metadata"`

	// ProjectName is generated from projects table.
	ProjectName      Project              `json:"projectName"`
	TargetDate       time.Time            `json:"targetDate"`
	TeamID           *int                 `json:"teamID"`
	TimeEntries      *[]DbTimeEntry       `json:"timeEntries"`
	Title            string               `json:"title"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	WorkItemComments *[]DbWorkItemComment `json:"workItemComments"`
	WorkItemID       int                  `json:"workItemID"`
	WorkItemTags     *[]DbWorkItemTag     `json:"workItemTags"`
	WorkItemType     *DbWorkItemType      `json:"workItemType,omitempty"`
	WorkItemTypeID   int                  `json:"workItemTypeID"`
}

// WorkItemComment defines the model for WorkItemComment.
type WorkItemComment struct {
	CreatedAt         time.Time `json:"createdAt"`
	Message           string    `json:"message"`
	UpdatedAt         time.Time `json:"updatedAt"`
	UserID            DbUserID  `json:"userID"`
	WorkItemCommentID int       `json:"workItemCommentID"`
	WorkItemID        int       `json:"workItemID"`
}

// WorkItemRole is generated from database enum 'work_item_role'.
type WorkItemRole string

// WorkItemTag defines the model for WorkItemTag.
type WorkItemTag struct {
	Color         string     `json:"color"`
	DeletedAt     *time.Time `json:"deletedAt"`
	Description   string     `json:"description"`
	Name          string     `json:"name"`
	ProjectID     int        `json:"projectID"`
	WorkItemTagID int        `json:"workItemTagID"`
}

// WorkItemType defines the model for WorkItemType.
type WorkItemType struct {
	Color          string `json:"color"`
	Description    string `json:"description"`
	Name           string `json:"name"`
	ProjectID      int    `json:"projectID"`
	WorkItemTypeID int    `json:"workItemTypeID"`
}

// ProjectName is generated from projects table.
type ProjectName = Project

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName Project `form:"projectName" json:"projectName"`
	Topics      Topics  `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int       `form:"limit" json:"limit"`
	Direction Direction `form:"direction" json:"direction"`
	Cursor    *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                               `form:"limit" json:"limit"`
	Direction   Direction                         `form:"direction" json:"direction"`
	Cursor      *string                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                            `form:"column" json:"column"`
	SearchQuery *GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateWorkItemRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsCreateDemoWorkItemRequest()
	case "demo_two":
		return t.AsCreateDemoTwoWorkItemRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"filterMode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationFilter) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "between":
		return t.AsPaginationFilterArray()
	case "betweenInclusive":
		return t.AsPaginationFilterArray()
	case "contains":
		return t.AsPaginationFilterPrimitive()
	case "empty":
		return t.AsPaginationFilterPrimitive()
	case "endsWith":
		return t.AsPaginationFilterPrimitive()
	case "equals":
		return t.AsPaginationFilterPrimitive()
	case "fuzzy":
		return t.AsPaginationFilterPrimitive()
	case "greaterThan":
		return t.AsPaginationFilterPrimitive()
	case "greaterThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "lessThan":
		return t.AsPaginationFilterPrimitive()
	case "lessThanOrEqualTo":
		return t.AsPaginationFilterPrimitive()
	case "notEmpty":
		return t.AsPaginationFilterPrimitive()
	case "notEquals":
		return t.AsPaginationFilterPrimitive()
	case "startsWith":
		return t.AsPaginationFilterPrimitive()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItem returns the union data inside the WorkItem as a DemoWorkItem
func (t WorkItem) AsDemoWorkItem() (DemoWorkItem, error) {
	var body DemoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItem returns the union data inside the WorkItem as a DemoTwoWorkItem
func (t WorkItem) AsDemoTwoWorkItem() (DemoTwoWorkItem, error) {
	var body DemoTwoWorkItem
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItem{}, err
	}

	s := "WorkItem"
	discriminatorSchema := "DemoTwoWorkItem"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItem{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItem{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"projectName"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WorkItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "demo":
		return t.AsDemoWorkItem()
	case "demo_two":
		return t.AsDemoTwoWorkItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WorkItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JpH77Ku2zP8/AAD//5W1B5iCLAEA",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

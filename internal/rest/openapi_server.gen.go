// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
	externalRef0 "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// delete activity.
	// (DELETE /activity/{activityID})
	DeleteActivity(c *gin.Context, activityID models.ActivityID)
	// get activity.
	// (GET /activity/{activityID})
	GetActivity(c *gin.Context, activityID models.ActivityID)
	// update activity.
	// (PATCH /activity/{activityID})
	UpdateActivity(c *gin.Context, activityID models.ActivityID)
	// Ping pongs
	// (GET /admin/ping)
	AdminPing(c *gin.Context)

	// (GET /auth/myprovider/callback)
	MyProviderCallback(c *gin.Context)

	// (GET /auth/myprovider/login)
	MyProviderLogin(c *gin.Context, params externalRef0.MyProviderLoginParams)

	// (GET /events)
	Events(c *gin.Context, params externalRef0.EventsParams)
	// Get paginated user notifications
	// (GET /notifications/user/page)
	GetPaginatedNotifications(c *gin.Context, params externalRef0.GetPaginatedNotificationsParams)
	// Returns this very OpenAPI spec.
	// (GET /openapi.yaml)
	OpenapiYamlGet(c *gin.Context)
	// Ping pongs
	// (GET /ping)
	Ping(c *gin.Context)
	// returns board data for a project
	// (GET /project/{projectName}/)
	GetProject(c *gin.Context, projectName externalRef0.ProjectName)
	// create activity.
	// (POST /project/{projectName}/activity/)
	CreateActivity(c *gin.Context, projectName externalRef0.ProjectName)
	// returns board data for a project
	// (GET /project/{projectName}/board)
	GetProjectBoard(c *gin.Context, projectName externalRef0.ProjectName)
	// returns the project configuration
	// (GET /project/{projectName}/config)
	GetProjectConfig(c *gin.Context, projectName externalRef0.ProjectName)
	// updates the project configuration
	// (PUT /project/{projectName}/config)
	UpdateProjectConfig(c *gin.Context, projectName externalRef0.ProjectName)
	// creates initial data (teams, tags...) for a new project
	// (POST /project/{projectName}/initialize)
	InitializeProject(c *gin.Context, projectName externalRef0.ProjectName)
	// create team.
	// (POST /project/{projectName}/team/)
	CreateTeam(c *gin.Context, projectName externalRef0.ProjectName)
	// create workitemtag.
	// (POST /project/{projectName}/work-item-tag/)
	CreateWorkItemTag(c *gin.Context, projectName externalRef0.ProjectName)
	// create workitemtype.
	// (POST /project/{projectName}/work-item-type/)
	CreateWorkItemType(c *gin.Context, projectName externalRef0.ProjectName)
	// returns workitems for a project
	// (GET /project/{projectName}/workitems)
	GetProjectWorkitems(c *gin.Context, projectName externalRef0.ProjectName, params externalRef0.GetProjectWorkitemsParams)
	// delete team.
	// (DELETE /team/{teamID})
	DeleteTeam(c *gin.Context, teamID models.TeamID)
	// get team.
	// (GET /team/{teamID})
	GetTeam(c *gin.Context, teamID models.TeamID)
	// update team.
	// (PATCH /team/{teamID})
	UpdateTeam(c *gin.Context, teamID models.TeamID)
	// create time entry.
	// (POST /time-entry/)
	CreateTimeEntry(c *gin.Context)
	// delete time-entry.
	// (DELETE /time-entry/{timeEntryID})
	DeleteTimeEntry(c *gin.Context, timeEntryID models.TimeEntryID)
	// get time-entry.
	// (GET /time-entry/{timeEntryID})
	GetTimeEntry(c *gin.Context, timeEntryID models.TimeEntryID)
	// update time-entry.
	// (PATCH /time-entry/{timeEntryID})
	UpdateTimeEntry(c *gin.Context, timeEntryID models.TimeEntryID)
	// returns the logged in user
	// (GET /user/me)
	GetCurrentUser(c *gin.Context)
	// Get paginated users
	// (GET /user/page)
	GetPaginatedUsers(c *gin.Context, params externalRef0.GetPaginatedUsersParams)
	// deletes the user by id
	// (DELETE /user/{id})
	DeleteUser(c *gin.Context, id uuid.UUID)
	// updates the user by id
	// (PATCH /user/{id})
	UpdateUser(c *gin.Context, id uuid.UUID)
	// updates user role and scopes by id
	// (PATCH /user/{id}/authorization)
	UpdateUserAuthorization(c *gin.Context, id uuid.UUID)
	// delete workitemtag.
	// (DELETE /work-item-tag/{workItemTagID})
	DeleteWorkItemTag(c *gin.Context, workItemTagID models.WorkItemTagID)
	// get workitemtag.
	// (GET /work-item-tag/{workItemTagID})
	GetWorkItemTag(c *gin.Context, workItemTagID models.WorkItemTagID)
	// update workitemtag.
	// (PATCH /work-item-tag/{workItemTagID})
	UpdateWorkItemTag(c *gin.Context, workItemTagID models.WorkItemTagID)
	// delete workitemtype.
	// (DELETE /work-item-type/{workItemTypeID})
	DeleteWorkItemType(c *gin.Context, workItemTypeID models.WorkItemTypeID)
	// get workitemtype.
	// (GET /work-item-type/{workItemTypeID})
	GetWorkItemType(c *gin.Context, workItemTypeID models.WorkItemTypeID)
	// update workitemtype.
	// (PATCH /work-item-type/{workItemTypeID})
	UpdateWorkItemType(c *gin.Context, workItemTypeID models.WorkItemTypeID)
	// create workitem
	// (POST /work-item/)
	CreateWorkitem(c *gin.Context)
	// Get paginated user work-item
	// (GET /work-item/page)
	GetPaginatedWorkItem(c *gin.Context, params externalRef0.GetPaginatedWorkItemParams)
	// delete workitem
	// (DELETE /work-item/{workItemID}/)
	DeleteWorkitem(c *gin.Context, workItemID models.WorkItemID)
	// get workitem
	// (GET /work-item/{workItemID}/)
	GetWorkItem(c *gin.Context, workItemID models.WorkItemID)
	// update workitem
	// (PATCH /work-item/{workItemID}/)
	UpdateWorkitem(c *gin.Context, workItemID models.WorkItemID)
	// create work item comment.
	// (POST /work-item/{workItemID}/comment/)
	CreateWorkItemComment(c *gin.Context, workItemID int)
	// delete .
	// (DELETE /work-item/{workItemID}/comment/{workItemCommentID})
	DeleteWorkItemComment(c *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID)
	// get work item comment.
	// (GET /work-item/{workItemID}/comment/{workItemCommentID})
	GetWorkItemComment(c *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID)
	// update work item comment.
	// (PATCH /work-item/{workItemID}/comment/{workItemCommentID})
	UpdateWorkItemComment(c *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID)

	middlewares(opID OperationID) []gin.HandlerFunc
	authMiddlewares(opID OperationID) []gin.HandlerFunc
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc func(c *gin.Context)

// DeleteActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "activityID" -------------
	var activityID models.ActivityID // models.ActivityID

	err = runtime.BindStyledParameter("simple", false, "activityID", c.Param("activityID"), &activityID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter activityID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteActivity(c, activityID)
}

// GetActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "activityID" -------------
	var activityID models.ActivityID // models.ActivityID

	err = runtime.BindStyledParameter("simple", false, "activityID", c.Param("activityID"), &activityID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter activityID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetActivity(c, activityID)
}

// UpdateActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "activityID" -------------
	var activityID models.ActivityID // models.ActivityID

	err = runtime.BindStyledParameter("simple", false, "activityID", c.Param("activityID"), &activityID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter activityID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateActivity(c, activityID)
}

// AdminPing operation with its own middleware.
func (siw *ServerInterfaceWrapper) AdminPing(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.AdminPing(c)
}

// MyProviderCallback operation with its own middleware.
func (siw *ServerInterfaceWrapper) MyProviderCallback(c *gin.Context) {
	siw.Handler.MyProviderCallback(c)
}

// MyProviderLogin operation with its own middleware.
func (siw *ServerInterfaceWrapper) MyProviderLogin(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.MyProviderLoginParams

	// ------------- Required query parameter "auth-redirect-uri" -------------

	if paramValue := c.Query("auth-redirect-uri"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument auth-redirect-uri is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "auth-redirect-uri", c.Request.URL.Query(), &params.AuthRedirectUri)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter auth-redirect-uri: %s", err)})
		return
	}

	siw.Handler.MyProviderLogin(c, params)
}

// Events operation with its own middleware.
func (siw *ServerInterfaceWrapper) Events(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.EventsParams

	// ------------- Required query parameter "projectName" -------------

	if paramValue := c.Query("projectName"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument projectName is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "projectName", c.Request.URL.Query(), &params.ProjectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	// ------------- Required query parameter "topics" -------------

	if paramValue := c.Query("topics"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument topics is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "topics", c.Request.URL.Query(), &params.Topics)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter topics: %s", err)})
		return
	}

	siw.Handler.Events(c, params)
}

// GetPaginatedNotifications operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetPaginatedNotifications(c *gin.Context) {
	var err error

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetPaginatedNotificationsParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "direction" -------------

	if paramValue := c.Query("direction"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument direction is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter direction: %s", err)})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cursor: %s", err)})
		return
	}

	siw.Handler.GetPaginatedNotifications(c, params)
}

// OpenapiYamlGet operation with its own middleware.
func (siw *ServerInterfaceWrapper) OpenapiYamlGet(c *gin.Context) {
	siw.Handler.OpenapiYamlGet(c)
}

// Ping operation with its own middleware.
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {
	siw.Handler.Ping(c)
}

// GetProject operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProject(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetProject(c, projectName)
}

// CreateActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateActivity(c, projectName)
}

// GetProjectBoard operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProjectBoard(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetProjectBoard(c, projectName)
}

// GetProjectConfig operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProjectConfig(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetProjectConfig(c, projectName)
}

// UpdateProjectConfig operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateProjectConfig(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateProjectConfig(c, projectName)
}

// InitializeProject operation with its own middleware.
func (siw *ServerInterfaceWrapper) InitializeProject(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.InitializeProject(c, projectName)
}

// CreateTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateTeam(c, projectName)
}

// CreateWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkItemTag(c, projectName)
}

// CreateWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkItemType(c, projectName)
}

// GetProjectWorkitems operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProjectWorkitems(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetProjectWorkitemsParams

	// ------------- Optional query parameter "open" -------------

	err = runtime.BindQueryParameter("form", true, false, "open", c.Request.URL.Query(), &params.Open)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter open: %s", err)})
		return
	}

	// ------------- Optional query parameter "deleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "deleted", c.Request.URL.Query(), &params.Deleted)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter deleted: %s", err)})
		return
	}

	siw.Handler.GetProjectWorkitems(c, projectName, params)
}

// DeleteTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID models.TeamID // models.TeamID

	err = runtime.BindStyledParameter("simple", false, "teamID", c.Param("teamID"), &teamID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter teamID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteTeam(c, teamID)
}

// GetTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID models.TeamID // models.TeamID

	err = runtime.BindStyledParameter("simple", false, "teamID", c.Param("teamID"), &teamID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter teamID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetTeam(c, teamID)
}

// UpdateTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID models.TeamID // models.TeamID

	err = runtime.BindStyledParameter("simple", false, "teamID", c.Param("teamID"), &teamID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter teamID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateTeam(c, teamID)
}

// CreateTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateTimeEntry(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateTimeEntry(c)
}

// DeleteTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteTimeEntry(c *gin.Context) {
	var err error

	// ------------- Path parameter "timeEntryID" -------------
	var timeEntryID models.TimeEntryID // models.TimeEntryID

	err = runtime.BindStyledParameter("simple", false, "timeEntryID", c.Param("timeEntryID"), &timeEntryID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter timeEntryID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteTimeEntry(c, timeEntryID)
}

// GetTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetTimeEntry(c *gin.Context) {
	var err error

	// ------------- Path parameter "timeEntryID" -------------
	var timeEntryID models.TimeEntryID // models.TimeEntryID

	err = runtime.BindStyledParameter("simple", false, "timeEntryID", c.Param("timeEntryID"), &timeEntryID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter timeEntryID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetTimeEntry(c, timeEntryID)
}

// UpdateTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateTimeEntry(c *gin.Context) {
	var err error

	// ------------- Path parameter "timeEntryID" -------------
	var timeEntryID models.TimeEntryID // models.TimeEntryID

	err = runtime.BindStyledParameter("simple", false, "timeEntryID", c.Param("timeEntryID"), &timeEntryID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter timeEntryID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateTimeEntry(c, timeEntryID)
}

// GetCurrentUser operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetCurrentUser(c)
}

// GetPaginatedUsers operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetPaginatedUsers(c *gin.Context) {
	var err error

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetPaginatedUsersParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "direction" -------------

	if paramValue := c.Query("direction"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument direction is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter direction: %s", err)})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cursor: %s", err)})
		return
	}

	// ------------- Required query parameter "column" -------------

	if paramValue := c.Query("column"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument column is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "column", c.Request.URL.Query(), &params.Column)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter column: %s", err)})
		return
	}

	// ------------- Optional query parameter "searchQuery" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "searchQuery", c.Request.URL.Query(), &params.SearchQuery)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter searchQuery: %s", err)})
		return
	}

	siw.Handler.GetPaginatedUsers(c, params)
}

// DeleteUser operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID // uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteUser(c, id)
}

// UpdateUser operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID // uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateUser(c, id)
}

// UpdateUserAuthorization operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateUserAuthorization(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID // uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateUserAuthorization(c, id)
}

// DeleteWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTagID" -------------
	var workItemTagID models.WorkItemTagID // models.WorkItemTagID

	err = runtime.BindStyledParameter("simple", false, "workItemTagID", c.Param("workItemTagID"), &workItemTagID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTagID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkItemTag(c, workItemTagID)
}

// GetWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTagID" -------------
	var workItemTagID models.WorkItemTagID // models.WorkItemTagID

	err = runtime.BindStyledParameter("simple", false, "workItemTagID", c.Param("workItemTagID"), &workItemTagID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTagID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItemTag(c, workItemTagID)
}

// UpdateWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTagID" -------------
	var workItemTagID models.WorkItemTagID // models.WorkItemTagID

	err = runtime.BindStyledParameter("simple", false, "workItemTagID", c.Param("workItemTagID"), &workItemTagID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTagID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkItemTag(c, workItemTagID)
}

// DeleteWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTypeID" -------------
	var workItemTypeID models.WorkItemTypeID // models.WorkItemTypeID

	err = runtime.BindStyledParameter("simple", false, "workItemTypeID", c.Param("workItemTypeID"), &workItemTypeID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTypeID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkItemType(c, workItemTypeID)
}

// GetWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTypeID" -------------
	var workItemTypeID models.WorkItemTypeID // models.WorkItemTypeID

	err = runtime.BindStyledParameter("simple", false, "workItemTypeID", c.Param("workItemTypeID"), &workItemTypeID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTypeID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItemType(c, workItemTypeID)
}

// UpdateWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTypeID" -------------
	var workItemTypeID models.WorkItemTypeID // models.WorkItemTypeID

	err = runtime.BindStyledParameter("simple", false, "workItemTypeID", c.Param("workItemTypeID"), &workItemTypeID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTypeID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkItemType(c, workItemTypeID)
}

// CreateWorkitem operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkitem(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkitem(c)
}

// GetPaginatedWorkItem operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetPaginatedWorkItem(c *gin.Context) {
	var err error

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetPaginatedWorkItemParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "direction" -------------

	if paramValue := c.Query("direction"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument direction is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter direction: %s", err)})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cursor: %s", err)})
		return
	}

	// ------------- Optional query parameter "searchQuery" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "searchQuery", c.Request.URL.Query(), &params.SearchQuery)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter searchQuery: %s", err)})
		return
	}

	siw.Handler.GetPaginatedWorkItem(c, params)
}

// DeleteWorkitem operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkitem(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkitem(c, workItemID)
}

// GetWorkItem operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItem(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItem(c, workItemID)
}

// UpdateWorkitem operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkitem(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkitem(c, workItemID)
}

// CreateWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID int // int

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkItemComment(c, workItemID)
}

// DeleteWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	// ------------- Path parameter "workItemCommentID" -------------
	var workItemCommentID models.WorkItemCommentID // models.WorkItemCommentID

	err = runtime.BindStyledParameter("simple", false, "workItemCommentID", c.Param("workItemCommentID"), &workItemCommentID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemCommentID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkItemComment(c, workItemID, workItemCommentID)
}

// GetWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	// ------------- Path parameter "workItemCommentID" -------------
	var workItemCommentID models.WorkItemCommentID // models.WorkItemCommentID

	err = runtime.BindStyledParameter("simple", false, "workItemCommentID", c.Param("workItemCommentID"), &workItemCommentID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemCommentID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItemComment(c, workItemID, workItemCommentID)
}

// UpdateWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	// ------------- Path parameter "workItemCommentID" -------------
	var workItemCommentID models.WorkItemCommentID // models.WorkItemCommentID

	err = runtime.BindStyledParameter("simple", false, "workItemCommentID", c.Param("workItemCommentID"), &workItemCommentID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemCommentID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkItemComment(c, workItemID, workItemCommentID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL string
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	// calling mw(c) directly has unexpected consequences: closed channels, etc.
	router.DELETE(options.BaseURL+"/activity/:activityID", append(
		wrapper.Handler.authMiddlewares(DeleteActivity),
		append(wrapper.Handler.middlewares(DeleteActivity), wrapper.DeleteActivity)...,
	)...)

	router.GET(options.BaseURL+"/activity/:activityID", append(
		wrapper.Handler.authMiddlewares(GetActivity),
		append(wrapper.Handler.middlewares(GetActivity), wrapper.GetActivity)...,
	)...)

	router.PATCH(options.BaseURL+"/activity/:activityID", append(
		wrapper.Handler.authMiddlewares(UpdateActivity),
		append(wrapper.Handler.middlewares(UpdateActivity), wrapper.UpdateActivity)...,
	)...)

	router.GET(options.BaseURL+"/admin/ping", append(
		wrapper.Handler.authMiddlewares(AdminPing),
		append(wrapper.Handler.middlewares(AdminPing), wrapper.AdminPing)...,
	)...)

	router.GET(options.BaseURL+"/auth/myprovider/callback", append(
		wrapper.Handler.authMiddlewares(MyProviderCallback),
		append(wrapper.Handler.middlewares(MyProviderCallback), wrapper.MyProviderCallback)...,
	)...)

	router.GET(options.BaseURL+"/auth/myprovider/login", append(
		wrapper.Handler.authMiddlewares(MyProviderLogin),
		append(wrapper.Handler.middlewares(MyProviderLogin), wrapper.MyProviderLogin)...,
	)...)

	router.GET(options.BaseURL+"/events", append(
		wrapper.Handler.authMiddlewares(Events),
		append(wrapper.Handler.middlewares(Events), wrapper.Events)...,
	)...)

	router.GET(options.BaseURL+"/notifications/user/page", append(
		wrapper.Handler.authMiddlewares(GetPaginatedNotifications),
		append(wrapper.Handler.middlewares(GetPaginatedNotifications), wrapper.GetPaginatedNotifications)...,
	)...)

	router.GET(options.BaseURL+"/openapi.yaml", append(
		wrapper.Handler.authMiddlewares(OpenapiYamlGet),
		append(wrapper.Handler.middlewares(OpenapiYamlGet), wrapper.OpenapiYamlGet)...,
	)...)

	router.GET(options.BaseURL+"/ping", append(
		wrapper.Handler.authMiddlewares(Ping),
		append(wrapper.Handler.middlewares(Ping), wrapper.Ping)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/", append(
		wrapper.Handler.authMiddlewares(GetProject),
		append(wrapper.Handler.middlewares(GetProject), wrapper.GetProject)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/activity/", append(
		wrapper.Handler.authMiddlewares(CreateActivity),
		append(wrapper.Handler.middlewares(CreateActivity), wrapper.CreateActivity)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/board", append(
		wrapper.Handler.authMiddlewares(GetProjectBoard),
		append(wrapper.Handler.middlewares(GetProjectBoard), wrapper.GetProjectBoard)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/config", append(
		wrapper.Handler.authMiddlewares(GetProjectConfig),
		append(wrapper.Handler.middlewares(GetProjectConfig), wrapper.GetProjectConfig)...,
	)...)

	router.PUT(options.BaseURL+"/project/:projectName/config", append(
		wrapper.Handler.authMiddlewares(UpdateProjectConfig),
		append(wrapper.Handler.middlewares(UpdateProjectConfig), wrapper.UpdateProjectConfig)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/initialize", append(
		wrapper.Handler.authMiddlewares(InitializeProject),
		append(wrapper.Handler.middlewares(InitializeProject), wrapper.InitializeProject)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/team/", append(
		wrapper.Handler.authMiddlewares(CreateTeam),
		append(wrapper.Handler.middlewares(CreateTeam), wrapper.CreateTeam)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/work-item-tag/", append(
		wrapper.Handler.authMiddlewares(CreateWorkItemTag),
		append(wrapper.Handler.middlewares(CreateWorkItemTag), wrapper.CreateWorkItemTag)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/work-item-type/", append(
		wrapper.Handler.authMiddlewares(CreateWorkItemType),
		append(wrapper.Handler.middlewares(CreateWorkItemType), wrapper.CreateWorkItemType)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/workitems", append(
		wrapper.Handler.authMiddlewares(GetProjectWorkitems),
		append(wrapper.Handler.middlewares(GetProjectWorkitems), wrapper.GetProjectWorkitems)...,
	)...)

	router.DELETE(options.BaseURL+"/team/:teamID", append(
		wrapper.Handler.authMiddlewares(DeleteTeam),
		append(wrapper.Handler.middlewares(DeleteTeam), wrapper.DeleteTeam)...,
	)...)

	router.GET(options.BaseURL+"/team/:teamID", append(
		wrapper.Handler.authMiddlewares(GetTeam),
		append(wrapper.Handler.middlewares(GetTeam), wrapper.GetTeam)...,
	)...)

	router.PATCH(options.BaseURL+"/team/:teamID", append(
		wrapper.Handler.authMiddlewares(UpdateTeam),
		append(wrapper.Handler.middlewares(UpdateTeam), wrapper.UpdateTeam)...,
	)...)

	router.POST(options.BaseURL+"/time-entry/", append(
		wrapper.Handler.authMiddlewares(CreateTimeEntry),
		append(wrapper.Handler.middlewares(CreateTimeEntry), wrapper.CreateTimeEntry)...,
	)...)

	router.DELETE(options.BaseURL+"/time-entry/:timeEntryID", append(
		wrapper.Handler.authMiddlewares(DeleteTimeEntry),
		append(wrapper.Handler.middlewares(DeleteTimeEntry), wrapper.DeleteTimeEntry)...,
	)...)

	router.GET(options.BaseURL+"/time-entry/:timeEntryID", append(
		wrapper.Handler.authMiddlewares(GetTimeEntry),
		append(wrapper.Handler.middlewares(GetTimeEntry), wrapper.GetTimeEntry)...,
	)...)

	router.PATCH(options.BaseURL+"/time-entry/:timeEntryID", append(
		wrapper.Handler.authMiddlewares(UpdateTimeEntry),
		append(wrapper.Handler.middlewares(UpdateTimeEntry), wrapper.UpdateTimeEntry)...,
	)...)

	router.GET(options.BaseURL+"/user/me", append(
		wrapper.Handler.authMiddlewares(GetCurrentUser),
		append(wrapper.Handler.middlewares(GetCurrentUser), wrapper.GetCurrentUser)...,
	)...)

	router.GET(options.BaseURL+"/user/page", append(
		wrapper.Handler.authMiddlewares(GetPaginatedUsers),
		append(wrapper.Handler.middlewares(GetPaginatedUsers), wrapper.GetPaginatedUsers)...,
	)...)

	router.DELETE(options.BaseURL+"/user/:id", append(
		wrapper.Handler.authMiddlewares(DeleteUser),
		append(wrapper.Handler.middlewares(DeleteUser), wrapper.DeleteUser)...,
	)...)

	router.PATCH(options.BaseURL+"/user/:id", append(
		wrapper.Handler.authMiddlewares(UpdateUser),
		append(wrapper.Handler.middlewares(UpdateUser), wrapper.UpdateUser)...,
	)...)

	router.PATCH(options.BaseURL+"/user/:id/authorization", append(
		wrapper.Handler.authMiddlewares(UpdateUserAuthorization),
		append(wrapper.Handler.middlewares(UpdateUserAuthorization), wrapper.UpdateUserAuthorization)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item-tag/:workItemTagID", append(
		wrapper.Handler.authMiddlewares(DeleteWorkItemTag),
		append(wrapper.Handler.middlewares(DeleteWorkItemTag), wrapper.DeleteWorkItemTag)...,
	)...)

	router.GET(options.BaseURL+"/work-item-tag/:workItemTagID", append(
		wrapper.Handler.authMiddlewares(GetWorkItemTag),
		append(wrapper.Handler.middlewares(GetWorkItemTag), wrapper.GetWorkItemTag)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item-tag/:workItemTagID", append(
		wrapper.Handler.authMiddlewares(UpdateWorkItemTag),
		append(wrapper.Handler.middlewares(UpdateWorkItemTag), wrapper.UpdateWorkItemTag)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item-type/:workItemTypeID", append(
		wrapper.Handler.authMiddlewares(DeleteWorkItemType),
		append(wrapper.Handler.middlewares(DeleteWorkItemType), wrapper.DeleteWorkItemType)...,
	)...)

	router.GET(options.BaseURL+"/work-item-type/:workItemTypeID", append(
		wrapper.Handler.authMiddlewares(GetWorkItemType),
		append(wrapper.Handler.middlewares(GetWorkItemType), wrapper.GetWorkItemType)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item-type/:workItemTypeID", append(
		wrapper.Handler.authMiddlewares(UpdateWorkItemType),
		append(wrapper.Handler.middlewares(UpdateWorkItemType), wrapper.UpdateWorkItemType)...,
	)...)

	router.POST(options.BaseURL+"/work-item/", append(
		wrapper.Handler.authMiddlewares(CreateWorkitem),
		append(wrapper.Handler.middlewares(CreateWorkitem), wrapper.CreateWorkitem)...,
	)...)

	router.GET(options.BaseURL+"/work-item/page", append(
		wrapper.Handler.authMiddlewares(GetPaginatedWorkItem),
		append(wrapper.Handler.middlewares(GetPaginatedWorkItem), wrapper.GetPaginatedWorkItem)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item/:workItemID/", append(
		wrapper.Handler.authMiddlewares(DeleteWorkitem),
		append(wrapper.Handler.middlewares(DeleteWorkitem), wrapper.DeleteWorkitem)...,
	)...)

	router.GET(options.BaseURL+"/work-item/:workItemID/", append(
		wrapper.Handler.authMiddlewares(GetWorkItem),
		append(wrapper.Handler.middlewares(GetWorkItem), wrapper.GetWorkItem)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item/:workItemID/", append(
		wrapper.Handler.authMiddlewares(UpdateWorkitem),
		append(wrapper.Handler.middlewares(UpdateWorkitem), wrapper.UpdateWorkitem)...,
	)...)

	router.POST(options.BaseURL+"/work-item/:workItemID/comment/", append(
		wrapper.Handler.authMiddlewares(CreateWorkItemComment),
		append(wrapper.Handler.middlewares(CreateWorkItemComment), wrapper.CreateWorkItemComment)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item/:workItemID/comment/:workItemCommentID", append(
		wrapper.Handler.authMiddlewares(DeleteWorkItemComment),
		append(wrapper.Handler.middlewares(DeleteWorkItemComment), wrapper.DeleteWorkItemComment)...,
	)...)

	router.GET(options.BaseURL+"/work-item/:workItemID/comment/:workItemCommentID", append(
		wrapper.Handler.authMiddlewares(GetWorkItemComment),
		append(wrapper.Handler.middlewares(GetWorkItemComment), wrapper.GetWorkItemComment)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item/:workItemID/comment/:workItemCommentID", append(
		wrapper.Handler.authMiddlewares(UpdateWorkItemComment),
		append(wrapper.Handler.middlewares(UpdateWorkItemComment), wrapper.UpdateWorkItemComment)...,
	)...)
}

type DeleteActivityRequestObject struct {
	ActivityID models.ActivityID `json:"activityID"`
}

type DeleteActivityResponseObject interface {
	VisitDeleteActivityResponse(w http.ResponseWriter) error
}

type DeleteActivity204Response struct{}

func (response DeleteActivity204Response) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteActivity401Response struct{}

func (response DeleteActivity401Response) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteActivity403Response struct{}

func (response DeleteActivity403Response) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteActivity4XXJSONResponse) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetActivityRequestObject struct {
	ActivityID models.ActivityID `json:"activityID"`
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse ActivityResponse

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivity401Response struct{}

func (response GetActivity401Response) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetActivity403Response struct{}

func (response GetActivity403Response) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetActivity4XXJSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateActivityRequestObject struct {
	ActivityID models.ActivityID `json:"activityID"`
	Body       *UpdateActivityRequest
}

type UpdateActivityResponseObject interface {
	VisitUpdateActivityResponse(w http.ResponseWriter) error
}

type UpdateActivity200JSONResponse ActivityResponse

func (response UpdateActivity200JSONResponse) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateActivity401Response struct{}

func (response UpdateActivity401Response) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateActivity403Response struct{}

func (response UpdateActivity403Response) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateActivity4XXJSONResponse) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminPingRequestObject struct{}

type AdminPingResponseObject interface {
	VisitAdminPingResponse(w http.ResponseWriter) error
}

type AdminPing200TextResponse string

func (response AdminPing200TextResponse) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type AdminPing401Response struct{}

func (response AdminPing401Response) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminPing403Response struct{}

func (response AdminPing403Response) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminPing4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response AdminPing4XXJSONResponse) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type MyProviderCallbackRequestObject struct{}

type MyProviderCallbackResponseObject interface {
	VisitMyProviderCallbackResponse(w http.ResponseWriter) error
}

type MyProviderCallback302ResponseHeaders struct {
	Location string
}

type MyProviderCallback302Response struct {
	Headers MyProviderCallback302ResponseHeaders
}

func (response MyProviderCallback302Response) VisitMyProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type MyProviderLoginRequestObject struct {
	Params externalRef0.MyProviderLoginParams
}

type MyProviderLoginResponseObject interface {
	VisitMyProviderLoginResponse(w http.ResponseWriter) error
}

type MyProviderLogin302ResponseHeaders struct {
	Location string
}

type MyProviderLogin302Response struct {
	Headers MyProviderLogin302ResponseHeaders
}

func (response MyProviderLogin302Response) VisitMyProviderLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type EventsRequestObject struct {
	Params externalRef0.EventsParams
}

type EventsResponseObject interface {
	VisitEventsResponse(w http.ResponseWriter) error
}

type Events200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response Events200TexteventStreamResponse) VisitEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetPaginatedNotificationsRequestObject struct {
	Params externalRef0.GetPaginatedNotificationsParams
}

type GetPaginatedNotificationsResponseObject interface {
	VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error
}

type GetPaginatedNotifications200JSONResponse PaginatedNotificationsResponse

func (response GetPaginatedNotifications200JSONResponse) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedNotifications401Response struct{}

func (response GetPaginatedNotifications401Response) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPaginatedNotifications403Response struct{}

func (response GetPaginatedNotifications403Response) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetPaginatedNotifications4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetPaginatedNotifications4XXJSONResponse) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OpenapiYamlGetRequestObject struct{}

type OpenapiYamlGetResponseObject interface {
	VisitOpenapiYamlGetResponse(w http.ResponseWriter) error
}

type OpenapiYamlGet200ApplicationxYamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response OpenapiYamlGet200ApplicationxYamlResponse) VisitOpenapiYamlGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/x-yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PingRequestObject struct{}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200TextResponse string

func (response Ping200TextResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type Ping401Response struct{}

func (response Ping401Response) VisitPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Ping403Response struct{}

func (response Ping403Response) VisitPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type Ping4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response Ping4XXJSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProjectRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(w http.ResponseWriter) error
}

type GetProject200JSONResponse externalRef0.ModelsProject

func (response GetProject200JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateActivityRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateActivityRequest
}

type CreateActivityResponseObject interface {
	VisitCreateActivityResponse(w http.ResponseWriter) error
}

type CreateActivity201JSONResponse ActivityResponse

func (response CreateActivity201JSONResponse) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateActivity401Response struct{}

func (response CreateActivity401Response) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateActivity403Response struct{}

func (response CreateActivity403Response) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateActivity4XXJSONResponse) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProjectBoardRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
}

type GetProjectBoardResponseObject interface {
	VisitGetProjectBoardResponse(w http.ResponseWriter) error
}

type GetProjectBoard200JSONResponse ProjectBoard

func (response GetProjectBoard200JSONResponse) VisitGetProjectBoardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectConfigRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
}

type GetProjectConfigResponseObject interface {
	VisitGetProjectConfigResponse(w http.ResponseWriter) error
}

type GetProjectConfig200JSONResponse externalRef0.ProjectConfig

func (response GetProjectConfig200JSONResponse) VisitGetProjectConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectConfigRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *externalRef0.UpdateProjectConfigJSONRequestBody
}

type UpdateProjectConfigResponseObject interface {
	VisitUpdateProjectConfigResponse(w http.ResponseWriter) error
}

type UpdateProjectConfig204Response struct{}

func (response UpdateProjectConfig204Response) VisitUpdateProjectConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type InitializeProjectRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *externalRef0.InitializeProjectJSONRequestBody
}

type InitializeProjectResponseObject interface {
	VisitInitializeProjectResponse(w http.ResponseWriter) error
}

type InitializeProject204Response struct{}

func (response InitializeProject204Response) VisitInitializeProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateTeamRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateTeamRequest
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(w http.ResponseWriter) error
}

type CreateTeam201JSONResponse TeamResponse

func (response CreateTeam201JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam401Response struct{}

func (response CreateTeam401Response) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateTeam403Response struct{}

func (response CreateTeam403Response) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateTeam4XXJSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateWorkItemTagRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateWorkItemTagRequest
}

type CreateWorkItemTagResponseObject interface {
	VisitCreateWorkItemTagResponse(w http.ResponseWriter) error
}

type CreateWorkItemTag201JSONResponse WorkItemTagResponse

func (response CreateWorkItemTag201JSONResponse) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemTag401Response struct{}

func (response CreateWorkItemTag401Response) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateWorkItemTag403Response struct{}

func (response CreateWorkItemTag403Response) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateWorkItemTag4XXJSONResponse) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateWorkItemTypeRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateWorkItemTypeRequest
}

type CreateWorkItemTypeResponseObject interface {
	VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error
}

type CreateWorkItemType201JSONResponse WorkItemTypeResponse

func (response CreateWorkItemType201JSONResponse) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemType401Response struct{}

func (response CreateWorkItemType401Response) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateWorkItemType403Response struct{}

func (response CreateWorkItemType403Response) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateWorkItemType4XXJSONResponse) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProjectWorkitemsRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Params      externalRef0.GetProjectWorkitemsParams
}

type GetProjectWorkitemsResponseObject interface {
	VisitGetProjectWorkitemsResponse(w http.ResponseWriter) error
}

type GetProjectWorkitems200JSONResponse externalRef0.WorkItemResponse

func (response GetProjectWorkitems200JSONResponse) VisitGetProjectWorkitemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamRequestObject struct {
	TeamID models.TeamID `json:"teamID"`
}

type DeleteTeamResponseObject interface {
	VisitDeleteTeamResponse(w http.ResponseWriter) error
}

type DeleteTeam204Response struct{}

func (response DeleteTeam204Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTeam401Response struct{}

func (response DeleteTeam401Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteTeam403Response struct{}

func (response DeleteTeam403Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteTeam4XXJSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTeamRequestObject struct {
	TeamID models.TeamID `json:"teamID"`
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(w http.ResponseWriter) error
}

type GetTeam200JSONResponse TeamResponse

func (response GetTeam200JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeam401Response struct{}

func (response GetTeam401Response) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetTeam403Response struct{}

func (response GetTeam403Response) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetTeam4XXJSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTeamRequestObject struct {
	TeamID models.TeamID `json:"teamID"`
	Body   *UpdateTeamRequest
}

type UpdateTeamResponseObject interface {
	VisitUpdateTeamResponse(w http.ResponseWriter) error
}

type UpdateTeam200JSONResponse TeamResponse

func (response UpdateTeam200JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam401Response struct{}

func (response UpdateTeam401Response) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateTeam403Response struct{}

func (response UpdateTeam403Response) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateTeam4XXJSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateTimeEntryRequestObject struct {
	Body *CreateTimeEntryRequest
}

type CreateTimeEntryResponseObject interface {
	VisitCreateTimeEntryResponse(w http.ResponseWriter) error
}

type CreateTimeEntry201JSONResponse TimeEntryResponse

func (response CreateTimeEntry201JSONResponse) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTimeEntry401Response struct{}

func (response CreateTimeEntry401Response) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateTimeEntry403Response struct{}

func (response CreateTimeEntry403Response) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateTimeEntry4XXJSONResponse) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTimeEntryRequestObject struct {
	TimeEntryID models.TimeEntryID `json:"timeEntryID"`
}

type DeleteTimeEntryResponseObject interface {
	VisitDeleteTimeEntryResponse(w http.ResponseWriter) error
}

type DeleteTimeEntry204Response struct{}

func (response DeleteTimeEntry204Response) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTimeEntry401Response struct{}

func (response DeleteTimeEntry401Response) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteTimeEntry403Response struct{}

func (response DeleteTimeEntry403Response) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteTimeEntry4XXJSONResponse) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTimeEntryRequestObject struct {
	TimeEntryID models.TimeEntryID `json:"timeEntryID"`
}

type GetTimeEntryResponseObject interface {
	VisitGetTimeEntryResponse(w http.ResponseWriter) error
}

type GetTimeEntry200JSONResponse TimeEntryResponse

func (response GetTimeEntry200JSONResponse) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTimeEntry401Response struct{}

func (response GetTimeEntry401Response) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetTimeEntry403Response struct{}

func (response GetTimeEntry403Response) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetTimeEntry4XXJSONResponse) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTimeEntryRequestObject struct {
	TimeEntryID models.TimeEntryID `json:"timeEntryID"`
	Body        *UpdateTimeEntryRequest
}

type UpdateTimeEntryResponseObject interface {
	VisitUpdateTimeEntryResponse(w http.ResponseWriter) error
}

type UpdateTimeEntry200JSONResponse TimeEntryResponse

func (response UpdateTimeEntry200JSONResponse) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTimeEntry401Response struct{}

func (response UpdateTimeEntry401Response) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateTimeEntry403Response struct{}

func (response UpdateTimeEntry403Response) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateTimeEntry4XXJSONResponse) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetCurrentUserRequestObject struct{}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedUsersRequestObject struct {
	Params externalRef0.GetPaginatedUsersParams
}

type GetPaginatedUsersResponseObject interface {
	VisitGetPaginatedUsersResponse(w http.ResponseWriter) error
}

type GetPaginatedUsers200JSONResponse PaginatedUsersResponse

func (response GetPaginatedUsers200JSONResponse) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedUsers401Response struct{}

func (response GetPaginatedUsers401Response) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPaginatedUsers403Response struct{}

func (response GetPaginatedUsers403Response) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetPaginatedUsers4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetPaginatedUsers4XXJSONResponse) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserRequestObject struct {
	Id uuid.UUID `json:"id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct{}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUser401Response struct{}

func (response DeleteUser401Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteUser403Response struct{}

func (response DeleteUser403Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteUser4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteUser4XXJSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateUserRequestObject struct {
	Id   uuid.UUID `json:"id"`
	Body *externalRef0.UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse UserResponse

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserAuthorizationRequestObject struct {
	Id   uuid.UUID `json:"id"`
	Body *externalRef0.UpdateUserAuthorizationJSONRequestBody
}

type UpdateUserAuthorizationResponseObject interface {
	VisitUpdateUserAuthorizationResponse(w http.ResponseWriter) error
}

type UpdateUserAuthorization204Response struct{}

func (response UpdateUserAuthorization204Response) VisitUpdateUserAuthorizationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemTagRequestObject struct {
	WorkItemTagID models.WorkItemTagID `json:"workItemTagID"`
}

type DeleteWorkItemTagResponseObject interface {
	VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error
}

type DeleteWorkItemTag204Response struct{}

func (response DeleteWorkItemTag204Response) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemTag401Response struct{}

func (response DeleteWorkItemTag401Response) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteWorkItemTag403Response struct{}

func (response DeleteWorkItemTag403Response) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteWorkItemTag4XXJSONResponse) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkItemTagRequestObject struct {
	WorkItemTagID models.WorkItemTagID `json:"workItemTagID"`
}

type GetWorkItemTagResponseObject interface {
	VisitGetWorkItemTagResponse(w http.ResponseWriter) error
}

type GetWorkItemTag200JSONResponse WorkItemTagResponse

func (response GetWorkItemTag200JSONResponse) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkItemTag401Response struct{}

func (response GetWorkItemTag401Response) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWorkItemTag403Response struct{}

func (response GetWorkItemTag403Response) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetWorkItemTag4XXJSONResponse) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkItemTagRequestObject struct {
	WorkItemTagID models.WorkItemTagID `json:"workItemTagID"`
	Body          *UpdateWorkItemTagRequest
}

type UpdateWorkItemTagResponseObject interface {
	VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error
}

type UpdateWorkItemTag200JSONResponse WorkItemTagResponse

func (response UpdateWorkItemTag200JSONResponse) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkItemTag401Response struct{}

func (response UpdateWorkItemTag401Response) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateWorkItemTag403Response struct{}

func (response UpdateWorkItemTag403Response) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateWorkItemTag4XXJSONResponse) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteWorkItemTypeRequestObject struct {
	WorkItemTypeID models.WorkItemTypeID `json:"workItemTypeID"`
}

type DeleteWorkItemTypeResponseObject interface {
	VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error
}

type DeleteWorkItemType204Response struct{}

func (response DeleteWorkItemType204Response) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemType401Response struct{}

func (response DeleteWorkItemType401Response) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteWorkItemType403Response struct{}

func (response DeleteWorkItemType403Response) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteWorkItemType4XXJSONResponse) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkItemTypeRequestObject struct {
	WorkItemTypeID models.WorkItemTypeID `json:"workItemTypeID"`
}

type GetWorkItemTypeResponseObject interface {
	VisitGetWorkItemTypeResponse(w http.ResponseWriter) error
}

type GetWorkItemType200JSONResponse WorkItemTypeResponse

func (response GetWorkItemType200JSONResponse) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkItemType401Response struct{}

func (response GetWorkItemType401Response) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWorkItemType403Response struct{}

func (response GetWorkItemType403Response) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetWorkItemType4XXJSONResponse) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkItemTypeRequestObject struct {
	WorkItemTypeID models.WorkItemTypeID `json:"workItemTypeID"`
	Body           *UpdateWorkItemTypeRequest
}

type UpdateWorkItemTypeResponseObject interface {
	VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error
}

type UpdateWorkItemType200JSONResponse WorkItemTypeResponse

func (response UpdateWorkItemType200JSONResponse) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkItemType401Response struct{}

func (response UpdateWorkItemType401Response) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateWorkItemType403Response struct{}

func (response UpdateWorkItemType403Response) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateWorkItemType4XXJSONResponse) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateWorkitemRequestObject struct {
	Body *externalRef0.CreateWorkitemJSONRequestBody
}

type CreateWorkitemResponseObject interface {
	VisitCreateWorkitemResponse(w http.ResponseWriter) error
}

type CreateWorkitem201JSONResponse externalRef0.WorkItemResponse

func (response CreateWorkitem201JSONResponse) VisitCreateWorkitemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedWorkItemRequestObject struct {
	Params externalRef0.GetPaginatedWorkItemParams
}

type GetPaginatedWorkItemResponseObject interface {
	VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error
}

type GetPaginatedWorkItem200JSONResponse PaginatedDemoWorkItemsResponse

func (response GetPaginatedWorkItem200JSONResponse) VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedWorkItem401Response struct{}

func (response GetPaginatedWorkItem401Response) VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPaginatedWorkItem403Response struct{}

func (response GetPaginatedWorkItem403Response) VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetPaginatedWorkItem4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetPaginatedWorkItem4XXJSONResponse) VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteWorkitemRequestObject struct {
	WorkItemID models.WorkItemID `json:"workItemID"`
}

type DeleteWorkitemResponseObject interface {
	VisitDeleteWorkitemResponse(w http.ResponseWriter) error
}

type DeleteWorkitem204Response struct{}

func (response DeleteWorkitem204Response) VisitDeleteWorkitemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetWorkItemRequestObject struct {
	WorkItemID models.WorkItemID `json:"workItemID"`
}

type GetWorkItemResponseObject interface {
	VisitGetWorkItemResponse(w http.ResponseWriter) error
}

type GetWorkItem200JSONResponse externalRef0.WorkItemResponse

func (response GetWorkItem200JSONResponse) VisitGetWorkItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkitemRequestObject struct {
	WorkItemID models.WorkItemID `json:"workItemID"`
}

type UpdateWorkitemResponseObject interface {
	VisitUpdateWorkitemResponse(w http.ResponseWriter) error
}

type UpdateWorkitem200JSONResponse externalRef0.WorkItemResponse

func (response UpdateWorkitem200JSONResponse) VisitUpdateWorkitemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemCommentRequestObject struct {
	WorkItemID int `json:"workItemID"`
	Body       *CreateWorkItemCommentRequest
}

type CreateWorkItemCommentResponseObject interface {
	VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error
}

type CreateWorkItemComment201JSONResponse WorkItemCommentResponse

func (response CreateWorkItemComment201JSONResponse) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemComment401Response struct{}

func (response CreateWorkItemComment401Response) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateWorkItemComment403Response struct{}

func (response CreateWorkItemComment403Response) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateWorkItemComment4XXJSONResponse) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteWorkItemCommentRequestObject struct {
	WorkItemID        models.WorkItemID        `json:"workItemID"`
	WorkItemCommentID models.WorkItemCommentID `json:"workItemCommentID"`
}

type DeleteWorkItemCommentResponseObject interface {
	VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error
}

type DeleteWorkItemComment204Response struct{}

func (response DeleteWorkItemComment204Response) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemComment401Response struct{}

func (response DeleteWorkItemComment401Response) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteWorkItemComment403Response struct{}

func (response DeleteWorkItemComment403Response) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteWorkItemComment4XXJSONResponse) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkItemCommentRequestObject struct {
	WorkItemID        models.WorkItemID        `json:"workItemID"`
	WorkItemCommentID models.WorkItemCommentID `json:"workItemCommentID"`
}

type GetWorkItemCommentResponseObject interface {
	VisitGetWorkItemCommentResponse(w http.ResponseWriter) error
}

type GetWorkItemComment200JSONResponse WorkItemCommentResponse

func (response GetWorkItemComment200JSONResponse) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkItemComment401Response struct{}

func (response GetWorkItemComment401Response) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWorkItemComment403Response struct{}

func (response GetWorkItemComment403Response) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetWorkItemComment4XXJSONResponse) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkItemCommentRequestObject struct {
	WorkItemID        models.WorkItemID        `json:"workItemID"`
	WorkItemCommentID models.WorkItemCommentID `json:"workItemCommentID"`
	Body              *UpdateWorkItemCommentRequest
}

type UpdateWorkItemCommentResponseObject interface {
	VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error
}

type UpdateWorkItemComment200JSONResponse WorkItemCommentResponse

func (response UpdateWorkItemComment200JSONResponse) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkItemComment401Response struct{}

func (response UpdateWorkItemComment401Response) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateWorkItemComment403Response struct{}

func (response UpdateWorkItemComment403Response) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateWorkItemComment4XXJSONResponse) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// delete activity.
	// (DELETE /activity/{activityID})
	DeleteActivity(c *gin.Context, request DeleteActivityRequestObject) (DeleteActivityResponseObject, error)
	// get activity.
	// (GET /activity/{activityID})
	GetActivity(c *gin.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)
	// update activity.
	// (PATCH /activity/{activityID})
	UpdateActivity(c *gin.Context, request UpdateActivityRequestObject) (UpdateActivityResponseObject, error)
	// Ping pongs
	// (GET /admin/ping)
	AdminPing(c *gin.Context, request AdminPingRequestObject) (AdminPingResponseObject, error)

	// (GET /auth/myprovider/callback)
	MyProviderCallback(c *gin.Context, request MyProviderCallbackRequestObject) (MyProviderCallbackResponseObject, error)

	// (GET /auth/myprovider/login)
	MyProviderLogin(c *gin.Context, request MyProviderLoginRequestObject) (MyProviderLoginResponseObject, error)

	// (GET /events)
	Events(c *gin.Context, request EventsRequestObject) (EventsResponseObject, error)
	// Get paginated user notifications
	// (GET /notifications/user/page)
	GetPaginatedNotifications(c *gin.Context, request GetPaginatedNotificationsRequestObject) (GetPaginatedNotificationsResponseObject, error)
	// Returns this very OpenAPI spec.
	// (GET /openapi.yaml)
	OpenapiYamlGet(c *gin.Context, request OpenapiYamlGetRequestObject) (OpenapiYamlGetResponseObject, error)
	// Ping pongs
	// (GET /ping)
	Ping(c *gin.Context, request PingRequestObject) (PingResponseObject, error)
	// returns board data for a project
	// (GET /project/{projectName}/)
	GetProject(c *gin.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// create activity.
	// (POST /project/{projectName}/activity/)
	CreateActivity(c *gin.Context, request CreateActivityRequestObject) (CreateActivityResponseObject, error)
	// returns board data for a project
	// (GET /project/{projectName}/board)
	GetProjectBoard(c *gin.Context, request GetProjectBoardRequestObject) (GetProjectBoardResponseObject, error)
	// returns the project configuration
	// (GET /project/{projectName}/config)
	GetProjectConfig(c *gin.Context, request GetProjectConfigRequestObject) (GetProjectConfigResponseObject, error)
	// updates the project configuration
	// (PUT /project/{projectName}/config)
	UpdateProjectConfig(c *gin.Context, request UpdateProjectConfigRequestObject) (UpdateProjectConfigResponseObject, error)
	// creates initial data (teams, tags...) for a new project
	// (POST /project/{projectName}/initialize)
	InitializeProject(c *gin.Context, request InitializeProjectRequestObject) (InitializeProjectResponseObject, error)
	// create team.
	// (POST /project/{projectName}/team/)
	CreateTeam(c *gin.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)
	// create workitemtag.
	// (POST /project/{projectName}/work-item-tag/)
	CreateWorkItemTag(c *gin.Context, request CreateWorkItemTagRequestObject) (CreateWorkItemTagResponseObject, error)
	// create workitemtype.
	// (POST /project/{projectName}/work-item-type/)
	CreateWorkItemType(c *gin.Context, request CreateWorkItemTypeRequestObject) (CreateWorkItemTypeResponseObject, error)
	// returns workitems for a project
	// (GET /project/{projectName}/workitems)
	GetProjectWorkitems(c *gin.Context, request GetProjectWorkitemsRequestObject) (GetProjectWorkitemsResponseObject, error)
	// delete team.
	// (DELETE /team/{teamID})
	DeleteTeam(c *gin.Context, request DeleteTeamRequestObject) (DeleteTeamResponseObject, error)
	// get team.
	// (GET /team/{teamID})
	GetTeam(c *gin.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)
	// update team.
	// (PATCH /team/{teamID})
	UpdateTeam(c *gin.Context, request UpdateTeamRequestObject) (UpdateTeamResponseObject, error)
	// create time entry.
	// (POST /time-entry/)
	CreateTimeEntry(c *gin.Context, request CreateTimeEntryRequestObject) (CreateTimeEntryResponseObject, error)
	// delete time-entry.
	// (DELETE /time-entry/{timeEntryID})
	DeleteTimeEntry(c *gin.Context, request DeleteTimeEntryRequestObject) (DeleteTimeEntryResponseObject, error)
	// get time-entry.
	// (GET /time-entry/{timeEntryID})
	GetTimeEntry(c *gin.Context, request GetTimeEntryRequestObject) (GetTimeEntryResponseObject, error)
	// update time-entry.
	// (PATCH /time-entry/{timeEntryID})
	UpdateTimeEntry(c *gin.Context, request UpdateTimeEntryRequestObject) (UpdateTimeEntryResponseObject, error)
	// returns the logged in user
	// (GET /user/me)
	GetCurrentUser(c *gin.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Get paginated users
	// (GET /user/page)
	GetPaginatedUsers(c *gin.Context, request GetPaginatedUsersRequestObject) (GetPaginatedUsersResponseObject, error)
	// deletes the user by id
	// (DELETE /user/{id})
	DeleteUser(c *gin.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// updates the user by id
	// (PATCH /user/{id})
	UpdateUser(c *gin.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// updates user role and scopes by id
	// (PATCH /user/{id}/authorization)
	UpdateUserAuthorization(c *gin.Context, request UpdateUserAuthorizationRequestObject) (UpdateUserAuthorizationResponseObject, error)
	// delete workitemtag.
	// (DELETE /work-item-tag/{workItemTagID})
	DeleteWorkItemTag(c *gin.Context, request DeleteWorkItemTagRequestObject) (DeleteWorkItemTagResponseObject, error)
	// get workitemtag.
	// (GET /work-item-tag/{workItemTagID})
	GetWorkItemTag(c *gin.Context, request GetWorkItemTagRequestObject) (GetWorkItemTagResponseObject, error)
	// update workitemtag.
	// (PATCH /work-item-tag/{workItemTagID})
	UpdateWorkItemTag(c *gin.Context, request UpdateWorkItemTagRequestObject) (UpdateWorkItemTagResponseObject, error)
	// delete workitemtype.
	// (DELETE /work-item-type/{workItemTypeID})
	DeleteWorkItemType(c *gin.Context, request DeleteWorkItemTypeRequestObject) (DeleteWorkItemTypeResponseObject, error)
	// get workitemtype.
	// (GET /work-item-type/{workItemTypeID})
	GetWorkItemType(c *gin.Context, request GetWorkItemTypeRequestObject) (GetWorkItemTypeResponseObject, error)
	// update workitemtype.
	// (PATCH /work-item-type/{workItemTypeID})
	UpdateWorkItemType(c *gin.Context, request UpdateWorkItemTypeRequestObject) (UpdateWorkItemTypeResponseObject, error)
	// create workitem
	// (POST /work-item/)
	CreateWorkitem(c *gin.Context, request CreateWorkitemRequestObject) (CreateWorkitemResponseObject, error)
	// Get paginated user work-item
	// (GET /work-item/page)
	GetPaginatedWorkItem(c *gin.Context, request GetPaginatedWorkItemRequestObject) (GetPaginatedWorkItemResponseObject, error)
	// delete workitem
	// (DELETE /work-item/{workItemID}/)
	DeleteWorkitem(c *gin.Context, request DeleteWorkitemRequestObject) (DeleteWorkitemResponseObject, error)
	// get workitem
	// (GET /work-item/{workItemID}/)
	GetWorkItem(c *gin.Context, request GetWorkItemRequestObject) (GetWorkItemResponseObject, error)
	// update workitem
	// (PATCH /work-item/{workItemID}/)
	UpdateWorkitem(c *gin.Context, request UpdateWorkitemRequestObject) (UpdateWorkitemResponseObject, error)
	// create work item comment.
	// (POST /work-item/{workItemID}/comment/)
	CreateWorkItemComment(c *gin.Context, request CreateWorkItemCommentRequestObject) (CreateWorkItemCommentResponseObject, error)
	// delete .
	// (DELETE /work-item/{workItemID}/comment/{workItemCommentID})
	DeleteWorkItemComment(c *gin.Context, request DeleteWorkItemCommentRequestObject) (DeleteWorkItemCommentResponseObject, error)
	// get work item comment.
	// (GET /work-item/{workItemID}/comment/{workItemCommentID})
	GetWorkItemComment(c *gin.Context, request GetWorkItemCommentRequestObject) (GetWorkItemCommentResponseObject, error)
	// update work item comment.
	// (PATCH /work-item/{workItemID}/comment/{workItemCommentID})
	UpdateWorkItemComment(c *gin.Context, request UpdateWorkItemCommentRequestObject) (UpdateWorkItemCommentResponseObject, error)
	middlewares(opID OperationID) []gin.HandlerFunc
	authMiddlewares(opID OperationID) []gin.HandlerFunc
}

type (
	StrictHandlerFunc    = strictgin.StrictGinHandlerFunc
	StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc
)

func NewStrictHandler(ssi StrictServerInterface, strictMiddlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandlers{ssi: ssi, strictMiddlewares: strictMiddlewares}
}

type strictHandlers struct {
	ssi               StrictServerInterface
	strictMiddlewares []StrictMiddlewareFunc
}

func (sh *strictHandlers) middlewares(opID OperationID) []gin.HandlerFunc {
	return sh.ssi.middlewares(opID)
}

func (sh *strictHandlers) authMiddlewares(opID OperationID) []gin.HandlerFunc {
	return sh.ssi.authMiddlewares(opID)
}

// DeleteActivity operation middleware
func (sh *strictHandlers) DeleteActivity(ctx *gin.Context, activityID models.ActivityID) {
	var request DeleteActivityRequestObject

	request.ActivityID = activityID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteActivity(ctx, request.(DeleteActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteActivityResponseObject); ok {
		if err := validResponse.VisitDeleteActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandlers) GetActivity(ctx *gin.Context, activityID models.ActivityID) {
	var request GetActivityRequestObject

	request.ActivityID = activityID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateActivity operation middleware
func (sh *strictHandlers) UpdateActivity(ctx *gin.Context, activityID models.ActivityID) {
	var request UpdateActivityRequestObject

	request.ActivityID = activityID

	// UpdateActivityRequest
	var body UpdateActivityRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateActivity(ctx, request.(UpdateActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateActivityResponseObject); ok {
		if err := validResponse.VisitUpdateActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminPing operation middleware
func (sh *strictHandlers) AdminPing(ctx *gin.Context) {
	var request AdminPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminPing(ctx, request.(AdminPingRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "AdminPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AdminPingResponseObject); ok {
		if err := validResponse.VisitAdminPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// MyProviderCallback operation middleware
func (sh *strictHandlers) MyProviderCallback(ctx *gin.Context) {
	var request MyProviderCallbackRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MyProviderCallback(ctx, request.(MyProviderCallbackRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "MyProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(MyProviderCallbackResponseObject); ok {
		if err := validResponse.VisitMyProviderCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// MyProviderLogin operation middleware
func (sh *strictHandlers) MyProviderLogin(ctx *gin.Context, params externalRef0.MyProviderLoginParams) {
	var request MyProviderLoginRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MyProviderLogin(ctx, request.(MyProviderLoginRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "MyProviderLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(MyProviderLoginResponseObject); ok {
		if err := validResponse.VisitMyProviderLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Events operation middleware
func (sh *strictHandlers) Events(ctx *gin.Context, params externalRef0.EventsParams) {
	var request EventsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Events(ctx, request.(EventsRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "Events")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EventsResponseObject); ok {
		if err := validResponse.VisitEventsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaginatedNotifications operation middleware
func (sh *strictHandlers) GetPaginatedNotifications(ctx *gin.Context, params externalRef0.GetPaginatedNotificationsParams) {
	var request GetPaginatedNotificationsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaginatedNotifications(ctx, request.(GetPaginatedNotificationsRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetPaginatedNotifications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPaginatedNotificationsResponseObject); ok {
		if err := validResponse.VisitGetPaginatedNotificationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OpenapiYamlGet operation middleware
func (sh *strictHandlers) OpenapiYamlGet(ctx *gin.Context) {
	var request OpenapiYamlGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OpenapiYamlGet(ctx, request.(OpenapiYamlGetRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "OpenapiYamlGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OpenapiYamlGetResponseObject); ok {
		if err := validResponse.VisitOpenapiYamlGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Ping operation middleware
func (sh *strictHandlers) Ping(ctx *gin.Context) {
	var request PingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx, request.(PingRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PingResponseObject); ok {
		if err := validResponse.VisitPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProject operation middleware
func (sh *strictHandlers) GetProject(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request GetProjectRequestObject

	request.ProjectName = projectName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx, request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		if err := validResponse.VisitGetProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateActivity operation middleware
func (sh *strictHandlers) CreateActivity(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateActivityRequestObject

	request.ProjectName = projectName

	// CreateActivityRequest
	var body CreateActivityRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateActivity(ctx, request.(CreateActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateActivityResponseObject); ok {
		if err := validResponse.VisitCreateActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectBoard operation middleware
func (sh *strictHandlers) GetProjectBoard(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request GetProjectBoardRequestObject

	request.ProjectName = projectName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectBoard(ctx, request.(GetProjectBoardRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProjectBoard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectBoardResponseObject); ok {
		if err := validResponse.VisitGetProjectBoardResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectConfig operation middleware
func (sh *strictHandlers) GetProjectConfig(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request GetProjectConfigRequestObject

	request.ProjectName = projectName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectConfig(ctx, request.(GetProjectConfigRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProjectConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectConfigResponseObject); ok {
		if err := validResponse.VisitGetProjectConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectConfig operation middleware
func (sh *strictHandlers) UpdateProjectConfig(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request UpdateProjectConfigRequestObject

	request.ProjectName = projectName

	// UpdateProjectConfigRequest
	var body externalRef0.UpdateProjectConfigJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectConfig(ctx, request.(UpdateProjectConfigRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateProjectConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateProjectConfigResponseObject); ok {
		if err := validResponse.VisitUpdateProjectConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// InitializeProject operation middleware
func (sh *strictHandlers) InitializeProject(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request InitializeProjectRequestObject

	request.ProjectName = projectName

	// InitializeProjectRequest
	var body externalRef0.InitializeProjectJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InitializeProject(ctx, request.(InitializeProjectRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "InitializeProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(InitializeProjectResponseObject); ok {
		if err := validResponse.VisitInitializeProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTeam operation middleware
func (sh *strictHandlers) CreateTeam(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateTeamRequestObject

	request.ProjectName = projectName

	// CreateTeamRequest
	var body CreateTeamRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx, request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		if err := validResponse.VisitCreateTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkItemTag operation middleware
func (sh *strictHandlers) CreateWorkItemTag(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateWorkItemTagRequestObject

	request.ProjectName = projectName

	// CreateWorkItemTagRequest
	var body CreateWorkItemTagRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkItemTag(ctx, request.(CreateWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkItemTagResponseObject); ok {
		if err := validResponse.VisitCreateWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkItemType operation middleware
func (sh *strictHandlers) CreateWorkItemType(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateWorkItemTypeRequestObject

	request.ProjectName = projectName

	// CreateWorkItemTypeRequest
	var body CreateWorkItemTypeRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkItemType(ctx, request.(CreateWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitCreateWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectWorkitems operation middleware
func (sh *strictHandlers) GetProjectWorkitems(ctx *gin.Context, projectName externalRef0.ProjectName, params externalRef0.GetProjectWorkitemsParams) {
	var request GetProjectWorkitemsRequestObject

	request.ProjectName = projectName
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectWorkitems(ctx, request.(GetProjectWorkitemsRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProjectWorkitems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectWorkitemsResponseObject); ok {
		if err := validResponse.VisitGetProjectWorkitemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeam operation middleware
func (sh *strictHandlers) DeleteTeam(ctx *gin.Context, teamID models.TeamID) {
	var request DeleteTeamRequestObject

	request.TeamID = teamID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeam(ctx, request.(DeleteTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTeamResponseObject); ok {
		if err := validResponse.VisitDeleteTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTeam operation middleware
func (sh *strictHandlers) GetTeam(ctx *gin.Context, teamID models.TeamID) {
	var request GetTeamRequestObject

	request.TeamID = teamID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx, request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		if err := validResponse.VisitGetTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTeam operation middleware
func (sh *strictHandlers) UpdateTeam(ctx *gin.Context, teamID models.TeamID) {
	var request UpdateTeamRequestObject

	request.TeamID = teamID

	// UpdateTeamRequest
	var body UpdateTeamRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTeam(ctx, request.(UpdateTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTeamResponseObject); ok {
		if err := validResponse.VisitUpdateTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTimeEntry operation middleware
func (sh *strictHandlers) CreateTimeEntry(ctx *gin.Context) {
	var request CreateTimeEntryRequestObject

	// CreateTimeEntryRequest
	var body CreateTimeEntryRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTimeEntry(ctx, request.(CreateTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTimeEntryResponseObject); ok {
		if err := validResponse.VisitCreateTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTimeEntry operation middleware
func (sh *strictHandlers) DeleteTimeEntry(ctx *gin.Context, timeEntryID models.TimeEntryID) {
	var request DeleteTimeEntryRequestObject

	request.TimeEntryID = timeEntryID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTimeEntry(ctx, request.(DeleteTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTimeEntryResponseObject); ok {
		if err := validResponse.VisitDeleteTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTimeEntry operation middleware
func (sh *strictHandlers) GetTimeEntry(ctx *gin.Context, timeEntryID models.TimeEntryID) {
	var request GetTimeEntryRequestObject

	request.TimeEntryID = timeEntryID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTimeEntry(ctx, request.(GetTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTimeEntryResponseObject); ok {
		if err := validResponse.VisitGetTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTimeEntry operation middleware
func (sh *strictHandlers) UpdateTimeEntry(ctx *gin.Context, timeEntryID models.TimeEntryID) {
	var request UpdateTimeEntryRequestObject

	request.TimeEntryID = timeEntryID

	// UpdateTimeEntryRequest
	var body UpdateTimeEntryRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTimeEntry(ctx, request.(UpdateTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTimeEntryResponseObject); ok {
		if err := validResponse.VisitUpdateTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandlers) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaginatedUsers operation middleware
func (sh *strictHandlers) GetPaginatedUsers(ctx *gin.Context, params externalRef0.GetPaginatedUsersParams) {
	var request GetPaginatedUsersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaginatedUsers(ctx, request.(GetPaginatedUsersRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetPaginatedUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPaginatedUsersResponseObject); ok {
		if err := validResponse.VisitGetPaginatedUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandlers) DeleteUser(ctx *gin.Context, id uuid.UUID) {
	var request DeleteUserRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandlers) UpdateUser(ctx *gin.Context, id uuid.UUID) {
	var request UpdateUserRequestObject

	request.Id = id

	// UpdateUserRequest
	var body externalRef0.UpdateUserJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserAuthorization operation middleware
func (sh *strictHandlers) UpdateUserAuthorization(ctx *gin.Context, id uuid.UUID) {
	var request UpdateUserAuthorizationRequestObject

	request.Id = id

	// UpdateUserAuthorizationRequest
	var body externalRef0.UpdateUserAuthorizationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserAuthorization(ctx, request.(UpdateUserAuthorizationRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateUserAuthorization")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserAuthorizationResponseObject); ok {
		if err := validResponse.VisitUpdateUserAuthorizationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkItemTag operation middleware
func (sh *strictHandlers) DeleteWorkItemTag(ctx *gin.Context, workItemTagID models.WorkItemTagID) {
	var request DeleteWorkItemTagRequestObject

	request.WorkItemTagID = workItemTagID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkItemTag(ctx, request.(DeleteWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkItemTagResponseObject); ok {
		if err := validResponse.VisitDeleteWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItemTag operation middleware
func (sh *strictHandlers) GetWorkItemTag(ctx *gin.Context, workItemTagID models.WorkItemTagID) {
	var request GetWorkItemTagRequestObject

	request.WorkItemTagID = workItemTagID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItemTag(ctx, request.(GetWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemTagResponseObject); ok {
		if err := validResponse.VisitGetWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkItemTag operation middleware
func (sh *strictHandlers) UpdateWorkItemTag(ctx *gin.Context, workItemTagID models.WorkItemTagID) {
	var request UpdateWorkItemTagRequestObject

	request.WorkItemTagID = workItemTagID

	// UpdateWorkItemTagRequest
	var body UpdateWorkItemTagRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkItemTag(ctx, request.(UpdateWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkItemTagResponseObject); ok {
		if err := validResponse.VisitUpdateWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkItemType operation middleware
func (sh *strictHandlers) DeleteWorkItemType(ctx *gin.Context, workItemTypeID models.WorkItemTypeID) {
	var request DeleteWorkItemTypeRequestObject

	request.WorkItemTypeID = workItemTypeID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkItemType(ctx, request.(DeleteWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitDeleteWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItemType operation middleware
func (sh *strictHandlers) GetWorkItemType(ctx *gin.Context, workItemTypeID models.WorkItemTypeID) {
	var request GetWorkItemTypeRequestObject

	request.WorkItemTypeID = workItemTypeID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItemType(ctx, request.(GetWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitGetWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkItemType operation middleware
func (sh *strictHandlers) UpdateWorkItemType(ctx *gin.Context, workItemTypeID models.WorkItemTypeID) {
	var request UpdateWorkItemTypeRequestObject

	request.WorkItemTypeID = workItemTypeID

	// UpdateWorkItemTypeRequest
	var body UpdateWorkItemTypeRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkItemType(ctx, request.(UpdateWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitUpdateWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkitem operation middleware
func (sh *strictHandlers) CreateWorkitem(ctx *gin.Context) {
	var request CreateWorkitemRequestObject

	// CreateWorkitemRequest
	var body externalRef0.CreateWorkitemJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkitem(ctx, request.(CreateWorkitemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkitem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkitemResponseObject); ok {
		if err := validResponse.VisitCreateWorkitemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaginatedWorkItem operation middleware
func (sh *strictHandlers) GetPaginatedWorkItem(ctx *gin.Context, params externalRef0.GetPaginatedWorkItemParams) {
	var request GetPaginatedWorkItemRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaginatedWorkItem(ctx, request.(GetPaginatedWorkItemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetPaginatedWorkItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPaginatedWorkItemResponseObject); ok {
		if err := validResponse.VisitGetPaginatedWorkItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkitem operation middleware
func (sh *strictHandlers) DeleteWorkitem(ctx *gin.Context, workItemID models.WorkItemID) {
	var request DeleteWorkitemRequestObject

	request.WorkItemID = workItemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkitem(ctx, request.(DeleteWorkitemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkitem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkitemResponseObject); ok {
		if err := validResponse.VisitDeleteWorkitemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItem operation middleware
func (sh *strictHandlers) GetWorkItem(ctx *gin.Context, workItemID models.WorkItemID) {
	var request GetWorkItemRequestObject

	request.WorkItemID = workItemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItem(ctx, request.(GetWorkItemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemResponseObject); ok {
		if err := validResponse.VisitGetWorkItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkitem operation middleware
func (sh *strictHandlers) UpdateWorkitem(ctx *gin.Context, workItemID models.WorkItemID) {
	var request UpdateWorkitemRequestObject

	request.WorkItemID = workItemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkitem(ctx, request.(UpdateWorkitemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkitem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkitemResponseObject); ok {
		if err := validResponse.VisitUpdateWorkitemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkItemComment operation middleware
func (sh *strictHandlers) CreateWorkItemComment(ctx *gin.Context, workItemID int) {
	var request CreateWorkItemCommentRequestObject

	request.WorkItemID = workItemID

	// CreateWorkItemCommentRequest
	var body CreateWorkItemCommentRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkItemComment(ctx, request.(CreateWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitCreateWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkItemComment operation middleware
func (sh *strictHandlers) DeleteWorkItemComment(ctx *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID) {
	var request DeleteWorkItemCommentRequestObject

	request.WorkItemID = workItemID
	request.WorkItemCommentID = workItemCommentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkItemComment(ctx, request.(DeleteWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitDeleteWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItemComment operation middleware
func (sh *strictHandlers) GetWorkItemComment(ctx *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID) {
	var request GetWorkItemCommentRequestObject

	request.WorkItemID = workItemID
	request.WorkItemCommentID = workItemCommentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItemComment(ctx, request.(GetWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitGetWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkItemComment operation middleware
func (sh *strictHandlers) UpdateWorkItemComment(ctx *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID) {
	var request UpdateWorkItemCommentRequestObject

	request.WorkItemID = workItemID
	request.WorkItemCommentID = workItemCommentID

	// UpdateWorkItemCommentRequest
	var body UpdateWorkItemCommentRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkItemComment(ctx, request.(UpdateWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitUpdateWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
	"HPNSUNtE8jdTymr5/wEAAP//xfiruihHAQA=",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package rest

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	externalRef0 "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
	"github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// NotificationType is generated from database enum 'notification_type'.
const (
	NotificationTypeGlobal   NotificationType = "global"
	NotificationTypePersonal NotificationType = "personal"
)

// AllNotificationTypeValues returns all possible values for NotificationType.
func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypeGlobal,
		NotificationTypePersonal,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// Project is generated from projects table.
const (
	ProjectDemo    Project = "demo"
	ProjectDemoTwo Project = "demo_two"
)

// AllProjectValues returns all possible values for Project.
func AllProjectValues() []Project {
	return []Project{
		ProjectDemo,
		ProjectDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// WorkItemRole is generated from database enum 'work_item_role'.
const (
	WorkItemRolePreparer WorkItemRole = "preparer"
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// AllWorkItemRoleValues returns all possible values for WorkItemRole.
func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

/* Ignoring existing struct (rest/models.go) Activity */

/* Ignoring existing struct (rest/models.go) CreateActivityRequest */

/* Ignoring existing struct (rest/models.go) CreateDemoTwoWorkItemRequest */

/* Ignoring existing struct (rest/models.go) CreateDemoWorkItemRequest */

/* Ignoring existing struct (rest/models.go) CreateProjectBoardRequest */

/* Ignoring existing struct (rest/models.go) CreateTeamRequest */

/* Ignoring existing struct (rest/models.go) CreateTimeEntryRequest */

/* Ignoring existing struct (rest/models.go) CreateWorkItemCommentRequest */

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union json.RawMessage
}

/* Ignoring existing struct (rest/models.go) CreateWorkItemTagRequest */

/* Ignoring existing struct (rest/models.go) CreateWorkItemTypeRequest */

/* Skipping definition of db struct db.Activity */

/* Skipping definition of db struct db.ActivityCreateParams */

/* Skipping definition of db struct db.CacheDemoWorkItemJoins */

/* Skipping definition of db struct db.DemoTwoWorkItem */

/* Skipping definition of db struct db.DemoTwoWorkItemCreateParams */

/* Skipping definition of db struct db.DemoWorkItem */

/* Skipping definition of db struct db.DemoWorkItemCreateParams */

/* Skipping definition of db struct db.KanbanStep */

/* Skipping definition of db struct db.Notification */

/* Skipping definition of db struct db.NotificationID */

/* Skipping definition of db struct db.Project */

/* Skipping definition of db struct db.ProjectID */

/* Skipping definition of db struct db.Team */

/* Skipping definition of db struct db.TeamCreateParams */

/* Skipping definition of db struct db.TimeEntry */

/* Skipping definition of db struct db.User */

/* Skipping definition of db struct db.UserAPIKey */

/* Skipping definition of db struct db.UserID */

/* Skipping definition of db struct db.UserJoins */

/* Skipping definition of db struct db.UserNotification */

/* Skipping definition of db struct db.UserWIAUWorkItem */

/* Skipping definition of db struct db.UserWIAWorkItem */

/* Skipping definition of db struct db.WorkItem */

/* Skipping definition of db struct db.WorkItemComment */

/* Skipping definition of db struct db.WorkItemCreateParams */

/* Skipping definition of db struct db.WorkItemID */

/* Skipping definition of db struct db.WorkItemM2MAssigneeWIA */

/* Skipping definition of db struct db.WorkItemRole */

/* Skipping definition of db struct db.WorkItemTag */

/* Skipping definition of db struct db.WorkItemTagCreateParams */

/* Skipping definition of db struct db.WorkItemType */

/* Skipping definition of db struct db.WorkItemTypeID */

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

/* Ignoring existing struct (rest/models.go) DemoTwoWorkItem */

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

/* Ignoring existing struct (rest/models.go) DemoWorkItem */

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

/* Ignoring existing struct (rest/models.go) GetCacheDemoWorkItemQueryParameters */

/* Ignoring existing struct (rest/models.go) GetCurrentUserQueryParameters */

/* Ignoring existing struct (rest/models.go) GetPaginatedUsersQueryParameters */

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            externalRef0.ErrorCode            `json:"type"`
	ValidationError *externalRef0.HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]externalRef0.ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

/* Ignoring existing struct (rest/models.go) Notification */

// NotificationType is generated from database enum 'notification_type'.
type NotificationType string

/* Ignoring existing struct (rest/models.go) PaginatedNotificationsResponse */

/* Ignoring existing struct (rest/models.go) PaginatedUsersResponse */

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *externalRef0.PaginationFilter `json:"filter,omitempty"`
	Sort   *externalRef0.Direction        `json:"sort,omitempty"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union json.RawMessage
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode externalRef0.PaginationFilterModes `json:"filterMode"`
	Value      []string                           `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                              `json:"caseSensitive"`
	FilterMode    externalRef0.PaginationFilterModes `json:"filterMode"`
	Value         *string                            `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]externalRef0.Pagination

/* Ignoring existing struct (rest/models.go) PaginationPage */

// Project is generated from projects table.
type Project string

/* Ignoring existing struct (rest/models.go) ProjectBoard */

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]externalRef0.ProjectConfigField `json:"fields,omitempty"`
	Header        *[]string                          `json:"header,omitempty"`
	Visualization *map[string]interface{}            `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []externalRef0.Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   externalRef0.WorkItemRole `json:"role"`
	UserID db.UserID                 `json:"userID"`
}

/* Ignoring existing struct (rest/models.go) SharedWorkItemJoins */

/* Ignoring existing struct (rest/models.go) Team */

/* Ignoring existing struct (rest/models.go) TimeEntry */

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []externalRef0.Topic

/* Ignoring existing struct (rest/models.go) UpdateActivityRequest */

/* Ignoring existing struct (rest/models.go) UpdateTeamRequest */

/* Ignoring existing struct (rest/models.go) UpdateTimeEntryRequest */

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *externalRef0.Role   `json:"role,omitempty"`
	Scopes *externalRef0.Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

/* Ignoring existing struct (rest/models.go) UpdateWorkItemCommentRequest */

/* Ignoring existing struct (rest/models.go) UpdateWorkItemTagRequest */

/* Ignoring existing struct (rest/models.go) UpdateWorkItemTypeRequest */

/* Ignoring existing struct (rest/models.go) User */

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

// WorkItem defines the model for WorkItem.
type WorkItem struct {
	union json.RawMessage
}

/* Ignoring existing struct (rest/models.go) WorkItemBase */

/* Ignoring existing struct (rest/models.go) WorkItemComment */

// WorkItemRole is generated from database enum 'work_item_role'.
type WorkItemRole string

/* Ignoring existing struct (rest/models.go) WorkItemTag */

/* Ignoring existing struct (rest/models.go) WorkItemType */

// ProjectName is generated from projects table.
type ProjectName = externalRef0.Project

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName externalRef0.Project `form:"projectName" json:"projectName"`
	Topics      externalRef0.Topics  `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int                    `form:"limit" json:"limit"`
	Direction externalRef0.Direction `form:"direction" json:"direction"`
	Cursor    string                 `form:"cursor" json:"cursor"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit     int                    `form:"limit" json:"limit"`
	Direction externalRef0.Direction `form:"direction" json:"direction"`
	Cursor    string                 `form:"cursor" json:"cursor"`
	Filter    *struct {
		Bools   *[]bool `json:"bools,omitempty"`
		Ints    *[]int  `json:"ints,omitempty"`
		Objects *[]struct {
			NestedObj *string `json:"nestedObj,omitempty"`
		} `json:"objects,omitempty"`
		Post *[]string `json:"post,omitempty"`
	} `json:"filter,omitempty"`
	Nested *struct {
		Obj *struct {
			NestedObj *string `json:"nestedObj,omitempty"`
		} `json:"obj,omitempty"`
	} `json:"nested,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItem returns the union data inside the WorkItem as a DemoWorkItem
func (t WorkItem) AsDemoWorkItem() (DemoWorkItem, error) {
	var body DemoWorkItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// AsDemoTwoWorkItem returns the union data inside the WorkItem as a DemoTwoWorkItem
func (t WorkItem) AsDemoTwoWorkItem() (DemoTwoWorkItem, error) {
	var body DemoTwoWorkItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t WorkItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// delete activity.
	// (DELETE /activity/{activityID})
	DeleteActivity(c *gin.Context, activityID db.ActivityID)
	// get activity.
	// (GET /activity/{activityID})
	GetActivity(c *gin.Context, activityID db.ActivityID)
	// update activity.
	// (PATCH /activity/{activityID})
	UpdateActivity(c *gin.Context, activityID db.ActivityID)
	// Ping pongs
	// (GET /admin/ping)
	AdminPing(c *gin.Context)

	// (GET /auth/myprovider/callback)
	MyProviderCallback(c *gin.Context)

	// (GET /auth/myprovider/login)
	MyProviderLogin(c *gin.Context, params externalRef0.MyProviderLoginParams)

	// (GET /events)
	Events(c *gin.Context, params externalRef0.EventsParams)
	// Get paginated user notifications
	// (GET /notifications/user/page)
	GetPaginatedNotifications(c *gin.Context, params externalRef0.GetPaginatedNotificationsParams)
	// Returns this very OpenAPI spec.
	// (GET /openapi.yaml)
	OpenapiYamlGet(c *gin.Context)
	// Ping pongs
	// (GET /ping)
	Ping(c *gin.Context)
	// returns board data for a project
	// (GET /project/{projectName}/)
	GetProject(c *gin.Context, projectName externalRef0.ProjectName)
	// create activity.
	// (POST /project/{projectName}/activity/)
	CreateActivity(c *gin.Context, projectName externalRef0.ProjectName)
	// returns board data for a project
	// (GET /project/{projectName}/board)
	GetProjectBoard(c *gin.Context, projectName externalRef0.ProjectName)
	// returns the project configuration
	// (GET /project/{projectName}/config)
	GetProjectConfig(c *gin.Context, projectName externalRef0.ProjectName)
	// updates the project configuration
	// (PUT /project/{projectName}/config)
	UpdateProjectConfig(c *gin.Context, projectName externalRef0.ProjectName)
	// creates initial data (teams, tags...) for a new project
	// (POST /project/{projectName}/initialize)
	InitializeProject(c *gin.Context, projectName externalRef0.ProjectName)
	// create team.
	// (POST /project/{projectName}/team/)
	CreateTeam(c *gin.Context, projectName externalRef0.ProjectName)
	// create workitemtag.
	// (POST /project/{projectName}/work-item-tag/)
	CreateWorkItemTag(c *gin.Context, projectName externalRef0.ProjectName)
	// create workitemtype.
	// (POST /project/{projectName}/work-item-type/)
	CreateWorkItemType(c *gin.Context, projectName externalRef0.ProjectName)
	// returns workitems for a project
	// (GET /project/{projectName}/workitems)
	GetProjectWorkitems(c *gin.Context, projectName externalRef0.ProjectName, params externalRef0.GetProjectWorkitemsParams)
	// delete team.
	// (DELETE /team/{teamID})
	DeleteTeam(c *gin.Context, teamID db.TeamID)
	// get team.
	// (GET /team/{teamID})
	GetTeam(c *gin.Context, teamID db.TeamID)
	// update team.
	// (PATCH /team/{teamID})
	UpdateTeam(c *gin.Context, teamID db.TeamID)
	// create time entry.
	// (POST /time-entry/)
	CreateTimeEntry(c *gin.Context)
	// delete time-entry.
	// (DELETE /time-entry/{timeEntryID})
	DeleteTimeEntry(c *gin.Context, timeEntryID db.TimeEntryID)
	// get time-entry.
	// (GET /time-entry/{timeEntryID})
	GetTimeEntry(c *gin.Context, timeEntryID db.TimeEntryID)
	// update time-entry.
	// (PATCH /time-entry/{timeEntryID})
	UpdateTimeEntry(c *gin.Context, timeEntryID db.TimeEntryID)
	// returns the logged in user
	// (GET /user/me)
	GetCurrentUser(c *gin.Context)
	// Get paginated users
	// (GET /user/page)
	GetPaginatedUsers(c *gin.Context, params externalRef0.GetPaginatedUsersParams)
	// deletes the user by id
	// (DELETE /user/{id})
	DeleteUser(c *gin.Context, id uuid.UUID)
	// updates the user by id
	// (PATCH /user/{id})
	UpdateUser(c *gin.Context, id uuid.UUID)
	// updates user role and scopes by id
	// (PATCH /user/{id}/authorization)
	UpdateUserAuthorization(c *gin.Context, id uuid.UUID)
	// delete workitemtag.
	// (DELETE /work-item-tag/{workItemTagID})
	DeleteWorkItemTag(c *gin.Context, workItemTagID db.WorkItemTagID)
	// get workitemtag.
	// (GET /work-item-tag/{workItemTagID})
	GetWorkItemTag(c *gin.Context, workItemTagID db.WorkItemTagID)
	// update workitemtag.
	// (PATCH /work-item-tag/{workItemTagID})
	UpdateWorkItemTag(c *gin.Context, workItemTagID db.WorkItemTagID)
	// delete workitemtype.
	// (DELETE /work-item-type/{workItemTypeID})
	DeleteWorkItemType(c *gin.Context, workItemTypeID db.WorkItemTypeID)
	// get workitemtype.
	// (GET /work-item-type/{workItemTypeID})
	GetWorkItemType(c *gin.Context, workItemTypeID db.WorkItemTypeID)
	// update workitemtype.
	// (PATCH /work-item-type/{workItemTypeID})
	UpdateWorkItemType(c *gin.Context, workItemTypeID db.WorkItemTypeID)
	// create workitem
	// (POST /work-item/)
	CreateWorkitem(c *gin.Context)
	// delete workitem
	// (DELETE /work-item/{workItemID}/)
	DeleteWorkitem(c *gin.Context, workItemID db.WorkItemID)
	// get workitem
	// (GET /work-item/{workItemID}/)
	GetWorkItem(c *gin.Context, workItemID db.WorkItemID)
	// update workitem
	// (PATCH /work-item/{workItemID}/)
	UpdateWorkitem(c *gin.Context, workItemID db.WorkItemID)
	// create work item comment.
	// (POST /work-item/{workItemID}/comment/)
	CreateWorkItemComment(c *gin.Context, workItemID int)
	// delete .
	// (DELETE /work-item/{workItemID}/comment/{workItemCommentID})
	DeleteWorkItemComment(c *gin.Context, workItemID db.WorkItemID, workItemCommentID db.WorkItemCommentID)
	// get work item comment.
	// (GET /work-item/{workItemID}/comment/{workItemCommentID})
	GetWorkItemComment(c *gin.Context, workItemID db.WorkItemID, workItemCommentID db.WorkItemCommentID)
	// update work item comment.
	// (PATCH /work-item/{workItemID}/comment/{workItemCommentID})
	UpdateWorkItemComment(c *gin.Context, workItemID db.WorkItemID, workItemCommentID db.WorkItemCommentID)

	middlewares(opID OperationID) []gin.HandlerFunc
	authMiddlewares(opID OperationID) []gin.HandlerFunc
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc func(c *gin.Context)

// DeleteActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "activityID" -------------
	var activityID db.ActivityID // db.ActivityID

	err = runtime.BindStyledParameter("simple", false, "activityID", c.Param("activityID"), &activityID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter activityID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteActivity(c, activityID)
}

// GetActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "activityID" -------------
	var activityID db.ActivityID // db.ActivityID

	err = runtime.BindStyledParameter("simple", false, "activityID", c.Param("activityID"), &activityID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter activityID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetActivity(c, activityID)
}

// UpdateActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "activityID" -------------
	var activityID db.ActivityID // db.ActivityID

	err = runtime.BindStyledParameter("simple", false, "activityID", c.Param("activityID"), &activityID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter activityID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateActivity(c, activityID)
}

// AdminPing operation with its own middleware.
func (siw *ServerInterfaceWrapper) AdminPing(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.AdminPing(c)
}

// MyProviderCallback operation with its own middleware.
func (siw *ServerInterfaceWrapper) MyProviderCallback(c *gin.Context) {
	siw.Handler.MyProviderCallback(c)
}

// MyProviderLogin operation with its own middleware.
func (siw *ServerInterfaceWrapper) MyProviderLogin(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.MyProviderLoginParams

	// ------------- Required query parameter "auth-redirect-uri" -------------

	if paramValue := c.Query("auth-redirect-uri"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument auth-redirect-uri is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "auth-redirect-uri", c.Request.URL.Query(), &params.AuthRedirectUri)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter auth-redirect-uri: %s", err)})
		return
	}

	siw.Handler.MyProviderLogin(c, params)
}

// Events operation with its own middleware.
func (siw *ServerInterfaceWrapper) Events(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.EventsParams

	// ------------- Required query parameter "projectName" -------------

	if paramValue := c.Query("projectName"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument projectName is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "projectName", c.Request.URL.Query(), &params.ProjectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	// ------------- Required query parameter "topics" -------------

	if paramValue := c.Query("topics"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument topics is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "topics", c.Request.URL.Query(), &params.Topics)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter topics: %s", err)})
		return
	}

	siw.Handler.Events(c, params)
}

// GetPaginatedNotifications operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetPaginatedNotifications(c *gin.Context) {
	var err error

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetPaginatedNotificationsParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "direction" -------------

	if paramValue := c.Query("direction"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument direction is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter direction: %s", err)})
		return
	}

	// ------------- Required query parameter "cursor" -------------

	if paramValue := c.Query("cursor"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument cursor is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cursor: %s", err)})
		return
	}

	siw.Handler.GetPaginatedNotifications(c, params)
}

// OpenapiYamlGet operation with its own middleware.
func (siw *ServerInterfaceWrapper) OpenapiYamlGet(c *gin.Context) {
	siw.Handler.OpenapiYamlGet(c)
}

// Ping operation with its own middleware.
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {
	siw.Handler.Ping(c)
}

// GetProject operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProject(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetProject(c, projectName)
}

// CreateActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateActivity(c, projectName)
}

// GetProjectBoard operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProjectBoard(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetProjectBoard(c, projectName)
}

// GetProjectConfig operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProjectConfig(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetProjectConfig(c, projectName)
}

// UpdateProjectConfig operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateProjectConfig(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateProjectConfig(c, projectName)
}

// InitializeProject operation with its own middleware.
func (siw *ServerInterfaceWrapper) InitializeProject(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.InitializeProject(c, projectName)
}

// CreateTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateTeam(c, projectName)
}

// CreateWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkItemTag(c, projectName)
}

// CreateWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkItemType(c, projectName)
}

// GetProjectWorkitems operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProjectWorkitems(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetProjectWorkitemsParams

	// ------------- Optional query parameter "open" -------------

	err = runtime.BindQueryParameter("form", true, false, "open", c.Request.URL.Query(), &params.Open)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter open: %s", err)})
		return
	}

	// ------------- Optional query parameter "deleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "deleted", c.Request.URL.Query(), &params.Deleted)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter deleted: %s", err)})
		return
	}

	siw.Handler.GetProjectWorkitems(c, projectName, params)
}

// DeleteTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID db.TeamID // db.TeamID

	err = runtime.BindStyledParameter("simple", false, "teamID", c.Param("teamID"), &teamID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter teamID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteTeam(c, teamID)
}

// GetTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID db.TeamID // db.TeamID

	err = runtime.BindStyledParameter("simple", false, "teamID", c.Param("teamID"), &teamID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter teamID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetTeam(c, teamID)
}

// UpdateTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID db.TeamID // db.TeamID

	err = runtime.BindStyledParameter("simple", false, "teamID", c.Param("teamID"), &teamID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter teamID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateTeam(c, teamID)
}

// CreateTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateTimeEntry(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateTimeEntry(c)
}

// DeleteTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteTimeEntry(c *gin.Context) {
	var err error

	// ------------- Path parameter "timeEntryID" -------------
	var timeEntryID db.TimeEntryID // db.TimeEntryID

	err = runtime.BindStyledParameter("simple", false, "timeEntryID", c.Param("timeEntryID"), &timeEntryID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter timeEntryID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteTimeEntry(c, timeEntryID)
}

// GetTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetTimeEntry(c *gin.Context) {
	var err error

	// ------------- Path parameter "timeEntryID" -------------
	var timeEntryID db.TimeEntryID // db.TimeEntryID

	err = runtime.BindStyledParameter("simple", false, "timeEntryID", c.Param("timeEntryID"), &timeEntryID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter timeEntryID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetTimeEntry(c, timeEntryID)
}

// UpdateTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateTimeEntry(c *gin.Context) {
	var err error

	// ------------- Path parameter "timeEntryID" -------------
	var timeEntryID db.TimeEntryID // db.TimeEntryID

	err = runtime.BindStyledParameter("simple", false, "timeEntryID", c.Param("timeEntryID"), &timeEntryID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter timeEntryID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateTimeEntry(c, timeEntryID)
}

// GetCurrentUser operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetCurrentUser(c)
}

// GetPaginatedUsers operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetPaginatedUsers(c *gin.Context) {
	var err error

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetPaginatedUsersParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "direction" -------------

	if paramValue := c.Query("direction"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument direction is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter direction: %s", err)})
		return
	}

	// ------------- Required query parameter "cursor" -------------

	if paramValue := c.Query("cursor"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument cursor is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cursor: %s", err)})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter filter: %s", err)})
		return
	}

	// ------------- Optional query parameter "nested" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "nested", c.Request.URL.Query(), &params.Nested)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter nested: %s", err)})
		return
	}

	siw.Handler.GetPaginatedUsers(c, params)
}

// DeleteUser operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID // uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteUser(c, id)
}

// UpdateUser operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID // uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateUser(c, id)
}

// UpdateUserAuthorization operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateUserAuthorization(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID // uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateUserAuthorization(c, id)
}

// DeleteWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTagID" -------------
	var workItemTagID db.WorkItemTagID // db.WorkItemTagID

	err = runtime.BindStyledParameter("simple", false, "workItemTagID", c.Param("workItemTagID"), &workItemTagID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTagID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkItemTag(c, workItemTagID)
}

// GetWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTagID" -------------
	var workItemTagID db.WorkItemTagID // db.WorkItemTagID

	err = runtime.BindStyledParameter("simple", false, "workItemTagID", c.Param("workItemTagID"), &workItemTagID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTagID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItemTag(c, workItemTagID)
}

// UpdateWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTagID" -------------
	var workItemTagID db.WorkItemTagID // db.WorkItemTagID

	err = runtime.BindStyledParameter("simple", false, "workItemTagID", c.Param("workItemTagID"), &workItemTagID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTagID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkItemTag(c, workItemTagID)
}

// DeleteWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTypeID" -------------
	var workItemTypeID db.WorkItemTypeID // db.WorkItemTypeID

	err = runtime.BindStyledParameter("simple", false, "workItemTypeID", c.Param("workItemTypeID"), &workItemTypeID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTypeID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkItemType(c, workItemTypeID)
}

// GetWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTypeID" -------------
	var workItemTypeID db.WorkItemTypeID // db.WorkItemTypeID

	err = runtime.BindStyledParameter("simple", false, "workItemTypeID", c.Param("workItemTypeID"), &workItemTypeID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTypeID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItemType(c, workItemTypeID)
}

// UpdateWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTypeID" -------------
	var workItemTypeID db.WorkItemTypeID // db.WorkItemTypeID

	err = runtime.BindStyledParameter("simple", false, "workItemTypeID", c.Param("workItemTypeID"), &workItemTypeID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTypeID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkItemType(c, workItemTypeID)
}

// CreateWorkitem operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkitem(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkitem(c)
}

// DeleteWorkitem operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkitem(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID db.WorkItemID // db.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkitem(c, workItemID)
}

// GetWorkItem operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItem(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID db.WorkItemID // db.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItem(c, workItemID)
}

// UpdateWorkitem operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkitem(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID db.WorkItemID // db.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkitem(c, workItemID)
}

// CreateWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID int // int

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkItemComment(c, workItemID)
}

// DeleteWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID db.WorkItemID // db.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	// ------------- Path parameter "workItemCommentID" -------------
	var workItemCommentID db.WorkItemCommentID // db.WorkItemCommentID

	err = runtime.BindStyledParameter("simple", false, "workItemCommentID", c.Param("workItemCommentID"), &workItemCommentID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemCommentID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkItemComment(c, workItemID, workItemCommentID)
}

// GetWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID db.WorkItemID // db.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	// ------------- Path parameter "workItemCommentID" -------------
	var workItemCommentID db.WorkItemCommentID // db.WorkItemCommentID

	err = runtime.BindStyledParameter("simple", false, "workItemCommentID", c.Param("workItemCommentID"), &workItemCommentID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemCommentID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItemComment(c, workItemID, workItemCommentID)
}

// UpdateWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID db.WorkItemID // db.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	// ------------- Path parameter "workItemCommentID" -------------
	var workItemCommentID db.WorkItemCommentID // db.WorkItemCommentID

	err = runtime.BindStyledParameter("simple", false, "workItemCommentID", c.Param("workItemCommentID"), &workItemCommentID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemCommentID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkItemComment(c, workItemID, workItemCommentID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL string
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	// calling mw(c) directly has unexpected consequences: closed channels, etc.
	router.DELETE(options.BaseURL+"/activity/:activityID", append(
		wrapper.Handler.authMiddlewares(DeleteActivity),
		append(wrapper.Handler.middlewares(DeleteActivity), wrapper.DeleteActivity)...,
	)...)

	router.GET(options.BaseURL+"/activity/:activityID", append(
		wrapper.Handler.authMiddlewares(GetActivity),
		append(wrapper.Handler.middlewares(GetActivity), wrapper.GetActivity)...,
	)...)

	router.PATCH(options.BaseURL+"/activity/:activityID", append(
		wrapper.Handler.authMiddlewares(UpdateActivity),
		append(wrapper.Handler.middlewares(UpdateActivity), wrapper.UpdateActivity)...,
	)...)

	router.GET(options.BaseURL+"/admin/ping", append(
		wrapper.Handler.authMiddlewares(AdminPing),
		append(wrapper.Handler.middlewares(AdminPing), wrapper.AdminPing)...,
	)...)

	router.GET(options.BaseURL+"/auth/myprovider/callback", append(
		wrapper.Handler.authMiddlewares(MyProviderCallback),
		append(wrapper.Handler.middlewares(MyProviderCallback), wrapper.MyProviderCallback)...,
	)...)

	router.GET(options.BaseURL+"/auth/myprovider/login", append(
		wrapper.Handler.authMiddlewares(MyProviderLogin),
		append(wrapper.Handler.middlewares(MyProviderLogin), wrapper.MyProviderLogin)...,
	)...)

	router.GET(options.BaseURL+"/events", append(
		wrapper.Handler.authMiddlewares(Events),
		append(wrapper.Handler.middlewares(Events), wrapper.Events)...,
	)...)

	router.GET(options.BaseURL+"/notifications/user/page", append(
		wrapper.Handler.authMiddlewares(GetPaginatedNotifications),
		append(wrapper.Handler.middlewares(GetPaginatedNotifications), wrapper.GetPaginatedNotifications)...,
	)...)

	router.GET(options.BaseURL+"/openapi.yaml", append(
		wrapper.Handler.authMiddlewares(OpenapiYamlGet),
		append(wrapper.Handler.middlewares(OpenapiYamlGet), wrapper.OpenapiYamlGet)...,
	)...)

	router.GET(options.BaseURL+"/ping", append(
		wrapper.Handler.authMiddlewares(Ping),
		append(wrapper.Handler.middlewares(Ping), wrapper.Ping)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/", append(
		wrapper.Handler.authMiddlewares(GetProject),
		append(wrapper.Handler.middlewares(GetProject), wrapper.GetProject)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/activity/", append(
		wrapper.Handler.authMiddlewares(CreateActivity),
		append(wrapper.Handler.middlewares(CreateActivity), wrapper.CreateActivity)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/board", append(
		wrapper.Handler.authMiddlewares(GetProjectBoard),
		append(wrapper.Handler.middlewares(GetProjectBoard), wrapper.GetProjectBoard)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/config", append(
		wrapper.Handler.authMiddlewares(GetProjectConfig),
		append(wrapper.Handler.middlewares(GetProjectConfig), wrapper.GetProjectConfig)...,
	)...)

	router.PUT(options.BaseURL+"/project/:projectName/config", append(
		wrapper.Handler.authMiddlewares(UpdateProjectConfig),
		append(wrapper.Handler.middlewares(UpdateProjectConfig), wrapper.UpdateProjectConfig)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/initialize", append(
		wrapper.Handler.authMiddlewares(InitializeProject),
		append(wrapper.Handler.middlewares(InitializeProject), wrapper.InitializeProject)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/team/", append(
		wrapper.Handler.authMiddlewares(CreateTeam),
		append(wrapper.Handler.middlewares(CreateTeam), wrapper.CreateTeam)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/work-item-tag/", append(
		wrapper.Handler.authMiddlewares(CreateWorkItemTag),
		append(wrapper.Handler.middlewares(CreateWorkItemTag), wrapper.CreateWorkItemTag)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/work-item-type/", append(
		wrapper.Handler.authMiddlewares(CreateWorkItemType),
		append(wrapper.Handler.middlewares(CreateWorkItemType), wrapper.CreateWorkItemType)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/workitems", append(
		wrapper.Handler.authMiddlewares(GetProjectWorkitems),
		append(wrapper.Handler.middlewares(GetProjectWorkitems), wrapper.GetProjectWorkitems)...,
	)...)

	router.DELETE(options.BaseURL+"/team/:teamID", append(
		wrapper.Handler.authMiddlewares(DeleteTeam),
		append(wrapper.Handler.middlewares(DeleteTeam), wrapper.DeleteTeam)...,
	)...)

	router.GET(options.BaseURL+"/team/:teamID", append(
		wrapper.Handler.authMiddlewares(GetTeam),
		append(wrapper.Handler.middlewares(GetTeam), wrapper.GetTeam)...,
	)...)

	router.PATCH(options.BaseURL+"/team/:teamID", append(
		wrapper.Handler.authMiddlewares(UpdateTeam),
		append(wrapper.Handler.middlewares(UpdateTeam), wrapper.UpdateTeam)...,
	)...)

	router.POST(options.BaseURL+"/time-entry/", append(
		wrapper.Handler.authMiddlewares(CreateTimeEntry),
		append(wrapper.Handler.middlewares(CreateTimeEntry), wrapper.CreateTimeEntry)...,
	)...)

	router.DELETE(options.BaseURL+"/time-entry/:timeEntryID", append(
		wrapper.Handler.authMiddlewares(DeleteTimeEntry),
		append(wrapper.Handler.middlewares(DeleteTimeEntry), wrapper.DeleteTimeEntry)...,
	)...)

	router.GET(options.BaseURL+"/time-entry/:timeEntryID", append(
		wrapper.Handler.authMiddlewares(GetTimeEntry),
		append(wrapper.Handler.middlewares(GetTimeEntry), wrapper.GetTimeEntry)...,
	)...)

	router.PATCH(options.BaseURL+"/time-entry/:timeEntryID", append(
		wrapper.Handler.authMiddlewares(UpdateTimeEntry),
		append(wrapper.Handler.middlewares(UpdateTimeEntry), wrapper.UpdateTimeEntry)...,
	)...)

	router.GET(options.BaseURL+"/user/me", append(
		wrapper.Handler.authMiddlewares(GetCurrentUser),
		append(wrapper.Handler.middlewares(GetCurrentUser), wrapper.GetCurrentUser)...,
	)...)

	router.GET(options.BaseURL+"/user/page", append(
		wrapper.Handler.authMiddlewares(GetPaginatedUsers),
		append(wrapper.Handler.middlewares(GetPaginatedUsers), wrapper.GetPaginatedUsers)...,
	)...)

	router.DELETE(options.BaseURL+"/user/:id", append(
		wrapper.Handler.authMiddlewares(DeleteUser),
		append(wrapper.Handler.middlewares(DeleteUser), wrapper.DeleteUser)...,
	)...)

	router.PATCH(options.BaseURL+"/user/:id", append(
		wrapper.Handler.authMiddlewares(UpdateUser),
		append(wrapper.Handler.middlewares(UpdateUser), wrapper.UpdateUser)...,
	)...)

	router.PATCH(options.BaseURL+"/user/:id/authorization", append(
		wrapper.Handler.authMiddlewares(UpdateUserAuthorization),
		append(wrapper.Handler.middlewares(UpdateUserAuthorization), wrapper.UpdateUserAuthorization)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item-tag/:workItemTagID", append(
		wrapper.Handler.authMiddlewares(DeleteWorkItemTag),
		append(wrapper.Handler.middlewares(DeleteWorkItemTag), wrapper.DeleteWorkItemTag)...,
	)...)

	router.GET(options.BaseURL+"/work-item-tag/:workItemTagID", append(
		wrapper.Handler.authMiddlewares(GetWorkItemTag),
		append(wrapper.Handler.middlewares(GetWorkItemTag), wrapper.GetWorkItemTag)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item-tag/:workItemTagID", append(
		wrapper.Handler.authMiddlewares(UpdateWorkItemTag),
		append(wrapper.Handler.middlewares(UpdateWorkItemTag), wrapper.UpdateWorkItemTag)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item-type/:workItemTypeID", append(
		wrapper.Handler.authMiddlewares(DeleteWorkItemType),
		append(wrapper.Handler.middlewares(DeleteWorkItemType), wrapper.DeleteWorkItemType)...,
	)...)

	router.GET(options.BaseURL+"/work-item-type/:workItemTypeID", append(
		wrapper.Handler.authMiddlewares(GetWorkItemType),
		append(wrapper.Handler.middlewares(GetWorkItemType), wrapper.GetWorkItemType)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item-type/:workItemTypeID", append(
		wrapper.Handler.authMiddlewares(UpdateWorkItemType),
		append(wrapper.Handler.middlewares(UpdateWorkItemType), wrapper.UpdateWorkItemType)...,
	)...)

	router.POST(options.BaseURL+"/work-item/", append(
		wrapper.Handler.authMiddlewares(CreateWorkitem),
		append(wrapper.Handler.middlewares(CreateWorkitem), wrapper.CreateWorkitem)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item/:workItemID/", append(
		wrapper.Handler.authMiddlewares(DeleteWorkitem),
		append(wrapper.Handler.middlewares(DeleteWorkitem), wrapper.DeleteWorkitem)...,
	)...)

	router.GET(options.BaseURL+"/work-item/:workItemID/", append(
		wrapper.Handler.authMiddlewares(GetWorkItem),
		append(wrapper.Handler.middlewares(GetWorkItem), wrapper.GetWorkItem)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item/:workItemID/", append(
		wrapper.Handler.authMiddlewares(UpdateWorkitem),
		append(wrapper.Handler.middlewares(UpdateWorkitem), wrapper.UpdateWorkitem)...,
	)...)

	router.POST(options.BaseURL+"/work-item/:workItemID/comment/", append(
		wrapper.Handler.authMiddlewares(CreateWorkItemComment),
		append(wrapper.Handler.middlewares(CreateWorkItemComment), wrapper.CreateWorkItemComment)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item/:workItemID/comment/:workItemCommentID", append(
		wrapper.Handler.authMiddlewares(DeleteWorkItemComment),
		append(wrapper.Handler.middlewares(DeleteWorkItemComment), wrapper.DeleteWorkItemComment)...,
	)...)

	router.GET(options.BaseURL+"/work-item/:workItemID/comment/:workItemCommentID", append(
		wrapper.Handler.authMiddlewares(GetWorkItemComment),
		append(wrapper.Handler.middlewares(GetWorkItemComment), wrapper.GetWorkItemComment)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item/:workItemID/comment/:workItemCommentID", append(
		wrapper.Handler.authMiddlewares(UpdateWorkItemComment),
		append(wrapper.Handler.middlewares(UpdateWorkItemComment), wrapper.UpdateWorkItemComment)...,
	)...)
}

type DeleteActivityRequestObject struct {
	ActivityID db.ActivityID `json:"activityID"`
}

type DeleteActivityResponseObject interface {
	VisitDeleteActivityResponse(w http.ResponseWriter) error
}

type DeleteActivity204Response struct{}

func (response DeleteActivity204Response) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteActivity401Response struct{}

func (response DeleteActivity401Response) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteActivity403Response struct{}

func (response DeleteActivity403Response) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteActivity4XXJSONResponse) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetActivityRequestObject struct {
	ActivityID db.ActivityID `json:"activityID"`
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse Activity

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivity401Response struct{}

func (response GetActivity401Response) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetActivity403Response struct{}

func (response GetActivity403Response) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetActivity4XXJSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateActivityRequestObject struct {
	ActivityID db.ActivityID `json:"activityID"`
	Body       *UpdateActivityRequest
}

type UpdateActivityResponseObject interface {
	VisitUpdateActivityResponse(w http.ResponseWriter) error
}

type UpdateActivity200JSONResponse Activity

func (response UpdateActivity200JSONResponse) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateActivity401Response struct{}

func (response UpdateActivity401Response) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateActivity403Response struct{}

func (response UpdateActivity403Response) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateActivity4XXJSONResponse) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminPingRequestObject struct{}

type AdminPingResponseObject interface {
	VisitAdminPingResponse(w http.ResponseWriter) error
}

type AdminPing200TextResponse string

func (response AdminPing200TextResponse) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type AdminPing401Response struct{}

func (response AdminPing401Response) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminPing403Response struct{}

func (response AdminPing403Response) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminPing4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response AdminPing4XXJSONResponse) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type MyProviderCallbackRequestObject struct{}

type MyProviderCallbackResponseObject interface {
	VisitMyProviderCallbackResponse(w http.ResponseWriter) error
}

type MyProviderCallback302ResponseHeaders struct {
	Location string
}

type MyProviderCallback302Response struct {
	Headers MyProviderCallback302ResponseHeaders
}

func (response MyProviderCallback302Response) VisitMyProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type MyProviderLoginRequestObject struct {
	Params externalRef0.MyProviderLoginParams
}

type MyProviderLoginResponseObject interface {
	VisitMyProviderLoginResponse(w http.ResponseWriter) error
}

type MyProviderLogin302ResponseHeaders struct {
	Location string
}

type MyProviderLogin302Response struct {
	Headers MyProviderLogin302ResponseHeaders
}

func (response MyProviderLogin302Response) VisitMyProviderLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type EventsRequestObject struct {
	Params externalRef0.EventsParams
}

type EventsResponseObject interface {
	VisitEventsResponse(w http.ResponseWriter) error
}

type Events200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response Events200TexteventStreamResponse) VisitEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetPaginatedNotificationsRequestObject struct {
	Params externalRef0.GetPaginatedNotificationsParams
}

type GetPaginatedNotificationsResponseObject interface {
	VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error
}

type GetPaginatedNotifications200JSONResponse PaginatedNotificationsResponse

func (response GetPaginatedNotifications200JSONResponse) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedNotifications401Response struct{}

func (response GetPaginatedNotifications401Response) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPaginatedNotifications403Response struct{}

func (response GetPaginatedNotifications403Response) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetPaginatedNotifications4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetPaginatedNotifications4XXJSONResponse) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OpenapiYamlGetRequestObject struct{}

type OpenapiYamlGetResponseObject interface {
	VisitOpenapiYamlGetResponse(w http.ResponseWriter) error
}

type OpenapiYamlGet200ApplicationxYamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response OpenapiYamlGet200ApplicationxYamlResponse) VisitOpenapiYamlGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/x-yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PingRequestObject struct{}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200TextResponse string

func (response Ping200TextResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type Ping401Response struct{}

func (response Ping401Response) VisitPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Ping403Response struct{}

func (response Ping403Response) VisitPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type Ping4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response Ping4XXJSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProjectRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(w http.ResponseWriter) error
}

type GetProject200JSONResponse db.Project

func (response GetProject200JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateActivityRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateActivityRequest
}

type CreateActivityResponseObject interface {
	VisitCreateActivityResponse(w http.ResponseWriter) error
}

type CreateActivity201JSONResponse Activity

func (response CreateActivity201JSONResponse) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateActivity401Response struct{}

func (response CreateActivity401Response) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateActivity403Response struct{}

func (response CreateActivity403Response) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateActivity4XXJSONResponse) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProjectBoardRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
}

type GetProjectBoardResponseObject interface {
	VisitGetProjectBoardResponse(w http.ResponseWriter) error
}

type GetProjectBoard200JSONResponse ProjectBoard

func (response GetProjectBoard200JSONResponse) VisitGetProjectBoardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectConfigRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
}

type GetProjectConfigResponseObject interface {
	VisitGetProjectConfigResponse(w http.ResponseWriter) error
}

type GetProjectConfig200JSONResponse externalRef0.ProjectConfig

func (response GetProjectConfig200JSONResponse) VisitGetProjectConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectConfigRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *externalRef0.UpdateProjectConfigJSONRequestBody
}

type UpdateProjectConfigResponseObject interface {
	VisitUpdateProjectConfigResponse(w http.ResponseWriter) error
}

type UpdateProjectConfig204Response struct{}

func (response UpdateProjectConfig204Response) VisitUpdateProjectConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type InitializeProjectRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *externalRef0.InitializeProjectJSONRequestBody
}

type InitializeProjectResponseObject interface {
	VisitInitializeProjectResponse(w http.ResponseWriter) error
}

type InitializeProject204Response struct{}

func (response InitializeProject204Response) VisitInitializeProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateTeamRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateTeamRequest
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(w http.ResponseWriter) error
}

type CreateTeam201JSONResponse Team

func (response CreateTeam201JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam401Response struct{}

func (response CreateTeam401Response) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateTeam403Response struct{}

func (response CreateTeam403Response) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateTeam4XXJSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateWorkItemTagRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateWorkItemTagRequest
}

type CreateWorkItemTagResponseObject interface {
	VisitCreateWorkItemTagResponse(w http.ResponseWriter) error
}

type CreateWorkItemTag201JSONResponse WorkItemTag

func (response CreateWorkItemTag201JSONResponse) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemTag401Response struct{}

func (response CreateWorkItemTag401Response) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateWorkItemTag403Response struct{}

func (response CreateWorkItemTag403Response) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateWorkItemTag4XXJSONResponse) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateWorkItemTypeRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateWorkItemTypeRequest
}

type CreateWorkItemTypeResponseObject interface {
	VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error
}

type CreateWorkItemType201JSONResponse WorkItemType

func (response CreateWorkItemType201JSONResponse) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemType401Response struct{}

func (response CreateWorkItemType401Response) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateWorkItemType403Response struct{}

func (response CreateWorkItemType403Response) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateWorkItemType4XXJSONResponse) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProjectWorkitemsRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Params      externalRef0.GetProjectWorkitemsParams
}

type GetProjectWorkitemsResponseObject interface {
	VisitGetProjectWorkitemsResponse(w http.ResponseWriter) error
}

type GetProjectWorkitems200JSONResponse WorkItem

func (response GetProjectWorkitems200JSONResponse) VisitGetProjectWorkitemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamRequestObject struct {
	TeamID db.TeamID `json:"teamID"`
}

type DeleteTeamResponseObject interface {
	VisitDeleteTeamResponse(w http.ResponseWriter) error
}

type DeleteTeam204Response struct{}

func (response DeleteTeam204Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTeam401Response struct{}

func (response DeleteTeam401Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteTeam403Response struct{}

func (response DeleteTeam403Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteTeam4XXJSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTeamRequestObject struct {
	TeamID db.TeamID `json:"teamID"`
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(w http.ResponseWriter) error
}

type GetTeam200JSONResponse Team

func (response GetTeam200JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeam401Response struct{}

func (response GetTeam401Response) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetTeam403Response struct{}

func (response GetTeam403Response) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetTeam4XXJSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTeamRequestObject struct {
	TeamID db.TeamID `json:"teamID"`
	Body   *UpdateTeamRequest
}

type UpdateTeamResponseObject interface {
	VisitUpdateTeamResponse(w http.ResponseWriter) error
}

type UpdateTeam200JSONResponse Team

func (response UpdateTeam200JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam401Response struct{}

func (response UpdateTeam401Response) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateTeam403Response struct{}

func (response UpdateTeam403Response) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateTeam4XXJSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateTimeEntryRequestObject struct {
	Body *CreateTimeEntryRequest
}

type CreateTimeEntryResponseObject interface {
	VisitCreateTimeEntryResponse(w http.ResponseWriter) error
}

type CreateTimeEntry201JSONResponse TimeEntry

func (response CreateTimeEntry201JSONResponse) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTimeEntry401Response struct{}

func (response CreateTimeEntry401Response) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateTimeEntry403Response struct{}

func (response CreateTimeEntry403Response) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateTimeEntry4XXJSONResponse) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTimeEntryRequestObject struct {
	TimeEntryID db.TimeEntryID `json:"timeEntryID"`
}

type DeleteTimeEntryResponseObject interface {
	VisitDeleteTimeEntryResponse(w http.ResponseWriter) error
}

type DeleteTimeEntry204Response struct{}

func (response DeleteTimeEntry204Response) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTimeEntry401Response struct{}

func (response DeleteTimeEntry401Response) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteTimeEntry403Response struct{}

func (response DeleteTimeEntry403Response) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteTimeEntry4XXJSONResponse) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTimeEntryRequestObject struct {
	TimeEntryID db.TimeEntryID `json:"timeEntryID"`
}

type GetTimeEntryResponseObject interface {
	VisitGetTimeEntryResponse(w http.ResponseWriter) error
}

type GetTimeEntry200JSONResponse TimeEntry

func (response GetTimeEntry200JSONResponse) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTimeEntry401Response struct{}

func (response GetTimeEntry401Response) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetTimeEntry403Response struct{}

func (response GetTimeEntry403Response) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetTimeEntry4XXJSONResponse) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTimeEntryRequestObject struct {
	TimeEntryID db.TimeEntryID `json:"timeEntryID"`
	Body        *UpdateTimeEntryRequest
}

type UpdateTimeEntryResponseObject interface {
	VisitUpdateTimeEntryResponse(w http.ResponseWriter) error
}

type UpdateTimeEntry200JSONResponse TimeEntry

func (response UpdateTimeEntry200JSONResponse) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTimeEntry401Response struct{}

func (response UpdateTimeEntry401Response) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateTimeEntry403Response struct{}

func (response UpdateTimeEntry403Response) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateTimeEntry4XXJSONResponse) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetCurrentUserRequestObject struct{}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse User

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedUsersRequestObject struct {
	Params externalRef0.GetPaginatedUsersParams
}

type GetPaginatedUsersResponseObject interface {
	VisitGetPaginatedUsersResponse(w http.ResponseWriter) error
}

type GetPaginatedUsers200JSONResponse PaginatedUsersResponse

func (response GetPaginatedUsers200JSONResponse) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedUsers401Response struct{}

func (response GetPaginatedUsers401Response) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPaginatedUsers403Response struct{}

func (response GetPaginatedUsers403Response) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetPaginatedUsers4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetPaginatedUsers4XXJSONResponse) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserRequestObject struct {
	Id uuid.UUID `json:"id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct{}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUser401Response struct{}

func (response DeleteUser401Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteUser403Response struct{}

func (response DeleteUser403Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteUser4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteUser4XXJSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateUserRequestObject struct {
	Id   uuid.UUID `json:"id"`
	Body *externalRef0.UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse User

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserAuthorizationRequestObject struct {
	Id   uuid.UUID `json:"id"`
	Body *externalRef0.UpdateUserAuthorizationJSONRequestBody
}

type UpdateUserAuthorizationResponseObject interface {
	VisitUpdateUserAuthorizationResponse(w http.ResponseWriter) error
}

type UpdateUserAuthorization204Response struct{}

func (response UpdateUserAuthorization204Response) VisitUpdateUserAuthorizationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemTagRequestObject struct {
	WorkItemTagID db.WorkItemTagID `json:"workItemTagID"`
}

type DeleteWorkItemTagResponseObject interface {
	VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error
}

type DeleteWorkItemTag204Response struct{}

func (response DeleteWorkItemTag204Response) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemTag401Response struct{}

func (response DeleteWorkItemTag401Response) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteWorkItemTag403Response struct{}

func (response DeleteWorkItemTag403Response) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteWorkItemTag4XXJSONResponse) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkItemTagRequestObject struct {
	WorkItemTagID db.WorkItemTagID `json:"workItemTagID"`
}

type GetWorkItemTagResponseObject interface {
	VisitGetWorkItemTagResponse(w http.ResponseWriter) error
}

type GetWorkItemTag200JSONResponse WorkItemTag

func (response GetWorkItemTag200JSONResponse) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkItemTag401Response struct{}

func (response GetWorkItemTag401Response) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWorkItemTag403Response struct{}

func (response GetWorkItemTag403Response) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetWorkItemTag4XXJSONResponse) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkItemTagRequestObject struct {
	WorkItemTagID db.WorkItemTagID `json:"workItemTagID"`
	Body          *UpdateWorkItemTagRequest
}

type UpdateWorkItemTagResponseObject interface {
	VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error
}

type UpdateWorkItemTag200JSONResponse WorkItemTag

func (response UpdateWorkItemTag200JSONResponse) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkItemTag401Response struct{}

func (response UpdateWorkItemTag401Response) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateWorkItemTag403Response struct{}

func (response UpdateWorkItemTag403Response) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateWorkItemTag4XXJSONResponse) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteWorkItemTypeRequestObject struct {
	WorkItemTypeID db.WorkItemTypeID `json:"workItemTypeID"`
}

type DeleteWorkItemTypeResponseObject interface {
	VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error
}

type DeleteWorkItemType204Response struct{}

func (response DeleteWorkItemType204Response) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemType401Response struct{}

func (response DeleteWorkItemType401Response) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteWorkItemType403Response struct{}

func (response DeleteWorkItemType403Response) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteWorkItemType4XXJSONResponse) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkItemTypeRequestObject struct {
	WorkItemTypeID db.WorkItemTypeID `json:"workItemTypeID"`
}

type GetWorkItemTypeResponseObject interface {
	VisitGetWorkItemTypeResponse(w http.ResponseWriter) error
}

type GetWorkItemType200JSONResponse WorkItemType

func (response GetWorkItemType200JSONResponse) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkItemType401Response struct{}

func (response GetWorkItemType401Response) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWorkItemType403Response struct{}

func (response GetWorkItemType403Response) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetWorkItemType4XXJSONResponse) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkItemTypeRequestObject struct {
	WorkItemTypeID db.WorkItemTypeID `json:"workItemTypeID"`
	Body           *UpdateWorkItemTypeRequest
}

type UpdateWorkItemTypeResponseObject interface {
	VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error
}

type UpdateWorkItemType200JSONResponse WorkItemType

func (response UpdateWorkItemType200JSONResponse) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkItemType401Response struct{}

func (response UpdateWorkItemType401Response) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateWorkItemType403Response struct{}

func (response UpdateWorkItemType403Response) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateWorkItemType4XXJSONResponse) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateWorkitemRequestObject struct {
	Body *externalRef0.CreateWorkitemJSONRequestBody
}

type CreateWorkitemResponseObject interface {
	VisitCreateWorkitemResponse(w http.ResponseWriter) error
}

type CreateWorkitem201JSONResponse WorkItem

func (response CreateWorkitem201JSONResponse) VisitCreateWorkitemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkitemRequestObject struct {
	WorkItemID db.WorkItemID `json:"workItemID"`
}

type DeleteWorkitemResponseObject interface {
	VisitDeleteWorkitemResponse(w http.ResponseWriter) error
}

type DeleteWorkitem204Response struct{}

func (response DeleteWorkitem204Response) VisitDeleteWorkitemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetWorkItemRequestObject struct {
	WorkItemID db.WorkItemID `json:"workItemID"`
}

type GetWorkItemResponseObject interface {
	VisitGetWorkItemResponse(w http.ResponseWriter) error
}

type GetWorkItem200JSONResponse WorkItem

func (response GetWorkItem200JSONResponse) VisitGetWorkItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkitemRequestObject struct {
	WorkItemID db.WorkItemID `json:"workItemID"`
}

type UpdateWorkitemResponseObject interface {
	VisitUpdateWorkitemResponse(w http.ResponseWriter) error
}

type UpdateWorkitem200JSONResponse WorkItem

func (response UpdateWorkitem200JSONResponse) VisitUpdateWorkitemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemCommentRequestObject struct {
	WorkItemID int `json:"workItemID"`
	Body       *CreateWorkItemCommentRequest
}

type CreateWorkItemCommentResponseObject interface {
	VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error
}

type CreateWorkItemComment201JSONResponse WorkItemComment

func (response CreateWorkItemComment201JSONResponse) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemComment401Response struct{}

func (response CreateWorkItemComment401Response) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateWorkItemComment403Response struct{}

func (response CreateWorkItemComment403Response) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateWorkItemComment4XXJSONResponse) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteWorkItemCommentRequestObject struct {
	WorkItemID        db.WorkItemID        `json:"workItemID"`
	WorkItemCommentID db.WorkItemCommentID `json:"workItemCommentID"`
}

type DeleteWorkItemCommentResponseObject interface {
	VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error
}

type DeleteWorkItemComment204Response struct{}

func (response DeleteWorkItemComment204Response) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemComment401Response struct{}

func (response DeleteWorkItemComment401Response) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteWorkItemComment403Response struct{}

func (response DeleteWorkItemComment403Response) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteWorkItemComment4XXJSONResponse) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkItemCommentRequestObject struct {
	WorkItemID        db.WorkItemID        `json:"workItemID"`
	WorkItemCommentID db.WorkItemCommentID `json:"workItemCommentID"`
}

type GetWorkItemCommentResponseObject interface {
	VisitGetWorkItemCommentResponse(w http.ResponseWriter) error
}

type GetWorkItemComment200JSONResponse WorkItemComment

func (response GetWorkItemComment200JSONResponse) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkItemComment401Response struct{}

func (response GetWorkItemComment401Response) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWorkItemComment403Response struct{}

func (response GetWorkItemComment403Response) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetWorkItemComment4XXJSONResponse) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkItemCommentRequestObject struct {
	WorkItemID        db.WorkItemID        `json:"workItemID"`
	WorkItemCommentID db.WorkItemCommentID `json:"workItemCommentID"`
	Body              *UpdateWorkItemCommentRequest
}

type UpdateWorkItemCommentResponseObject interface {
	VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error
}

type UpdateWorkItemComment200JSONResponse WorkItemComment

func (response UpdateWorkItemComment200JSONResponse) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkItemComment401Response struct{}

func (response UpdateWorkItemComment401Response) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateWorkItemComment403Response struct{}

func (response UpdateWorkItemComment403Response) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateWorkItemComment4XXJSONResponse) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// delete activity.
	// (DELETE /activity/{activityID})
	DeleteActivity(c *gin.Context, request DeleteActivityRequestObject) (DeleteActivityResponseObject, error)
	// get activity.
	// (GET /activity/{activityID})
	GetActivity(c *gin.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)
	// update activity.
	// (PATCH /activity/{activityID})
	UpdateActivity(c *gin.Context, request UpdateActivityRequestObject) (UpdateActivityResponseObject, error)
	// Ping pongs
	// (GET /admin/ping)
	AdminPing(c *gin.Context, request AdminPingRequestObject) (AdminPingResponseObject, error)

	// (GET /auth/myprovider/callback)
	MyProviderCallback(c *gin.Context, request MyProviderCallbackRequestObject) (MyProviderCallbackResponseObject, error)

	// (GET /auth/myprovider/login)
	MyProviderLogin(c *gin.Context, request MyProviderLoginRequestObject) (MyProviderLoginResponseObject, error)

	// (GET /events)
	Events(c *gin.Context, request EventsRequestObject) (EventsResponseObject, error)
	// Get paginated user notifications
	// (GET /notifications/user/page)
	GetPaginatedNotifications(c *gin.Context, request GetPaginatedNotificationsRequestObject) (GetPaginatedNotificationsResponseObject, error)
	// Returns this very OpenAPI spec.
	// (GET /openapi.yaml)
	OpenapiYamlGet(c *gin.Context, request OpenapiYamlGetRequestObject) (OpenapiYamlGetResponseObject, error)
	// Ping pongs
	// (GET /ping)
	Ping(c *gin.Context, request PingRequestObject) (PingResponseObject, error)
	// returns board data for a project
	// (GET /project/{projectName}/)
	GetProject(c *gin.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// create activity.
	// (POST /project/{projectName}/activity/)
	CreateActivity(c *gin.Context, request CreateActivityRequestObject) (CreateActivityResponseObject, error)
	// returns board data for a project
	// (GET /project/{projectName}/board)
	GetProjectBoard(c *gin.Context, request GetProjectBoardRequestObject) (GetProjectBoardResponseObject, error)
	// returns the project configuration
	// (GET /project/{projectName}/config)
	GetProjectConfig(c *gin.Context, request GetProjectConfigRequestObject) (GetProjectConfigResponseObject, error)
	// updates the project configuration
	// (PUT /project/{projectName}/config)
	UpdateProjectConfig(c *gin.Context, request UpdateProjectConfigRequestObject) (UpdateProjectConfigResponseObject, error)
	// creates initial data (teams, tags...) for a new project
	// (POST /project/{projectName}/initialize)
	InitializeProject(c *gin.Context, request InitializeProjectRequestObject) (InitializeProjectResponseObject, error)
	// create team.
	// (POST /project/{projectName}/team/)
	CreateTeam(c *gin.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)
	// create workitemtag.
	// (POST /project/{projectName}/work-item-tag/)
	CreateWorkItemTag(c *gin.Context, request CreateWorkItemTagRequestObject) (CreateWorkItemTagResponseObject, error)
	// create workitemtype.
	// (POST /project/{projectName}/work-item-type/)
	CreateWorkItemType(c *gin.Context, request CreateWorkItemTypeRequestObject) (CreateWorkItemTypeResponseObject, error)
	// returns workitems for a project
	// (GET /project/{projectName}/workitems)
	GetProjectWorkitems(c *gin.Context, request GetProjectWorkitemsRequestObject) (GetProjectWorkitemsResponseObject, error)
	// delete team.
	// (DELETE /team/{teamID})
	DeleteTeam(c *gin.Context, request DeleteTeamRequestObject) (DeleteTeamResponseObject, error)
	// get team.
	// (GET /team/{teamID})
	GetTeam(c *gin.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)
	// update team.
	// (PATCH /team/{teamID})
	UpdateTeam(c *gin.Context, request UpdateTeamRequestObject) (UpdateTeamResponseObject, error)
	// create time entry.
	// (POST /time-entry/)
	CreateTimeEntry(c *gin.Context, request CreateTimeEntryRequestObject) (CreateTimeEntryResponseObject, error)
	// delete time-entry.
	// (DELETE /time-entry/{timeEntryID})
	DeleteTimeEntry(c *gin.Context, request DeleteTimeEntryRequestObject) (DeleteTimeEntryResponseObject, error)
	// get time-entry.
	// (GET /time-entry/{timeEntryID})
	GetTimeEntry(c *gin.Context, request GetTimeEntryRequestObject) (GetTimeEntryResponseObject, error)
	// update time-entry.
	// (PATCH /time-entry/{timeEntryID})
	UpdateTimeEntry(c *gin.Context, request UpdateTimeEntryRequestObject) (UpdateTimeEntryResponseObject, error)
	// returns the logged in user
	// (GET /user/me)
	GetCurrentUser(c *gin.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Get paginated users
	// (GET /user/page)
	GetPaginatedUsers(c *gin.Context, request GetPaginatedUsersRequestObject) (GetPaginatedUsersResponseObject, error)
	// deletes the user by id
	// (DELETE /user/{id})
	DeleteUser(c *gin.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// updates the user by id
	// (PATCH /user/{id})
	UpdateUser(c *gin.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// updates user role and scopes by id
	// (PATCH /user/{id}/authorization)
	UpdateUserAuthorization(c *gin.Context, request UpdateUserAuthorizationRequestObject) (UpdateUserAuthorizationResponseObject, error)
	// delete workitemtag.
	// (DELETE /work-item-tag/{workItemTagID})
	DeleteWorkItemTag(c *gin.Context, request DeleteWorkItemTagRequestObject) (DeleteWorkItemTagResponseObject, error)
	// get workitemtag.
	// (GET /work-item-tag/{workItemTagID})
	GetWorkItemTag(c *gin.Context, request GetWorkItemTagRequestObject) (GetWorkItemTagResponseObject, error)
	// update workitemtag.
	// (PATCH /work-item-tag/{workItemTagID})
	UpdateWorkItemTag(c *gin.Context, request UpdateWorkItemTagRequestObject) (UpdateWorkItemTagResponseObject, error)
	// delete workitemtype.
	// (DELETE /work-item-type/{workItemTypeID})
	DeleteWorkItemType(c *gin.Context, request DeleteWorkItemTypeRequestObject) (DeleteWorkItemTypeResponseObject, error)
	// get workitemtype.
	// (GET /work-item-type/{workItemTypeID})
	GetWorkItemType(c *gin.Context, request GetWorkItemTypeRequestObject) (GetWorkItemTypeResponseObject, error)
	// update workitemtype.
	// (PATCH /work-item-type/{workItemTypeID})
	UpdateWorkItemType(c *gin.Context, request UpdateWorkItemTypeRequestObject) (UpdateWorkItemTypeResponseObject, error)
	// create workitem
	// (POST /work-item/)
	CreateWorkitem(c *gin.Context, request CreateWorkitemRequestObject) (CreateWorkitemResponseObject, error)
	// delete workitem
	// (DELETE /work-item/{workItemID}/)
	DeleteWorkitem(c *gin.Context, request DeleteWorkitemRequestObject) (DeleteWorkitemResponseObject, error)
	// get workitem
	// (GET /work-item/{workItemID}/)
	GetWorkItem(c *gin.Context, request GetWorkItemRequestObject) (GetWorkItemResponseObject, error)
	// update workitem
	// (PATCH /work-item/{workItemID}/)
	UpdateWorkitem(c *gin.Context, request UpdateWorkitemRequestObject) (UpdateWorkitemResponseObject, error)
	// create work item comment.
	// (POST /work-item/{workItemID}/comment/)
	CreateWorkItemComment(c *gin.Context, request CreateWorkItemCommentRequestObject) (CreateWorkItemCommentResponseObject, error)
	// delete .
	// (DELETE /work-item/{workItemID}/comment/{workItemCommentID})
	DeleteWorkItemComment(c *gin.Context, request DeleteWorkItemCommentRequestObject) (DeleteWorkItemCommentResponseObject, error)
	// get work item comment.
	// (GET /work-item/{workItemID}/comment/{workItemCommentID})
	GetWorkItemComment(c *gin.Context, request GetWorkItemCommentRequestObject) (GetWorkItemCommentResponseObject, error)
	// update work item comment.
	// (PATCH /work-item/{workItemID}/comment/{workItemCommentID})
	UpdateWorkItemComment(c *gin.Context, request UpdateWorkItemCommentRequestObject) (UpdateWorkItemCommentResponseObject, error)
	middlewares(opID OperationID) []gin.HandlerFunc
	authMiddlewares(opID OperationID) []gin.HandlerFunc
}

type (
	StrictHandlerFunc    = strictgin.StrictGinHandlerFunc
	StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc
)

func NewStrictHandler(ssi StrictServerInterface, strictMiddlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandlers{ssi: ssi, strictMiddlewares: strictMiddlewares}
}

type strictHandlers struct {
	ssi               StrictServerInterface
	strictMiddlewares []StrictMiddlewareFunc
}

func (sh *strictHandlers) middlewares(opID OperationID) []gin.HandlerFunc {
	return sh.ssi.middlewares(opID)
}

func (sh *strictHandlers) authMiddlewares(opID OperationID) []gin.HandlerFunc {
	return sh.ssi.authMiddlewares(opID)
}

// DeleteActivity operation middleware
func (sh *strictHandlers) DeleteActivity(ctx *gin.Context, activityID db.ActivityID) {
	var request DeleteActivityRequestObject

	request.ActivityID = activityID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteActivity(ctx, request.(DeleteActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteActivityResponseObject); ok {
		if err := validResponse.VisitDeleteActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandlers) GetActivity(ctx *gin.Context, activityID db.ActivityID) {
	var request GetActivityRequestObject

	request.ActivityID = activityID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateActivity operation middleware
func (sh *strictHandlers) UpdateActivity(ctx *gin.Context, activityID db.ActivityID) {
	var request UpdateActivityRequestObject

	request.ActivityID = activityID

	// UpdateActivityRequest
	var body UpdateActivityRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateActivity(ctx, request.(UpdateActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateActivityResponseObject); ok {
		if err := validResponse.VisitUpdateActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminPing operation middleware
func (sh *strictHandlers) AdminPing(ctx *gin.Context) {
	var request AdminPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminPing(ctx, request.(AdminPingRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "AdminPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AdminPingResponseObject); ok {
		if err := validResponse.VisitAdminPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// MyProviderCallback operation middleware
func (sh *strictHandlers) MyProviderCallback(ctx *gin.Context) {
	var request MyProviderCallbackRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MyProviderCallback(ctx, request.(MyProviderCallbackRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "MyProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(MyProviderCallbackResponseObject); ok {
		if err := validResponse.VisitMyProviderCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// MyProviderLogin operation middleware
func (sh *strictHandlers) MyProviderLogin(ctx *gin.Context, params externalRef0.MyProviderLoginParams) {
	var request MyProviderLoginRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MyProviderLogin(ctx, request.(MyProviderLoginRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "MyProviderLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(MyProviderLoginResponseObject); ok {
		if err := validResponse.VisitMyProviderLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Events operation middleware
func (sh *strictHandlers) Events(ctx *gin.Context, params externalRef0.EventsParams) {
	var request EventsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Events(ctx, request.(EventsRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "Events")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EventsResponseObject); ok {
		if err := validResponse.VisitEventsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaginatedNotifications operation middleware
func (sh *strictHandlers) GetPaginatedNotifications(ctx *gin.Context, params externalRef0.GetPaginatedNotificationsParams) {
	var request GetPaginatedNotificationsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaginatedNotifications(ctx, request.(GetPaginatedNotificationsRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetPaginatedNotifications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPaginatedNotificationsResponseObject); ok {
		if err := validResponse.VisitGetPaginatedNotificationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OpenapiYamlGet operation middleware
func (sh *strictHandlers) OpenapiYamlGet(ctx *gin.Context) {
	var request OpenapiYamlGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OpenapiYamlGet(ctx, request.(OpenapiYamlGetRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "OpenapiYamlGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OpenapiYamlGetResponseObject); ok {
		if err := validResponse.VisitOpenapiYamlGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Ping operation middleware
func (sh *strictHandlers) Ping(ctx *gin.Context) {
	var request PingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx, request.(PingRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PingResponseObject); ok {
		if err := validResponse.VisitPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProject operation middleware
func (sh *strictHandlers) GetProject(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request GetProjectRequestObject

	request.ProjectName = projectName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx, request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		if err := validResponse.VisitGetProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateActivity operation middleware
func (sh *strictHandlers) CreateActivity(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateActivityRequestObject

	request.ProjectName = projectName

	// CreateActivityRequest
	var body CreateActivityRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateActivity(ctx, request.(CreateActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateActivityResponseObject); ok {
		if err := validResponse.VisitCreateActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectBoard operation middleware
func (sh *strictHandlers) GetProjectBoard(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request GetProjectBoardRequestObject

	request.ProjectName = projectName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectBoard(ctx, request.(GetProjectBoardRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProjectBoard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectBoardResponseObject); ok {
		if err := validResponse.VisitGetProjectBoardResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectConfig operation middleware
func (sh *strictHandlers) GetProjectConfig(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request GetProjectConfigRequestObject

	request.ProjectName = projectName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectConfig(ctx, request.(GetProjectConfigRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProjectConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectConfigResponseObject); ok {
		if err := validResponse.VisitGetProjectConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectConfig operation middleware
func (sh *strictHandlers) UpdateProjectConfig(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request UpdateProjectConfigRequestObject

	request.ProjectName = projectName

	// UpdateProjectConfigRequest
	var body externalRef0.UpdateProjectConfigJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectConfig(ctx, request.(UpdateProjectConfigRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateProjectConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateProjectConfigResponseObject); ok {
		if err := validResponse.VisitUpdateProjectConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// InitializeProject operation middleware
func (sh *strictHandlers) InitializeProject(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request InitializeProjectRequestObject

	request.ProjectName = projectName

	// InitializeProjectRequest
	var body externalRef0.InitializeProjectJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InitializeProject(ctx, request.(InitializeProjectRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "InitializeProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(InitializeProjectResponseObject); ok {
		if err := validResponse.VisitInitializeProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTeam operation middleware
func (sh *strictHandlers) CreateTeam(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateTeamRequestObject

	request.ProjectName = projectName

	// CreateTeamRequest
	var body CreateTeamRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx, request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		if err := validResponse.VisitCreateTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkItemTag operation middleware
func (sh *strictHandlers) CreateWorkItemTag(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateWorkItemTagRequestObject

	request.ProjectName = projectName

	// CreateWorkItemTagRequest
	var body CreateWorkItemTagRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkItemTag(ctx, request.(CreateWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkItemTagResponseObject); ok {
		if err := validResponse.VisitCreateWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkItemType operation middleware
func (sh *strictHandlers) CreateWorkItemType(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateWorkItemTypeRequestObject

	request.ProjectName = projectName

	// CreateWorkItemTypeRequest
	var body CreateWorkItemTypeRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkItemType(ctx, request.(CreateWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitCreateWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectWorkitems operation middleware
func (sh *strictHandlers) GetProjectWorkitems(ctx *gin.Context, projectName externalRef0.ProjectName, params externalRef0.GetProjectWorkitemsParams) {
	var request GetProjectWorkitemsRequestObject

	request.ProjectName = projectName
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectWorkitems(ctx, request.(GetProjectWorkitemsRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProjectWorkitems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectWorkitemsResponseObject); ok {
		if err := validResponse.VisitGetProjectWorkitemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeam operation middleware
func (sh *strictHandlers) DeleteTeam(ctx *gin.Context, teamID db.TeamID) {
	var request DeleteTeamRequestObject

	request.TeamID = teamID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeam(ctx, request.(DeleteTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTeamResponseObject); ok {
		if err := validResponse.VisitDeleteTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTeam operation middleware
func (sh *strictHandlers) GetTeam(ctx *gin.Context, teamID db.TeamID) {
	var request GetTeamRequestObject

	request.TeamID = teamID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx, request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		if err := validResponse.VisitGetTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTeam operation middleware
func (sh *strictHandlers) UpdateTeam(ctx *gin.Context, teamID db.TeamID) {
	var request UpdateTeamRequestObject

	request.TeamID = teamID

	// UpdateTeamRequest
	var body UpdateTeamRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTeam(ctx, request.(UpdateTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTeamResponseObject); ok {
		if err := validResponse.VisitUpdateTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTimeEntry operation middleware
func (sh *strictHandlers) CreateTimeEntry(ctx *gin.Context) {
	var request CreateTimeEntryRequestObject

	// CreateTimeEntryRequest
	var body CreateTimeEntryRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTimeEntry(ctx, request.(CreateTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTimeEntryResponseObject); ok {
		if err := validResponse.VisitCreateTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTimeEntry operation middleware
func (sh *strictHandlers) DeleteTimeEntry(ctx *gin.Context, timeEntryID db.TimeEntryID) {
	var request DeleteTimeEntryRequestObject

	request.TimeEntryID = timeEntryID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTimeEntry(ctx, request.(DeleteTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTimeEntryResponseObject); ok {
		if err := validResponse.VisitDeleteTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTimeEntry operation middleware
func (sh *strictHandlers) GetTimeEntry(ctx *gin.Context, timeEntryID db.TimeEntryID) {
	var request GetTimeEntryRequestObject

	request.TimeEntryID = timeEntryID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTimeEntry(ctx, request.(GetTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTimeEntryResponseObject); ok {
		if err := validResponse.VisitGetTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTimeEntry operation middleware
func (sh *strictHandlers) UpdateTimeEntry(ctx *gin.Context, timeEntryID db.TimeEntryID) {
	var request UpdateTimeEntryRequestObject

	request.TimeEntryID = timeEntryID

	// UpdateTimeEntryRequest
	var body UpdateTimeEntryRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTimeEntry(ctx, request.(UpdateTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTimeEntryResponseObject); ok {
		if err := validResponse.VisitUpdateTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandlers) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaginatedUsers operation middleware
func (sh *strictHandlers) GetPaginatedUsers(ctx *gin.Context, params externalRef0.GetPaginatedUsersParams) {
	var request GetPaginatedUsersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaginatedUsers(ctx, request.(GetPaginatedUsersRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetPaginatedUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPaginatedUsersResponseObject); ok {
		if err := validResponse.VisitGetPaginatedUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandlers) DeleteUser(ctx *gin.Context, id uuid.UUID) {
	var request DeleteUserRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandlers) UpdateUser(ctx *gin.Context, id uuid.UUID) {
	var request UpdateUserRequestObject

	request.Id = id

	// UpdateUserRequest
	var body externalRef0.UpdateUserJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserAuthorization operation middleware
func (sh *strictHandlers) UpdateUserAuthorization(ctx *gin.Context, id uuid.UUID) {
	var request UpdateUserAuthorizationRequestObject

	request.Id = id

	// UpdateUserAuthorizationRequest
	var body externalRef0.UpdateUserAuthorizationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserAuthorization(ctx, request.(UpdateUserAuthorizationRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateUserAuthorization")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserAuthorizationResponseObject); ok {
		if err := validResponse.VisitUpdateUserAuthorizationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkItemTag operation middleware
func (sh *strictHandlers) DeleteWorkItemTag(ctx *gin.Context, workItemTagID db.WorkItemTagID) {
	var request DeleteWorkItemTagRequestObject

	request.WorkItemTagID = workItemTagID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkItemTag(ctx, request.(DeleteWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkItemTagResponseObject); ok {
		if err := validResponse.VisitDeleteWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItemTag operation middleware
func (sh *strictHandlers) GetWorkItemTag(ctx *gin.Context, workItemTagID db.WorkItemTagID) {
	var request GetWorkItemTagRequestObject

	request.WorkItemTagID = workItemTagID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItemTag(ctx, request.(GetWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemTagResponseObject); ok {
		if err := validResponse.VisitGetWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkItemTag operation middleware
func (sh *strictHandlers) UpdateWorkItemTag(ctx *gin.Context, workItemTagID db.WorkItemTagID) {
	var request UpdateWorkItemTagRequestObject

	request.WorkItemTagID = workItemTagID

	// UpdateWorkItemTagRequest
	var body UpdateWorkItemTagRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkItemTag(ctx, request.(UpdateWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkItemTagResponseObject); ok {
		if err := validResponse.VisitUpdateWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkItemType operation middleware
func (sh *strictHandlers) DeleteWorkItemType(ctx *gin.Context, workItemTypeID db.WorkItemTypeID) {
	var request DeleteWorkItemTypeRequestObject

	request.WorkItemTypeID = workItemTypeID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkItemType(ctx, request.(DeleteWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitDeleteWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItemType operation middleware
func (sh *strictHandlers) GetWorkItemType(ctx *gin.Context, workItemTypeID db.WorkItemTypeID) {
	var request GetWorkItemTypeRequestObject

	request.WorkItemTypeID = workItemTypeID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItemType(ctx, request.(GetWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitGetWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkItemType operation middleware
func (sh *strictHandlers) UpdateWorkItemType(ctx *gin.Context, workItemTypeID db.WorkItemTypeID) {
	var request UpdateWorkItemTypeRequestObject

	request.WorkItemTypeID = workItemTypeID

	// UpdateWorkItemTypeRequest
	var body UpdateWorkItemTypeRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkItemType(ctx, request.(UpdateWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitUpdateWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkitem operation middleware
func (sh *strictHandlers) CreateWorkitem(ctx *gin.Context) {
	var request CreateWorkitemRequestObject

	// CreateWorkitemRequest
	var body externalRef0.CreateWorkitemJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkitem(ctx, request.(CreateWorkitemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkitem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkitemResponseObject); ok {
		if err := validResponse.VisitCreateWorkitemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkitem operation middleware
func (sh *strictHandlers) DeleteWorkitem(ctx *gin.Context, workItemID db.WorkItemID) {
	var request DeleteWorkitemRequestObject

	request.WorkItemID = workItemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkitem(ctx, request.(DeleteWorkitemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkitem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkitemResponseObject); ok {
		if err := validResponse.VisitDeleteWorkitemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItem operation middleware
func (sh *strictHandlers) GetWorkItem(ctx *gin.Context, workItemID db.WorkItemID) {
	var request GetWorkItemRequestObject

	request.WorkItemID = workItemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItem(ctx, request.(GetWorkItemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemResponseObject); ok {
		if err := validResponse.VisitGetWorkItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkitem operation middleware
func (sh *strictHandlers) UpdateWorkitem(ctx *gin.Context, workItemID db.WorkItemID) {
	var request UpdateWorkitemRequestObject

	request.WorkItemID = workItemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkitem(ctx, request.(UpdateWorkitemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkitem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkitemResponseObject); ok {
		if err := validResponse.VisitUpdateWorkitemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkItemComment operation middleware
func (sh *strictHandlers) CreateWorkItemComment(ctx *gin.Context, workItemID int) {
	var request CreateWorkItemCommentRequestObject

	request.WorkItemID = workItemID

	// CreateWorkItemCommentRequest
	var body CreateWorkItemCommentRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkItemComment(ctx, request.(CreateWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitCreateWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkItemComment operation middleware
func (sh *strictHandlers) DeleteWorkItemComment(ctx *gin.Context, workItemID db.WorkItemID, workItemCommentID db.WorkItemCommentID) {
	var request DeleteWorkItemCommentRequestObject

	request.WorkItemID = workItemID
	request.WorkItemCommentID = workItemCommentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkItemComment(ctx, request.(DeleteWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitDeleteWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItemComment operation middleware
func (sh *strictHandlers) GetWorkItemComment(ctx *gin.Context, workItemID db.WorkItemID, workItemCommentID db.WorkItemCommentID) {
	var request GetWorkItemCommentRequestObject

	request.WorkItemID = workItemID
	request.WorkItemCommentID = workItemCommentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItemComment(ctx, request.(GetWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitGetWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkItemComment operation middleware
func (sh *strictHandlers) UpdateWorkItemComment(ctx *gin.Context, workItemID db.WorkItemID, workItemCommentID db.WorkItemCommentID) {
	var request UpdateWorkItemCommentRequestObject

	request.WorkItemID = workItemID
	request.WorkItemCommentID = workItemCommentID

	// UpdateWorkItemCommentRequest
	var body UpdateWorkItemCommentRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkItemComment(ctx, request.(UpdateWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitUpdateWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/models"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/utils/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// DemoKanbanSteps is generated from kanban_steps table.
const (
	DemoKanbanStepsDisabled       DemoKanbanSteps = "Disabled"
	DemoKanbanStepsReceived       DemoKanbanSteps = "Received"
	DemoKanbanStepsUnderReview    DemoKanbanSteps = "Under review"
	DemoKanbanStepsWorkInProgress DemoKanbanSteps = "Work in progress"
)

// AllDemoKanbanStepsValues returns all possible values for DemoKanbanSteps.
func AllDemoKanbanStepsValues() []DemoKanbanSteps {
	return []DemoKanbanSteps{
		DemoKanbanStepsDisabled,
		DemoKanbanStepsReceived,
		DemoKanbanStepsUnderReview,
		DemoKanbanStepsWorkInProgress,
	}
}

// DemoTwoKanbanSteps is generated from kanban_steps table.
const (
	DemoTwoKanbanStepsReceived DemoTwoKanbanSteps = "Received"
)

// AllDemoTwoKanbanStepsValues returns all possible values for DemoTwoKanbanSteps.
func AllDemoTwoKanbanStepsValues() []DemoTwoKanbanSteps {
	return []DemoTwoKanbanSteps{
		DemoTwoKanbanStepsReceived,
	}
}

// DemoTwoWorkItemTypes is generated from work_item_types table.
const (
	DemoTwoWorkItemTypesAnotherType DemoTwoWorkItemTypes = "Another type"
	DemoTwoWorkItemTypesType1       DemoTwoWorkItemTypes = "Type 1"
	DemoTwoWorkItemTypesType2       DemoTwoWorkItemTypes = "Type 2"
)

// AllDemoTwoWorkItemTypesValues returns all possible values for DemoTwoWorkItemTypes.
func AllDemoTwoWorkItemTypesValues() []DemoTwoWorkItemTypes {
	return []DemoTwoWorkItemTypes{
		DemoTwoWorkItemTypesAnotherType,
		DemoTwoWorkItemTypesType1,
		DemoTwoWorkItemTypesType2,
	}
}

// DemoWorkItemTypes is generated from work_item_types table.
const (
	DemoWorkItemTypesType1 DemoWorkItemTypes = "Type 1"
)

// AllDemoWorkItemTypesValues returns all possible values for DemoWorkItemTypes.
func AllDemoWorkItemTypesValues() []DemoWorkItemTypes {
	return []DemoWorkItemTypes{
		DemoWorkItemTypesType1,
	}
}

// Defines values for Direction.
const (
	DirectionAsc  Direction = "asc"
	DirectionDesc Direction = "desc"
)

// AllDirectionValues returns all possible values for Direction.
func AllDirectionValues() []Direction {
	return []Direction{
		DirectionAsc,
		DirectionDesc,
	}
}

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
const (
	ErrorCodeAlreadyExists      ErrorCode = "AlreadyExists"
	ErrorCodeInvalidArgument    ErrorCode = "InvalidArgument"
	ErrorCodeInvalidRole        ErrorCode = "InvalidRole"
	ErrorCodeInvalidScope       ErrorCode = "InvalidScope"
	ErrorCodeInvalidUUID        ErrorCode = "InvalidUUID"
	ErrorCodeNotFound           ErrorCode = "NotFound"
	ErrorCodeOIDC               ErrorCode = "OIDC"
	ErrorCodePrivate            ErrorCode = "Private"
	ErrorCodeRequestValidation  ErrorCode = "RequestValidation"
	ErrorCodeResponseValidation ErrorCode = "ResponseValidation"
	ErrorCodeUnauthenticated    ErrorCode = "Unauthenticated"
	ErrorCodeUnauthorized       ErrorCode = "Unauthorized"
	ErrorCodeUnknown            ErrorCode = "Unknown"
)

// AllErrorCodeValues returns all possible values for ErrorCode.
func AllErrorCodeValues() []ErrorCode {
	return []ErrorCode{
		ErrorCodeAlreadyExists,
		ErrorCodeInvalidArgument,
		ErrorCodeInvalidRole,
		ErrorCodeInvalidScope,
		ErrorCodeInvalidUUID,
		ErrorCodeNotFound,
		ErrorCodeOIDC,
		ErrorCodePrivate,
		ErrorCodeRequestValidation,
		ErrorCodeResponseValidation,
		ErrorCodeUnauthenticated,
		ErrorCodeUnauthorized,
		ErrorCodeUnknown,
	}
}

// NotificationType is generated from database enum 'notification_type'.
const (
	NotificationTypeGlobal   NotificationType = "global"
	NotificationTypePersonal NotificationType = "personal"
)

// AllNotificationTypeValues returns all possible values for NotificationType.
func AllNotificationTypeValues() []NotificationType {
	return []NotificationType{
		NotificationTypeGlobal,
		NotificationTypePersonal,
	}
}

// Defines values for PaginationFilterModes.
const (
	PaginationFilterModesBetween              PaginationFilterModes = "between"
	PaginationFilterModesBetweenInclusive     PaginationFilterModes = "betweenInclusive"
	PaginationFilterModesContains             PaginationFilterModes = "contains"
	PaginationFilterModesEmpty                PaginationFilterModes = "empty"
	PaginationFilterModesEndsWith             PaginationFilterModes = "endsWith"
	PaginationFilterModesEquals               PaginationFilterModes = "equals"
	PaginationFilterModesFuzzy                PaginationFilterModes = "fuzzy"
	PaginationFilterModesGreaterThan          PaginationFilterModes = "greaterThan"
	PaginationFilterModesGreaterThanOrEqualTo PaginationFilterModes = "greaterThanOrEqualTo"
	PaginationFilterModesLessThan             PaginationFilterModes = "lessThan"
	PaginationFilterModesLessThanOrEqualTo    PaginationFilterModes = "lessThanOrEqualTo"
	PaginationFilterModesNotEmpty             PaginationFilterModes = "notEmpty"
	PaginationFilterModesNotEquals            PaginationFilterModes = "notEquals"
	PaginationFilterModesStartsWith           PaginationFilterModes = "startsWith"
)

// AllPaginationFilterModesValues returns all possible values for PaginationFilterModes.
func AllPaginationFilterModesValues() []PaginationFilterModes {
	return []PaginationFilterModes{
		PaginationFilterModesBetween,
		PaginationFilterModesBetweenInclusive,
		PaginationFilterModesContains,
		PaginationFilterModesEmpty,
		PaginationFilterModesEndsWith,
		PaginationFilterModesEquals,
		PaginationFilterModesFuzzy,
		PaginationFilterModesGreaterThan,
		PaginationFilterModesGreaterThanOrEqualTo,
		PaginationFilterModesLessThan,
		PaginationFilterModesLessThanOrEqualTo,
		PaginationFilterModesNotEmpty,
		PaginationFilterModesNotEquals,
		PaginationFilterModesStartsWith,
	}
}

// ProjectName is generated from projects table.
const (
	ProjectNameDemo    ProjectName = "demo"
	ProjectNameDemoTwo ProjectName = "demo_two"
)

// AllProjectNameValues returns all possible values for ProjectName.
func AllProjectNameValues() []ProjectName {
	return []ProjectName{
		ProjectNameDemo,
		ProjectNameDemoTwo,
	}
}

// Role is generated from roles.json keys.
const (
	RoleAdmin        Role = "admin"
	RoleAdvancedUser Role = "advancedUser"
	RoleGuest        Role = "guest"
	RoleManager      Role = "manager"
	RoleSuperAdmin   Role = "superAdmin"
	RoleUser         Role = "user"
)

// AllRoleValues returns all possible values for Role.
func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleAdvancedUser,
		RoleGuest,
		RoleManager,
		RoleSuperAdmin,
		RoleUser,
	}
}

// Scope is generated from scopes.json keys.
const (
	ScopeActivityCreate        Scope = "activity:create"
	ScopeActivityDelete        Scope = "activity:delete"
	ScopeActivityEdit          Scope = "activity:edit"
	ScopeProjectMember         Scope = "project-member"
	ScopeProjectSettingsWrite  Scope = "project-settings:write"
	ScopeScopesWrite           Scope = "scopes:write"
	ScopeTeamSettingsWrite     Scope = "team-settings:write"
	ScopeUsersDelete           Scope = "users:delete"
	ScopeUsersRead             Scope = "users:read"
	ScopeUsersWrite            Scope = "users:write"
	ScopeWorkItemCommentCreate Scope = "work-item-comment:create"
	ScopeWorkItemCommentDelete Scope = "work-item-comment:delete"
	ScopeWorkItemCommentEdit   Scope = "work-item-comment:edit"
	ScopeWorkItemReview        Scope = "work-item:review"
	ScopeWorkItemTagCreate     Scope = "work-item-tag:create"
	ScopeWorkItemTagDelete     Scope = "work-item-tag:delete"
	ScopeWorkItemTagEdit       Scope = "work-item-tag:edit"
)

// AllScopeValues returns all possible values for Scope.
func AllScopeValues() []Scope {
	return []Scope{
		ScopeActivityCreate,
		ScopeActivityDelete,
		ScopeActivityEdit,
		ScopeProjectMember,
		ScopeProjectSettingsWrite,
		ScopeScopesWrite,
		ScopeTeamSettingsWrite,
		ScopeUsersDelete,
		ScopeUsersRead,
		ScopeUsersWrite,
		ScopeWorkItemCommentCreate,
		ScopeWorkItemCommentDelete,
		ScopeWorkItemCommentEdit,
		ScopeWorkItemReview,
		ScopeWorkItemTagCreate,
		ScopeWorkItemTagDelete,
		ScopeWorkItemTagEdit,
	}
}

// Topic string identifiers for SSE event listeners.
const (
	TopicAppDebug        Topic = "AppDebug"
	TopicGlobalAlerts    Topic = "GlobalAlerts"
	TopicTeamCreated     Topic = "TeamCreated"
	TopicWorkItemUpdated Topic = "WorkItemUpdated"
)

// AllTopicValues returns all possible values for Topic.
func AllTopicValues() []Topic {
	return []Topic{
		TopicAppDebug,
		TopicGlobalAlerts,
		TopicTeamCreated,
		TopicWorkItemUpdated,
	}
}

// WorkItemRole is generated from database enum 'work_item_role'.
const (
	WorkItemRolePreparer WorkItemRole = "preparer"
	WorkItemRoleReviewer WorkItemRole = "reviewer"
)

// AllWorkItemRoleValues returns all possible values for WorkItemRole.
func AllWorkItemRoleValues() []WorkItemRole {
	return []WorkItemRole{
		WorkItemRolePreparer,
		WorkItemRoleReviewer,
	}
}

/* Ignoring existing struct (rest/models.go) ActivityResponse */

// AnyValue represents any value, including `null`
type AnyValue = interface{}

/* Ignoring existing struct (rest/models.go) CacheDemoWorkItemResponse */

/* Ignoring existing struct (rest/models.go) CreateActivityRequest */

/* Ignoring existing struct (rest/models.go) CreateDemoTwoWorkItemRequest */

/* Ignoring existing struct (rest/models.go) CreateDemoWorkItemRequest */

/* Ignoring existing struct (rest/models.go) CreateProjectBoardRequest */

/* Ignoring existing struct (rest/models.go) CreateTeamRequest */

/* Ignoring existing struct (rest/models.go) CreateTimeEntryRequest */

/* Ignoring existing struct (rest/models.go) CreateWorkItemCommentRequest */

// CreateWorkItemRequest defines the model for CreateWorkItemRequest.
type CreateWorkItemRequest struct {
	union           json.RawMessage
	FromQueryParams bool
}

/* Ignoring existing struct (rest/models.go) CreateWorkItemTagRequest */

/* Ignoring existing struct (rest/models.go) CreateWorkItemTypeRequest */

// DemoKanbanSteps is generated from kanban_steps table.
type DemoKanbanSteps string

// DemoTwoKanbanSteps is generated from kanban_steps table.
type DemoTwoKanbanSteps string

/* Ignoring existing struct (rest/models.go) DemoTwoWorkItemResponse */

// DemoTwoWorkItemTypes is generated from work_item_types table.
type DemoTwoWorkItemTypes string

/* Ignoring existing struct (rest/models.go) DemoWorkItemResponse */

// DemoWorkItemTypes is generated from work_item_types table.
type DemoWorkItemTypes string

// Direction defines the model for Direction.
type Direction string

// ErrorCode Represents standardized HTTP error types.
// Notes:
// - 'Private' marks an error to be hidden in response.
type ErrorCode string

/* Ignoring existing struct (rest/models.go) GetCacheDemoWorkItemQueryParameters */

/* Ignoring existing struct (rest/models.go) GetCurrentUserQueryParameters */

// GetPaginatedUsersQueryParameters defines the model for GetPaginatedUsersQueryParameters.
type GetPaginatedUsersQueryParameters struct {
	// Items represents pagination data indexed by column id
	Items *externalRef0.PaginationItems `json:"items,omitempty"`

	// Role is generated from roles.json keys.
	Role *externalRef0.Role `json:"role,omitempty"`
}

// HTTPError represents an error message response.
type HTTPError struct {
	Detail string `json:"detail"`
	Error  string `json:"error"`

	// Loc location in body path, if any
	Loc    *[]string `json:"loc,omitempty"`
	Status int       `json:"status"`
	Title  string    `json:"title"`

	// Type Represents standardized HTTP error types.
	// Notes:
	// - 'Private' marks an error to be hidden in response.
	Type            externalRef0.ErrorCode            `json:"type"`
	ValidationError *externalRef0.HTTPValidationError `json:"validationError,omitempty"`
}

// HTTPValidationError defines the model for HTTPValidationError.
type HTTPValidationError struct {
	// Detail Additional details for validation errors
	Detail *[]externalRef0.ValidationError `json:"detail,omitempty"`

	// Messages Descriptive error messages to show in a callout
	Messages []string `json:"messages"`
}

// ModelsActivity defines the model for ModelsActivity.
type ModelsActivity struct {
	ActivityID   int    `json:"activityID"`
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    int    `json:"projectID"`
}

// ModelsActivityCreateParams defines the model for ModelsActivityCreateParams.
type ModelsActivityCreateParams struct {
	Description  string `json:"description"`
	IsProductive bool   `json:"isProductive"`
	Name         string `json:"name"`
	ProjectID    *int   `json:"projectID,omitempty"`
}

// ModelsCacheDemoWorkItemJoins defines the model for ModelsCacheDemoWorkItemJoins.
type ModelsCacheDemoWorkItemJoins = CacheDemoWorkItemJoins

// ModelsDemoTwoWorkItem defines the model for ModelsDemoTwoWorkItem.
type ModelsDemoTwoWorkItem = DemoTwoWorkItem

// ModelsDemoTwoWorkItemCreateParams defines the model for ModelsDemoTwoWorkItemCreateParams.
type ModelsDemoTwoWorkItemCreateParams = DemoTwoWorkItemCreateParams

// ModelsDemoWorkItem defines the model for ModelsDemoWorkItem.
type ModelsDemoWorkItem = DemoWorkItem

// ModelsDemoWorkItemCreateParams defines the model for ModelsDemoWorkItemCreateParams.
type ModelsDemoWorkItemCreateParams = DemoWorkItemCreateParams

// ModelsKanbanStep defines the model for ModelsKanbanStep.
type ModelsKanbanStep = KanbanStep

// ModelsNotification defines the model for ModelsNotification.
type ModelsNotification = Notification

// ModelsNotificationID defines the model for ModelsNotificationID.
type ModelsNotificationID = interface{}

// ModelsProject defines the model for ModelsProject.
type ModelsProject = Project

// ModelsProjectConfig defines the model for ModelsProjectConfig.
type ModelsProjectConfig = ProjectConfig

// ModelsProjectConfigField defines the model for ModelsProjectConfigField.
type ModelsProjectConfigField = ProjectConfigField

// ModelsProjectID defines the model for ModelsProjectID.
type ModelsProjectID = interface{}

// ModelsTeam defines the model for ModelsTeam.
type ModelsTeam = Team

// ModelsTeamCreateParams defines the model for ModelsTeamCreateParams.
type ModelsTeamCreateParams = TeamCreateParams

// ModelsTimeEntry defines the model for ModelsTimeEntry.
type ModelsTimeEntry = TimeEntry

// ModelsUser defines the model for ModelsUser.
type ModelsUser = User

// ModelsUserAPIKey defines the model for ModelsUserAPIKey.
type ModelsUserAPIKey = UserAPIKey

// ModelsUserID defines the model for ModelsUserID.
type ModelsUserID = UserID

// ModelsUserJoins defines the model for ModelsUserJoins.
type ModelsUserJoins = UserJoins

// ModelsUserNotification defines the model for ModelsUserNotification.
type ModelsUserNotification struct {
	NotificationID     int                       `json:"notificationID"`
	Read               bool                      `json:"read"`
	UserID             externalRef0.ModelsUserID `json:"userID"`
	UserNotificationID int                       `json:"userNotificationID"`
}

// ModelsUserWIAUWorkItem defines the model for ModelsUserWIAUWorkItem.
type ModelsUserWIAUWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role externalRef0.WorkItemRole `json:"role"`
	User externalRef0.ModelsUser   `json:"user"`
}

// ModelsUserWIAWorkItem defines the model for ModelsUserWIAWorkItem.
type ModelsUserWIAWorkItem struct {
	// Role is generated from database enum 'work_item_role'.
	Role externalRef0.WorkItemRole `json:"role"`
	User externalRef0.ModelsUser   `json:"user"`
}

// ModelsWorkItem defines the model for ModelsWorkItem.
type ModelsWorkItem = WorkItem

// ModelsWorkItemComment defines the model for ModelsWorkItemComment.
type ModelsWorkItemComment = WorkItemComment

// ModelsWorkItemCreateParams defines the model for ModelsWorkItemCreateParams.
type ModelsWorkItemCreateParams = WorkItemCreateParams

// ModelsWorkItemID defines the model for ModelsWorkItemID.
type ModelsWorkItemID = interface{}

// ModelsWorkItemM2MAssigneeWIA defines the model for ModelsWorkItemM2MAssigneeWIA.
type ModelsWorkItemM2MAssigneeWIA = WorkItemM2MAssigneeWIA

// ModelsWorkItemRole defines the model for ModelsWorkItemRole.
type ModelsWorkItemRole = string

// ModelsWorkItemTag defines the model for ModelsWorkItemTag.
type ModelsWorkItemTag = WorkItemTag

// ModelsWorkItemTagCreateParams defines the model for ModelsWorkItemTagCreateParams.
type ModelsWorkItemTagCreateParams = WorkItemTagCreateParams

// ModelsWorkItemType defines the model for ModelsWorkItemType.
type ModelsWorkItemType = WorkItemType

// ModelsWorkItemTypeID defines the model for ModelsWorkItemTypeID.
type ModelsWorkItemTypeID = interface{}

/* Ignoring existing struct (rest/models.go) NotificationResponse */

// NotificationType is generated from database enum 'notification_type'.
type NotificationType string

/* Ignoring existing struct (rest/models.go) PaginatedDemoWorkItemsResponse */

/* Ignoring existing struct (rest/models.go) PaginatedNotificationsResponse */

/* Ignoring existing struct (rest/models.go) PaginatedUsersResponse */

// Pagination defines the model for Pagination.
type Pagination struct {
	Filter *externalRef0.PaginationFilter `json:"filter,omitempty"`
	Sort   *externalRef0.Direction        `json:"sort,omitempty"`
}

// PaginationCursor defines the model for PaginationCursor.
type PaginationCursor struct {
	// Column represents the JSON name of the models column
	Column    string                 `json:"column"`
	Direction externalRef0.Direction `json:"direction"`

	// Value represents a cursor value
	Value *interface{} `json:"value"`
}

// PaginationFilter defines the model for PaginationFilter.
type PaginationFilter struct {
	union           json.RawMessage
	FromQueryParams bool
}

// PaginationFilterArray defines the model for PaginationFilterArray.
type PaginationFilterArray struct {
	FilterMode externalRef0.PaginationFilterModes `json:"filterMode"`
	Value      *[]string                          `json:"value"`
}

// PaginationFilterModes defines the model for PaginationFilterModes.
type PaginationFilterModes string

// PaginationFilterPrimitive defines the model for PaginationFilterPrimitive.
type PaginationFilterPrimitive struct {
	CaseSensitive *bool                              `json:"caseSensitive"`
	FilterMode    externalRef0.PaginationFilterModes `json:"filterMode"`
	Value         *string                            `json:"value"`
}

// PaginationItems represents pagination data indexed by column id
type PaginationItems map[string]externalRef0.Pagination

/* Ignoring existing struct (rest/models.go) PaginationPage */

/* Ignoring existing struct (rest/models.go) ProjectBoard */

// ProjectConfig defines the model for ProjectConfig.
type ProjectConfig struct {
	Fields        *[]externalRef0.ProjectConfigField `json:"fields,omitempty"`
	Header        *[]string                          `json:"header,omitempty"`
	Visualization *map[string]interface{}            `json:"visualization,omitempty"`
}

// ProjectConfigField defines the model for ProjectConfigField.
type ProjectConfigField struct {
	IsEditable    bool   `json:"isEditable"`
	IsVisible     bool   `json:"isVisible"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	ShowCollapsed bool   `json:"showCollapsed"`
}

// ProjectName is generated from projects table.
type ProjectName string

// Role is generated from roles.json keys.
type Role string

// Scope is generated from scopes.json keys.
type Scope string

// Scopes defines the model for Scopes.
type Scopes = []externalRef0.Scope

// ServicesMember defines the model for ServicesMember.
type ServicesMember struct {
	// Role is generated from database enum 'work_item_role'.
	Role   externalRef0.WorkItemRole `json:"role"`
	UserID externalRef0.ModelsUserID `json:"userID"`
}

/* Ignoring existing struct (rest/models.go) SharedWorkItemJoins */

/* Ignoring existing struct (rest/models.go) TeamResponse */

/* Ignoring existing struct (rest/models.go) TimeEntryResponse */

// Topic string identifiers for SSE event listeners.
type Topic string

// Topics defines the model for Topics.
type Topics = []externalRef0.Topic

/* Ignoring existing struct (rest/models.go) UpdateActivityRequest */

/* Ignoring existing struct (rest/models.go) UpdateTeamRequest */

/* Ignoring existing struct (rest/models.go) UpdateTimeEntryRequest */

// UpdateUserAuthRequest represents User authorization data to update
type UpdateUserAuthRequest struct {
	// Role is generated from roles.json keys.
	Role   *externalRef0.Role   `json:"role,omitempty"`
	Scopes *externalRef0.Scopes `json:"scopes,omitempty"`
}

// UpdateUserRequest represents User data to update
type UpdateUserRequest struct {
	// FirstName originally from auth server but updatable
	FirstName *string `json:"firstName,omitempty"`

	// LastName originally from auth server but updatable
	LastName *string `json:"lastName,omitempty"`
}

/* Ignoring existing struct (rest/models.go) UpdateWorkItemCommentRequest */

/* Ignoring existing struct (rest/models.go) UpdateWorkItemTagRequest */

/* Ignoring existing struct (rest/models.go) UpdateWorkItemTypeRequest */

/* Ignoring existing struct (rest/models.go) UserResponse */

// UuidUUID defines the model for UuidUUID.
type UuidUUID = uuid.UUID

// ValidationError defines the model for ValidationError.
type ValidationError struct {
	Ctx *map[string]interface{} `json:"ctx,omitempty"`

	// Detail verbose details of the error
	Detail struct {
		Schema map[string]interface{} `json:"schema"`
		Value  string                 `json:"value"`
	} `json:"detail"`

	// Loc location in body path, if any
	Loc []string `json:"loc"`

	// Msg should always be shown to the user
	Msg string `json:"msg"`
}

/* Ignoring existing struct (rest/models.go) WorkItemBase */

/* Ignoring existing struct (rest/models.go) WorkItemCommentResponse */

// WorkItemResponse defines the model for WorkItemResponse.
type WorkItemResponse struct {
	union           json.RawMessage
	FromQueryParams bool
}

// WorkItemRole is generated from database enum 'work_item_role'.
type WorkItemRole string

/* Ignoring existing struct (rest/models.go) WorkItemTagResponse */

/* Ignoring existing struct (rest/models.go) WorkItemTypeResponse */

// UUID defines the model for UUID.
type UUID = uuid.UUID

// MyProviderLoginParams defines parameters for MyProviderLogin.
type MyProviderLoginParams struct {
	AuthRedirectUri string `form:"auth-redirect-uri" json:"auth-redirect-uri"`
}

// EventsParams defines parameters for Events.
type EventsParams struct {
	ProjectName externalRef0.ProjectName `form:"projectName" json:"projectName"`
	Topics      externalRef0.Topics      `form:"topics" json:"topics"`
}

// GetPaginatedNotificationsParams defines parameters for GetPaginatedNotifications.
type GetPaginatedNotificationsParams struct {
	Limit     int                    `form:"limit" json:"limit"`
	Direction externalRef0.Direction `form:"direction" json:"direction"`
	Cursor    *string                `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetProjectWorkitemsParams defines parameters for GetProjectWorkitems.
type GetProjectWorkitemsParams struct {
	Open    *bool `form:"open,omitempty" json:"open,omitempty"`
	Deleted *bool `form:"deleted,omitempty" json:"deleted,omitempty"`
}

// GetPaginatedUsersParams defines parameters for GetPaginatedUsers.
type GetPaginatedUsersParams struct {
	Limit       int                                            `form:"limit" json:"limit"`
	Direction   externalRef0.Direction                         `form:"direction" json:"direction"`
	Cursor      *string                                        `form:"cursor,omitempty" json:"cursor,omitempty"`
	Column      string                                         `form:"column" json:"column"`
	SearchQuery *externalRef0.GetPaginatedUsersQueryParameters `json:"searchQuery,omitempty"`
}

// GetPaginatedWorkItemParams defines parameters for GetPaginatedWorkItem.
type GetPaginatedWorkItemParams struct {
	Limit       int                                               `form:"limit" json:"limit"`
	Direction   externalRef0.Direction                            `form:"direction" json:"direction"`
	Cursor      *string                                           `form:"cursor,omitempty" json:"cursor,omitempty"`
	SearchQuery *externalRef0.GetCacheDemoWorkItemQueryParameters `json:"searchQuery,omitempty"`
}

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = UpdateActivityRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = CreateActivityRequest

// UpdateProjectConfigJSONRequestBody defines body for UpdateProjectConfig for application/json ContentType.
type UpdateProjectConfigJSONRequestBody = ProjectConfig

// InitializeProjectJSONRequestBody defines body for InitializeProject for application/json ContentType.
type InitializeProjectJSONRequestBody = CreateProjectBoardRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// CreateWorkItemTagJSONRequestBody defines body for CreateWorkItemTag for application/json ContentType.
type CreateWorkItemTagJSONRequestBody = CreateWorkItemTagRequest

// CreateWorkItemTypeJSONRequestBody defines body for CreateWorkItemType for application/json ContentType.
type CreateWorkItemTypeJSONRequestBody = CreateWorkItemTypeRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// CreateTimeEntryJSONRequestBody defines body for CreateTimeEntry for application/json ContentType.
type CreateTimeEntryJSONRequestBody = CreateTimeEntryRequest

// UpdateTimeEntryJSONRequestBody defines body for UpdateTimeEntry for application/json ContentType.
type UpdateTimeEntryJSONRequestBody = UpdateTimeEntryRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// UpdateUserAuthorizationJSONRequestBody defines body for UpdateUserAuthorization for application/json ContentType.
type UpdateUserAuthorizationJSONRequestBody = UpdateUserAuthRequest

// UpdateWorkItemTagJSONRequestBody defines body for UpdateWorkItemTag for application/json ContentType.
type UpdateWorkItemTagJSONRequestBody = UpdateWorkItemTagRequest

// UpdateWorkItemTypeJSONRequestBody defines body for UpdateWorkItemType for application/json ContentType.
type UpdateWorkItemTypeJSONRequestBody = UpdateWorkItemTypeRequest

// CreateWorkitemJSONRequestBody defines body for CreateWorkitem for application/json ContentType.
type CreateWorkitemJSONRequestBody = CreateWorkItemRequest

// CreateWorkItemCommentJSONRequestBody defines body for CreateWorkItemComment for application/json ContentType.
type CreateWorkItemCommentJSONRequestBody = CreateWorkItemCommentRequest

// UpdateWorkItemCommentJSONRequestBody defines body for UpdateWorkItemComment for application/json ContentType.
type UpdateWorkItemCommentJSONRequestBody = UpdateWorkItemCommentRequest

// AsCreateDemoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoWorkItemRequest() (CreateDemoWorkItemRequest, error) {
	var body CreateDemoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsCreateDemoTwoWorkItemRequest returns the union data inside the CreateWorkItemRequest as a CreateDemoTwoWorkItemRequest
func (t CreateWorkItemRequest) AsCreateDemoTwoWorkItemRequest() (CreateDemoTwoWorkItemRequest, error) {
	var body CreateDemoTwoWorkItemRequest
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, err
	}

	s := "CreateWorkItemRequest"
	discriminatorSchema := "CreateDemoTwoWorkItemRequest"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return CreateDemoTwoWorkItemRequest{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t CreateWorkItemRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateWorkItemRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginationFilterPrimitive returns the union data inside the PaginationFilter as a PaginationFilterPrimitive
func (t PaginationFilter) AsPaginationFilterPrimitive() (PaginationFilterPrimitive, error) {
	var body PaginationFilterPrimitive
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterPrimitive{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterPrimitive"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterPrimitive{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterPrimitive{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsPaginationFilterArray returns the union data inside the PaginationFilter as a PaginationFilterArray
func (t PaginationFilter) AsPaginationFilterArray() (PaginationFilterArray, error) {
	var body PaginationFilterArray
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return PaginationFilterArray{}, err
	}

	s := "PaginationFilter"
	discriminatorSchema := "PaginationFilterArray"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return PaginationFilterArray{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return PaginationFilterArray{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t PaginationFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDemoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoWorkItemResponse
func (t WorkItemResponse) AsDemoWorkItemResponse() (DemoWorkItemResponse, error) {
	var body DemoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

// AsDemoTwoWorkItemResponse returns the union data inside the WorkItemResponse as a DemoTwoWorkItemResponse
func (t WorkItemResponse) AsDemoTwoWorkItemResponse() (DemoTwoWorkItemResponse, error) {
	var body DemoTwoWorkItemResponse
	if !t.FromQueryParams {
		err := json.Unmarshal(t.union, &body)
		return body, err
	}
	// arrays are passed as maps, so reconstruct json properly
	var unionm map[string]interface{}
	err := json.Unmarshal(t.union, &unionm)
	if err != nil {
		return DemoTwoWorkItemResponse{}, err
	}

	s := "WorkItemResponse"
	discriminatorSchema := "DemoTwoWorkItemResponse"
	fp, ok := spec.Components.Schemas[s]
	if !ok {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("schema %s not found", s)
	}
	union, err := openapi.ReconstructQueryParamsValues(fp.Value, unionm, discriminatorSchema)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("could not reconstruct query params for schema %s: %v", discriminatorSchema, err)
	}
	jsonUnion, err := json.Marshal(union)
	if err != nil {
		return DemoTwoWorkItemResponse{}, fmt.Errorf("reconstructed params are not valid json: %v", err)
	}
	err = json.Unmarshal(jsonUnion, &body)

	return body, err
}

func (t WorkItemResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WorkItemResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// delete activity.
	// (DELETE /activity/{activityID})
	DeleteActivity(c *gin.Context, activityID models.ActivityID)
	// get activity.
	// (GET /activity/{activityID})
	GetActivity(c *gin.Context, activityID models.ActivityID)
	// update activity.
	// (PATCH /activity/{activityID})
	UpdateActivity(c *gin.Context, activityID models.ActivityID)
	// Ping pongs
	// (GET /admin/ping)
	AdminPing(c *gin.Context)

	// (GET /auth/myprovider/callback)
	MyProviderCallback(c *gin.Context)

	// (GET /auth/myprovider/login)
	MyProviderLogin(c *gin.Context, params externalRef0.MyProviderLoginParams)

	// (GET /events)
	Events(c *gin.Context, params externalRef0.EventsParams)
	// Get paginated user notifications
	// (GET /notifications/user/page)
	GetPaginatedNotifications(c *gin.Context, params externalRef0.GetPaginatedNotificationsParams)
	// Returns this very OpenAPI spec.
	// (GET /openapi.yaml)
	OpenapiYamlGet(c *gin.Context)
	// Ping pongs
	// (GET /ping)
	Ping(c *gin.Context)
	// returns board data for a project
	// (GET /project/{projectName}/)
	GetProject(c *gin.Context, projectName externalRef0.ProjectName)
	// create activity.
	// (POST /project/{projectName}/activity/)
	CreateActivity(c *gin.Context, projectName externalRef0.ProjectName)
	// returns board data for a project
	// (GET /project/{projectName}/board)
	GetProjectBoard(c *gin.Context, projectName externalRef0.ProjectName)
	// returns the project configuration
	// (GET /project/{projectName}/config)
	GetProjectConfig(c *gin.Context, projectName externalRef0.ProjectName)
	// updates the project configuration
	// (PUT /project/{projectName}/config)
	UpdateProjectConfig(c *gin.Context, projectName externalRef0.ProjectName)
	// creates initial data (teams, tags...) for a new project
	// (POST /project/{projectName}/initialize)
	InitializeProject(c *gin.Context, projectName externalRef0.ProjectName)
	// create team.
	// (POST /project/{projectName}/team/)
	CreateTeam(c *gin.Context, projectName externalRef0.ProjectName)
	// create workitemtag.
	// (POST /project/{projectName}/work-item-tag/)
	CreateWorkItemTag(c *gin.Context, projectName externalRef0.ProjectName)
	// create workitemtype.
	// (POST /project/{projectName}/work-item-type/)
	CreateWorkItemType(c *gin.Context, projectName externalRef0.ProjectName)
	// returns workitems for a project
	// (GET /project/{projectName}/workitems)
	GetProjectWorkitems(c *gin.Context, projectName externalRef0.ProjectName, params externalRef0.GetProjectWorkitemsParams)
	// delete team.
	// (DELETE /team/{teamID})
	DeleteTeam(c *gin.Context, teamID models.TeamID)
	// get team.
	// (GET /team/{teamID})
	GetTeam(c *gin.Context, teamID models.TeamID)
	// update team.
	// (PATCH /team/{teamID})
	UpdateTeam(c *gin.Context, teamID models.TeamID)
	// create time entry.
	// (POST /time-entry/)
	CreateTimeEntry(c *gin.Context)
	// delete time-entry.
	// (DELETE /time-entry/{timeEntryID})
	DeleteTimeEntry(c *gin.Context, timeEntryID models.TimeEntryID)
	// get time-entry.
	// (GET /time-entry/{timeEntryID})
	GetTimeEntry(c *gin.Context, timeEntryID models.TimeEntryID)
	// update time-entry.
	// (PATCH /time-entry/{timeEntryID})
	UpdateTimeEntry(c *gin.Context, timeEntryID models.TimeEntryID)
	// returns the logged in user
	// (GET /user/me)
	GetCurrentUser(c *gin.Context)
	// Get paginated users
	// (GET /user/page)
	GetPaginatedUsers(c *gin.Context, params externalRef0.GetPaginatedUsersParams)
	// deletes the user by id
	// (DELETE /user/{id})
	DeleteUser(c *gin.Context, id uuid.UUID)
	// updates the user by id
	// (PATCH /user/{id})
	UpdateUser(c *gin.Context, id uuid.UUID)
	// updates user role and scopes by id
	// (PATCH /user/{id}/authorization)
	UpdateUserAuthorization(c *gin.Context, id uuid.UUID)
	// delete workitemtag.
	// (DELETE /work-item-tag/{workItemTagID})
	DeleteWorkItemTag(c *gin.Context, workItemTagID models.WorkItemTagID)
	// get workitemtag.
	// (GET /work-item-tag/{workItemTagID})
	GetWorkItemTag(c *gin.Context, workItemTagID models.WorkItemTagID)
	// update workitemtag.
	// (PATCH /work-item-tag/{workItemTagID})
	UpdateWorkItemTag(c *gin.Context, workItemTagID models.WorkItemTagID)
	// delete workitemtype.
	// (DELETE /work-item-type/{workItemTypeID})
	DeleteWorkItemType(c *gin.Context, workItemTypeID models.WorkItemTypeID)
	// get workitemtype.
	// (GET /work-item-type/{workItemTypeID})
	GetWorkItemType(c *gin.Context, workItemTypeID models.WorkItemTypeID)
	// update workitemtype.
	// (PATCH /work-item-type/{workItemTypeID})
	UpdateWorkItemType(c *gin.Context, workItemTypeID models.WorkItemTypeID)
	// create workitem
	// (POST /work-item/)
	CreateWorkitem(c *gin.Context)
	// Get paginated user work-item
	// (GET /work-item/page)
	GetPaginatedWorkItem(c *gin.Context, params externalRef0.GetPaginatedWorkItemParams)
	// delete workitem
	// (DELETE /work-item/{workItemID}/)
	DeleteWorkitem(c *gin.Context, workItemID models.WorkItemID)
	// get workitem
	// (GET /work-item/{workItemID}/)
	GetWorkItem(c *gin.Context, workItemID models.WorkItemID)
	// update workitem
	// (PATCH /work-item/{workItemID}/)
	UpdateWorkitem(c *gin.Context, workItemID models.WorkItemID)
	// create work item comment.
	// (POST /work-item/{workItemID}/comment/)
	CreateWorkItemComment(c *gin.Context, workItemID int)
	// delete .
	// (DELETE /work-item/{workItemID}/comment/{workItemCommentID})
	DeleteWorkItemComment(c *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID)
	// get work item comment.
	// (GET /work-item/{workItemID}/comment/{workItemCommentID})
	GetWorkItemComment(c *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID)
	// update work item comment.
	// (PATCH /work-item/{workItemID}/comment/{workItemCommentID})
	UpdateWorkItemComment(c *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID)

	middlewares(opID OperationID) []gin.HandlerFunc
	authMiddlewares(opID OperationID) []gin.HandlerFunc
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc func(c *gin.Context)

// DeleteActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "activityID" -------------
	var activityID models.ActivityID // models.ActivityID

	err = runtime.BindStyledParameter("simple", false, "activityID", c.Param("activityID"), &activityID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter activityID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteActivity(c, activityID)
}

// GetActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "activityID" -------------
	var activityID models.ActivityID // models.ActivityID

	err = runtime.BindStyledParameter("simple", false, "activityID", c.Param("activityID"), &activityID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter activityID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetActivity(c, activityID)
}

// UpdateActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "activityID" -------------
	var activityID models.ActivityID // models.ActivityID

	err = runtime.BindStyledParameter("simple", false, "activityID", c.Param("activityID"), &activityID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter activityID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateActivity(c, activityID)
}

// AdminPing operation with its own middleware.
func (siw *ServerInterfaceWrapper) AdminPing(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.AdminPing(c)
}

// MyProviderCallback operation with its own middleware.
func (siw *ServerInterfaceWrapper) MyProviderCallback(c *gin.Context) {
	siw.Handler.MyProviderCallback(c)
}

// MyProviderLogin operation with its own middleware.
func (siw *ServerInterfaceWrapper) MyProviderLogin(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.MyProviderLoginParams

	// ------------- Required query parameter "auth-redirect-uri" -------------

	if paramValue := c.Query("auth-redirect-uri"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument auth-redirect-uri is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "auth-redirect-uri", c.Request.URL.Query(), &params.AuthRedirectUri)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter auth-redirect-uri: %s", err)})
		return
	}

	siw.Handler.MyProviderLogin(c, params)
}

// Events operation with its own middleware.
func (siw *ServerInterfaceWrapper) Events(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.EventsParams

	// ------------- Required query parameter "projectName" -------------

	if paramValue := c.Query("projectName"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument projectName is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "projectName", c.Request.URL.Query(), &params.ProjectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	// ------------- Required query parameter "topics" -------------

	if paramValue := c.Query("topics"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument topics is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "topics", c.Request.URL.Query(), &params.Topics)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter topics: %s", err)})
		return
	}

	siw.Handler.Events(c, params)
}

// GetPaginatedNotifications operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetPaginatedNotifications(c *gin.Context) {
	var err error

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetPaginatedNotificationsParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "direction" -------------

	if paramValue := c.Query("direction"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument direction is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter direction: %s", err)})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cursor: %s", err)})
		return
	}

	siw.Handler.GetPaginatedNotifications(c, params)
}

// OpenapiYamlGet operation with its own middleware.
func (siw *ServerInterfaceWrapper) OpenapiYamlGet(c *gin.Context) {
	siw.Handler.OpenapiYamlGet(c)
}

// Ping operation with its own middleware.
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {
	siw.Handler.Ping(c)
}

// GetProject operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProject(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetProject(c, projectName)
}

// CreateActivity operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateActivity(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateActivity(c, projectName)
}

// GetProjectBoard operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProjectBoard(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetProjectBoard(c, projectName)
}

// GetProjectConfig operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProjectConfig(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetProjectConfig(c, projectName)
}

// UpdateProjectConfig operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateProjectConfig(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateProjectConfig(c, projectName)
}

// InitializeProject operation with its own middleware.
func (siw *ServerInterfaceWrapper) InitializeProject(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.InitializeProject(c, projectName)
}

// CreateTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateTeam(c, projectName)
}

// CreateWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkItemTag(c, projectName)
}

// CreateWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkItemType(c, projectName)
}

// GetProjectWorkitems operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetProjectWorkitems(c *gin.Context) {
	var err error

	// ------------- Path parameter "projectName" -------------
	var projectName externalRef0.ProjectName // ProjectName

	err = runtime.BindStyledParameter("simple", false, "projectName", c.Param("projectName"), &projectName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter projectName: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetProjectWorkitemsParams

	// ------------- Optional query parameter "open" -------------

	err = runtime.BindQueryParameter("form", true, false, "open", c.Request.URL.Query(), &params.Open)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter open: %s", err)})
		return
	}

	// ------------- Optional query parameter "deleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "deleted", c.Request.URL.Query(), &params.Deleted)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter deleted: %s", err)})
		return
	}

	siw.Handler.GetProjectWorkitems(c, projectName, params)
}

// DeleteTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID models.TeamID // models.TeamID

	err = runtime.BindStyledParameter("simple", false, "teamID", c.Param("teamID"), &teamID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter teamID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteTeam(c, teamID)
}

// GetTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID models.TeamID // models.TeamID

	err = runtime.BindStyledParameter("simple", false, "teamID", c.Param("teamID"), &teamID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter teamID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetTeam(c, teamID)
}

// UpdateTeam operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateTeam(c *gin.Context) {
	var err error

	// ------------- Path parameter "teamID" -------------
	var teamID models.TeamID // models.TeamID

	err = runtime.BindStyledParameter("simple", false, "teamID", c.Param("teamID"), &teamID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter teamID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateTeam(c, teamID)
}

// CreateTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateTimeEntry(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateTimeEntry(c)
}

// DeleteTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteTimeEntry(c *gin.Context) {
	var err error

	// ------------- Path parameter "timeEntryID" -------------
	var timeEntryID models.TimeEntryID // models.TimeEntryID

	err = runtime.BindStyledParameter("simple", false, "timeEntryID", c.Param("timeEntryID"), &timeEntryID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter timeEntryID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteTimeEntry(c, timeEntryID)
}

// GetTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetTimeEntry(c *gin.Context) {
	var err error

	// ------------- Path parameter "timeEntryID" -------------
	var timeEntryID models.TimeEntryID // models.TimeEntryID

	err = runtime.BindStyledParameter("simple", false, "timeEntryID", c.Param("timeEntryID"), &timeEntryID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter timeEntryID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetTimeEntry(c, timeEntryID)
}

// UpdateTimeEntry operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateTimeEntry(c *gin.Context) {
	var err error

	// ------------- Path parameter "timeEntryID" -------------
	var timeEntryID models.TimeEntryID // models.TimeEntryID

	err = runtime.BindStyledParameter("simple", false, "timeEntryID", c.Param("timeEntryID"), &timeEntryID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter timeEntryID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateTimeEntry(c, timeEntryID)
}

// GetCurrentUser operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetCurrentUser(c)
}

// GetPaginatedUsers operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetPaginatedUsers(c *gin.Context) {
	var err error

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetPaginatedUsersParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "direction" -------------

	if paramValue := c.Query("direction"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument direction is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter direction: %s", err)})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cursor: %s", err)})
		return
	}

	// ------------- Required query parameter "column" -------------

	if paramValue := c.Query("column"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument column is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "column", c.Request.URL.Query(), &params.Column)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter column: %s", err)})
		return
	}

	// ------------- Optional query parameter "searchQuery" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "searchQuery", c.Request.URL.Query(), &params.SearchQuery)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter searchQuery: %s", err)})
		return
	}

	siw.Handler.GetPaginatedUsers(c, params)
}

// DeleteUser operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID // uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteUser(c, id)
}

// UpdateUser operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID // uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateUser(c, id)
}

// UpdateUserAuthorization operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateUserAuthorization(c *gin.Context) {
	var err error

	// ------------- Path parameter "id" -------------
	var id uuid.UUID // uuid.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateUserAuthorization(c, id)
}

// DeleteWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTagID" -------------
	var workItemTagID models.WorkItemTagID // models.WorkItemTagID

	err = runtime.BindStyledParameter("simple", false, "workItemTagID", c.Param("workItemTagID"), &workItemTagID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTagID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkItemTag(c, workItemTagID)
}

// GetWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTagID" -------------
	var workItemTagID models.WorkItemTagID // models.WorkItemTagID

	err = runtime.BindStyledParameter("simple", false, "workItemTagID", c.Param("workItemTagID"), &workItemTagID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTagID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItemTag(c, workItemTagID)
}

// UpdateWorkItemTag operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkItemTag(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTagID" -------------
	var workItemTagID models.WorkItemTagID // models.WorkItemTagID

	err = runtime.BindStyledParameter("simple", false, "workItemTagID", c.Param("workItemTagID"), &workItemTagID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTagID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkItemTag(c, workItemTagID)
}

// DeleteWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTypeID" -------------
	var workItemTypeID models.WorkItemTypeID // models.WorkItemTypeID

	err = runtime.BindStyledParameter("simple", false, "workItemTypeID", c.Param("workItemTypeID"), &workItemTypeID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTypeID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkItemType(c, workItemTypeID)
}

// GetWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTypeID" -------------
	var workItemTypeID models.WorkItemTypeID // models.WorkItemTypeID

	err = runtime.BindStyledParameter("simple", false, "workItemTypeID", c.Param("workItemTypeID"), &workItemTypeID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTypeID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItemType(c, workItemTypeID)
}

// UpdateWorkItemType operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkItemType(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemTypeID" -------------
	var workItemTypeID models.WorkItemTypeID // models.WorkItemTypeID

	err = runtime.BindStyledParameter("simple", false, "workItemTypeID", c.Param("workItemTypeID"), &workItemTypeID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemTypeID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkItemType(c, workItemTypeID)
}

// CreateWorkitem operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkitem(c *gin.Context) {
	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkitem(c)
}

// GetPaginatedWorkItem operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetPaginatedWorkItem(c *gin.Context) {
	var err error

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params externalRef0.GetPaginatedWorkItemParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "direction" -------------

	if paramValue := c.Query("direction"); paramValue != "" {
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument direction is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter direction: %s", err)})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cursor: %s", err)})
		return
	}

	// ------------- Optional query parameter "searchQuery" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "searchQuery", c.Request.URL.Query(), &params.SearchQuery)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter searchQuery: %s", err)})
		return
	}

	siw.Handler.GetPaginatedWorkItem(c, params)
}

// DeleteWorkitem operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkitem(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkitem(c, workItemID)
}

// GetWorkItem operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItem(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItem(c, workItemID)
}

// UpdateWorkitem operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkitem(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkitem(c, workItemID)
}

// CreateWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) CreateWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID int // int

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.CreateWorkItemComment(c, workItemID)
}

// DeleteWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) DeleteWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	// ------------- Path parameter "workItemCommentID" -------------
	var workItemCommentID models.WorkItemCommentID // models.WorkItemCommentID

	err = runtime.BindStyledParameter("simple", false, "workItemCommentID", c.Param("workItemCommentID"), &workItemCommentID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemCommentID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.DeleteWorkItemComment(c, workItemID, workItemCommentID)
}

// GetWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) GetWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	// ------------- Path parameter "workItemCommentID" -------------
	var workItemCommentID models.WorkItemCommentID // models.WorkItemCommentID

	err = runtime.BindStyledParameter("simple", false, "workItemCommentID", c.Param("workItemCommentID"), &workItemCommentID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemCommentID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.GetWorkItemComment(c, workItemID, workItemCommentID)
}

// UpdateWorkItemComment operation with its own middleware.
func (siw *ServerInterfaceWrapper) UpdateWorkItemComment(c *gin.Context) {
	var err error

	// ------------- Path parameter "workItemID" -------------
	var workItemID models.WorkItemID // models.WorkItemID

	err = runtime.BindStyledParameter("simple", false, "workItemID", c.Param("workItemID"), &workItemID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemID: %s", err)})
		return
	}

	// ------------- Path parameter "workItemCommentID" -------------
	var workItemCommentID models.WorkItemCommentID // models.WorkItemCommentID

	err = runtime.BindStyledParameter("simple", false, "workItemCommentID", c.Param("workItemCommentID"), &workItemCommentID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter workItemCommentID: %s", err)})
		return
	}

	c.Set(externalRef0.Bearer_authScopes, []string{})

	c.Set(externalRef0.Api_keyScopes, []string{})

	siw.Handler.UpdateWorkItemComment(c, workItemID, workItemCommentID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL string
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	// calling mw(c) directly has unexpected consequences: closed channels, etc.
	router.DELETE(options.BaseURL+"/activity/:activityID", append(
		wrapper.Handler.authMiddlewares(DeleteActivity),
		append(wrapper.Handler.middlewares(DeleteActivity), wrapper.DeleteActivity)...,
	)...)

	router.GET(options.BaseURL+"/activity/:activityID", append(
		wrapper.Handler.authMiddlewares(GetActivity),
		append(wrapper.Handler.middlewares(GetActivity), wrapper.GetActivity)...,
	)...)

	router.PATCH(options.BaseURL+"/activity/:activityID", append(
		wrapper.Handler.authMiddlewares(UpdateActivity),
		append(wrapper.Handler.middlewares(UpdateActivity), wrapper.UpdateActivity)...,
	)...)

	router.GET(options.BaseURL+"/admin/ping", append(
		wrapper.Handler.authMiddlewares(AdminPing),
		append(wrapper.Handler.middlewares(AdminPing), wrapper.AdminPing)...,
	)...)

	router.GET(options.BaseURL+"/auth/myprovider/callback", append(
		wrapper.Handler.authMiddlewares(MyProviderCallback),
		append(wrapper.Handler.middlewares(MyProviderCallback), wrapper.MyProviderCallback)...,
	)...)

	router.GET(options.BaseURL+"/auth/myprovider/login", append(
		wrapper.Handler.authMiddlewares(MyProviderLogin),
		append(wrapper.Handler.middlewares(MyProviderLogin), wrapper.MyProviderLogin)...,
	)...)

	router.GET(options.BaseURL+"/events", append(
		wrapper.Handler.authMiddlewares(Events),
		append(wrapper.Handler.middlewares(Events), wrapper.Events)...,
	)...)

	router.GET(options.BaseURL+"/notifications/user/page", append(
		wrapper.Handler.authMiddlewares(GetPaginatedNotifications),
		append(wrapper.Handler.middlewares(GetPaginatedNotifications), wrapper.GetPaginatedNotifications)...,
	)...)

	router.GET(options.BaseURL+"/openapi.yaml", append(
		wrapper.Handler.authMiddlewares(OpenapiYamlGet),
		append(wrapper.Handler.middlewares(OpenapiYamlGet), wrapper.OpenapiYamlGet)...,
	)...)

	router.GET(options.BaseURL+"/ping", append(
		wrapper.Handler.authMiddlewares(Ping),
		append(wrapper.Handler.middlewares(Ping), wrapper.Ping)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/", append(
		wrapper.Handler.authMiddlewares(GetProject),
		append(wrapper.Handler.middlewares(GetProject), wrapper.GetProject)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/activity/", append(
		wrapper.Handler.authMiddlewares(CreateActivity),
		append(wrapper.Handler.middlewares(CreateActivity), wrapper.CreateActivity)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/board", append(
		wrapper.Handler.authMiddlewares(GetProjectBoard),
		append(wrapper.Handler.middlewares(GetProjectBoard), wrapper.GetProjectBoard)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/config", append(
		wrapper.Handler.authMiddlewares(GetProjectConfig),
		append(wrapper.Handler.middlewares(GetProjectConfig), wrapper.GetProjectConfig)...,
	)...)

	router.PUT(options.BaseURL+"/project/:projectName/config", append(
		wrapper.Handler.authMiddlewares(UpdateProjectConfig),
		append(wrapper.Handler.middlewares(UpdateProjectConfig), wrapper.UpdateProjectConfig)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/initialize", append(
		wrapper.Handler.authMiddlewares(InitializeProject),
		append(wrapper.Handler.middlewares(InitializeProject), wrapper.InitializeProject)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/team/", append(
		wrapper.Handler.authMiddlewares(CreateTeam),
		append(wrapper.Handler.middlewares(CreateTeam), wrapper.CreateTeam)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/work-item-tag/", append(
		wrapper.Handler.authMiddlewares(CreateWorkItemTag),
		append(wrapper.Handler.middlewares(CreateWorkItemTag), wrapper.CreateWorkItemTag)...,
	)...)

	router.POST(options.BaseURL+"/project/:projectName/work-item-type/", append(
		wrapper.Handler.authMiddlewares(CreateWorkItemType),
		append(wrapper.Handler.middlewares(CreateWorkItemType), wrapper.CreateWorkItemType)...,
	)...)

	router.GET(options.BaseURL+"/project/:projectName/workitems", append(
		wrapper.Handler.authMiddlewares(GetProjectWorkitems),
		append(wrapper.Handler.middlewares(GetProjectWorkitems), wrapper.GetProjectWorkitems)...,
	)...)

	router.DELETE(options.BaseURL+"/team/:teamID", append(
		wrapper.Handler.authMiddlewares(DeleteTeam),
		append(wrapper.Handler.middlewares(DeleteTeam), wrapper.DeleteTeam)...,
	)...)

	router.GET(options.BaseURL+"/team/:teamID", append(
		wrapper.Handler.authMiddlewares(GetTeam),
		append(wrapper.Handler.middlewares(GetTeam), wrapper.GetTeam)...,
	)...)

	router.PATCH(options.BaseURL+"/team/:teamID", append(
		wrapper.Handler.authMiddlewares(UpdateTeam),
		append(wrapper.Handler.middlewares(UpdateTeam), wrapper.UpdateTeam)...,
	)...)

	router.POST(options.BaseURL+"/time-entry/", append(
		wrapper.Handler.authMiddlewares(CreateTimeEntry),
		append(wrapper.Handler.middlewares(CreateTimeEntry), wrapper.CreateTimeEntry)...,
	)...)

	router.DELETE(options.BaseURL+"/time-entry/:timeEntryID", append(
		wrapper.Handler.authMiddlewares(DeleteTimeEntry),
		append(wrapper.Handler.middlewares(DeleteTimeEntry), wrapper.DeleteTimeEntry)...,
	)...)

	router.GET(options.BaseURL+"/time-entry/:timeEntryID", append(
		wrapper.Handler.authMiddlewares(GetTimeEntry),
		append(wrapper.Handler.middlewares(GetTimeEntry), wrapper.GetTimeEntry)...,
	)...)

	router.PATCH(options.BaseURL+"/time-entry/:timeEntryID", append(
		wrapper.Handler.authMiddlewares(UpdateTimeEntry),
		append(wrapper.Handler.middlewares(UpdateTimeEntry), wrapper.UpdateTimeEntry)...,
	)...)

	router.GET(options.BaseURL+"/user/me", append(
		wrapper.Handler.authMiddlewares(GetCurrentUser),
		append(wrapper.Handler.middlewares(GetCurrentUser), wrapper.GetCurrentUser)...,
	)...)

	router.GET(options.BaseURL+"/user/page", append(
		wrapper.Handler.authMiddlewares(GetPaginatedUsers),
		append(wrapper.Handler.middlewares(GetPaginatedUsers), wrapper.GetPaginatedUsers)...,
	)...)

	router.DELETE(options.BaseURL+"/user/:id", append(
		wrapper.Handler.authMiddlewares(DeleteUser),
		append(wrapper.Handler.middlewares(DeleteUser), wrapper.DeleteUser)...,
	)...)

	router.PATCH(options.BaseURL+"/user/:id", append(
		wrapper.Handler.authMiddlewares(UpdateUser),
		append(wrapper.Handler.middlewares(UpdateUser), wrapper.UpdateUser)...,
	)...)

	router.PATCH(options.BaseURL+"/user/:id/authorization", append(
		wrapper.Handler.authMiddlewares(UpdateUserAuthorization),
		append(wrapper.Handler.middlewares(UpdateUserAuthorization), wrapper.UpdateUserAuthorization)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item-tag/:workItemTagID", append(
		wrapper.Handler.authMiddlewares(DeleteWorkItemTag),
		append(wrapper.Handler.middlewares(DeleteWorkItemTag), wrapper.DeleteWorkItemTag)...,
	)...)

	router.GET(options.BaseURL+"/work-item-tag/:workItemTagID", append(
		wrapper.Handler.authMiddlewares(GetWorkItemTag),
		append(wrapper.Handler.middlewares(GetWorkItemTag), wrapper.GetWorkItemTag)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item-tag/:workItemTagID", append(
		wrapper.Handler.authMiddlewares(UpdateWorkItemTag),
		append(wrapper.Handler.middlewares(UpdateWorkItemTag), wrapper.UpdateWorkItemTag)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item-type/:workItemTypeID", append(
		wrapper.Handler.authMiddlewares(DeleteWorkItemType),
		append(wrapper.Handler.middlewares(DeleteWorkItemType), wrapper.DeleteWorkItemType)...,
	)...)

	router.GET(options.BaseURL+"/work-item-type/:workItemTypeID", append(
		wrapper.Handler.authMiddlewares(GetWorkItemType),
		append(wrapper.Handler.middlewares(GetWorkItemType), wrapper.GetWorkItemType)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item-type/:workItemTypeID", append(
		wrapper.Handler.authMiddlewares(UpdateWorkItemType),
		append(wrapper.Handler.middlewares(UpdateWorkItemType), wrapper.UpdateWorkItemType)...,
	)...)

	router.POST(options.BaseURL+"/work-item/", append(
		wrapper.Handler.authMiddlewares(CreateWorkitem),
		append(wrapper.Handler.middlewares(CreateWorkitem), wrapper.CreateWorkitem)...,
	)...)

	router.GET(options.BaseURL+"/work-item/page", append(
		wrapper.Handler.authMiddlewares(GetPaginatedWorkItem),
		append(wrapper.Handler.middlewares(GetPaginatedWorkItem), wrapper.GetPaginatedWorkItem)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item/:workItemID/", append(
		wrapper.Handler.authMiddlewares(DeleteWorkitem),
		append(wrapper.Handler.middlewares(DeleteWorkitem), wrapper.DeleteWorkitem)...,
	)...)

	router.GET(options.BaseURL+"/work-item/:workItemID/", append(
		wrapper.Handler.authMiddlewares(GetWorkItem),
		append(wrapper.Handler.middlewares(GetWorkItem), wrapper.GetWorkItem)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item/:workItemID/", append(
		wrapper.Handler.authMiddlewares(UpdateWorkitem),
		append(wrapper.Handler.middlewares(UpdateWorkitem), wrapper.UpdateWorkitem)...,
	)...)

	router.POST(options.BaseURL+"/work-item/:workItemID/comment/", append(
		wrapper.Handler.authMiddlewares(CreateWorkItemComment),
		append(wrapper.Handler.middlewares(CreateWorkItemComment), wrapper.CreateWorkItemComment)...,
	)...)

	router.DELETE(options.BaseURL+"/work-item/:workItemID/comment/:workItemCommentID", append(
		wrapper.Handler.authMiddlewares(DeleteWorkItemComment),
		append(wrapper.Handler.middlewares(DeleteWorkItemComment), wrapper.DeleteWorkItemComment)...,
	)...)

	router.GET(options.BaseURL+"/work-item/:workItemID/comment/:workItemCommentID", append(
		wrapper.Handler.authMiddlewares(GetWorkItemComment),
		append(wrapper.Handler.middlewares(GetWorkItemComment), wrapper.GetWorkItemComment)...,
	)...)

	router.PATCH(options.BaseURL+"/work-item/:workItemID/comment/:workItemCommentID", append(
		wrapper.Handler.authMiddlewares(UpdateWorkItemComment),
		append(wrapper.Handler.middlewares(UpdateWorkItemComment), wrapper.UpdateWorkItemComment)...,
	)...)
}

type DeleteActivityRequestObject struct {
	ActivityID models.ActivityID `json:"activityID"`
}

type DeleteActivityResponseObject interface {
	VisitDeleteActivityResponse(w http.ResponseWriter) error
}

type DeleteActivity204Response struct{}

func (response DeleteActivity204Response) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteActivity401Response struct{}

func (response DeleteActivity401Response) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteActivity403Response struct{}

func (response DeleteActivity403Response) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteActivity4XXJSONResponse) VisitDeleteActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetActivityRequestObject struct {
	ActivityID models.ActivityID `json:"activityID"`
}

type GetActivityResponseObject interface {
	VisitGetActivityResponse(w http.ResponseWriter) error
}

type GetActivity200JSONResponse ActivityResponse

func (response GetActivity200JSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetActivity401Response struct{}

func (response GetActivity401Response) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetActivity403Response struct{}

func (response GetActivity403Response) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetActivity4XXJSONResponse) VisitGetActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateActivityRequestObject struct {
	ActivityID models.ActivityID `json:"activityID"`
	Body       *UpdateActivityRequest
}

type UpdateActivityResponseObject interface {
	VisitUpdateActivityResponse(w http.ResponseWriter) error
}

type UpdateActivity200JSONResponse ActivityResponse

func (response UpdateActivity200JSONResponse) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateActivity401Response struct{}

func (response UpdateActivity401Response) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateActivity403Response struct{}

func (response UpdateActivity403Response) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateActivity4XXJSONResponse) VisitUpdateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AdminPingRequestObject struct{}

type AdminPingResponseObject interface {
	VisitAdminPingResponse(w http.ResponseWriter) error
}

type AdminPing200TextResponse string

func (response AdminPing200TextResponse) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type AdminPing401Response struct{}

func (response AdminPing401Response) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminPing403Response struct{}

func (response AdminPing403Response) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminPing4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response AdminPing4XXJSONResponse) VisitAdminPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type MyProviderCallbackRequestObject struct{}

type MyProviderCallbackResponseObject interface {
	VisitMyProviderCallbackResponse(w http.ResponseWriter) error
}

type MyProviderCallback302ResponseHeaders struct {
	Location string
}

type MyProviderCallback302Response struct {
	Headers MyProviderCallback302ResponseHeaders
}

func (response MyProviderCallback302Response) VisitMyProviderCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type MyProviderLoginRequestObject struct {
	Params externalRef0.MyProviderLoginParams
}

type MyProviderLoginResponseObject interface {
	VisitMyProviderLoginResponse(w http.ResponseWriter) error
}

type MyProviderLogin302ResponseHeaders struct {
	Location string
}

type MyProviderLogin302Response struct {
	Headers MyProviderLogin302ResponseHeaders
}

func (response MyProviderLogin302Response) VisitMyProviderLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type EventsRequestObject struct {
	Params externalRef0.EventsParams
}

type EventsResponseObject interface {
	VisitEventsResponse(w http.ResponseWriter) error
}

type Events200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response Events200TexteventStreamResponse) VisitEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetPaginatedNotificationsRequestObject struct {
	Params externalRef0.GetPaginatedNotificationsParams
}

type GetPaginatedNotificationsResponseObject interface {
	VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error
}

type GetPaginatedNotifications200JSONResponse PaginatedNotificationsResponse

func (response GetPaginatedNotifications200JSONResponse) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedNotifications401Response struct{}

func (response GetPaginatedNotifications401Response) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPaginatedNotifications403Response struct{}

func (response GetPaginatedNotifications403Response) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetPaginatedNotifications4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetPaginatedNotifications4XXJSONResponse) VisitGetPaginatedNotificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OpenapiYamlGetRequestObject struct{}

type OpenapiYamlGetResponseObject interface {
	VisitOpenapiYamlGetResponse(w http.ResponseWriter) error
}

type OpenapiYamlGet200ApplicationxYamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response OpenapiYamlGet200ApplicationxYamlResponse) VisitOpenapiYamlGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/x-yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PingRequestObject struct{}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200TextResponse string

func (response Ping200TextResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type Ping401Response struct{}

func (response Ping401Response) VisitPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Ping403Response struct{}

func (response Ping403Response) VisitPingResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type Ping4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response Ping4XXJSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProjectRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(w http.ResponseWriter) error
}

type GetProject200JSONResponse externalRef0.ModelsProject

func (response GetProject200JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateActivityRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateActivityRequest
}

type CreateActivityResponseObject interface {
	VisitCreateActivityResponse(w http.ResponseWriter) error
}

type CreateActivity201JSONResponse ActivityResponse

func (response CreateActivity201JSONResponse) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateActivity401Response struct{}

func (response CreateActivity401Response) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateActivity403Response struct{}

func (response CreateActivity403Response) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateActivity4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateActivity4XXJSONResponse) VisitCreateActivityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProjectBoardRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
}

type GetProjectBoardResponseObject interface {
	VisitGetProjectBoardResponse(w http.ResponseWriter) error
}

type GetProjectBoard200JSONResponse ProjectBoard

func (response GetProjectBoard200JSONResponse) VisitGetProjectBoardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectConfigRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
}

type GetProjectConfigResponseObject interface {
	VisitGetProjectConfigResponse(w http.ResponseWriter) error
}

type GetProjectConfig200JSONResponse externalRef0.ProjectConfig

func (response GetProjectConfig200JSONResponse) VisitGetProjectConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectConfigRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *externalRef0.UpdateProjectConfigJSONRequestBody
}

type UpdateProjectConfigResponseObject interface {
	VisitUpdateProjectConfigResponse(w http.ResponseWriter) error
}

type UpdateProjectConfig204Response struct{}

func (response UpdateProjectConfig204Response) VisitUpdateProjectConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type InitializeProjectRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *externalRef0.InitializeProjectJSONRequestBody
}

type InitializeProjectResponseObject interface {
	VisitInitializeProjectResponse(w http.ResponseWriter) error
}

type InitializeProject204Response struct{}

func (response InitializeProject204Response) VisitInitializeProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateTeamRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateTeamRequest
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(w http.ResponseWriter) error
}

type CreateTeam201JSONResponse TeamResponse

func (response CreateTeam201JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam401Response struct{}

func (response CreateTeam401Response) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateTeam403Response struct{}

func (response CreateTeam403Response) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateTeam4XXJSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateWorkItemTagRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateWorkItemTagRequest
}

type CreateWorkItemTagResponseObject interface {
	VisitCreateWorkItemTagResponse(w http.ResponseWriter) error
}

type CreateWorkItemTag201JSONResponse WorkItemTagResponse

func (response CreateWorkItemTag201JSONResponse) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemTag401Response struct{}

func (response CreateWorkItemTag401Response) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateWorkItemTag403Response struct{}

func (response CreateWorkItemTag403Response) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateWorkItemTag4XXJSONResponse) VisitCreateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateWorkItemTypeRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Body        *CreateWorkItemTypeRequest
}

type CreateWorkItemTypeResponseObject interface {
	VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error
}

type CreateWorkItemType201JSONResponse WorkItemTypeResponse

func (response CreateWorkItemType201JSONResponse) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemType401Response struct{}

func (response CreateWorkItemType401Response) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateWorkItemType403Response struct{}

func (response CreateWorkItemType403Response) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateWorkItemType4XXJSONResponse) VisitCreateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProjectWorkitemsRequestObject struct {
	ProjectName externalRef0.ProjectName `json:"projectName"`
	Params      externalRef0.GetProjectWorkitemsParams
}

type GetProjectWorkitemsResponseObject interface {
	VisitGetProjectWorkitemsResponse(w http.ResponseWriter) error
}

type GetProjectWorkitems200JSONResponse WorkItemResponse

func (response GetProjectWorkitems200JSONResponse) VisitGetProjectWorkitemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamRequestObject struct {
	TeamID models.TeamID `json:"teamID"`
}

type DeleteTeamResponseObject interface {
	VisitDeleteTeamResponse(w http.ResponseWriter) error
}

type DeleteTeam204Response struct{}

func (response DeleteTeam204Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTeam401Response struct{}

func (response DeleteTeam401Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteTeam403Response struct{}

func (response DeleteTeam403Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteTeam4XXJSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTeamRequestObject struct {
	TeamID models.TeamID `json:"teamID"`
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(w http.ResponseWriter) error
}

type GetTeam200JSONResponse TeamResponse

func (response GetTeam200JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeam401Response struct{}

func (response GetTeam401Response) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetTeam403Response struct{}

func (response GetTeam403Response) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetTeam4XXJSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTeamRequestObject struct {
	TeamID models.TeamID `json:"teamID"`
	Body   *UpdateTeamRequest
}

type UpdateTeamResponseObject interface {
	VisitUpdateTeamResponse(w http.ResponseWriter) error
}

type UpdateTeam200JSONResponse TeamResponse

func (response UpdateTeam200JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam401Response struct{}

func (response UpdateTeam401Response) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateTeam403Response struct{}

func (response UpdateTeam403Response) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateTeam4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateTeam4XXJSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateTimeEntryRequestObject struct {
	Body *CreateTimeEntryRequest
}

type CreateTimeEntryResponseObject interface {
	VisitCreateTimeEntryResponse(w http.ResponseWriter) error
}

type CreateTimeEntry201JSONResponse TimeEntryResponse

func (response CreateTimeEntry201JSONResponse) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTimeEntry401Response struct{}

func (response CreateTimeEntry401Response) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateTimeEntry403Response struct{}

func (response CreateTimeEntry403Response) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateTimeEntry4XXJSONResponse) VisitCreateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTimeEntryRequestObject struct {
	TimeEntryID models.TimeEntryID `json:"timeEntryID"`
}

type DeleteTimeEntryResponseObject interface {
	VisitDeleteTimeEntryResponse(w http.ResponseWriter) error
}

type DeleteTimeEntry204Response struct{}

func (response DeleteTimeEntry204Response) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTimeEntry401Response struct{}

func (response DeleteTimeEntry401Response) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteTimeEntry403Response struct{}

func (response DeleteTimeEntry403Response) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteTimeEntry4XXJSONResponse) VisitDeleteTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTimeEntryRequestObject struct {
	TimeEntryID models.TimeEntryID `json:"timeEntryID"`
}

type GetTimeEntryResponseObject interface {
	VisitGetTimeEntryResponse(w http.ResponseWriter) error
}

type GetTimeEntry200JSONResponse TimeEntryResponse

func (response GetTimeEntry200JSONResponse) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTimeEntry401Response struct{}

func (response GetTimeEntry401Response) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetTimeEntry403Response struct{}

func (response GetTimeEntry403Response) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetTimeEntry4XXJSONResponse) VisitGetTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTimeEntryRequestObject struct {
	TimeEntryID models.TimeEntryID `json:"timeEntryID"`
	Body        *UpdateTimeEntryRequest
}

type UpdateTimeEntryResponseObject interface {
	VisitUpdateTimeEntryResponse(w http.ResponseWriter) error
}

type UpdateTimeEntry200JSONResponse TimeEntryResponse

func (response UpdateTimeEntry200JSONResponse) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTimeEntry401Response struct{}

func (response UpdateTimeEntry401Response) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateTimeEntry403Response struct{}

func (response UpdateTimeEntry403Response) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateTimeEntry4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateTimeEntry4XXJSONResponse) VisitUpdateTimeEntryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetCurrentUserRequestObject struct{}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedUsersRequestObject struct {
	Params externalRef0.GetPaginatedUsersParams
}

type GetPaginatedUsersResponseObject interface {
	VisitGetPaginatedUsersResponse(w http.ResponseWriter) error
}

type GetPaginatedUsers200JSONResponse PaginatedUsersResponse

func (response GetPaginatedUsers200JSONResponse) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedUsers401Response struct{}

func (response GetPaginatedUsers401Response) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPaginatedUsers403Response struct{}

func (response GetPaginatedUsers403Response) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetPaginatedUsers4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetPaginatedUsers4XXJSONResponse) VisitGetPaginatedUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserRequestObject struct {
	Id uuid.UUID `json:"id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct{}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUser401Response struct{}

func (response DeleteUser401Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteUser403Response struct{}

func (response DeleteUser403Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteUser4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteUser4XXJSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateUserRequestObject struct {
	Id   uuid.UUID `json:"id"`
	Body *externalRef0.UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse UserResponse

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserAuthorizationRequestObject struct {
	Id   uuid.UUID `json:"id"`
	Body *externalRef0.UpdateUserAuthorizationJSONRequestBody
}

type UpdateUserAuthorizationResponseObject interface {
	VisitUpdateUserAuthorizationResponse(w http.ResponseWriter) error
}

type UpdateUserAuthorization204Response struct{}

func (response UpdateUserAuthorization204Response) VisitUpdateUserAuthorizationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemTagRequestObject struct {
	WorkItemTagID models.WorkItemTagID `json:"workItemTagID"`
}

type DeleteWorkItemTagResponseObject interface {
	VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error
}

type DeleteWorkItemTag204Response struct{}

func (response DeleteWorkItemTag204Response) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemTag401Response struct{}

func (response DeleteWorkItemTag401Response) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteWorkItemTag403Response struct{}

func (response DeleteWorkItemTag403Response) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteWorkItemTag4XXJSONResponse) VisitDeleteWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkItemTagRequestObject struct {
	WorkItemTagID models.WorkItemTagID `json:"workItemTagID"`
}

type GetWorkItemTagResponseObject interface {
	VisitGetWorkItemTagResponse(w http.ResponseWriter) error
}

type GetWorkItemTag200JSONResponse WorkItemTagResponse

func (response GetWorkItemTag200JSONResponse) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkItemTag401Response struct{}

func (response GetWorkItemTag401Response) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWorkItemTag403Response struct{}

func (response GetWorkItemTag403Response) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetWorkItemTag4XXJSONResponse) VisitGetWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkItemTagRequestObject struct {
	WorkItemTagID models.WorkItemTagID `json:"workItemTagID"`
	Body          *UpdateWorkItemTagRequest
}

type UpdateWorkItemTagResponseObject interface {
	VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error
}

type UpdateWorkItemTag200JSONResponse WorkItemTagResponse

func (response UpdateWorkItemTag200JSONResponse) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkItemTag401Response struct{}

func (response UpdateWorkItemTag401Response) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateWorkItemTag403Response struct{}

func (response UpdateWorkItemTag403Response) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateWorkItemTag4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateWorkItemTag4XXJSONResponse) VisitUpdateWorkItemTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteWorkItemTypeRequestObject struct {
	WorkItemTypeID models.WorkItemTypeID `json:"workItemTypeID"`
}

type DeleteWorkItemTypeResponseObject interface {
	VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error
}

type DeleteWorkItemType204Response struct{}

func (response DeleteWorkItemType204Response) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemType401Response struct{}

func (response DeleteWorkItemType401Response) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteWorkItemType403Response struct{}

func (response DeleteWorkItemType403Response) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteWorkItemType4XXJSONResponse) VisitDeleteWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkItemTypeRequestObject struct {
	WorkItemTypeID models.WorkItemTypeID `json:"workItemTypeID"`
}

type GetWorkItemTypeResponseObject interface {
	VisitGetWorkItemTypeResponse(w http.ResponseWriter) error
}

type GetWorkItemType200JSONResponse WorkItemTypeResponse

func (response GetWorkItemType200JSONResponse) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkItemType401Response struct{}

func (response GetWorkItemType401Response) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWorkItemType403Response struct{}

func (response GetWorkItemType403Response) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetWorkItemType4XXJSONResponse) VisitGetWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkItemTypeRequestObject struct {
	WorkItemTypeID models.WorkItemTypeID `json:"workItemTypeID"`
	Body           *UpdateWorkItemTypeRequest
}

type UpdateWorkItemTypeResponseObject interface {
	VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error
}

type UpdateWorkItemType200JSONResponse WorkItemTypeResponse

func (response UpdateWorkItemType200JSONResponse) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkItemType401Response struct{}

func (response UpdateWorkItemType401Response) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateWorkItemType403Response struct{}

func (response UpdateWorkItemType403Response) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateWorkItemType4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateWorkItemType4XXJSONResponse) VisitUpdateWorkItemTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateWorkitemRequestObject struct {
	Body *externalRef0.CreateWorkitemJSONRequestBody
}

type CreateWorkitemResponseObject interface {
	VisitCreateWorkitemResponse(w http.ResponseWriter) error
}

type CreateWorkitem201JSONResponse WorkItemResponse

func (response CreateWorkitem201JSONResponse) VisitCreateWorkitemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedWorkItemRequestObject struct {
	Params externalRef0.GetPaginatedWorkItemParams
}

type GetPaginatedWorkItemResponseObject interface {
	VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error
}

type GetPaginatedWorkItem200JSONResponse PaginatedDemoWorkItemsResponse

func (response GetPaginatedWorkItem200JSONResponse) VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaginatedWorkItem401Response struct{}

func (response GetPaginatedWorkItem401Response) VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPaginatedWorkItem403Response struct{}

func (response GetPaginatedWorkItem403Response) VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetPaginatedWorkItem4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetPaginatedWorkItem4XXJSONResponse) VisitGetPaginatedWorkItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteWorkitemRequestObject struct {
	WorkItemID models.WorkItemID `json:"workItemID"`
}

type DeleteWorkitemResponseObject interface {
	VisitDeleteWorkitemResponse(w http.ResponseWriter) error
}

type DeleteWorkitem204Response struct{}

func (response DeleteWorkitem204Response) VisitDeleteWorkitemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetWorkItemRequestObject struct {
	WorkItemID models.WorkItemID `json:"workItemID"`
}

type GetWorkItemResponseObject interface {
	VisitGetWorkItemResponse(w http.ResponseWriter) error
}

type GetWorkItem200JSONResponse WorkItemResponse

func (response GetWorkItem200JSONResponse) VisitGetWorkItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkitemRequestObject struct {
	WorkItemID models.WorkItemID `json:"workItemID"`
}

type UpdateWorkitemResponseObject interface {
	VisitUpdateWorkitemResponse(w http.ResponseWriter) error
}

type UpdateWorkitem200JSONResponse WorkItemResponse

func (response UpdateWorkitem200JSONResponse) VisitUpdateWorkitemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemCommentRequestObject struct {
	WorkItemID int `json:"workItemID"`
	Body       *CreateWorkItemCommentRequest
}

type CreateWorkItemCommentResponseObject interface {
	VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error
}

type CreateWorkItemComment201JSONResponse WorkItemCommentResponse

func (response CreateWorkItemComment201JSONResponse) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkItemComment401Response struct{}

func (response CreateWorkItemComment401Response) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateWorkItemComment403Response struct{}

func (response CreateWorkItemComment403Response) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response CreateWorkItemComment4XXJSONResponse) VisitCreateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteWorkItemCommentRequestObject struct {
	WorkItemID        models.WorkItemID        `json:"workItemID"`
	WorkItemCommentID models.WorkItemCommentID `json:"workItemCommentID"`
}

type DeleteWorkItemCommentResponseObject interface {
	VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error
}

type DeleteWorkItemComment204Response struct{}

func (response DeleteWorkItemComment204Response) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkItemComment401Response struct{}

func (response DeleteWorkItemComment401Response) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteWorkItemComment403Response struct{}

func (response DeleteWorkItemComment403Response) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response DeleteWorkItemComment4XXJSONResponse) VisitDeleteWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkItemCommentRequestObject struct {
	WorkItemID        models.WorkItemID        `json:"workItemID"`
	WorkItemCommentID models.WorkItemCommentID `json:"workItemCommentID"`
}

type GetWorkItemCommentResponseObject interface {
	VisitGetWorkItemCommentResponse(w http.ResponseWriter) error
}

type GetWorkItemComment200JSONResponse WorkItemCommentResponse

func (response GetWorkItemComment200JSONResponse) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkItemComment401Response struct{}

func (response GetWorkItemComment401Response) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWorkItemComment403Response struct{}

func (response GetWorkItemComment403Response) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type GetWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response GetWorkItemComment4XXJSONResponse) VisitGetWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkItemCommentRequestObject struct {
	WorkItemID        models.WorkItemID        `json:"workItemID"`
	WorkItemCommentID models.WorkItemCommentID `json:"workItemCommentID"`
	Body              *UpdateWorkItemCommentRequest
}

type UpdateWorkItemCommentResponseObject interface {
	VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error
}

type UpdateWorkItemComment200JSONResponse WorkItemCommentResponse

func (response UpdateWorkItemComment200JSONResponse) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkItemComment401Response struct{}

func (response UpdateWorkItemComment401Response) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateWorkItemComment403Response struct{}

func (response UpdateWorkItemComment403Response) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type UpdateWorkItemComment4XXJSONResponse struct {
	Body       externalRef0.HTTPError
	StatusCode int
}

func (response UpdateWorkItemComment4XXJSONResponse) VisitUpdateWorkItemCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// delete activity.
	// (DELETE /activity/{activityID})
	DeleteActivity(c *gin.Context, request DeleteActivityRequestObject) (DeleteActivityResponseObject, error)
	// get activity.
	// (GET /activity/{activityID})
	GetActivity(c *gin.Context, request GetActivityRequestObject) (GetActivityResponseObject, error)
	// update activity.
	// (PATCH /activity/{activityID})
	UpdateActivity(c *gin.Context, request UpdateActivityRequestObject) (UpdateActivityResponseObject, error)
	// Ping pongs
	// (GET /admin/ping)
	AdminPing(c *gin.Context, request AdminPingRequestObject) (AdminPingResponseObject, error)

	// (GET /auth/myprovider/callback)
	MyProviderCallback(c *gin.Context, request MyProviderCallbackRequestObject) (MyProviderCallbackResponseObject, error)

	// (GET /auth/myprovider/login)
	MyProviderLogin(c *gin.Context, request MyProviderLoginRequestObject) (MyProviderLoginResponseObject, error)

	// (GET /events)
	Events(c *gin.Context, request EventsRequestObject) (EventsResponseObject, error)
	// Get paginated user notifications
	// (GET /notifications/user/page)
	GetPaginatedNotifications(c *gin.Context, request GetPaginatedNotificationsRequestObject) (GetPaginatedNotificationsResponseObject, error)
	// Returns this very OpenAPI spec.
	// (GET /openapi.yaml)
	OpenapiYamlGet(c *gin.Context, request OpenapiYamlGetRequestObject) (OpenapiYamlGetResponseObject, error)
	// Ping pongs
	// (GET /ping)
	Ping(c *gin.Context, request PingRequestObject) (PingResponseObject, error)
	// returns board data for a project
	// (GET /project/{projectName}/)
	GetProject(c *gin.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// create activity.
	// (POST /project/{projectName}/activity/)
	CreateActivity(c *gin.Context, request CreateActivityRequestObject) (CreateActivityResponseObject, error)
	// returns board data for a project
	// (GET /project/{projectName}/board)
	GetProjectBoard(c *gin.Context, request GetProjectBoardRequestObject) (GetProjectBoardResponseObject, error)
	// returns the project configuration
	// (GET /project/{projectName}/config)
	GetProjectConfig(c *gin.Context, request GetProjectConfigRequestObject) (GetProjectConfigResponseObject, error)
	// updates the project configuration
	// (PUT /project/{projectName}/config)
	UpdateProjectConfig(c *gin.Context, request UpdateProjectConfigRequestObject) (UpdateProjectConfigResponseObject, error)
	// creates initial data (teams, tags...) for a new project
	// (POST /project/{projectName}/initialize)
	InitializeProject(c *gin.Context, request InitializeProjectRequestObject) (InitializeProjectResponseObject, error)
	// create team.
	// (POST /project/{projectName}/team/)
	CreateTeam(c *gin.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)
	// create workitemtag.
	// (POST /project/{projectName}/work-item-tag/)
	CreateWorkItemTag(c *gin.Context, request CreateWorkItemTagRequestObject) (CreateWorkItemTagResponseObject, error)
	// create workitemtype.
	// (POST /project/{projectName}/work-item-type/)
	CreateWorkItemType(c *gin.Context, request CreateWorkItemTypeRequestObject) (CreateWorkItemTypeResponseObject, error)
	// returns workitems for a project
	// (GET /project/{projectName}/workitems)
	GetProjectWorkitems(c *gin.Context, request GetProjectWorkitemsRequestObject) (GetProjectWorkitemsResponseObject, error)
	// delete team.
	// (DELETE /team/{teamID})
	DeleteTeam(c *gin.Context, request DeleteTeamRequestObject) (DeleteTeamResponseObject, error)
	// get team.
	// (GET /team/{teamID})
	GetTeam(c *gin.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)
	// update team.
	// (PATCH /team/{teamID})
	UpdateTeam(c *gin.Context, request UpdateTeamRequestObject) (UpdateTeamResponseObject, error)
	// create time entry.
	// (POST /time-entry/)
	CreateTimeEntry(c *gin.Context, request CreateTimeEntryRequestObject) (CreateTimeEntryResponseObject, error)
	// delete time-entry.
	// (DELETE /time-entry/{timeEntryID})
	DeleteTimeEntry(c *gin.Context, request DeleteTimeEntryRequestObject) (DeleteTimeEntryResponseObject, error)
	// get time-entry.
	// (GET /time-entry/{timeEntryID})
	GetTimeEntry(c *gin.Context, request GetTimeEntryRequestObject) (GetTimeEntryResponseObject, error)
	// update time-entry.
	// (PATCH /time-entry/{timeEntryID})
	UpdateTimeEntry(c *gin.Context, request UpdateTimeEntryRequestObject) (UpdateTimeEntryResponseObject, error)
	// returns the logged in user
	// (GET /user/me)
	GetCurrentUser(c *gin.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Get paginated users
	// (GET /user/page)
	GetPaginatedUsers(c *gin.Context, request GetPaginatedUsersRequestObject) (GetPaginatedUsersResponseObject, error)
	// deletes the user by id
	// (DELETE /user/{id})
	DeleteUser(c *gin.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// updates the user by id
	// (PATCH /user/{id})
	UpdateUser(c *gin.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// updates user role and scopes by id
	// (PATCH /user/{id}/authorization)
	UpdateUserAuthorization(c *gin.Context, request UpdateUserAuthorizationRequestObject) (UpdateUserAuthorizationResponseObject, error)
	// delete workitemtag.
	// (DELETE /work-item-tag/{workItemTagID})
	DeleteWorkItemTag(c *gin.Context, request DeleteWorkItemTagRequestObject) (DeleteWorkItemTagResponseObject, error)
	// get workitemtag.
	// (GET /work-item-tag/{workItemTagID})
	GetWorkItemTag(c *gin.Context, request GetWorkItemTagRequestObject) (GetWorkItemTagResponseObject, error)
	// update workitemtag.
	// (PATCH /work-item-tag/{workItemTagID})
	UpdateWorkItemTag(c *gin.Context, request UpdateWorkItemTagRequestObject) (UpdateWorkItemTagResponseObject, error)
	// delete workitemtype.
	// (DELETE /work-item-type/{workItemTypeID})
	DeleteWorkItemType(c *gin.Context, request DeleteWorkItemTypeRequestObject) (DeleteWorkItemTypeResponseObject, error)
	// get workitemtype.
	// (GET /work-item-type/{workItemTypeID})
	GetWorkItemType(c *gin.Context, request GetWorkItemTypeRequestObject) (GetWorkItemTypeResponseObject, error)
	// update workitemtype.
	// (PATCH /work-item-type/{workItemTypeID})
	UpdateWorkItemType(c *gin.Context, request UpdateWorkItemTypeRequestObject) (UpdateWorkItemTypeResponseObject, error)
	// create workitem
	// (POST /work-item/)
	CreateWorkitem(c *gin.Context, request CreateWorkitemRequestObject) (CreateWorkitemResponseObject, error)
	// Get paginated user work-item
	// (GET /work-item/page)
	GetPaginatedWorkItem(c *gin.Context, request GetPaginatedWorkItemRequestObject) (GetPaginatedWorkItemResponseObject, error)
	// delete workitem
	// (DELETE /work-item/{workItemID}/)
	DeleteWorkitem(c *gin.Context, request DeleteWorkitemRequestObject) (DeleteWorkitemResponseObject, error)
	// get workitem
	// (GET /work-item/{workItemID}/)
	GetWorkItem(c *gin.Context, request GetWorkItemRequestObject) (GetWorkItemResponseObject, error)
	// update workitem
	// (PATCH /work-item/{workItemID}/)
	UpdateWorkitem(c *gin.Context, request UpdateWorkitemRequestObject) (UpdateWorkitemResponseObject, error)
	// create work item comment.
	// (POST /work-item/{workItemID}/comment/)
	CreateWorkItemComment(c *gin.Context, request CreateWorkItemCommentRequestObject) (CreateWorkItemCommentResponseObject, error)
	// delete .
	// (DELETE /work-item/{workItemID}/comment/{workItemCommentID})
	DeleteWorkItemComment(c *gin.Context, request DeleteWorkItemCommentRequestObject) (DeleteWorkItemCommentResponseObject, error)
	// get work item comment.
	// (GET /work-item/{workItemID}/comment/{workItemCommentID})
	GetWorkItemComment(c *gin.Context, request GetWorkItemCommentRequestObject) (GetWorkItemCommentResponseObject, error)
	// update work item comment.
	// (PATCH /work-item/{workItemID}/comment/{workItemCommentID})
	UpdateWorkItemComment(c *gin.Context, request UpdateWorkItemCommentRequestObject) (UpdateWorkItemCommentResponseObject, error)
	middlewares(opID OperationID) []gin.HandlerFunc
	authMiddlewares(opID OperationID) []gin.HandlerFunc
}

type (
	StrictHandlerFunc    = strictgin.StrictGinHandlerFunc
	StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc
)

func NewStrictHandler(ssi StrictServerInterface, strictMiddlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandlers{ssi: ssi, strictMiddlewares: strictMiddlewares}
}

type strictHandlers struct {
	ssi               StrictServerInterface
	strictMiddlewares []StrictMiddlewareFunc
}

func (sh *strictHandlers) middlewares(opID OperationID) []gin.HandlerFunc {
	return sh.ssi.middlewares(opID)
}

func (sh *strictHandlers) authMiddlewares(opID OperationID) []gin.HandlerFunc {
	return sh.ssi.authMiddlewares(opID)
}

// DeleteActivity operation middleware
func (sh *strictHandlers) DeleteActivity(ctx *gin.Context, activityID models.ActivityID) {
	var request DeleteActivityRequestObject

	request.ActivityID = activityID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteActivity(ctx, request.(DeleteActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteActivityResponseObject); ok {
		if err := validResponse.VisitDeleteActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetActivity operation middleware
func (sh *strictHandlers) GetActivity(ctx *gin.Context, activityID models.ActivityID) {
	var request GetActivityRequestObject

	request.ActivityID = activityID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetActivity(ctx, request.(GetActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetActivityResponseObject); ok {
		if err := validResponse.VisitGetActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateActivity operation middleware
func (sh *strictHandlers) UpdateActivity(ctx *gin.Context, activityID models.ActivityID) {
	var request UpdateActivityRequestObject

	request.ActivityID = activityID

	// UpdateActivityRequest
	var body UpdateActivityRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateActivity(ctx, request.(UpdateActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateActivityResponseObject); ok {
		if err := validResponse.VisitUpdateActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminPing operation middleware
func (sh *strictHandlers) AdminPing(ctx *gin.Context) {
	var request AdminPingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminPing(ctx, request.(AdminPingRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "AdminPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AdminPingResponseObject); ok {
		if err := validResponse.VisitAdminPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// MyProviderCallback operation middleware
func (sh *strictHandlers) MyProviderCallback(ctx *gin.Context) {
	var request MyProviderCallbackRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MyProviderCallback(ctx, request.(MyProviderCallbackRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "MyProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(MyProviderCallbackResponseObject); ok {
		if err := validResponse.VisitMyProviderCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// MyProviderLogin operation middleware
func (sh *strictHandlers) MyProviderLogin(ctx *gin.Context, params externalRef0.MyProviderLoginParams) {
	var request MyProviderLoginRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MyProviderLogin(ctx, request.(MyProviderLoginRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "MyProviderLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(MyProviderLoginResponseObject); ok {
		if err := validResponse.VisitMyProviderLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Events operation middleware
func (sh *strictHandlers) Events(ctx *gin.Context, params externalRef0.EventsParams) {
	var request EventsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Events(ctx, request.(EventsRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "Events")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EventsResponseObject); ok {
		if err := validResponse.VisitEventsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaginatedNotifications operation middleware
func (sh *strictHandlers) GetPaginatedNotifications(ctx *gin.Context, params externalRef0.GetPaginatedNotificationsParams) {
	var request GetPaginatedNotificationsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaginatedNotifications(ctx, request.(GetPaginatedNotificationsRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetPaginatedNotifications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPaginatedNotificationsResponseObject); ok {
		if err := validResponse.VisitGetPaginatedNotificationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OpenapiYamlGet operation middleware
func (sh *strictHandlers) OpenapiYamlGet(ctx *gin.Context) {
	var request OpenapiYamlGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OpenapiYamlGet(ctx, request.(OpenapiYamlGetRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "OpenapiYamlGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OpenapiYamlGetResponseObject); ok {
		if err := validResponse.VisitOpenapiYamlGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Ping operation middleware
func (sh *strictHandlers) Ping(ctx *gin.Context) {
	var request PingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx, request.(PingRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PingResponseObject); ok {
		if err := validResponse.VisitPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProject operation middleware
func (sh *strictHandlers) GetProject(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request GetProjectRequestObject

	request.ProjectName = projectName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx, request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		if err := validResponse.VisitGetProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateActivity operation middleware
func (sh *strictHandlers) CreateActivity(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateActivityRequestObject

	request.ProjectName = projectName

	// CreateActivityRequest
	var body CreateActivityRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateActivity(ctx, request.(CreateActivityRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateActivity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateActivityResponseObject); ok {
		if err := validResponse.VisitCreateActivityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectBoard operation middleware
func (sh *strictHandlers) GetProjectBoard(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request GetProjectBoardRequestObject

	request.ProjectName = projectName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectBoard(ctx, request.(GetProjectBoardRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProjectBoard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectBoardResponseObject); ok {
		if err := validResponse.VisitGetProjectBoardResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectConfig operation middleware
func (sh *strictHandlers) GetProjectConfig(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request GetProjectConfigRequestObject

	request.ProjectName = projectName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectConfig(ctx, request.(GetProjectConfigRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProjectConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectConfigResponseObject); ok {
		if err := validResponse.VisitGetProjectConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectConfig operation middleware
func (sh *strictHandlers) UpdateProjectConfig(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request UpdateProjectConfigRequestObject

	request.ProjectName = projectName

	// UpdateProjectConfigRequest
	var body externalRef0.UpdateProjectConfigJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectConfig(ctx, request.(UpdateProjectConfigRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateProjectConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateProjectConfigResponseObject); ok {
		if err := validResponse.VisitUpdateProjectConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// InitializeProject operation middleware
func (sh *strictHandlers) InitializeProject(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request InitializeProjectRequestObject

	request.ProjectName = projectName

	// InitializeProjectRequest
	var body externalRef0.InitializeProjectJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InitializeProject(ctx, request.(InitializeProjectRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "InitializeProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(InitializeProjectResponseObject); ok {
		if err := validResponse.VisitInitializeProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTeam operation middleware
func (sh *strictHandlers) CreateTeam(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateTeamRequestObject

	request.ProjectName = projectName

	// CreateTeamRequest
	var body CreateTeamRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx, request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		if err := validResponse.VisitCreateTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkItemTag operation middleware
func (sh *strictHandlers) CreateWorkItemTag(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateWorkItemTagRequestObject

	request.ProjectName = projectName

	// CreateWorkItemTagRequest
	var body CreateWorkItemTagRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkItemTag(ctx, request.(CreateWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkItemTagResponseObject); ok {
		if err := validResponse.VisitCreateWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkItemType operation middleware
func (sh *strictHandlers) CreateWorkItemType(ctx *gin.Context, projectName externalRef0.ProjectName) {
	var request CreateWorkItemTypeRequestObject

	request.ProjectName = projectName

	// CreateWorkItemTypeRequest
	var body CreateWorkItemTypeRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkItemType(ctx, request.(CreateWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitCreateWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectWorkitems operation middleware
func (sh *strictHandlers) GetProjectWorkitems(ctx *gin.Context, projectName externalRef0.ProjectName, params externalRef0.GetProjectWorkitemsParams) {
	var request GetProjectWorkitemsRequestObject

	request.ProjectName = projectName
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectWorkitems(ctx, request.(GetProjectWorkitemsRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetProjectWorkitems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectWorkitemsResponseObject); ok {
		if err := validResponse.VisitGetProjectWorkitemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeam operation middleware
func (sh *strictHandlers) DeleteTeam(ctx *gin.Context, teamID models.TeamID) {
	var request DeleteTeamRequestObject

	request.TeamID = teamID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeam(ctx, request.(DeleteTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTeamResponseObject); ok {
		if err := validResponse.VisitDeleteTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTeam operation middleware
func (sh *strictHandlers) GetTeam(ctx *gin.Context, teamID models.TeamID) {
	var request GetTeamRequestObject

	request.TeamID = teamID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx, request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		if err := validResponse.VisitGetTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTeam operation middleware
func (sh *strictHandlers) UpdateTeam(ctx *gin.Context, teamID models.TeamID) {
	var request UpdateTeamRequestObject

	request.TeamID = teamID

	// UpdateTeamRequest
	var body UpdateTeamRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTeam(ctx, request.(UpdateTeamRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTeamResponseObject); ok {
		if err := validResponse.VisitUpdateTeamResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTimeEntry operation middleware
func (sh *strictHandlers) CreateTimeEntry(ctx *gin.Context) {
	var request CreateTimeEntryRequestObject

	// CreateTimeEntryRequest
	var body CreateTimeEntryRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTimeEntry(ctx, request.(CreateTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTimeEntryResponseObject); ok {
		if err := validResponse.VisitCreateTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTimeEntry operation middleware
func (sh *strictHandlers) DeleteTimeEntry(ctx *gin.Context, timeEntryID models.TimeEntryID) {
	var request DeleteTimeEntryRequestObject

	request.TimeEntryID = timeEntryID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTimeEntry(ctx, request.(DeleteTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTimeEntryResponseObject); ok {
		if err := validResponse.VisitDeleteTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTimeEntry operation middleware
func (sh *strictHandlers) GetTimeEntry(ctx *gin.Context, timeEntryID models.TimeEntryID) {
	var request GetTimeEntryRequestObject

	request.TimeEntryID = timeEntryID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTimeEntry(ctx, request.(GetTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTimeEntryResponseObject); ok {
		if err := validResponse.VisitGetTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTimeEntry operation middleware
func (sh *strictHandlers) UpdateTimeEntry(ctx *gin.Context, timeEntryID models.TimeEntryID) {
	var request UpdateTimeEntryRequestObject

	request.TimeEntryID = timeEntryID

	// UpdateTimeEntryRequest
	var body UpdateTimeEntryRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTimeEntry(ctx, request.(UpdateTimeEntryRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateTimeEntry")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTimeEntryResponseObject); ok {
		if err := validResponse.VisitUpdateTimeEntryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandlers) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaginatedUsers operation middleware
func (sh *strictHandlers) GetPaginatedUsers(ctx *gin.Context, params externalRef0.GetPaginatedUsersParams) {
	var request GetPaginatedUsersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaginatedUsers(ctx, request.(GetPaginatedUsersRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetPaginatedUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPaginatedUsersResponseObject); ok {
		if err := validResponse.VisitGetPaginatedUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandlers) DeleteUser(ctx *gin.Context, id uuid.UUID) {
	var request DeleteUserRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandlers) UpdateUser(ctx *gin.Context, id uuid.UUID) {
	var request UpdateUserRequestObject

	request.Id = id

	// UpdateUserRequest
	var body externalRef0.UpdateUserJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserAuthorization operation middleware
func (sh *strictHandlers) UpdateUserAuthorization(ctx *gin.Context, id uuid.UUID) {
	var request UpdateUserAuthorizationRequestObject

	request.Id = id

	// UpdateUserAuthorizationRequest
	var body externalRef0.UpdateUserAuthorizationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserAuthorization(ctx, request.(UpdateUserAuthorizationRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateUserAuthorization")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserAuthorizationResponseObject); ok {
		if err := validResponse.VisitUpdateUserAuthorizationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkItemTag operation middleware
func (sh *strictHandlers) DeleteWorkItemTag(ctx *gin.Context, workItemTagID models.WorkItemTagID) {
	var request DeleteWorkItemTagRequestObject

	request.WorkItemTagID = workItemTagID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkItemTag(ctx, request.(DeleteWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkItemTagResponseObject); ok {
		if err := validResponse.VisitDeleteWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItemTag operation middleware
func (sh *strictHandlers) GetWorkItemTag(ctx *gin.Context, workItemTagID models.WorkItemTagID) {
	var request GetWorkItemTagRequestObject

	request.WorkItemTagID = workItemTagID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItemTag(ctx, request.(GetWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemTagResponseObject); ok {
		if err := validResponse.VisitGetWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkItemTag operation middleware
func (sh *strictHandlers) UpdateWorkItemTag(ctx *gin.Context, workItemTagID models.WorkItemTagID) {
	var request UpdateWorkItemTagRequestObject

	request.WorkItemTagID = workItemTagID

	// UpdateWorkItemTagRequest
	var body UpdateWorkItemTagRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkItemTag(ctx, request.(UpdateWorkItemTagRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkItemTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkItemTagResponseObject); ok {
		if err := validResponse.VisitUpdateWorkItemTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkItemType operation middleware
func (sh *strictHandlers) DeleteWorkItemType(ctx *gin.Context, workItemTypeID models.WorkItemTypeID) {
	var request DeleteWorkItemTypeRequestObject

	request.WorkItemTypeID = workItemTypeID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkItemType(ctx, request.(DeleteWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitDeleteWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItemType operation middleware
func (sh *strictHandlers) GetWorkItemType(ctx *gin.Context, workItemTypeID models.WorkItemTypeID) {
	var request GetWorkItemTypeRequestObject

	request.WorkItemTypeID = workItemTypeID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItemType(ctx, request.(GetWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitGetWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkItemType operation middleware
func (sh *strictHandlers) UpdateWorkItemType(ctx *gin.Context, workItemTypeID models.WorkItemTypeID) {
	var request UpdateWorkItemTypeRequestObject

	request.WorkItemTypeID = workItemTypeID

	// UpdateWorkItemTypeRequest
	var body UpdateWorkItemTypeRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkItemType(ctx, request.(UpdateWorkItemTypeRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkItemType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkItemTypeResponseObject); ok {
		if err := validResponse.VisitUpdateWorkItemTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkitem operation middleware
func (sh *strictHandlers) CreateWorkitem(ctx *gin.Context) {
	var request CreateWorkitemRequestObject

	// CreateWorkitemRequest
	var body externalRef0.CreateWorkitemJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkitem(ctx, request.(CreateWorkitemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkitem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkitemResponseObject); ok {
		if err := validResponse.VisitCreateWorkitemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaginatedWorkItem operation middleware
func (sh *strictHandlers) GetPaginatedWorkItem(ctx *gin.Context, params externalRef0.GetPaginatedWorkItemParams) {
	var request GetPaginatedWorkItemRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaginatedWorkItem(ctx, request.(GetPaginatedWorkItemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetPaginatedWorkItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPaginatedWorkItemResponseObject); ok {
		if err := validResponse.VisitGetPaginatedWorkItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkitem operation middleware
func (sh *strictHandlers) DeleteWorkitem(ctx *gin.Context, workItemID models.WorkItemID) {
	var request DeleteWorkitemRequestObject

	request.WorkItemID = workItemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkitem(ctx, request.(DeleteWorkitemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkitem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkitemResponseObject); ok {
		if err := validResponse.VisitDeleteWorkitemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItem operation middleware
func (sh *strictHandlers) GetWorkItem(ctx *gin.Context, workItemID models.WorkItemID) {
	var request GetWorkItemRequestObject

	request.WorkItemID = workItemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItem(ctx, request.(GetWorkItemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemResponseObject); ok {
		if err := validResponse.VisitGetWorkItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkitem operation middleware
func (sh *strictHandlers) UpdateWorkitem(ctx *gin.Context, workItemID models.WorkItemID) {
	var request UpdateWorkitemRequestObject

	request.WorkItemID = workItemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkitem(ctx, request.(UpdateWorkitemRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkitem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkitemResponseObject); ok {
		if err := validResponse.VisitUpdateWorkitemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkItemComment operation middleware
func (sh *strictHandlers) CreateWorkItemComment(ctx *gin.Context, workItemID int) {
	var request CreateWorkItemCommentRequestObject

	request.WorkItemID = workItemID

	// CreateWorkItemCommentRequest
	var body CreateWorkItemCommentRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkItemComment(ctx, request.(CreateWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "CreateWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitCreateWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkItemComment operation middleware
func (sh *strictHandlers) DeleteWorkItemComment(ctx *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID) {
	var request DeleteWorkItemCommentRequestObject

	request.WorkItemID = workItemID
	request.WorkItemCommentID = workItemCommentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkItemComment(ctx, request.(DeleteWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "DeleteWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitDeleteWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkItemComment operation middleware
func (sh *strictHandlers) GetWorkItemComment(ctx *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID) {
	var request GetWorkItemCommentRequestObject

	request.WorkItemID = workItemID
	request.WorkItemCommentID = workItemCommentID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkItemComment(ctx, request.(GetWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "GetWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitGetWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkItemComment operation middleware
func (sh *strictHandlers) UpdateWorkItemComment(ctx *gin.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID) {
	var request UpdateWorkItemCommentRequestObject

	request.WorkItemID = workItemID
	request.WorkItemCommentID = workItemCommentID

	// UpdateWorkItemCommentRequest
	var body UpdateWorkItemCommentRequest
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkItemComment(ctx, request.(UpdateWorkItemCommentRequestObject))
	}
	for _, middleware := range sh.strictMiddlewares {
		handler = middleware(handler, "UpdateWorkItemComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateWorkItemCommentResponseObject); ok {
		if err := validResponse.VisitUpdateWorkItemCommentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
	"TqGOiYdAAQA=",
}

var spec, _ = GetSwagger()

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

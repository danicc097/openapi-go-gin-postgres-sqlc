// Package resttesting provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package resttesting

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strings"

	"gopkg.in/yaml.v2"

	. "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
	models "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/models"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/rest"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// ResponseRecorder records HTTP requests.
// It is implemented by httptest.ResponseRecorder.
type ResponseRecorder interface {
	http.ResponseWriter
	Result() *http.Response
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn

	testHandler http.Handler
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// NewTestClient creates a new ClientWithResponses for testing.
func NewTestClient(server string, testHandler http.Handler, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := newClient(server, testHandler, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

func newClient(server string, testHandler http.Handler, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server:      server,
		testHandler: testHandler,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteActivity request
	DeleteActivity(ctx context.Context, activityID models.ActivityID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivity request
	GetActivity(ctx context.Context, activityID models.ActivityID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateActivity request with any body
	UpdateActivityWithBody(ctx context.Context, activityID models.ActivityID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateActivity(ctx context.Context, activityID models.ActivityID, body rest.UpdateActivityRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminPing request
	AdminPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MyProviderCallback request
	MyProviderCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MyProviderLogin request
	MyProviderLogin(ctx context.Context, params *MyProviderLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Events request
	Events(ctx context.Context, recorder ResponseRecorder, params *EventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaginatedNotifications request
	GetPaginatedNotifications(ctx context.Context, params *GetPaginatedNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenapiYamlGet request
	OpenapiYamlGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Ping request
	Ping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProject request
	GetProject(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateActivity request with any body
	CreateActivityWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateActivity(ctx context.Context, projectName ProjectName, body rest.CreateActivityRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectBoard request
	GetProjectBoard(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectConfig request
	GetProjectConfig(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProjectConfig request with any body
	UpdateProjectConfigWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProjectConfig(ctx context.Context, projectName ProjectName, body UpdateProjectConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InitializeProject request with any body
	InitializeProjectWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InitializeProject(ctx context.Context, projectName ProjectName, body InitializeProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request with any body
	CreateTeamWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeam(ctx context.Context, projectName ProjectName, body rest.CreateTeamRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkItemTag request with any body
	CreateWorkItemTagWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkItemTag(ctx context.Context, projectName ProjectName, body rest.CreateWorkItemTagRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkItemType request with any body
	CreateWorkItemTypeWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkItemType(ctx context.Context, projectName ProjectName, body rest.CreateWorkItemTypeRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectWorkitems request
	GetProjectWorkitems(ctx context.Context, projectName ProjectName, params *GetProjectWorkitemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, teamID models.TeamID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, teamID models.TeamID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request with any body
	UpdateTeamWithBody(ctx context.Context, teamID models.TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeam(ctx context.Context, teamID models.TeamID, body rest.UpdateTeamRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTimeEntry request with any body
	CreateTimeEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTimeEntry(ctx context.Context, body rest.CreateTimeEntryRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTimeEntry request
	DeleteTimeEntry(ctx context.Context, timeEntryID models.TimeEntryID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeEntry request
	GetTimeEntry(ctx context.Context, timeEntryID models.TimeEntryID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTimeEntry request with any body
	UpdateTimeEntryWithBody(ctx context.Context, timeEntryID models.TimeEntryID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTimeEntry(ctx context.Context, timeEntryID models.TimeEntryID, body rest.UpdateTimeEntryRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrentUser request
	GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaginatedUsers request
	GetPaginatedUsers(ctx context.Context, params *GetPaginatedUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, id uuid.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUser request with any body
	UpdateUserWithBody(ctx context.Context, id uuid.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, id uuid.UUID, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserAuthorization request with any body
	UpdateUserAuthorizationWithBody(ctx context.Context, id uuid.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserAuthorization(ctx context.Context, id uuid.UUID, body UpdateUserAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkItemTag request
	DeleteWorkItemTag(ctx context.Context, workItemTagID models.WorkItemTagID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkItemTag request
	GetWorkItemTag(ctx context.Context, workItemTagID models.WorkItemTagID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkItemTag request with any body
	UpdateWorkItemTagWithBody(ctx context.Context, workItemTagID models.WorkItemTagID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkItemTag(ctx context.Context, workItemTagID models.WorkItemTagID, body rest.UpdateWorkItemTagRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkItemType request
	DeleteWorkItemType(ctx context.Context, workItemTypeID models.WorkItemTypeID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkItemType request
	GetWorkItemType(ctx context.Context, workItemTypeID models.WorkItemTypeID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkItemType request with any body
	UpdateWorkItemTypeWithBody(ctx context.Context, workItemTypeID models.WorkItemTypeID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkItemType(ctx context.Context, workItemTypeID models.WorkItemTypeID, body rest.UpdateWorkItemTypeRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkitem request with any body
	CreateWorkitemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkitem(ctx context.Context, body CreateWorkitemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaginatedWorkItem request
	GetPaginatedWorkItem(ctx context.Context, params *GetPaginatedWorkItemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkitem request
	DeleteWorkitem(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkItem request
	GetWorkItem(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkitem request
	UpdateWorkitem(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkItemComment request with any body
	CreateWorkItemCommentWithBody(ctx context.Context, workItemID int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkItemComment(ctx context.Context, workItemID int, body rest.CreateWorkItemCommentRequest, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkItemComment request
	DeleteWorkItemComment(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkItemComment request
	GetWorkItemComment(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkItemComment request with any body
	UpdateWorkItemCommentWithBody(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkItemComment(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, body rest.UpdateWorkItemCommentRequest, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteActivity(ctx context.Context, activityID models.ActivityID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActivityRequest(c.Server, activityID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetActivity(ctx context.Context, activityID models.ActivityID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivityRequest(c.Server, activityID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateActivityWithBody(ctx context.Context, activityID models.ActivityID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateActivityRequestWithBody(c.Server, activityID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateActivity(ctx context.Context, activityID models.ActivityID, body rest.UpdateActivityRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateActivityRequest(c.Server, activityID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) AdminPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) MyProviderCallback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMyProviderCallbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) MyProviderLogin(ctx context.Context, params *MyProviderLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMyProviderLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) Events(ctx context.Context, recorder ResponseRecorder, params *EventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := recorder
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetPaginatedNotifications(ctx context.Context, params *GetPaginatedNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaginatedNotificationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) OpenapiYamlGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenapiYamlGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) Ping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetProject(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectRequest(c.Server, projectName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateActivityWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateActivityRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateActivity(ctx context.Context, projectName ProjectName, body rest.CreateActivityRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateActivityRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetProjectBoard(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectBoardRequest(c.Server, projectName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetProjectConfig(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectConfigRequest(c.Server, projectName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateProjectConfigWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectConfigRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateProjectConfig(ctx context.Context, projectName ProjectName, body UpdateProjectConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectConfigRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) InitializeProjectWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitializeProjectRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) InitializeProject(ctx context.Context, projectName ProjectName, body InitializeProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInitializeProjectRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateTeamWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateTeam(ctx context.Context, projectName ProjectName, body rest.CreateTeamRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateWorkItemTagWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkItemTagRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateWorkItemTag(ctx context.Context, projectName ProjectName, body rest.CreateWorkItemTagRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkItemTagRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateWorkItemTypeWithBody(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkItemTypeRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateWorkItemType(ctx context.Context, projectName ProjectName, body rest.CreateWorkItemTypeRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkItemTypeRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetProjectWorkitems(ctx context.Context, projectName ProjectName, params *GetProjectWorkitemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectWorkitemsRequest(c.Server, projectName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) DeleteTeam(ctx context.Context, teamID models.TeamID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetTeam(ctx context.Context, teamID models.TeamID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, teamID models.TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateTeam(ctx context.Context, teamID models.TeamID, body rest.UpdateTeamRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateTimeEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTimeEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateTimeEntry(ctx context.Context, body rest.CreateTimeEntryRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTimeEntryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) DeleteTimeEntry(ctx context.Context, timeEntryID models.TimeEntryID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTimeEntryRequest(c.Server, timeEntryID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetTimeEntry(ctx context.Context, timeEntryID models.TimeEntryID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeEntryRequest(c.Server, timeEntryID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateTimeEntryWithBody(ctx context.Context, timeEntryID models.TimeEntryID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTimeEntryRequestWithBody(c.Server, timeEntryID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateTimeEntry(ctx context.Context, timeEntryID models.TimeEntryID, body rest.UpdateTimeEntryRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTimeEntryRequest(c.Server, timeEntryID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetPaginatedUsers(ctx context.Context, params *GetPaginatedUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaginatedUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) DeleteUser(ctx context.Context, id uuid.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateUserWithBody(ctx context.Context, id uuid.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateUser(ctx context.Context, id uuid.UUID, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateUserAuthorizationWithBody(ctx context.Context, id uuid.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserAuthorizationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateUserAuthorization(ctx context.Context, id uuid.UUID, body UpdateUserAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserAuthorizationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) DeleteWorkItemTag(ctx context.Context, workItemTagID models.WorkItemTagID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkItemTagRequest(c.Server, workItemTagID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetWorkItemTag(ctx context.Context, workItemTagID models.WorkItemTagID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkItemTagRequest(c.Server, workItemTagID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateWorkItemTagWithBody(ctx context.Context, workItemTagID models.WorkItemTagID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkItemTagRequestWithBody(c.Server, workItemTagID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateWorkItemTag(ctx context.Context, workItemTagID models.WorkItemTagID, body rest.UpdateWorkItemTagRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkItemTagRequest(c.Server, workItemTagID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) DeleteWorkItemType(ctx context.Context, workItemTypeID models.WorkItemTypeID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkItemTypeRequest(c.Server, workItemTypeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetWorkItemType(ctx context.Context, workItemTypeID models.WorkItemTypeID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkItemTypeRequest(c.Server, workItemTypeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateWorkItemTypeWithBody(ctx context.Context, workItemTypeID models.WorkItemTypeID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkItemTypeRequestWithBody(c.Server, workItemTypeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateWorkItemType(ctx context.Context, workItemTypeID models.WorkItemTypeID, body rest.UpdateWorkItemTypeRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkItemTypeRequest(c.Server, workItemTypeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateWorkitemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkitemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateWorkitem(ctx context.Context, body CreateWorkitemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkitemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetPaginatedWorkItem(ctx context.Context, params *GetPaginatedWorkItemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaginatedWorkItemRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) DeleteWorkitem(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkitemRequest(c.Server, workItemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetWorkItem(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkItemRequest(c.Server, workItemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateWorkitem(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkitemRequest(c.Server, workItemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateWorkItemCommentWithBody(ctx context.Context, workItemID int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkItemCommentRequestWithBody(c.Server, workItemID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) CreateWorkItemComment(ctx context.Context, workItemID int, body rest.CreateWorkItemCommentRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkItemCommentRequest(c.Server, workItemID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) DeleteWorkItemComment(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkItemCommentRequest(c.Server, workItemID, workItemCommentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) GetWorkItemComment(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkItemCommentRequest(c.Server, workItemID, workItemCommentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateWorkItemCommentWithBody(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkItemCommentRequestWithBody(c.Server, workItemID, workItemCommentID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

func (c *Client) UpdateWorkItemComment(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, body rest.UpdateWorkItemCommentRequest, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkItemCommentRequest(c.Server, workItemID, workItemCommentID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	if c.testHandler != nil {
		resp := httptest.NewRecorder()
		c.testHandler.ServeHTTP(resp, req)

		return resp.Result(), nil
	} else {
		return c.Client.Do(req)
	}
}

// NewDeleteActivityRequest generates requests for DeleteActivity
func NewDeleteActivityRequest(server string, activityID models.ActivityID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "activityID", runtime.ParamLocationPath, activityID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivityRequest generates requests for GetActivity
func NewGetActivityRequest(server string, activityID models.ActivityID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "activityID", runtime.ParamLocationPath, activityID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateActivityRequest calls the generic UpdateActivity builder with application/json body
func NewUpdateActivityRequest(server string, activityID models.ActivityID, body rest.UpdateActivityRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateActivityRequestWithBody(server, activityID, "application/json", bodyReader)
}

// NewUpdateActivityRequestWithBody generates requests for UpdateActivity with any type of body
func NewUpdateActivityRequestWithBody(server string, activityID models.ActivityID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "activityID", runtime.ParamLocationPath, activityID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminPingRequest generates requests for AdminPing
func NewAdminPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMyProviderCallbackRequest generates requests for MyProviderCallback
func NewMyProviderCallbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/myprovider/callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMyProviderLoginRequest generates requests for MyProviderLogin
func NewMyProviderLoginRequest(server string, params *MyProviderLoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/myprovider/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "auth-redirect-uri", runtime.ParamLocationQuery, params.AuthRedirectUri); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsRequest generates requests for Events
func NewEventsRequest(server string, params *EventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectName", runtime.ParamLocationQuery, params.ProjectName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topics", runtime.ParamLocationQuery, params.Topics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaginatedNotificationsRequest generates requests for GetPaginatedNotifications
func NewGetPaginatedNotificationsRequest(server string, params *GetPaginatedNotificationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/user/page")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, params.Direction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Cursor != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenapiYamlGetRequest generates requests for OpenapiYamlGet
func NewOpenapiYamlGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.yaml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPingRequest generates requests for Ping
func NewPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectRequest generates requests for GetProject
func NewGetProjectRequest(server string, projectName ProjectName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateActivityRequest calls the generic CreateActivity builder with application/json body
func NewCreateActivityRequest(server string, projectName ProjectName, body rest.CreateActivityRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateActivityRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewCreateActivityRequestWithBody generates requests for CreateActivity with any type of body
func NewCreateActivityRequestWithBody(server string, projectName ProjectName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/activity/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectBoardRequest generates requests for GetProjectBoard
func NewGetProjectBoardRequest(server string, projectName ProjectName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/board", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectConfigRequest generates requests for GetProjectConfig
func NewGetProjectConfigRequest(server string, projectName ProjectName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProjectConfigRequest calls the generic UpdateProjectConfig builder with application/json body
func NewUpdateProjectConfigRequest(server string, projectName ProjectName, body UpdateProjectConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProjectConfigRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewUpdateProjectConfigRequestWithBody generates requests for UpdateProjectConfig with any type of body
func NewUpdateProjectConfigRequestWithBody(server string, projectName ProjectName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInitializeProjectRequest calls the generic InitializeProject builder with application/json body
func NewInitializeProjectRequest(server string, projectName ProjectName, body InitializeProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInitializeProjectRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewInitializeProjectRequestWithBody generates requests for InitializeProject with any type of body
func NewInitializeProjectRequestWithBody(server string, projectName ProjectName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/initialize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTeamRequest calls the generic CreateTeam builder with application/json body
func NewCreateTeamRequest(server string, projectName ProjectName, body rest.CreateTeamRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, projectName ProjectName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/team/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateWorkItemTagRequest calls the generic CreateWorkItemTag builder with application/json body
func NewCreateWorkItemTagRequest(server string, projectName ProjectName, body rest.CreateWorkItemTagRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkItemTagRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewCreateWorkItemTagRequestWithBody generates requests for CreateWorkItemTag with any type of body
func NewCreateWorkItemTagRequestWithBody(server string, projectName ProjectName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/work-item-tag/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateWorkItemTypeRequest calls the generic CreateWorkItemType builder with application/json body
func NewCreateWorkItemTypeRequest(server string, projectName ProjectName, body rest.CreateWorkItemTypeRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkItemTypeRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewCreateWorkItemTypeRequestWithBody generates requests for CreateWorkItemType with any type of body
func NewCreateWorkItemTypeRequestWithBody(server string, projectName ProjectName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/work-item-type/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectWorkitemsRequest generates requests for GetProjectWorkitems
func NewGetProjectWorkitemsRequest(server string, projectName ProjectName, params *GetProjectWorkitemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/workitems", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Open != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "open", runtime.ParamLocationQuery, *params.Open); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		if params.Deleted != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted", runtime.ParamLocationQuery, *params.Deleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, teamID models.TeamID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamID", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, teamID models.TeamID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamID", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequest calls the generic UpdateTeam builder with application/json body
func NewUpdateTeamRequest(server string, teamID models.TeamID, body rest.UpdateTeamRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, teamID models.TeamID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamID", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTimeEntryRequest calls the generic CreateTimeEntry builder with application/json body
func NewCreateTimeEntryRequest(server string, body rest.CreateTimeEntryRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTimeEntryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTimeEntryRequestWithBody generates requests for CreateTimeEntry with any type of body
func NewCreateTimeEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/time-entry/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTimeEntryRequest generates requests for DeleteTimeEntry
func NewDeleteTimeEntryRequest(server string, timeEntryID models.TimeEntryID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "timeEntryID", runtime.ParamLocationPath, timeEntryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/time-entry/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimeEntryRequest generates requests for GetTimeEntry
func NewGetTimeEntryRequest(server string, timeEntryID models.TimeEntryID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "timeEntryID", runtime.ParamLocationPath, timeEntryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/time-entry/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTimeEntryRequest calls the generic UpdateTimeEntry builder with application/json body
func NewUpdateTimeEntryRequest(server string, timeEntryID models.TimeEntryID, body rest.UpdateTimeEntryRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTimeEntryRequestWithBody(server, timeEntryID, "application/json", bodyReader)
}

// NewUpdateTimeEntryRequestWithBody generates requests for UpdateTimeEntry with any type of body
func NewUpdateTimeEntryRequestWithBody(server string, timeEntryID models.TimeEntryID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "timeEntryID", runtime.ParamLocationPath, timeEntryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/time-entry/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCurrentUserRequest generates requests for GetCurrentUser
func NewGetCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaginatedUsersRequest generates requests for GetPaginatedUsers
func NewGetPaginatedUsersRequest(server string, params *GetPaginatedUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/page")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, params.Direction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Cursor != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column", runtime.ParamLocationQuery, params.Column); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SearchQuery != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "searchQuery", runtime.ParamLocationQuery, *params.SearchQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, id uuid.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, id uuid.UUID, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, id uuid.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserAuthorizationRequest calls the generic UpdateUserAuthorization builder with application/json body
func NewUpdateUserAuthorizationRequest(server string, id uuid.UUID, body UpdateUserAuthorizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserAuthorizationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateUserAuthorizationRequestWithBody generates requests for UpdateUserAuthorization with any type of body
func NewUpdateUserAuthorizationRequestWithBody(server string, id uuid.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/authorization", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkItemTagRequest generates requests for DeleteWorkItemTag
func NewDeleteWorkItemTagRequest(server string, workItemTagID models.WorkItemTagID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemTagID", runtime.ParamLocationPath, workItemTagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item-tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkItemTagRequest generates requests for GetWorkItemTag
func NewGetWorkItemTagRequest(server string, workItemTagID models.WorkItemTagID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemTagID", runtime.ParamLocationPath, workItemTagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item-tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkItemTagRequest calls the generic UpdateWorkItemTag builder with application/json body
func NewUpdateWorkItemTagRequest(server string, workItemTagID models.WorkItemTagID, body rest.UpdateWorkItemTagRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkItemTagRequestWithBody(server, workItemTagID, "application/json", bodyReader)
}

// NewUpdateWorkItemTagRequestWithBody generates requests for UpdateWorkItemTag with any type of body
func NewUpdateWorkItemTagRequestWithBody(server string, workItemTagID models.WorkItemTagID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemTagID", runtime.ParamLocationPath, workItemTagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item-tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkItemTypeRequest generates requests for DeleteWorkItemType
func NewDeleteWorkItemTypeRequest(server string, workItemTypeID models.WorkItemTypeID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemTypeID", runtime.ParamLocationPath, workItemTypeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item-type/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkItemTypeRequest generates requests for GetWorkItemType
func NewGetWorkItemTypeRequest(server string, workItemTypeID models.WorkItemTypeID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemTypeID", runtime.ParamLocationPath, workItemTypeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item-type/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkItemTypeRequest calls the generic UpdateWorkItemType builder with application/json body
func NewUpdateWorkItemTypeRequest(server string, workItemTypeID models.WorkItemTypeID, body rest.UpdateWorkItemTypeRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkItemTypeRequestWithBody(server, workItemTypeID, "application/json", bodyReader)
}

// NewUpdateWorkItemTypeRequestWithBody generates requests for UpdateWorkItemType with any type of body
func NewUpdateWorkItemTypeRequestWithBody(server string, workItemTypeID models.WorkItemTypeID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemTypeID", runtime.ParamLocationPath, workItemTypeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item-type/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateWorkitemRequest calls the generic CreateWorkitem builder with application/json body
func NewCreateWorkitemRequest(server string, body CreateWorkitemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkitemRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWorkitemRequestWithBody generates requests for CreateWorkitem with any type of body
func NewCreateWorkitemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPaginatedWorkItemRequest generates requests for GetPaginatedWorkItem
func NewGetPaginatedWorkItemRequest(server string, params *GetPaginatedWorkItemParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item/page")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, params.Direction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Cursor != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		if params.SearchQuery != nil {
			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "searchQuery", runtime.ParamLocationQuery, *params.SearchQuery); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkitemRequest generates requests for DeleteWorkitem
func NewDeleteWorkitemRequest(server string, workItemID models.WorkItemID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemID", runtime.ParamLocationPath, workItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkItemRequest generates requests for GetWorkItem
func NewGetWorkItemRequest(server string, workItemID models.WorkItemID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemID", runtime.ParamLocationPath, workItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkitemRequest generates requests for UpdateWorkitem
func NewUpdateWorkitemRequest(server string, workItemID models.WorkItemID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemID", runtime.ParamLocationPath, workItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkItemCommentRequest calls the generic CreateWorkItemComment builder with application/json body
func NewCreateWorkItemCommentRequest(server string, workItemID int, body rest.CreateWorkItemCommentRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkItemCommentRequestWithBody(server, workItemID, "application/json", bodyReader)
}

// NewCreateWorkItemCommentRequestWithBody generates requests for CreateWorkItemComment with any type of body
func NewCreateWorkItemCommentRequestWithBody(server string, workItemID int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemID", runtime.ParamLocationPath, workItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item/%s/comment/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkItemCommentRequest generates requests for DeleteWorkItemComment
func NewDeleteWorkItemCommentRequest(server string, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemID", runtime.ParamLocationPath, workItemID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workItemCommentID", runtime.ParamLocationPath, workItemCommentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item/%s/comment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkItemCommentRequest generates requests for GetWorkItemComment
func NewGetWorkItemCommentRequest(server string, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemID", runtime.ParamLocationPath, workItemID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workItemCommentID", runtime.ParamLocationPath, workItemCommentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item/%s/comment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkItemCommentRequest calls the generic UpdateWorkItemComment builder with application/json body
func NewUpdateWorkItemCommentRequest(server string, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, body rest.UpdateWorkItemCommentRequest) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkItemCommentRequestWithBody(server, workItemID, workItemCommentID, "application/json", bodyReader)
}

// NewUpdateWorkItemCommentRequestWithBody generates requests for UpdateWorkItemComment with any type of body
func NewUpdateWorkItemCommentRequestWithBody(server string, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workItemID", runtime.ParamLocationPath, workItemID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workItemCommentID", runtime.ParamLocationPath, workItemCommentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/work-item/%s/comment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := newClient(server, nil, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteActivity request
	DeleteActivityWithResponse(ctx context.Context, activityID models.ActivityID, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error)

	// GetActivity request
	GetActivityWithResponse(ctx context.Context, activityID models.ActivityID, reqEditors ...RequestEditorFn) (*GetActivityResponse, error)

	// UpdateActivity request with any body
	UpdateActivityWithBodyWithResponse(ctx context.Context, activityID models.ActivityID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateActivityResponse, error)

	UpdateActivityWithResponse(ctx context.Context, activityID models.ActivityID, body rest.UpdateActivityRequest, reqEditors ...RequestEditorFn) (*UpdateActivityResponse, error)

	// AdminPing request
	AdminPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminPingResponse, error)

	// MyProviderCallback request
	MyProviderCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MyProviderCallbackResponse, error)

	// MyProviderLogin request
	MyProviderLoginWithResponse(ctx context.Context, params *MyProviderLoginParams, reqEditors ...RequestEditorFn) (*MyProviderLoginResponse, error)

	// Events request
	EventsWithResponse(ctx context.Context, params *EventsParams, reqEditors ...RequestEditorFn) (*EventsResponse, error)

	// GetPaginatedNotifications request
	GetPaginatedNotificationsWithResponse(ctx context.Context, params *GetPaginatedNotificationsParams, reqEditors ...RequestEditorFn) (*GetPaginatedNotificationsResponse, error)

	// OpenapiYamlGet request
	OpenapiYamlGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OpenapiYamlGetResponse, error)

	// Ping request
	PingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingResponse, error)

	// GetProject request
	GetProjectWithResponse(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*GetProjectResponse, error)

	// CreateActivity request with any body
	CreateActivityWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error)

	CreateActivityWithResponse(ctx context.Context, projectName ProjectName, body rest.CreateActivityRequest, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error)

	// GetProjectBoard request
	GetProjectBoardWithResponse(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*GetProjectBoardResponse, error)

	// GetProjectConfig request
	GetProjectConfigWithResponse(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*GetProjectConfigResponse, error)

	// UpdateProjectConfig request with any body
	UpdateProjectConfigWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectConfigResponse, error)

	UpdateProjectConfigWithResponse(ctx context.Context, projectName ProjectName, body UpdateProjectConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectConfigResponse, error)

	// InitializeProject request with any body
	InitializeProjectWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InitializeProjectResponse, error)

	InitializeProjectWithResponse(ctx context.Context, projectName ProjectName, body InitializeProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*InitializeProjectResponse, error)

	// CreateTeam request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	CreateTeamWithResponse(ctx context.Context, projectName ProjectName, body rest.CreateTeamRequest, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// CreateWorkItemTag request with any body
	CreateWorkItemTagWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkItemTagResponse, error)

	CreateWorkItemTagWithResponse(ctx context.Context, projectName ProjectName, body rest.CreateWorkItemTagRequest, reqEditors ...RequestEditorFn) (*CreateWorkItemTagResponse, error)

	// CreateWorkItemType request with any body
	CreateWorkItemTypeWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkItemTypeResponse, error)

	CreateWorkItemTypeWithResponse(ctx context.Context, projectName ProjectName, body rest.CreateWorkItemTypeRequest, reqEditors ...RequestEditorFn) (*CreateWorkItemTypeResponse, error)

	// GetProjectWorkitems request
	GetProjectWorkitemsWithResponse(ctx context.Context, projectName ProjectName, params *GetProjectWorkitemsParams, reqEditors ...RequestEditorFn) (*GetProjectWorkitemsResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, teamID models.TeamID, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, teamID models.TeamID, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, teamID models.TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	UpdateTeamWithResponse(ctx context.Context, teamID models.TeamID, body rest.UpdateTeamRequest, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// CreateTimeEntry request with any body
	CreateTimeEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTimeEntryResponse, error)

	CreateTimeEntryWithResponse(ctx context.Context, body rest.CreateTimeEntryRequest, reqEditors ...RequestEditorFn) (*CreateTimeEntryResponse, error)

	// DeleteTimeEntry request
	DeleteTimeEntryWithResponse(ctx context.Context, timeEntryID models.TimeEntryID, reqEditors ...RequestEditorFn) (*DeleteTimeEntryResponse, error)

	// GetTimeEntry request
	GetTimeEntryWithResponse(ctx context.Context, timeEntryID models.TimeEntryID, reqEditors ...RequestEditorFn) (*GetTimeEntryResponse, error)

	// UpdateTimeEntry request with any body
	UpdateTimeEntryWithBodyWithResponse(ctx context.Context, timeEntryID models.TimeEntryID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTimeEntryResponse, error)

	UpdateTimeEntryWithResponse(ctx context.Context, timeEntryID models.TimeEntryID, body rest.UpdateTimeEntryRequest, reqEditors ...RequestEditorFn) (*UpdateTimeEntryResponse, error)

	// GetCurrentUser request
	GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error)

	// GetPaginatedUsers request
	GetPaginatedUsersWithResponse(ctx context.Context, params *GetPaginatedUsersParams, reqEditors ...RequestEditorFn) (*GetPaginatedUsersResponse, error)

	// DeleteUser request
	DeleteUserWithResponse(ctx context.Context, id uuid.UUID, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// UpdateUser request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, id uuid.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, id uuid.UUID, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// UpdateUserAuthorization request with any body
	UpdateUserAuthorizationWithBodyWithResponse(ctx context.Context, id uuid.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserAuthorizationResponse, error)

	UpdateUserAuthorizationWithResponse(ctx context.Context, id uuid.UUID, body UpdateUserAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserAuthorizationResponse, error)

	// DeleteWorkItemTag request
	DeleteWorkItemTagWithResponse(ctx context.Context, workItemTagID models.WorkItemTagID, reqEditors ...RequestEditorFn) (*DeleteWorkItemTagResponse, error)

	// GetWorkItemTag request
	GetWorkItemTagWithResponse(ctx context.Context, workItemTagID models.WorkItemTagID, reqEditors ...RequestEditorFn) (*GetWorkItemTagResponse, error)

	// UpdateWorkItemTag request with any body
	UpdateWorkItemTagWithBodyWithResponse(ctx context.Context, workItemTagID models.WorkItemTagID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkItemTagResponse, error)

	UpdateWorkItemTagWithResponse(ctx context.Context, workItemTagID models.WorkItemTagID, body rest.UpdateWorkItemTagRequest, reqEditors ...RequestEditorFn) (*UpdateWorkItemTagResponse, error)

	// DeleteWorkItemType request
	DeleteWorkItemTypeWithResponse(ctx context.Context, workItemTypeID models.WorkItemTypeID, reqEditors ...RequestEditorFn) (*DeleteWorkItemTypeResponse, error)

	// GetWorkItemType request
	GetWorkItemTypeWithResponse(ctx context.Context, workItemTypeID models.WorkItemTypeID, reqEditors ...RequestEditorFn) (*GetWorkItemTypeResponse, error)

	// UpdateWorkItemType request with any body
	UpdateWorkItemTypeWithBodyWithResponse(ctx context.Context, workItemTypeID models.WorkItemTypeID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkItemTypeResponse, error)

	UpdateWorkItemTypeWithResponse(ctx context.Context, workItemTypeID models.WorkItemTypeID, body rest.UpdateWorkItemTypeRequest, reqEditors ...RequestEditorFn) (*UpdateWorkItemTypeResponse, error)

	// CreateWorkitem request with any body
	CreateWorkitemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkitemResponse, error)

	CreateWorkitemWithResponse(ctx context.Context, body CreateWorkitemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkitemResponse, error)

	// GetPaginatedWorkItem request
	GetPaginatedWorkItemWithResponse(ctx context.Context, params *GetPaginatedWorkItemParams, reqEditors ...RequestEditorFn) (*GetPaginatedWorkItemResponse, error)

	// DeleteWorkitem request
	DeleteWorkitemWithResponse(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*DeleteWorkitemResponse, error)

	// GetWorkItem request
	GetWorkItemWithResponse(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*GetWorkItemResponse, error)

	// UpdateWorkitem request
	UpdateWorkitemWithResponse(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*UpdateWorkitemResponse, error)

	// CreateWorkItemComment request with any body
	CreateWorkItemCommentWithBodyWithResponse(ctx context.Context, workItemID int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkItemCommentResponse, error)

	CreateWorkItemCommentWithResponse(ctx context.Context, workItemID int, body rest.CreateWorkItemCommentRequest, reqEditors ...RequestEditorFn) (*CreateWorkItemCommentResponse, error)

	// DeleteWorkItemComment request
	DeleteWorkItemCommentWithResponse(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, reqEditors ...RequestEditorFn) (*DeleteWorkItemCommentResponse, error)

	// GetWorkItemComment request
	GetWorkItemCommentWithResponse(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, reqEditors ...RequestEditorFn) (*GetWorkItemCommentResponse, error)

	// UpdateWorkItemComment request with any body
	UpdateWorkItemCommentWithBodyWithResponse(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkItemCommentResponse, error)

	UpdateWorkItemCommentWithResponse(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, body rest.UpdateWorkItemCommentRequest, reqEditors ...RequestEditorFn) (*UpdateWorkItemCommentResponse, error)
}

type DeleteActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r DeleteActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivityResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivityResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r UpdateActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r AdminPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MyProviderCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MyProviderCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MyProviderCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MyProviderLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MyProviderLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MyProviderLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaginatedNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNotificationsResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetPaginatedNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaginatedNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenapiYamlGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r OpenapiYamlGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenapiYamlGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r PingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsProject
}

// Status returns HTTPResponse.Status
func (r GetProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ActivityResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r CreateActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectBoardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectBoard
}

// Status returns HTTPResponse.Status
func (r GetProjectBoardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectBoardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectConfig
}

// Status returns HTTPResponse.Status
func (r GetProjectConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProjectConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateProjectConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProjectConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InitializeProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InitializeProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InitializeProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TeamResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkItemTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkItemTagResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r CreateWorkItemTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkItemTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkItemTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkItemTypeResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r CreateWorkItemTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkItemTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectWorkitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkItemResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectWorkitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectWorkitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTimeEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TimeEntryResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r CreateTimeEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTimeEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTimeEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r DeleteTimeEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTimeEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimeEntryResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetTimeEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTimeEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimeEntryResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r UpdateTimeEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTimeEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaginatedUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUsersResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetPaginatedUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaginatedUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserAuthorizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r UpdateUserAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkItemTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r DeleteWorkItemTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkItemTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkItemTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkItemTagResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetWorkItemTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkItemTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkItemTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkItemTagResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r UpdateWorkItemTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkItemTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkItemTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r DeleteWorkItemTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkItemTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkItemTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkItemTypeResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetWorkItemTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkItemTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkItemTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkItemTypeResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r UpdateWorkItemTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkItemTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkitemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkItemResponse
}

// Status returns HTTPResponse.Status
func (r CreateWorkitemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkitemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaginatedWorkItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDemoWorkItemsResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetPaginatedWorkItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaginatedWorkItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkitemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWorkitemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkitemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkItemResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkitemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkItemResponse
}

// Status returns HTTPResponse.Status
func (r UpdateWorkitemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkitemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkItemCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkItemCommentResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r CreateWorkItemCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkItemCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkItemCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r DeleteWorkItemCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkItemCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkItemCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkItemCommentResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r GetWorkItemCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkItemCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkItemCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkItemCommentResponse
	JSON4XX      *HTTPError
}

// Status returns HTTPResponse.Status
func (r UpdateWorkItemCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkItemCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteActivityWithResponse request returning *DeleteActivityResponse
func (c *ClientWithResponses) DeleteActivityWithResponse(ctx context.Context, activityID models.ActivityID, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error) {
	rsp, err := c.DeleteActivity(ctx, activityID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActivityResponse(rsp)
}

// GetActivityWithResponse request returning *GetActivityResponse
func (c *ClientWithResponses) GetActivityWithResponse(ctx context.Context, activityID models.ActivityID, reqEditors ...RequestEditorFn) (*GetActivityResponse, error) {
	rsp, err := c.GetActivity(ctx, activityID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityResponse(rsp)
}

// UpdateActivityWithBodyWithResponse request with arbitrary body returning *UpdateActivityResponse
func (c *ClientWithResponses) UpdateActivityWithBodyWithResponse(ctx context.Context, activityID models.ActivityID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateActivityResponse, error) {
	rsp, err := c.UpdateActivityWithBody(ctx, activityID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateActivityResponse(rsp)
}

func (c *ClientWithResponses) UpdateActivityWithResponse(ctx context.Context, activityID models.ActivityID, body rest.UpdateActivityRequest, reqEditors ...RequestEditorFn) (*UpdateActivityResponse, error) {
	rsp, err := c.UpdateActivity(ctx, activityID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateActivityResponse(rsp)
}

// AdminPingWithResponse request returning *AdminPingResponse
func (c *ClientWithResponses) AdminPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminPingResponse, error) {
	rsp, err := c.AdminPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminPingResponse(rsp)
}

// MyProviderCallbackWithResponse request returning *MyProviderCallbackResponse
func (c *ClientWithResponses) MyProviderCallbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MyProviderCallbackResponse, error) {
	rsp, err := c.MyProviderCallback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMyProviderCallbackResponse(rsp)
}

// MyProviderLoginWithResponse request returning *MyProviderLoginResponse
func (c *ClientWithResponses) MyProviderLoginWithResponse(ctx context.Context, params *MyProviderLoginParams, reqEditors ...RequestEditorFn) (*MyProviderLoginResponse, error) {
	rsp, err := c.MyProviderLogin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMyProviderLoginResponse(rsp)
}

// EventsWithResponse request returning *EventsResponse
func (c *ClientWithResponses) EventsWithResponse(ctx context.Context, recorder ResponseRecorder, params *EventsParams, reqEditors ...RequestEditorFn) (*EventsResponse, error) {
	rsp, err := c.Events(ctx, recorder, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsResponse(rsp)
}

// GetPaginatedNotificationsWithResponse request returning *GetPaginatedNotificationsResponse
func (c *ClientWithResponses) GetPaginatedNotificationsWithResponse(ctx context.Context, params *GetPaginatedNotificationsParams, reqEditors ...RequestEditorFn) (*GetPaginatedNotificationsResponse, error) {
	rsp, err := c.GetPaginatedNotifications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaginatedNotificationsResponse(rsp)
}

// OpenapiYamlGetWithResponse request returning *OpenapiYamlGetResponse
func (c *ClientWithResponses) OpenapiYamlGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OpenapiYamlGetResponse, error) {
	rsp, err := c.OpenapiYamlGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenapiYamlGetResponse(rsp)
}

// PingWithResponse request returning *PingResponse
func (c *ClientWithResponses) PingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingResponse, error) {
	rsp, err := c.Ping(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingResponse(rsp)
}

// GetProjectWithResponse request returning *GetProjectResponse
func (c *ClientWithResponses) GetProjectWithResponse(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*GetProjectResponse, error) {
	rsp, err := c.GetProject(ctx, projectName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectResponse(rsp)
}

// CreateActivityWithBodyWithResponse request with arbitrary body returning *CreateActivityResponse
func (c *ClientWithResponses) CreateActivityWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error) {
	rsp, err := c.CreateActivityWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateActivityResponse(rsp)
}

func (c *ClientWithResponses) CreateActivityWithResponse(ctx context.Context, projectName ProjectName, body rest.CreateActivityRequest, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error) {
	rsp, err := c.CreateActivity(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateActivityResponse(rsp)
}

// GetProjectBoardWithResponse request returning *GetProjectBoardResponse
func (c *ClientWithResponses) GetProjectBoardWithResponse(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*GetProjectBoardResponse, error) {
	rsp, err := c.GetProjectBoard(ctx, projectName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectBoardResponse(rsp)
}

// GetProjectConfigWithResponse request returning *GetProjectConfigResponse
func (c *ClientWithResponses) GetProjectConfigWithResponse(ctx context.Context, projectName ProjectName, reqEditors ...RequestEditorFn) (*GetProjectConfigResponse, error) {
	rsp, err := c.GetProjectConfig(ctx, projectName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectConfigResponse(rsp)
}

// UpdateProjectConfigWithBodyWithResponse request with arbitrary body returning *UpdateProjectConfigResponse
func (c *ClientWithResponses) UpdateProjectConfigWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectConfigResponse, error) {
	rsp, err := c.UpdateProjectConfigWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateProjectConfigWithResponse(ctx context.Context, projectName ProjectName, body UpdateProjectConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectConfigResponse, error) {
	rsp, err := c.UpdateProjectConfig(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectConfigResponse(rsp)
}

// InitializeProjectWithBodyWithResponse request with arbitrary body returning *InitializeProjectResponse
func (c *ClientWithResponses) InitializeProjectWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InitializeProjectResponse, error) {
	rsp, err := c.InitializeProjectWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitializeProjectResponse(rsp)
}

func (c *ClientWithResponses) InitializeProjectWithResponse(ctx context.Context, projectName ProjectName, body InitializeProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*InitializeProjectResponse, error) {
	rsp, err := c.InitializeProject(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInitializeProjectResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamWithResponse(ctx context.Context, projectName ProjectName, body rest.CreateTeamRequest, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeam(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// CreateWorkItemTagWithBodyWithResponse request with arbitrary body returning *CreateWorkItemTagResponse
func (c *ClientWithResponses) CreateWorkItemTagWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkItemTagResponse, error) {
	rsp, err := c.CreateWorkItemTagWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkItemTagResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkItemTagWithResponse(ctx context.Context, projectName ProjectName, body rest.CreateWorkItemTagRequest, reqEditors ...RequestEditorFn) (*CreateWorkItemTagResponse, error) {
	rsp, err := c.CreateWorkItemTag(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkItemTagResponse(rsp)
}

// CreateWorkItemTypeWithBodyWithResponse request with arbitrary body returning *CreateWorkItemTypeResponse
func (c *ClientWithResponses) CreateWorkItemTypeWithBodyWithResponse(ctx context.Context, projectName ProjectName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkItemTypeResponse, error) {
	rsp, err := c.CreateWorkItemTypeWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkItemTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkItemTypeWithResponse(ctx context.Context, projectName ProjectName, body rest.CreateWorkItemTypeRequest, reqEditors ...RequestEditorFn) (*CreateWorkItemTypeResponse, error) {
	rsp, err := c.CreateWorkItemType(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkItemTypeResponse(rsp)
}

// GetProjectWorkitemsWithResponse request returning *GetProjectWorkitemsResponse
func (c *ClientWithResponses) GetProjectWorkitemsWithResponse(ctx context.Context, projectName ProjectName, params *GetProjectWorkitemsParams, reqEditors ...RequestEditorFn) (*GetProjectWorkitemsResponse, error) {
	rsp, err := c.GetProjectWorkitems(ctx, projectName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectWorkitemsResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, teamID models.TeamID, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, teamID models.TeamID, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, teamID models.TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamWithResponse(ctx context.Context, teamID models.TeamID, body rest.UpdateTeamRequest, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeam(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// CreateTimeEntryWithBodyWithResponse request with arbitrary body returning *CreateTimeEntryResponse
func (c *ClientWithResponses) CreateTimeEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTimeEntryResponse, error) {
	rsp, err := c.CreateTimeEntryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTimeEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateTimeEntryWithResponse(ctx context.Context, body rest.CreateTimeEntryRequest, reqEditors ...RequestEditorFn) (*CreateTimeEntryResponse, error) {
	rsp, err := c.CreateTimeEntry(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTimeEntryResponse(rsp)
}

// DeleteTimeEntryWithResponse request returning *DeleteTimeEntryResponse
func (c *ClientWithResponses) DeleteTimeEntryWithResponse(ctx context.Context, timeEntryID models.TimeEntryID, reqEditors ...RequestEditorFn) (*DeleteTimeEntryResponse, error) {
	rsp, err := c.DeleteTimeEntry(ctx, timeEntryID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTimeEntryResponse(rsp)
}

// GetTimeEntryWithResponse request returning *GetTimeEntryResponse
func (c *ClientWithResponses) GetTimeEntryWithResponse(ctx context.Context, timeEntryID models.TimeEntryID, reqEditors ...RequestEditorFn) (*GetTimeEntryResponse, error) {
	rsp, err := c.GetTimeEntry(ctx, timeEntryID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeEntryResponse(rsp)
}

// UpdateTimeEntryWithBodyWithResponse request with arbitrary body returning *UpdateTimeEntryResponse
func (c *ClientWithResponses) UpdateTimeEntryWithBodyWithResponse(ctx context.Context, timeEntryID models.TimeEntryID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTimeEntryResponse, error) {
	rsp, err := c.UpdateTimeEntryWithBody(ctx, timeEntryID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTimeEntryResponse(rsp)
}

func (c *ClientWithResponses) UpdateTimeEntryWithResponse(ctx context.Context, timeEntryID models.TimeEntryID, body rest.UpdateTimeEntryRequest, reqEditors ...RequestEditorFn) (*UpdateTimeEntryResponse, error) {
	rsp, err := c.UpdateTimeEntry(ctx, timeEntryID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTimeEntryResponse(rsp)
}

// GetCurrentUserWithResponse request returning *GetCurrentUserResponse
func (c *ClientWithResponses) GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error) {
	rsp, err := c.GetCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserResponse(rsp)
}

// GetPaginatedUsersWithResponse request returning *GetPaginatedUsersResponse
func (c *ClientWithResponses) GetPaginatedUsersWithResponse(ctx context.Context, params *GetPaginatedUsersParams, reqEditors ...RequestEditorFn) (*GetPaginatedUsersResponse, error) {
	rsp, err := c.GetPaginatedUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaginatedUsersResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, id uuid.UUID, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, id uuid.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, id uuid.UUID, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// UpdateUserAuthorizationWithBodyWithResponse request with arbitrary body returning *UpdateUserAuthorizationResponse
func (c *ClientWithResponses) UpdateUserAuthorizationWithBodyWithResponse(ctx context.Context, id uuid.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserAuthorizationResponse, error) {
	rsp, err := c.UpdateUserAuthorizationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserAuthorizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserAuthorizationWithResponse(ctx context.Context, id uuid.UUID, body UpdateUserAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserAuthorizationResponse, error) {
	rsp, err := c.UpdateUserAuthorization(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserAuthorizationResponse(rsp)
}

// DeleteWorkItemTagWithResponse request returning *DeleteWorkItemTagResponse
func (c *ClientWithResponses) DeleteWorkItemTagWithResponse(ctx context.Context, workItemTagID models.WorkItemTagID, reqEditors ...RequestEditorFn) (*DeleteWorkItemTagResponse, error) {
	rsp, err := c.DeleteWorkItemTag(ctx, workItemTagID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkItemTagResponse(rsp)
}

// GetWorkItemTagWithResponse request returning *GetWorkItemTagResponse
func (c *ClientWithResponses) GetWorkItemTagWithResponse(ctx context.Context, workItemTagID models.WorkItemTagID, reqEditors ...RequestEditorFn) (*GetWorkItemTagResponse, error) {
	rsp, err := c.GetWorkItemTag(ctx, workItemTagID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkItemTagResponse(rsp)
}

// UpdateWorkItemTagWithBodyWithResponse request with arbitrary body returning *UpdateWorkItemTagResponse
func (c *ClientWithResponses) UpdateWorkItemTagWithBodyWithResponse(ctx context.Context, workItemTagID models.WorkItemTagID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkItemTagResponse, error) {
	rsp, err := c.UpdateWorkItemTagWithBody(ctx, workItemTagID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkItemTagResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkItemTagWithResponse(ctx context.Context, workItemTagID models.WorkItemTagID, body rest.UpdateWorkItemTagRequest, reqEditors ...RequestEditorFn) (*UpdateWorkItemTagResponse, error) {
	rsp, err := c.UpdateWorkItemTag(ctx, workItemTagID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkItemTagResponse(rsp)
}

// DeleteWorkItemTypeWithResponse request returning *DeleteWorkItemTypeResponse
func (c *ClientWithResponses) DeleteWorkItemTypeWithResponse(ctx context.Context, workItemTypeID models.WorkItemTypeID, reqEditors ...RequestEditorFn) (*DeleteWorkItemTypeResponse, error) {
	rsp, err := c.DeleteWorkItemType(ctx, workItemTypeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkItemTypeResponse(rsp)
}

// GetWorkItemTypeWithResponse request returning *GetWorkItemTypeResponse
func (c *ClientWithResponses) GetWorkItemTypeWithResponse(ctx context.Context, workItemTypeID models.WorkItemTypeID, reqEditors ...RequestEditorFn) (*GetWorkItemTypeResponse, error) {
	rsp, err := c.GetWorkItemType(ctx, workItemTypeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkItemTypeResponse(rsp)
}

// UpdateWorkItemTypeWithBodyWithResponse request with arbitrary body returning *UpdateWorkItemTypeResponse
func (c *ClientWithResponses) UpdateWorkItemTypeWithBodyWithResponse(ctx context.Context, workItemTypeID models.WorkItemTypeID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkItemTypeResponse, error) {
	rsp, err := c.UpdateWorkItemTypeWithBody(ctx, workItemTypeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkItemTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkItemTypeWithResponse(ctx context.Context, workItemTypeID models.WorkItemTypeID, body rest.UpdateWorkItemTypeRequest, reqEditors ...RequestEditorFn) (*UpdateWorkItemTypeResponse, error) {
	rsp, err := c.UpdateWorkItemType(ctx, workItemTypeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkItemTypeResponse(rsp)
}

// CreateWorkitemWithBodyWithResponse request with arbitrary body returning *CreateWorkitemResponse
func (c *ClientWithResponses) CreateWorkitemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkitemResponse, error) {
	rsp, err := c.CreateWorkitemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkitemResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkitemWithResponse(ctx context.Context, body CreateWorkitemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkitemResponse, error) {
	rsp, err := c.CreateWorkitem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkitemResponse(rsp)
}

// GetPaginatedWorkItemWithResponse request returning *GetPaginatedWorkItemResponse
func (c *ClientWithResponses) GetPaginatedWorkItemWithResponse(ctx context.Context, params *GetPaginatedWorkItemParams, reqEditors ...RequestEditorFn) (*GetPaginatedWorkItemResponse, error) {
	rsp, err := c.GetPaginatedWorkItem(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaginatedWorkItemResponse(rsp)
}

// DeleteWorkitemWithResponse request returning *DeleteWorkitemResponse
func (c *ClientWithResponses) DeleteWorkitemWithResponse(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*DeleteWorkitemResponse, error) {
	rsp, err := c.DeleteWorkitem(ctx, workItemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkitemResponse(rsp)
}

// GetWorkItemWithResponse request returning *GetWorkItemResponse
func (c *ClientWithResponses) GetWorkItemWithResponse(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*GetWorkItemResponse, error) {
	rsp, err := c.GetWorkItem(ctx, workItemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkItemResponse(rsp)
}

// UpdateWorkitemWithResponse request returning *UpdateWorkitemResponse
func (c *ClientWithResponses) UpdateWorkitemWithResponse(ctx context.Context, workItemID models.WorkItemID, reqEditors ...RequestEditorFn) (*UpdateWorkitemResponse, error) {
	rsp, err := c.UpdateWorkitem(ctx, workItemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkitemResponse(rsp)
}

// CreateWorkItemCommentWithBodyWithResponse request with arbitrary body returning *CreateWorkItemCommentResponse
func (c *ClientWithResponses) CreateWorkItemCommentWithBodyWithResponse(ctx context.Context, workItemID int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkItemCommentResponse, error) {
	rsp, err := c.CreateWorkItemCommentWithBody(ctx, workItemID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkItemCommentResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkItemCommentWithResponse(ctx context.Context, workItemID int, body rest.CreateWorkItemCommentRequest, reqEditors ...RequestEditorFn) (*CreateWorkItemCommentResponse, error) {
	rsp, err := c.CreateWorkItemComment(ctx, workItemID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkItemCommentResponse(rsp)
}

// DeleteWorkItemCommentWithResponse request returning *DeleteWorkItemCommentResponse
func (c *ClientWithResponses) DeleteWorkItemCommentWithResponse(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, reqEditors ...RequestEditorFn) (*DeleteWorkItemCommentResponse, error) {
	rsp, err := c.DeleteWorkItemComment(ctx, workItemID, workItemCommentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkItemCommentResponse(rsp)
}

// GetWorkItemCommentWithResponse request returning *GetWorkItemCommentResponse
func (c *ClientWithResponses) GetWorkItemCommentWithResponse(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, reqEditors ...RequestEditorFn) (*GetWorkItemCommentResponse, error) {
	rsp, err := c.GetWorkItemComment(ctx, workItemID, workItemCommentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkItemCommentResponse(rsp)
}

// UpdateWorkItemCommentWithBodyWithResponse request with arbitrary body returning *UpdateWorkItemCommentResponse
func (c *ClientWithResponses) UpdateWorkItemCommentWithBodyWithResponse(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkItemCommentResponse, error) {
	rsp, err := c.UpdateWorkItemCommentWithBody(ctx, workItemID, workItemCommentID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkItemCommentResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkItemCommentWithResponse(ctx context.Context, workItemID models.WorkItemID, workItemCommentID models.WorkItemCommentID, body rest.UpdateWorkItemCommentRequest, reqEditors ...RequestEditorFn) (*UpdateWorkItemCommentResponse, error) {
	rsp, err := c.UpdateWorkItemComment(ctx, workItemID, workItemCommentID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkItemCommentResponse(rsp)
}

// ParseDeleteActivityResponse parses an HTTP response from a DeleteActivityWithResponse call
func ParseDeleteActivityResponse(rsp *http.Response) (*DeleteActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseGetActivityResponse parses an HTTP response from a GetActivityWithResponse call
func ParseGetActivityResponse(rsp *http.Response) (*GetActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateActivityResponse parses an HTTP response from a UpdateActivityWithResponse call
func ParseUpdateActivityResponse(rsp *http.Response) (*UpdateActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseAdminPingResponse parses an HTTP response from a AdminPingWithResponse call
func ParseAdminPingResponse(rsp *http.Response) (*AdminPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseMyProviderCallbackResponse parses an HTTP response from a MyProviderCallbackWithResponse call
func ParseMyProviderCallbackResponse(rsp *http.Response) (*MyProviderCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MyProviderCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMyProviderLoginResponse parses an HTTP response from a MyProviderLoginWithResponse call
func ParseMyProviderLoginResponse(rsp *http.Response) (*MyProviderLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MyProviderLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEventsResponse parses an HTTP response from a EventsWithResponse call
func ParseEventsResponse(rsp *http.Response) (*EventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPaginatedNotificationsResponse parses an HTTP response from a GetPaginatedNotificationsWithResponse call
func ParseGetPaginatedNotificationsResponse(rsp *http.Response) (*GetPaginatedNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaginatedNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNotificationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseOpenapiYamlGetResponse parses an HTTP response from a OpenapiYamlGetWithResponse call
func ParseOpenapiYamlGetResponse(rsp *http.Response) (*OpenapiYamlGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenapiYamlGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest
	}

	return response, nil
}

// ParsePingResponse parses an HTTP response from a PingWithResponse call
func ParsePingResponse(rsp *http.Response) (*PingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseGetProjectResponse parses an HTTP response from a GetProjectWithResponse call
func ParseGetProjectResponse(rsp *http.Response) (*GetProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseCreateActivityResponse parses an HTTP response from a CreateActivityWithResponse call
func ParseCreateActivityResponse(rsp *http.Response) (*CreateActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ActivityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetProjectBoardResponse parses an HTTP response from a GetProjectBoardWithResponse call
func ParseGetProjectBoardResponse(rsp *http.Response) (*GetProjectBoardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectBoardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectBoard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetProjectConfigResponse parses an HTTP response from a GetProjectConfigWithResponse call
func ParseGetProjectConfigResponse(rsp *http.Response) (*GetProjectConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseUpdateProjectConfigResponse parses an HTTP response from a UpdateProjectConfigWithResponse call
func ParseUpdateProjectConfigResponse(rsp *http.Response) (*UpdateProjectConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProjectConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInitializeProjectResponse parses an HTTP response from a InitializeProjectWithResponse call
func ParseInitializeProjectResponse(rsp *http.Response) (*InitializeProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InitializeProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TeamResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreateWorkItemTagResponse parses an HTTP response from a CreateWorkItemTagWithResponse call
func ParseCreateWorkItemTagResponse(rsp *http.Response) (*CreateWorkItemTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkItemTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkItemTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreateWorkItemTypeResponse parses an HTTP response from a CreateWorkItemTypeWithResponse call
func ParseCreateWorkItemTypeResponse(rsp *http.Response) (*CreateWorkItemTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkItemTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkItemTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetProjectWorkitemsResponse parses an HTTP response from a GetProjectWorkitemsWithResponse call
func ParseGetProjectWorkitemsResponse(rsp *http.Response) (*GetProjectWorkitemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectWorkitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreateTimeEntryResponse parses an HTTP response from a CreateTimeEntryWithResponse call
func ParseCreateTimeEntryResponse(rsp *http.Response) (*CreateTimeEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTimeEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TimeEntryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeleteTimeEntryResponse parses an HTTP response from a DeleteTimeEntryWithResponse call
func ParseDeleteTimeEntryResponse(rsp *http.Response) (*DeleteTimeEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTimeEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseGetTimeEntryResponse parses an HTTP response from a GetTimeEntryWithResponse call
func ParseGetTimeEntryResponse(rsp *http.Response) (*GetTimeEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimeEntryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateTimeEntryResponse parses an HTTP response from a UpdateTimeEntryWithResponse call
func ParseUpdateTimeEntryResponse(rsp *http.Response) (*UpdateTimeEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTimeEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimeEntryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetCurrentUserResponse parses an HTTP response from a GetCurrentUserWithResponse call
func ParseGetCurrentUserResponse(rsp *http.Response) (*GetCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetPaginatedUsersResponse parses an HTTP response from a GetPaginatedUsersWithResponse call
func ParseGetPaginatedUsersResponse(rsp *http.Response) (*GetPaginatedUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaginatedUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateUserAuthorizationResponse parses an HTTP response from a UpdateUserAuthorizationWithResponse call
func ParseUpdateUserAuthorizationResponse(rsp *http.Response) (*UpdateUserAuthorizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseDeleteWorkItemTagResponse parses an HTTP response from a DeleteWorkItemTagWithResponse call
func ParseDeleteWorkItemTagResponse(rsp *http.Response) (*DeleteWorkItemTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkItemTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseGetWorkItemTagResponse parses an HTTP response from a GetWorkItemTagWithResponse call
func ParseGetWorkItemTagResponse(rsp *http.Response) (*GetWorkItemTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkItemTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkItemTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateWorkItemTagResponse parses an HTTP response from a UpdateWorkItemTagWithResponse call
func ParseUpdateWorkItemTagResponse(rsp *http.Response) (*UpdateWorkItemTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkItemTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkItemTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeleteWorkItemTypeResponse parses an HTTP response from a DeleteWorkItemTypeWithResponse call
func ParseDeleteWorkItemTypeResponse(rsp *http.Response) (*DeleteWorkItemTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkItemTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseGetWorkItemTypeResponse parses an HTTP response from a GetWorkItemTypeWithResponse call
func ParseGetWorkItemTypeResponse(rsp *http.Response) (*GetWorkItemTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkItemTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkItemTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateWorkItemTypeResponse parses an HTTP response from a UpdateWorkItemTypeWithResponse call
func ParseUpdateWorkItemTypeResponse(rsp *http.Response) (*UpdateWorkItemTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkItemTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkItemTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreateWorkitemResponse parses an HTTP response from a CreateWorkitemWithResponse call
func ParseCreateWorkitemResponse(rsp *http.Response) (*CreateWorkitemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkitemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseGetPaginatedWorkItemResponse parses an HTTP response from a GetPaginatedWorkItemWithResponse call
func ParseGetPaginatedWorkItemResponse(rsp *http.Response) (*GetPaginatedWorkItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaginatedWorkItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDemoWorkItemsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeleteWorkitemResponse parses an HTTP response from a DeleteWorkitemWithResponse call
func ParseDeleteWorkitemResponse(rsp *http.Response) (*DeleteWorkitemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkitemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkItemResponse parses an HTTP response from a GetWorkItemWithResponse call
func ParseGetWorkItemResponse(rsp *http.Response) (*GetWorkItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseUpdateWorkitemResponse parses an HTTP response from a UpdateWorkitemWithResponse call
func ParseUpdateWorkitemResponse(rsp *http.Response) (*UpdateWorkitemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkitemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseCreateWorkItemCommentResponse parses an HTTP response from a CreateWorkItemCommentWithResponse call
func ParseCreateWorkItemCommentResponse(rsp *http.Response) (*CreateWorkItemCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkItemCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkItemCommentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeleteWorkItemCommentResponse parses an HTTP response from a DeleteWorkItemCommentWithResponse call
func ParseDeleteWorkItemCommentResponse(rsp *http.Response) (*DeleteWorkItemCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkItemCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest
	}

	return response, nil
}

// ParseGetWorkItemCommentResponse parses an HTTP response from a GetWorkItemCommentWithResponse call
func ParseGetWorkItemCommentResponse(rsp *http.Response) (*GetWorkItemCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkItemCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkItemCommentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateWorkItemCommentResponse parses an HTTP response from a UpdateWorkItemCommentWithResponse call
func ParseUpdateWorkItemCommentResponse(rsp *http.Response) (*UpdateWorkItemCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkItemCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkItemCommentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest HTTPError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

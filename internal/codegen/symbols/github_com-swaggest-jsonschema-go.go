// Code generated by 'yaegi extract github.com/swaggest/jsonschema-go'. DO NOT EDIT.

package symbols

import (
	"github.com/swaggest/jsonschema-go"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/swaggest/jsonschema-go/jsonschema"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AllOf":                     reflect.ValueOf(jsonschema.AllOf),
		"AnyOf":                     reflect.ValueOf(jsonschema.AnyOf),
		"Array":                     reflect.ValueOf(jsonschema.Array),
		"Boolean":                   reflect.ValueOf(jsonschema.Boolean),
		"CollectDefinitions":        reflect.ValueOf(jsonschema.CollectDefinitions),
		"DateLayout":                reflect.ValueOf(constant.MakeFromLiteral("\"2006-01-02\"", token.STRING, 0)),
		"DefinitionsPrefix":         reflect.ValueOf(jsonschema.DefinitionsPrefix),
		"ErrSkipProperty":           reflect.ValueOf(jsonschema.ErrSkipProperty),
		"InlineRefs":                reflect.ValueOf(jsonschema.InlineRefs),
		"Integer":                   reflect.ValueOf(jsonschema.Integer),
		"InterceptDefName":          reflect.ValueOf(jsonschema.InterceptDefName),
		"InterceptNullability":      reflect.ValueOf(jsonschema.InterceptNullability),
		"InterceptProp":             reflect.ValueOf(jsonschema.InterceptProp),
		"InterceptProperty":         reflect.ValueOf(jsonschema.InterceptProperty),
		"InterceptSchema":           reflect.ValueOf(jsonschema.InterceptSchema),
		"InterceptType":             reflect.ValueOf(jsonschema.InterceptType),
		"MakePropertyNameMapping":   reflect.ValueOf(jsonschema.MakePropertyNameMapping),
		"Null":                      reflect.ValueOf(jsonschema.Null),
		"Number":                    reflect.ValueOf(jsonschema.Number),
		"Object":                    reflect.ValueOf(jsonschema.Object),
		"OneOf":                     reflect.ValueOf(jsonschema.OneOf),
		"ProcessWithoutTags":        reflect.ValueOf(jsonschema.ProcessWithoutTags),
		"PropertyNameMapping":       reflect.ValueOf(jsonschema.PropertyNameMapping),
		"PropertyNameTag":           reflect.ValueOf(jsonschema.PropertyNameTag),
		"RootNullable":              reflect.ValueOf(jsonschema.RootNullable),
		"RootRef":                   reflect.ValueOf(jsonschema.RootRef),
		"SkipEmbeddedMapsSlices":    reflect.ValueOf(jsonschema.SkipEmbeddedMapsSlices),
		"SkipUnsupportedProperties": reflect.ValueOf(jsonschema.SkipUnsupportedProperties),
		"String":                    reflect.ValueOf(jsonschema.String),
		"StripDefinitionNamePrefix": reflect.ValueOf(jsonschema.StripDefinitionNamePrefix),
		"XEnumNames":                reflect.ValueOf(constant.MakeFromLiteral("\"x-enum-names\"", token.STRING, 0)),

		// type definitions
		"AllOfExposer":                     reflect.ValueOf((*jsonschema.AllOfExposer)(nil)),
		"AnyOfExposer":                     reflect.ValueOf((*jsonschema.AnyOfExposer)(nil)),
		"Date":                             reflect.ValueOf((*jsonschema.Date)(nil)),
		"DependenciesAdditionalProperties": reflect.ValueOf((*jsonschema.DependenciesAdditionalProperties)(nil)),
		"Described":                        reflect.ValueOf((*jsonschema.Described)(nil)),
		"ElseExposer":                      reflect.ValueOf((*jsonschema.ElseExposer)(nil)),
		"Enum":                             reflect.ValueOf((*jsonschema.Enum)(nil)),
		"Exposer":                          reflect.ValueOf((*jsonschema.Exposer)(nil)),
		"Field":                            reflect.ValueOf((*jsonschema.Field)(nil)),
		"IfExposer":                        reflect.ValueOf((*jsonschema.IfExposer)(nil)),
		"IgnoreTypeName":                   reflect.ValueOf((*jsonschema.IgnoreTypeName)(nil)),
		"InterceptNullabilityFunc":         reflect.ValueOf((*jsonschema.InterceptNullabilityFunc)(nil)),
		"InterceptNullabilityParams":       reflect.ValueOf((*jsonschema.InterceptNullabilityParams)(nil)),
		"InterceptPropFunc":                reflect.ValueOf((*jsonschema.InterceptPropFunc)(nil)),
		"InterceptPropParams":              reflect.ValueOf((*jsonschema.InterceptPropParams)(nil)),
		"InterceptPropertyFunc":            reflect.ValueOf((*jsonschema.InterceptPropertyFunc)(nil)),
		"InterceptSchemaFunc":              reflect.ValueOf((*jsonschema.InterceptSchemaFunc)(nil)),
		"InterceptSchemaParams":            reflect.ValueOf((*jsonschema.InterceptSchemaParams)(nil)),
		"InterceptTypeFunc":                reflect.ValueOf((*jsonschema.InterceptTypeFunc)(nil)),
		"Items":                            reflect.ValueOf((*jsonschema.Items)(nil)),
		"NamedEnum":                        reflect.ValueOf((*jsonschema.NamedEnum)(nil)),
		"NotExposer":                       reflect.ValueOf((*jsonschema.NotExposer)(nil)),
		"OneOfExposer":                     reflect.ValueOf((*jsonschema.OneOfExposer)(nil)),
		"Preparer":                         reflect.ValueOf((*jsonschema.Preparer)(nil)),
		"RawExposer":                       reflect.ValueOf((*jsonschema.RawExposer)(nil)),
		"Ref":                              reflect.ValueOf((*jsonschema.Ref)(nil)),
		"ReflectContext":                   reflect.ValueOf((*jsonschema.ReflectContext)(nil)),
		"Reflector":                        reflect.ValueOf((*jsonschema.Reflector)(nil)),
		"Schema":                           reflect.ValueOf((*jsonschema.Schema)(nil)),
		"SchemaInliner":                    reflect.ValueOf((*jsonschema.SchemaInliner)(nil)),
		"SchemaOrBool":                     reflect.ValueOf((*jsonschema.SchemaOrBool)(nil)),
		"SimpleType":                       reflect.ValueOf((*jsonschema.SimpleType)(nil)),
		"Struct":                           reflect.ValueOf((*jsonschema.Struct)(nil)),
		"ThenExposer":                      reflect.ValueOf((*jsonschema.ThenExposer)(nil)),
		"Titled":                           reflect.ValueOf((*jsonschema.Titled)(nil)),
		"Type":                             reflect.ValueOf((*jsonschema.Type)(nil)),

		// interface wrapper definitions
		"_AllOfExposer":   reflect.ValueOf((*_github_com_swaggest_jsonschema_go_AllOfExposer)(nil)),
		"_AnyOfExposer":   reflect.ValueOf((*_github_com_swaggest_jsonschema_go_AnyOfExposer)(nil)),
		"_Described":      reflect.ValueOf((*_github_com_swaggest_jsonschema_go_Described)(nil)),
		"_ElseExposer":    reflect.ValueOf((*_github_com_swaggest_jsonschema_go_ElseExposer)(nil)),
		"_Enum":           reflect.ValueOf((*_github_com_swaggest_jsonschema_go_Enum)(nil)),
		"_Exposer":        reflect.ValueOf((*_github_com_swaggest_jsonschema_go_Exposer)(nil)),
		"_IfExposer":      reflect.ValueOf((*_github_com_swaggest_jsonschema_go_IfExposer)(nil)),
		"_IgnoreTypeName": reflect.ValueOf((*_github_com_swaggest_jsonschema_go_IgnoreTypeName)(nil)),
		"_NamedEnum":      reflect.ValueOf((*_github_com_swaggest_jsonschema_go_NamedEnum)(nil)),
		"_NotExposer":     reflect.ValueOf((*_github_com_swaggest_jsonschema_go_NotExposer)(nil)),
		"_OneOfExposer":   reflect.ValueOf((*_github_com_swaggest_jsonschema_go_OneOfExposer)(nil)),
		"_Preparer":       reflect.ValueOf((*_github_com_swaggest_jsonschema_go_Preparer)(nil)),
		"_RawExposer":     reflect.ValueOf((*_github_com_swaggest_jsonschema_go_RawExposer)(nil)),
		"_SchemaInliner":  reflect.ValueOf((*_github_com_swaggest_jsonschema_go_SchemaInliner)(nil)),
		"_ThenExposer":    reflect.ValueOf((*_github_com_swaggest_jsonschema_go_ThenExposer)(nil)),
		"_Titled":         reflect.ValueOf((*_github_com_swaggest_jsonschema_go_Titled)(nil)),
	}
}

// _github_com_swaggest_jsonschema_go_AllOfExposer is an interface wrapper for AllOfExposer type
type _github_com_swaggest_jsonschema_go_AllOfExposer struct {
	IValue           interface{}
	WJSONSchemaAllOf func() []interface{}
}

func (W _github_com_swaggest_jsonschema_go_AllOfExposer) JSONSchemaAllOf() []interface{} {
	return W.WJSONSchemaAllOf()
}

// _github_com_swaggest_jsonschema_go_AnyOfExposer is an interface wrapper for AnyOfExposer type
type _github_com_swaggest_jsonschema_go_AnyOfExposer struct {
	IValue           interface{}
	WJSONSchemaAnyOf func() []interface{}
}

func (W _github_com_swaggest_jsonschema_go_AnyOfExposer) JSONSchemaAnyOf() []interface{} {
	return W.WJSONSchemaAnyOf()
}

// _github_com_swaggest_jsonschema_go_Described is an interface wrapper for Described type
type _github_com_swaggest_jsonschema_go_Described struct {
	IValue       interface{}
	WDescription func() string
}

func (W _github_com_swaggest_jsonschema_go_Described) Description() string {
	return W.WDescription()
}

// _github_com_swaggest_jsonschema_go_ElseExposer is an interface wrapper for ElseExposer type
type _github_com_swaggest_jsonschema_go_ElseExposer struct {
	IValue          interface{}
	WJSONSchemaElse func() interface{}
}

func (W _github_com_swaggest_jsonschema_go_ElseExposer) JSONSchemaElse() interface{} {
	return W.WJSONSchemaElse()
}

// _github_com_swaggest_jsonschema_go_Enum is an interface wrapper for Enum type
type _github_com_swaggest_jsonschema_go_Enum struct {
	IValue interface{}
	WEnum  func() []interface{}
}

func (W _github_com_swaggest_jsonschema_go_Enum) Enum() []interface{} {
	return W.WEnum()
}

// _github_com_swaggest_jsonschema_go_Exposer is an interface wrapper for Exposer type
type _github_com_swaggest_jsonschema_go_Exposer struct {
	IValue      interface{}
	WJSONSchema func() (jsonschema.Schema, error)
}

func (W _github_com_swaggest_jsonschema_go_Exposer) JSONSchema() (jsonschema.Schema, error) {
	return W.WJSONSchema()
}

// _github_com_swaggest_jsonschema_go_IfExposer is an interface wrapper for IfExposer type
type _github_com_swaggest_jsonschema_go_IfExposer struct {
	IValue        interface{}
	WJSONSchemaIf func() interface{}
}

func (W _github_com_swaggest_jsonschema_go_IfExposer) JSONSchemaIf() interface{} {
	return W.WJSONSchemaIf()
}

// _github_com_swaggest_jsonschema_go_IgnoreTypeName is an interface wrapper for IgnoreTypeName type
type _github_com_swaggest_jsonschema_go_IgnoreTypeName struct {
	IValue          interface{}
	WIgnoreTypeName func()
}

func (W _github_com_swaggest_jsonschema_go_IgnoreTypeName) IgnoreTypeName() {
	W.WIgnoreTypeName()
}

// _github_com_swaggest_jsonschema_go_NamedEnum is an interface wrapper for NamedEnum type
type _github_com_swaggest_jsonschema_go_NamedEnum struct {
	IValue     interface{}
	WNamedEnum func() ([]interface{}, []string)
}

func (W _github_com_swaggest_jsonschema_go_NamedEnum) NamedEnum() ([]interface{}, []string) {
	return W.WNamedEnum()
}

// _github_com_swaggest_jsonschema_go_NotExposer is an interface wrapper for NotExposer type
type _github_com_swaggest_jsonschema_go_NotExposer struct {
	IValue         interface{}
	WJSONSchemaNot func() interface{}
}

func (W _github_com_swaggest_jsonschema_go_NotExposer) JSONSchemaNot() interface{} {
	return W.WJSONSchemaNot()
}

// _github_com_swaggest_jsonschema_go_OneOfExposer is an interface wrapper for OneOfExposer type
type _github_com_swaggest_jsonschema_go_OneOfExposer struct {
	IValue           interface{}
	WJSONSchemaOneOf func() []interface{}
}

func (W _github_com_swaggest_jsonschema_go_OneOfExposer) JSONSchemaOneOf() []interface{} {
	return W.WJSONSchemaOneOf()
}

// _github_com_swaggest_jsonschema_go_Preparer is an interface wrapper for Preparer type
type _github_com_swaggest_jsonschema_go_Preparer struct {
	IValue             interface{}
	WPrepareJSONSchema func(schema *jsonschema.Schema) error
}

func (W _github_com_swaggest_jsonschema_go_Preparer) PrepareJSONSchema(schema *jsonschema.Schema) error {
	return W.WPrepareJSONSchema(schema)
}

// _github_com_swaggest_jsonschema_go_RawExposer is an interface wrapper for RawExposer type
type _github_com_swaggest_jsonschema_go_RawExposer struct {
	IValue           interface{}
	WJSONSchemaBytes func() ([]byte, error)
}

func (W _github_com_swaggest_jsonschema_go_RawExposer) JSONSchemaBytes() ([]byte, error) {
	return W.WJSONSchemaBytes()
}

// _github_com_swaggest_jsonschema_go_SchemaInliner is an interface wrapper for SchemaInliner type
type _github_com_swaggest_jsonschema_go_SchemaInliner struct {
	IValue            interface{}
	WInlineJSONSchema func()
}

func (W _github_com_swaggest_jsonschema_go_SchemaInliner) InlineJSONSchema() {
	W.WInlineJSONSchema()
}

// _github_com_swaggest_jsonschema_go_ThenExposer is an interface wrapper for ThenExposer type
type _github_com_swaggest_jsonschema_go_ThenExposer struct {
	IValue          interface{}
	WJSONSchemaThen func() interface{}
}

func (W _github_com_swaggest_jsonschema_go_ThenExposer) JSONSchemaThen() interface{} {
	return W.WJSONSchemaThen()
}

// _github_com_swaggest_jsonschema_go_Titled is an interface wrapper for Titled type
type _github_com_swaggest_jsonschema_go_Titled struct {
	IValue interface{}
	WTitle func() string
}

func (W _github_com_swaggest_jsonschema_go_Titled) Title() string {
	return W.WTitle()
}

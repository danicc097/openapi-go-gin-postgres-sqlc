openapi: 3.0.2
info:
  description:
    "This is a sample server Petstore server. For this sample, you can\
    \ use the api key `special-key` to test the authorization filters."
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI Petstore
  version: 2.0.0
servers:
  - url: http://localhost:8090/v2
tags:
  - description: Everything about your Pets
    name: pet
  - description: Access to Petstore orders
    name: store
  - description: Operations about user
    name: user
paths:
  /ping:
    get:
      description: ""
      summary: Ping pongs
      operationId: ping
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /newapi/endpoint:
    post:
      description: ""
      operationId: newApiEndpoint
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
      summary: A new endpoint added to the spec
      tags:
        - newapi
  /pet:
    post:
      description: ""
      operationId: addPet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Add a new pet to the store
      tags:
        - pet
    put:
      description: ""
      operationId: updatePet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Update an existing pet
      tags:
        - pet
  /pet/{petId}:
    delete:
      description: ""
      operationId: deletePet
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Pet id to delete
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Deletes a pet
      tags:
        - pet
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        description: Created user object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
          description: successful operation
      security:
        - api_key: []
      summary: creates a new user
      tags:
        - user
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/User"
            type: array
      description: List of user object
      required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
        multipart/related:
          encoding:
            jsonData:
              contentType: application/json
              style: form
            binaryDataN2Information:
              contentType: application/vnd.3gpp.ngap
              headers:
                Content-Id:
                  explode: false
                  schema:
                    type: string
                  style: simple
              style: form
          schema:
            $ref: "#/components/schemas/updatePet_request"
      description: Pet object that needs to be added to the store
      required: true
  schemas:
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
    Category:
      description: A category for a pet
      x-go-custom-tag: acustomtag:"category"
      example:
        name: name
        id: 6
      properties:
        id:
          format: int64
          type: integer
        name:
          pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
          type: string
      title: Pet category
      type: object
      xml:
        name: Category
    UpdateUserRequest:
      description: represents User data to update
      example:
        password: password
        email: email
        username: username
        firstName: John
        lastName: Doe
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      title: a User
      type: object
    CreateUserRequest:
      description: represents a new User
      example:
        password: password
        email: email
        username: username
      properties:
        username:
          type: string
          x-go-custom-tag: binding:"required"
        email:
          type: string
          x-go-custom-tag: binding:"required"
        password:
          type: string
          x-go-custom-tag: binding:"required"
      title: a User
      type: object
    CreateUserResponse:
      description: represents the response to a User creation
      example: id
      properties:
        # go with jwt for now
        access_token:
          type: string
        user_id:
          format: int64
          type: integer
      type: object
    User:
      description: A User who is purchasing from the pet store
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          description: User Status
          format: int32
          type: integer
      title: a User
      type: object
      xml:
        name: User
    Tag:
      description: A tag for a pet
      example:
        name: name
        id: 1
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      title: Pet Tag
      type: object
      xml:
        name: Tag
    Pet:
      description: A pet for sale in the pet store
      example:
        photoUrls:
          - photoUrls
          - photoUrls
        name: doggie
        id: 0
        category:
          name: name
          id: 6
        tags:
          - name: name
            id: 1
          - name: name
            id: 1
        status: available
      properties:
        id:
          format: int64
          type: integer
          x-go-custom-tag: acustomtag:"id"
        category:
          $ref: "#/components/schemas/Category"
        name:
          example: doggie
          type: string
          x-go-custom-tag: acustomtag:"name"
        photoUrls:
          items:
            type: string
          type: array
          x-go-custom-tag: acustomtag:"photo_urls"
          xml:
            name: photoUrl
            wrapped: true
        tags:
          items:
            $ref: "#/components/schemas/Tag"
          x-go-custom-tag: acustomtag:"tags"
          type: array
          xml:
            name: tag
            wrapped: true
        status:
          deprecated: true
          description: pet status in the store
          x-go-custom-tag: acustomtag:"status"
          enum:
            - available
            - pending
            - sold
          type: string
      required:
        - name
        - photoUrls
      title: a Pet
      type: object
      xml:
        name: Pet
    ApiResponse:
      description: Describes the result of uploading an image resource
      example:
        code: 0
        type: type
        message: message
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      title: An uploaded response
      type: object
    Special:
      description: Describes the result of uploading an image resource
      properties:
        self:
          format: int32
          type: integer
        private:
          type: string
        super:
          type: string
        "123Number":
          type: string
        array[test]:
          type: string
        "":
          type: string
      title: An uploaded response
      type: object
    Dog:
      allOf:
        - $ref: "#/components/schemas/Animal"
        - $ref: "#/components/schemas/Dog_allOf"
    Cat:
      allOf:
        - $ref: "#/components/schemas/Animal"
        - $ref: "#/components/schemas/Address"
        - $ref: "#/components/schemas/Cat_allOf"
    Address:
      additionalProperties:
        type: integer
      type: object
    Animal:
      discriminator:
        propertyName: className
      properties:
        className:
          type: string
        color:
          default: red
          type: string
      required:
        - className
      type: object
    allof_tag_api_response:
      allOf:
        - $ref: "#/components/schemas/Tag"
        - $ref: "#/components/schemas/ApiResponse"
    AnyOfPig:
      anyOf:
        - $ref: "#/components/schemas/BasquePig"
        - $ref: "#/components/schemas/DanishPig"
    Pig:
      discriminator:
        propertyName: className
      oneOf:
        - $ref: "#/components/schemas/BasquePig"
        - $ref: "#/components/schemas/DanishPig"
    BasquePig:
      properties:
        className:
          type: string
        color:
          type: string
      required:
        - className
        - color
      type: object
    DanishPig:
      properties:
        className:
          type: string
        size:
          type: integer
      required:
        - className
        - size
      type: object
    NestedOneOf:
      properties:
        size:
          type: integer
        nestedPig:
          $ref: "#/components/schemas/Pig"
      type: object
    updatePet_request:
      properties:
        jsonData:
          $ref: "#/components/schemas/Pet"
        binaryDataN2Information:
          format: binary
          type: string
      type: object
    updatePetWithForm_request:
      properties:
        name:
          description: Updated name of the pet
          type: string
        status:
          description: Updated status of the pet
          type: string
      type: object
    uploadFile_request:
      properties:
        additionalMetadata:
          description: Additional data to pass to server
          type: string
        file:
          description: file to upload
          format: binary
          type: string
      type: object
    Dog_allOf:
      properties:
        breed:
          type: string
      type: object
    Cat_allOf:
      properties:
        declawed:
          type: boolean
      type: object
    # à la FastAPI
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            type: string
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
  securitySchemes:
    petstore_auth:
      flows:
        implicit:
          authorizationUrl: http://localhost:8090/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey

/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import type { CreateProjectBoardRequest } from '../model/createProjectBoardRequest'
import type { DbProject } from '../model/dbProject'
import type { GetProjectWorkitems200 } from '../model/getProjectWorkitems200'
import type { GetProjectWorkitemsParams } from '../model/getProjectWorkitemsParams'
import type { ProjectBoard } from '../model/projectBoard'
import type { ProjectConfig } from '../model/projectConfig'
import { customInstance } from '../../api/mutator'

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never

/**
 * @summary creates initial data (teams, tags...) for a new project
 */
export const initializeProject = (
  projectName: 'demo' | 'demo_two',
  createProjectBoardRequest: CreateProjectBoardRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/project/${projectName}/initialize`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createProjectBoardRequest,
    },
    options,
  )
}
/**
 * @summary returns board data for a project
 */
export const getProject = (projectName: 'demo' | 'demo_two', options?: SecondParameter<typeof customInstance>) => {
  return customInstance<DbProject>({ url: `/project/${projectName}/`, method: 'GET' }, options)
}
/**
 * @summary returns the project configuration
 */
export const getProjectConfig = (
  projectName: 'demo' | 'demo_two',
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ProjectConfig>({ url: `/project/${projectName}/config`, method: 'GET' }, options)
}
/**
 * @summary updates the project configuration
 */
export const updateProjectConfig = (
  projectName: 'demo' | 'demo_two',
  projectConfig: ProjectConfig,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/project/${projectName}/config`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: projectConfig,
    },
    options,
  )
}
/**
 * @summary returns board data for a project
 */
export const getProjectBoard = (projectName: 'demo' | 'demo_two', options?: SecondParameter<typeof customInstance>) => {
  return customInstance<ProjectBoard>({ url: `/project/${projectName}/board`, method: 'GET' }, options)
}
/**
 * @summary returns workitems for a project
 */
export const getProjectWorkitems = (
  projectName: 'demo' | 'demo_two',
  params?: GetProjectWorkitemsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetProjectWorkitems200>(
    { url: `/project/${projectName}/workitems`, method: 'GET', params },
    options,
  )
}
export type InitializeProjectResult = NonNullable<Awaited<ReturnType<typeof initializeProject>>>
export type GetProjectResult = NonNullable<Awaited<ReturnType<typeof getProject>>>
export type GetProjectConfigResult = NonNullable<Awaited<ReturnType<typeof getProjectConfig>>>
export type UpdateProjectConfigResult = NonNullable<Awaited<ReturnType<typeof updateProjectConfig>>>
export type GetProjectBoardResult = NonNullable<Awaited<ReturnType<typeof getProjectBoard>>>
export type GetProjectWorkitemsResult = NonNullable<Awaited<ReturnType<typeof getProjectWorkitems>>>

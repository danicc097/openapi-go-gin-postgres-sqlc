FROM node:18.5.0-alpine as nodebuild

WORKDIR /frontend

RUN npm i -g pnpm@6.32

ENV PATH /frontend/node_modules/.bin:$PATH
ENV JQ_VERSION=1.6

RUN wget --no-check-certificate https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64 -O /tmp/jq-linux64
RUN cp /tmp/jq-linux64 /usr/bin/jq
RUN chmod +x /usr/bin/jq
RUN apk add --no-cache bash git openssh

COPY ../frontend/pnpm-lock.yaml /frontend

# https://pnpm.io/cli/fetch
RUN --mount=type=cache,target=/root/.pnpm-store \
  pnpm fetch
COPY ../frontend/. /frontend
# ensure config has all k-v as "<KEY>": "$<KEY>"
RUN jq \
  'to_entries | map_values({ (.key) : ("$" + .key) }) | reduce .[] as $item ({}; . + $item)' \
  ./config.json > ./config.tmp.json && mv ./config.tmp.json ./config.json
RUN --mount=type=cache,target=/root/.pnpm-store \
  pnpm install -r --prefer-offline --unsafe-perm

#RUN pnpm run test:no-watch
RUN pnpm run build --unsafe-perm

FROM nginx:1-alpine
ENV JSFOLDER=/usr/share/nginx/html/assets/*.js
RUN apk add --no-cache bash moreutils
COPY --from=nodebuild /frontend/build /usr/share/nginx/html

COPY ../frontend/nginx/nginx.conf /etc/nginx/conf.d/default.conf
COPY ../frontend/nginx/entrypoint.sh /docker-entrypoint.d/
RUN chmod +x /docker-entrypoint.d/entrypoint.sh

EXPOSE 80

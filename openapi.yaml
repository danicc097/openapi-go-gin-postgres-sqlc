#
# Vendor extensions
# -----------------
#
# Schema enums:
#   - `x-db-enum` refers to a Postgres enum type and syncs its values.
# Path operations:
#   - `x-required-scopes` is an array of required scope keys from scopes.json
#   - `x-required-role` is a required role name from role.json
#
x-uuid-pattern: &uuid-pattern ^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}
# merge so that openapi validator middleware does a header precheck before going deeper
x-path-security: &path-security
  security:
    - bearer_auth: []
    - api_key: []
#######################################
openapi: 3.0.3
info:
  description: This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI Petstore
  version: 2.0.0
servers:
  - url: https://localhost:8090/v2
  - url: https://openapi.prod.localhost/api/v2
  # for tests validation middleware to work on random port.
  - url: /v2
tags:
  - description: Operations about user
    name: user
paths:
  /ping:
    get:
      description: ""
      summary: Ping pongs
      operationId: Ping
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /openapi.yaml:
    get:
      summary: Returns this very OpenAPI spec.
      operationId: OpenapiYamlGet
      responses:
        "200":
          description: OpenAPI YAML file.
          content:
            text/yaml:
              schema:
                type: string
                format: binary
  /admin/ping:
    get:
      <<: *path-security
      summary: Ping pongs
      operationId: AdminPing
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      tags:
        - admin
      x-required-scopes:
        - test-scope
      x-required-role: admin
  /user/me:
    get:
      <<: *path-security
      summary: returns the logged in user
      operationId: GetCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentUserRes'
          description: successful operation
      tags:
        - user
  /user/{id}:
    delete:
      <<: *path-security
      summary: deletes the user by id
      operationId: DeleteUser
      parameters:
        - description: user_id that needs to be deleted
          explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        "404":
          description: User not found
      tags:
        - user
      x-required-scopes:
        - test-scope
        - users:write
      x-required-role: admin
    put:
      <<: *path-security
      summary: updates the user by id
      operationId: UpdateUser
      parameters:
        - description: user_id that needs to be updated
          explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
            pattern: *uuid-pattern
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        description: Updated user object
        required: true
      responses:
        "404":
          description: User not found
      tags:
        - user
      x-required-role: user
components:
  schemas:
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    UpdateUserRequest:
      description: represents User data to update
      example:
        role: manager
        first_name: Jane
        last_name: Doe
      properties:
        role:
          $ref: '#/components/schemas/Role'
        first_name:
          type: string
          pattern: ^[ a-zA-Z0-9_-]+$
        last_name:
          type: string
          pattern: ^[ a-zA-Z0-9_-]+$
      title: a User
      type: object
    # TODO bookstack style ABAC
    # allow per user global list of scopes in token
    # so we can use openapi scopes security as well. Then internally
    # check if other conditions met via middleware, etc.
    # e.g. invoicing/billing scopes should be extremely specific so RBAC is
    # not an option
    # used as x-required-role: ?? (rank-based, at most one)
    Scope:
      description: Scope automatically generated from scopes.json keys
      type: string
      enum:
        - test-scope
        - users:read
        - users:write
        - scopes:write
        - team-settings:write
        - project-settings:write
        - work-item:review
    Role:
      description: Role automatically generated from roles.json keys
      type: string
      enum:
        - guest
        - user
        - advancedUser
        - manager
        - admin
        - superAdmin
    TaskRole:
      title: Task role
      description: Role in task for a member.
      type: string
      x-db-enum: task_role
      enum:
        - preparer
        - reviewer
    Organization:
      title: Organization
      description: Organization a user belongs to.
      type: string
      # x-db-enum: org
      # enum: ["team 1", "team 2", "team 3"]
    # TODO generate adapter to convert db model -> this
    # based on matches of x-db-model: <...>'s json tags (both sqlc and xo generate them)
    # against parsed property names (kin) - when its a response object only (kin filter)
    # if request: adapter to convert this -> db model.
    # we must specify x-db-model for adapters to be generated.
    # x-db-model is specified in req or res objects only (kin filter)
    # ^ all this is part of postgen
    GetCurrentUserRes:
      description: represents a user
      properties:
        user_id:
          format: int64
          type: integer
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        orgs:
          description: are organizations a user belongs to
          items:
            $ref: '#/components/schemas/Organization'
      title: a User
      type: object
      xml:
        name: User
    # Ã  la FastAPI
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            type: string
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
  examples:
    User:
      value:
        username: username
        email: email@email.com
        password: password
  securitySchemes:
    api_key:
      in: header
      name: x-api-key
      type: apiKey
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT

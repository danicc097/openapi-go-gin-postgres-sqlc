# NOTE: Prefer automatic schema validation from dedicated tools instead, but as an example:
# x-go-custom-tag: binding:"required[,customValidator]" [key:val ]
# # Special case for ``format: date-time`` fields
# # form data only:
# x-go-custom-tag: time_format:"2006-01-02"
# # the rest require custom unmarshalling if time is not RFC3339:
# # see https://github.com/gin-gonic/gin/issues/1193
# # there are some quirks to take into account as well:
# # see https://segmentfault.com/a/1190000022264001
# x-go-custom-tag: binding:"required"
# ```
# NOTE: Any custom field with an `x-*` name pattern in the OpenAPI spec will be available in
# `vendorExtensions` in openapi-generator's mustache templates.

openapi: 3.0.2
info:
  description:
    "This is a sample server Petstore server. For this sample, you can\
    \ use the api key `special-key` to test the authorization filters."
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI Petstore
  version: 2.0.0
servers:
  - url: https://localhost:8090/v2
  - url: https://openapi.prod.localhost/api/v2
  # for tests validation middleware to work on random port.
  - url: /v2
tags:
  - description: Everything about your Pets
    name: pet
  - description: Access to Petstore orders
    name: store
  - description: Operations about user
    name: user
paths:
  /ping:
    get:
      description: ""
      summary: Ping pongs
      operationId: ping
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /openapi.yaml:
    get:
      summary: Returns this very OpenAPI spec.
      responses:
        "200":
          description: OpenAPI YAML file.
          content:
            text/yaml:
              schema:
                type: string
                format: binary
  /admin/ping:
    get:
      description: ""
      summary: Ping pongs
      operationId: adminPing
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      tags:
        - admin
  /pet:
    post:
      description: ""
      operationId: addPet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Add a new pet to the store
      tags:
        - pet
    put:
      description: ""
      operationId: updatePet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Update an existing pet
      tags:
        - pet
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - deprecated: true
          description: Status values that need to be considered for filter
          explode: false
          in: query
          name: status
          required: true
          schema:
            items:
              default: available
              enum:
                - available
                - pending
                - sold
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Pet"
                type: array
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Pet"
                type: array
          description: successful operation
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - read:pets
      summary: Finds Pets by status
      tags:
        - pet
  /pet/findByTags:
    get:
      deprecated: true
      description:
        "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: findPetsByTags
      parameters:
        - description: Tags to filter by
          explode: false
          in: query
          name: tags
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Pet"
                type: array
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Pet"
                type: array
          description: successful operation
        "400":
          description: Invalid tag value
      security:
        - petstore_auth:
            - read:pets
      summary: Finds Pets by tags
      tags:
        - pet
  /pet/{petId}:
    delete:
      description: ""
      operationId: deletePet
      parameters:
        - explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Pet id to delete
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Deletes a pet
      tags:
        - pet
    get:
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - description: ID of pet to return
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
      summary: Find pet by ID
      tags:
        - pet
    post:
      description: ""
      operationId: updatePetWithForm
      parameters:
        - description: ID of pet that needs to be updated
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/updatePetWithForm_request"
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Updates a pet in the store with form data
      tags:
        - pet
  /pet/{petId}/uploadImage:
    post:
      description: ""
      operationId: uploadFile
      parameters:
        - description: ID of pet to update
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/uploadFile_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
          description: successful operation
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: uploads an image
      tags:
        - pet
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
      security:
        - api_key: []
      summary: Returns pet inventories by status
      tags:
        - store
  /store/order:
    post:
      description: ""
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        description: order placed for purchasing the pet
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: successful operation
        "400":
          description: Invalid Order
      summary: Place an order for a pet
      tags:
        - store
  /store/order/{orderId}:
    delete:
      description:
        For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - description: ID of the order that needs to be deleted
          explode: false
          in: path
          name: orderId
          required: true
          schema:
            type: string
          style: simple
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Delete purchase order by ID
      tags:
        - store
    get:
      description:
        For valid response try integer IDs with value <= 5 or > 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - description: ID of pet that needs to be fetched
          explode: false
          in: path
          name: orderId
          required: true
          schema:
            format: int64
            maximum: 5
            minimum: 1
            type: integer
          style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Find purchase order by ID
      tags:
        - store
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
              # waiting for https://github.com/getkin/kin-openapi/issues/588 merging
            examples:
              BadUser:
                $ref: "#/components/examples/BadUser"
              GoodUser:
                $ref: "#/components/examples/GoodUser"
        description: Created user object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
          description: successful operation
      # security:
      #   - api_key: []
      summary: creates a new user
      tags:
        - user
  /user/createWithArray:
    post:
      description: ""
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      summary: Creates list of users with given input array
      tags:
        - user
  /user/login:
    get:
      description: ""
      operationId: loginUser
      parameters:
        - description: The user name for login
          explode: true
          in: query
          name: username
          required: true
          schema:
            pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
            type: string
          style: form
        - description: The password for login in clear text
          explode: true
          in: query
          name: password
          required: true
          schema:
            type: string
          style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            Set-Cookie:
              description:
                Cookie authentication key for use with the `api_key` apiKey
                authentication.
              explode: false
              schema:
                example: AUTH_KEY=abcde12345; Path=/; HttpOnly
                type: string
              style: simple
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
        - user
  /user/logout:
    get:
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      summary: Logs out current logged in user session
      tags:
        - user
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - description: The name that needs to be deleted
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
        - api_key: []
      summary: Delete user
      tags:
        - user
    get:
      description: ""
      operationId: getUserByName
      parameters:
        - description: The name that needs to be fetched. Use user1 for testing.
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
        - user
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - description: name that need to be deleted
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      security:
        - api_key: []
      summary: Updated user
      tags:
        - user
  /fake/data_file:
    get:
      description: ""
      operationId: fake_data_file
      parameters:
        - description: dummy required parameter
          explode: false
          in: header
          name: dummy
          required: true
          schema:
            type: string
          style: simple
        - description: header data file
          explode: false
          in: header
          name: data_file
          required: false
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: successful operation
      summary: test data_file to ensure it's escaped correctly
      tags:
        - fake
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: "#/components/schemas/User"
            type: array
      description: List of user object
      required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
        multipart/related:
          encoding:
            jsonData:
              contentType: application/json
              style: form
            binaryDataN2Information:
              contentType: application/vnd.3gpp.ngap
              headers:
                Content-Id:
                  explode: false
                  schema:
                    type: string
                  style: simple
              style: form
          schema:
            $ref: "#/components/schemas/updatePet_request"
      description: Pet object that needs to be added to the store
      required: true
  schemas:
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
    Order:
      description: An order for a pets from the pet store
      example:
        petId: 6
        quantity: 1
        id: 0
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: false
        status: placed
      properties:
        id:
          format: int64
          type: integer
        petId:
          format: int64
          type: integer
        quantity:
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          type: string
        complete:
          default: false
          type: boolean
      title: Pet Order
      type: object
      xml:
        name: Order
    Category:
      description: A category for a pet
      x-go-custom-tag: acustomtag:"category"
      x-custom-comment: x-custom-comment:"test"
      example:
        name: name
        id: 6
      properties:
        id:
          format: int64
          type: integer
        name:
          pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
          type: string
      title: Pet category
      type: object
      xml:
        name: Category
    UpdateUserRequest:
      description: represents User data to update
      example:
        password: password
        email: email
        username: username
        firstName: John
        lastName: Doe
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      title: a User
      type: object
    CreateUserRequest:
      description: represents a new User
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          pattern: "^[ a-zA-Z0-9_-]+$"
          minLength: 3
        email:
          type: string
          pattern: "^[A-Za-z0-9+_.-]+@(.+)$"
        password:
          type: string
          minLength: 7
      title: a User
      type: object
    CreateUserResponse:
      description: represents the response to a User creation
      example: id
      properties:
        # go with jwt for now
        access_token:
          type: string
        user_id:
          format: int64
          type: integer
      type: object
    User:
      description: A User who is purchasing from the pet store
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        role:
          description: User role
          enum:
            - user
            - manager
            - admin
          type: string
      title: a User
      type: object
      xml:
        name: User
    Tag:
      description: A tag for a pet
      example:
        name: name
        id: 1
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      title: Pet Tag
      type: object
      xml:
        name: Tag
    Pet:
      description: A pet for sale in the pet store
      example:
        photoUrls:
          - photoUrls
          - photoUrls
        name: doggie
        id: 0
        category:
          name: name
          id: 6
        tags:
          - name: name
            id: 1
          - name: name
            id: 1
        status: available
      properties:
        id:
          format: int64
          type: integer
          x-go-custom-tag: acustomtag:"id"
        category:
          $ref: "#/components/schemas/Category"
        name:
          example: doggie
          type: string
          x-go-custom-tag: acustomtag:"name"
        photoUrls:
          items:
            type: string
          type: array
          x-go-custom-tag: acustomtag:"photo_urls"
          xml:
            name: photoUrl
            wrapped: true
        tags:
          items:
            $ref: "#/components/schemas/Tag"
          x-go-custom-tag: acustomtag:"tags"
          type: array
          xml:
            name: tag
            wrapped: true
        status:
          deprecated: true
          description: pet status in the store
          x-custom-comment: "This is a custom comment."
          x-go-custom-tag: acustomtag:"status"
          enum:
            - available
            - pending
            - sold
          type: string
      required:
        - name
        - photoUrls
      title: a Pet
      type: object
      xml:
        name: Pet
    ApiResponse:
      description: Describes the result of uploading an image resource
      example:
        code: 0
        type: type
        message: message
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      title: An uploaded response
      type: object
    Special:
      description: Describes the result of uploading an image resource
      properties:
        self:
          format: int32
          type: integer
        private:
          type: string
        super:
          type: string
        "123Number":
          type: string
        array[test]:
          type: string
        "":
          type: string
      title: An uploaded response
      type: object
    Dog:
      allOf:
        - $ref: "#/components/schemas/Animal"
        - $ref: "#/components/schemas/Dog_allOf"
    Cat:
      allOf:
        - $ref: "#/components/schemas/Animal"
        - $ref: "#/components/schemas/Address"
        - $ref: "#/components/schemas/Cat_allOf"
    Address:
      additionalProperties:
        type: integer
      type: object
    Animal:
      discriminator:
        propertyName: className
      properties:
        className:
          type: string
        color:
          default: red
          type: string
      required:
        - className
      type: object
    allof_tag_api_response:
      allOf:
        - $ref: "#/components/schemas/Tag"
        - $ref: "#/components/schemas/ApiResponse"
    AnyOfPig:
      anyOf:
        - $ref: "#/components/schemas/BasquePig"
        - $ref: "#/components/schemas/DanishPig"
    Pig:
      discriminator:
        propertyName: className
      oneOf:
        - $ref: "#/components/schemas/BasquePig"
        - $ref: "#/components/schemas/DanishPig"
    BasquePig:
      properties:
        className:
          type: string
        color:
          type: string
      required:
        - className
        - color
      type: object
    DanishPig:
      properties:
        className:
          type: string
        size:
          type: integer
      required:
        - className
        - size
      type: object
    NestedOneOf:
      properties:
        size:
          type: integer
        nestedPig:
          $ref: "#/components/schemas/Pig"
      type: object
    updatePet_request:
      properties:
        jsonData:
          $ref: "#/components/schemas/Pet"
        binaryDataN2Information:
          format: binary
          type: string
      type: object
    updatePetWithForm_request:
      properties:
        name:
          description: Updated name of the pet
          type: string
        status:
          description: Updated status of the pet
          type: string
      type: object
    uploadFile_request:
      properties:
        additionalMetadata:
          description: Additional data to pass to server
          type: string
        file:
          description: file to upload
          format: binary
          type: string
      type: object
    Dog_allOf:
      properties:
        breed:
          type: string
      type: object
    Cat_allOf:
      properties:
        declawed:
          type: boolean
      type: object
    # à la FastAPI
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            type: string
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
  examples:
    BadUser:
      value:
        username: "]bad["
        email: bad
        password: short
    GoodUser:
      value:
        username: username
        email: email@email.com
        password: password
  securitySchemes:
    petstore_auth:
      flows:
        implicit:
          authorizationUrl: https://localhost:8090/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey

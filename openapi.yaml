#
# Vendor extensions
# -----------------
#
# Component schemas:
#   - `x-db-enum` generates and syncs a Postgres enum type.
#   - `x-postgen-struct` generates and creates/replaces a component schema from a struct,
#      which can be tagged with OpenAPI fields.
#      Possible structs to generate from are listed in the postgen package.
# Path operations:
#   - `x-required-scopes` is an array of required scope keys from scopes.json
#   - `x-required-role` is a required role name from role.json
#
#######################################
openapi: 3.0.3
info:
  description: openapi-go-gin-postgres-sqlc
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI openapi-go-gin-postgres-sqlc
  version: 2.0.0
servers:
  - url: https://localhost:8090/v2
  - url: https://openapi.prod.localhost/api/v2
  # for tests validation middleware to work on random port.
  - url: /v2
tags:
  - description: Operations about user
    name: user
paths:
  /auth/myprovider/callback:
    get:
      operationId: MyProviderCallback
      responses:
        "200":
          description: callback for MyProvider auth server
  /auth/myprovider/login:
    get:
      operationId: MyProviderLogin
      responses:
        "302":
          description: redirect to MyProvider auth server login
  /events:
    get:
      operationId: Events
      responses:
        "200":
          description: events
          content:
            text/event-stream:
              schema:
                type: string
  /ping:
    get:
      description: ""
      summary: Ping pongs
      operationId: Ping
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /openapi.yaml:
    get:
      summary: Returns this very OpenAPI spec.
      operationId: OpenapiYamlGet
      responses:
        "200":
          description: OpenAPI YAML file.
          content:
            application/x-yaml:
              schema:
                type: string
                format: binary
  /admin/ping:
    get:
      security:
        - bearer_auth: []
        - api_key: []
      summary: Ping pongs
      operationId: AdminPing
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      tags:
        - admin
      x-required-scopes:
        - test-scope
      x-required-role: admin
  /user/me:
    get:
      security:
        - bearer_auth: []
        - api_key: []
      summary: returns the logged in user
      operationId: GetCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: ok
      tags:
        - user
  /user/{id}/authorization:
    patch:
      security:
        - bearer_auth: []
        - api_key: []
      summary: updates user role and scopes by id
      operationId: UpdateUserAuthorization
      parameters:
        - $ref: '#/components/parameters/uuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserAuthRequest'
        description: Updated user object
        required: true
      responses:
        "204":
          description: User auth updated successfully.
      tags:
        - user
      x-required-role: user
  /user/{id}:
    delete:
      security:
        - bearer_auth: []
        - api_key: []
      summary: deletes the user by id
      operationId: DeleteUser
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        "404":
          description: User not found
      tags:
        - user
      x-required-scopes:
        - test-scope
        - users:write
      x-required-role: admin
    patch:
      security:
        - bearer_auth: []
        - api_key: []
      summary: updates the user by id
      operationId: UpdateUser
      parameters:
        - $ref: '#/components/parameters/uuid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        description: Updated user object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: ok
      tags:
        - user
      x-required-role: user
  /project/{id}/initialize:
    post:
      security:
        - bearer_auth: []
        - api_key: []
      summary: creates initial data (teams, work item types, tags...) for a new project
      operationId: InitializeProject
      parameters:
        - $ref: '#/components/parameters/serial'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitializeProjectRequest'
        required: true
      responses:
        "204":
          description: Project successfully initialized.
      tags:
        - project
      x-required-role: admin
  /project/{id}/board:
    get:
      security:
        - bearer_auth: []
        - api_key: []
      summary: returns board data for a project
      operationId: GetProjectBoard
      parameters:
        - $ref: '#/components/parameters/serial'
      responses:
        "200":
          description: Project successfully initialized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectBoardResponse'
      tags:
        - project
components:
  parameters:
    uuid:
      description: UUID identifier of entity that needs to be updated
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
      example: 123e4567-e89b-12d3-a456-426614174000
      style: simple
    serial:
      description: integer identifier that needs to be updated
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: integer
      example: 41131
      style: simple
  schemas:
    InitializeProjectRequest:
      properties:
        activities:
          items:
            $ref: '#/components/schemas/ReposActivityCreateParams'
          nullable: true
          type: array
        kanbanSteps:
          items:
            $ref: '#/components/schemas/ReposKanbanStepCreateParams'
          nullable: true
          type: array
        projectID:
          type: integer
        teams:
          items:
            $ref: '#/components/schemas/ReposTeamCreateParams'
          nullable: true
          type: array
        workItemTags:
          items:
            $ref: '#/components/schemas/ReposWorkItemTagCreateParams'
          nullable: true
          type: array
        workItemTypes:
          items:
            $ref: '#/components/schemas/ReposWorkItemTypeCreateParams'
          nullable: true
          type: array
      type: object
      x-postgen-struct: RestProjectBoardCreateRequest
    ProjectBoardResponse:
      properties:
        activities:
          items:
            $ref: '#/components/schemas/DbActivityPublic'
          nullable: true
          type: array
        kanbanSteps:
          items:
            $ref: '#/components/schemas/DbKanbanStepPublic'
          nullable: true
          type: array
        project:
          $ref: '#/components/schemas/DbProjectPublic'
        teams:
          items:
            $ref: '#/components/schemas/DbTeamPublic'
          nullable: true
          type: array
        workItemTags:
          items:
            $ref: '#/components/schemas/DbWorkItemTagPublic'
          nullable: true
          type: array
        workItemTypes:
          items:
            $ref: '#/components/schemas/DbWorkItemTypePublic'
          nullable: true
          type: array
      type: object
      x-postgen-struct: RestProjectBoardResponse
    UserResponse:
      properties:
        apiKey:
          $ref: '#/components/schemas/DbUserAPIKeyPublic'
        createdAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          nullable: true
          type: string
        email:
          type: string
        firstName:
          nullable: true
          type: string
        fullName:
          nullable: true
          type: string
        hasGlobalNotifications:
          type: boolean
        hasPersonalNotifications:
          type: boolean
        lastName:
          nullable: true
          type: string
        role:
          $ref: '#/components/schemas/Role'
        scopes:
          $ref: '#/components/schemas/Scopes'
        teams:
          items:
            $ref: '#/components/schemas/DbTeamPublic'
          nullable: true
          type: array
        userID:
          $ref: '#/components/schemas/UuidUUID'
        username:
          type: string
      required:
        - role
        - scopes
        - userID
        - username
        - email
        - firstName
        - lastName
        - fullName
        - hasPersonalNotifications
        - hasGlobalNotifications
        - createdAt
        - deletedAt
      type: object
      x-postgen-struct: RestUserResponse
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    Topics:
      description: string identifiers for SSE event listeners.
      type: string
      enum:
        - UserNotifications
        - ManagerNotifications
        - AdminNotifications
        - WorkItemMoved
        - WorkItemClosed
    # TODO bookstack style ABAC
    Scope: # Generated from scopes.json keys. DO NOT EDIT.
      type: string
      enum:
        - test-scope
        - users:read
        - users:write
        - scopes:write
        - team-settings:write
        - project-settings:write
        - work-item:review
    Scopes: # workaround for openapi-go gen
      type: array
      items:
        $ref: '#/components/schemas/Scope'
    Role: # Generated from roles.json keys. DO NOT EDIT.
      type: string
      enum:
        - guest
        - user
        - advancedUser
        - manager
        - admin
        - superAdmin
    NotificationType:
      title: Notification type
      description: User notification type.
      type: string
      x-db-enum: notification_type
      enum:
        - personal
        - global
    WorkItemRole:
      title: WorkItem role
      description: Role in work item for a member.
      type: string
      x-db-enum: work_item_role
      enum:
        - preparer
        - reviewer
    UpdateUserRequest:
      description: represents User data to update
      example:
        first_name: Jane
        last_name: Doe
      properties:
        first_name:
          description: originally from auth server but updatable
          type: string
          pattern: ^[ a-zA-Z0-9_-]+$
        last_name:
          description: originally from auth server but updatable
          type: string
          pattern: ^[ a-zA-Z0-9_-]+$
      type: object
    UpdateUserAuthRequest:
      description: represents User authorization data to update
      example:
        role: manager
        scopes:
          - test-scope
      properties:
        role:
          $ref: '#/components/schemas/Role'
        scopes:
          $ref: '#/components/schemas/Scopes'
      type: object
    # à la FastAPI
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            type: string
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
    PgtypeJSONB: # Generated from db package structs. DO NOT EDIT.
      type: object
    UuidUUID: # Generated from db package structs. DO NOT EDIT.
      type: string
    TeamPublic:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        metadata:
          $ref: '#/components/schemas/PgtypeJSONB'
        name:
          type: string
        projectID:
          type: integer
        teamID:
          type: integer
        updatedAt:
          format: date-time
          type: string
      required:
        - teamID
        - projectID
        - name
        - description
        - metadata
        - createdAt
        - updatedAt
      type: object
    TimeEntryPublic:
      properties:
        activityID:
          type: integer
        comment:
          type: string
        durationMinutes:
          nullable: true
          type: integer
        start:
          format: date-time
          type: string
        teamID:
          nullable: true
          type: integer
        timeEntryID:
          type: integer
        userID:
          $ref: '#/components/schemas/UuidUUID'
        workItemID:
          nullable: true
          type: integer
      type: object
    WorkItemCommentPublic:
      properties:
        createdAt:
          format: date-time
          type: string
        message:
          type: string
        updatedAt:
          format: date-time
          type: string
        userID:
          $ref: '#/components/schemas/UuidUUID'
        workItemCommentID:
          type: integer
        workItemID:
          type: integer
      type: object
    ModelsRole:
      type: string
    ModelsScope:
      type: string
    UserAPIKeyPublic:
      nullable: true
      properties:
        apiKey:
          type: string
        expiresOn:
          format: date-time
          type: string
        userID:
          $ref: '#/components/schemas/UuidUUID'
      required:
        - apiKey
        - expiresOn
        - userID
      type: object
    DbTeamPublic:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        name:
          type: string
        projectID:
          type: integer
        teamID:
          type: integer
        updatedAt:
          format: date-time
          type: string
      required:
        - teamID
        - projectID
        - name
        - description
        - createdAt
        - updatedAt
      type: object
    DbUserAPIKeyPublic:
      nullable: true
      properties:
        apiKey:
          type: string
        expiresOn:
          format: date-time
          type: string
        userID:
          $ref: '#/components/schemas/UuidUUID'
      required:
        - apiKey
        - expiresOn
        - userID
      type: object
    DbActivityPublic:
      properties:
        activityID:
          type: integer
        description:
          type: string
        isProductive:
          type: boolean
        name:
          type: string
        projectID:
          type: integer
      required:
        - activityID
        - projectID
        - name
        - description
        - isProductive
      type: object
    DbKanbanStepPublic:
      properties:
        color:
          type: string
        description:
          type: string
        kanbanStepID:
          type: integer
        name:
          type: string
        projectID:
          type: integer
        stepOrder:
          nullable: true
          type: integer
        timeTrackable:
          type: boolean
      required:
        - kanbanStepID
        - projectID
        - stepOrder
        - name
        - description
        - color
        - timeTrackable
      type: object
    DbProjectPublic:
      nullable: true
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        initialized:
          type: boolean
        name:
          type: string
        projectID:
          type: integer
        updatedAt:
          format: date-time
          type: string
      required:
        - projectID
        - name
        - description
        - initialized
        - createdAt
        - updatedAt
      type: object
    DbWorkItemTagPublic:
      properties:
        color:
          type: string
        description:
          type: string
        name:
          type: string
        projectID:
          type: integer
        workItemTagID:
          type: integer
      required:
        - workItemTagID
        - projectID
        - name
        - description
        - color
      type: object
    DbWorkItemTypePublic:
      properties:
        color:
          type: string
        description:
          type: string
        name:
          type: string
        projectID:
          type: integer
        workItemTypeID:
          type: integer
      required:
        - workItemTypeID
        - projectID
        - name
        - description
        - color
      type: object
    ReposActivityCreateParams:
      properties:
        description:
          type: string
        isProductive:
          type: boolean
        name:
          type: string
        projectID:
          type: integer
      type: object
    ReposKanbanStepCreateParams:
      properties:
        color:
          type: string
        description:
          type: string
        name:
          type: string
        projectID:
          type: integer
        stepOrder:
          type: integer
        timeTrackable:
          type: boolean
      type: object
    ReposTeamCreateParams:
      properties:
        description:
          type: string
        name:
          type: string
        projectID:
          type: integer
      type: object
    ReposWorkItemTagCreateParams:
      properties:
        color:
          type: string
        description:
          type: string
        name:
          type: string
        projectID:
          type: integer
      type: object
    ReposWorkItemTypeCreateParams:
      properties:
        color:
          type: string
        description:
          type: string
        name:
          type: string
        projectID:
          type: integer
      type: object
  examples:
    User:
      value:
        username: username
        email: email@email.com
        password: password
  securitySchemes:
    api_key:
      in: header
      name: x-api-key
      type: apiKey
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT

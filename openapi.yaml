# NOTE: Prefer automatic schema validation from dedicated tools instead, but as an example:
# x-go-custom-tag: binding:"required[,customValidator]" [key:val ]
# # Special case for ``format: date-time`` fields
# # form data only:
# x-go-custom-tag: time_format:"2006-01-02"
# # the rest require custom unmarshalling if time is not RFC3339:
# # see https://github.com/gin-gonic/gin/issues/1193
# # there are some quirks to take into account as well:
# # see https://segmentfault.com/a/1190000022264001
# x-go-custom-tag: binding:"required"
# ```
# NOTE: Any custom field with an `x-*` name pattern in the OpenAPI spec will be available in
# `vendorExtensions` in openapi-generator's mustache templates.

openapi: 3.0.2
info:
  description:
    "This is a sample server Petstore server. For this sample, you can\
    \ use the api key `special-key` to test the authorization filters."
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI Petstore
  version: 2.0.0
servers:
  - url: https://localhost:8090/v2
  - url: https://openapi.prod.localhost/api/v2
  # for tests validation middleware to work on random port.
  - url: /v2
tags:
  - description: Operations about user
    name: user
paths:
  /ping:
    get:
      description: ""
      summary: Ping pongs
      operationId: ping
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /openapi.yaml:
    get:
      summary: Returns this very OpenAPI spec.
      operationId: OpenapiYamlGet
      responses:
        "200":
          description: OpenAPI YAML file.
          content:
            text/yaml:
              schema:
                type: string
                format: binary
  /admin/ping:
    get:
      summary: Ping pongs
      operationId: adminPing
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      tags:
        - admin
  /user/me:
    get:
      summary: returns the logged in user
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: successful operation
      security:
        - bearer_auth: []
        - api_key: []
      tags:
        - user
  /user/{id}:
    delete:
      summary: deletes the user by id
      operationId: deleteUser
      parameters:
        - description: userID that needs to be deleted
          explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        "404":
          description: User not found
      security:
        - bearer_auth: []
        - api_key: []
      tags:
        - user
    put:
      summary: updates the user by id
      operationId: updateUser
      parameters:
        - description: userID that needs to be updated
          explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
      responses:
        "404":
          description: User not found
      security:
        - bearer_auth: []
        - api_key: []
      tags:
        - user
components:
  schemas:
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
    User:
      description: represents a user.
      properties:
        userID:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        role:
          description: User role
          enum:
            - user
            - manager
            - admin
          type: string
      title: a User
      type: object
      xml:
        name: User
    # Ã  la FastAPI
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            type: string
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
  examples:
    User:
      value:
        username: username
        email: email@email.com
        password: password
  securitySchemes:
    api_key:
      in: header
      name: x-api-key
      type: apiKey
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT

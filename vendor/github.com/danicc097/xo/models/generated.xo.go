package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Generated represents generated columns.
type Generated struct {
	ColumnName string `json:"column_name"` // column_name
}

// PostgresTableGenerations runs a custom query, returning results as Generated.
func PostgresTableGenerations(ctx context.Context, db DB, schema, table string) ([]*Generated, error) {
	// query
	const sqlstr = `SELECT ` +
		`column_name ` +
		`FROM information_schema.columns ` +
		`WHERE table_schema = $1 ` +
		`and table_name = $2 ` +
		`and is_generated = 'ALWAYS'`
	// run
	logf(sqlstr, schema, table)
	rows, err := db.QueryContext(ctx, sqlstr, schema, table)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Generated
	for rows.Next() {
		var g Generated
		// scan
		if err := rows.Scan(&g.ColumnName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &g)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// IndexColumn is a index column.
type IndexColumn struct {
	SeqNo      int    `json:"seq_no"`      // seq_no
	Cid        int    `json:"cid"`         // cid
	ColumnName string `json:"column_name"` // column_name
}

// PostgresIndexColumns runs a custom query, returning results as IndexColumn.
func PostgresIndexColumns(ctx context.Context, db DB, schema, index string) ([]*IndexColumn, error) {
	// query
	const sqlstr = `SELECT ` +
		`(row_number() over()), ` + // ::integer AS seq_no
		`a.attnum, ` + // ::integer AS cid
		`a.attname ` + // ::varchar AS column_name
		`FROM pg_index i ` +
		`JOIN ONLY pg_class c ON c.oid = i.indrelid ` +
		`JOIN ONLY pg_namespace n ON n.oid = c.relnamespace ` +
		`JOIN ONLY pg_class ic ON ic.oid = i.indexrelid ` +
		`LEFT JOIN pg_attribute a ON i.indrelid = a.attrelid ` +
		`AND a.attnum = ANY(i.indkey) ` +
		`AND a.attisdropped = false ` +
		`WHERE i.indkey <> '0' ` +
		`AND n.nspname = $1 ` +
		`AND ic.relname = $2`
	// run
	logf(sqlstr, schema, index)
	rows, err := db.QueryContext(ctx, sqlstr, schema, index)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*IndexColumn
	for rows.Next() {
		var ic IndexColumn
		// scan
		if err := rows.Scan(&ic.SeqNo, &ic.Cid, &ic.ColumnName); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ic)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

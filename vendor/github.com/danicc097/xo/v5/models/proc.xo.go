package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Proc is a stored procedure.
type Proc struct {
	ProcID     string `json:"proc_id"`     // proc_id
	ProcName   string `json:"proc_name"`   // proc_name
	ProcType   string `json:"proc_type"`   // proc_type
	ReturnType string `json:"return_type"` // return_type
	ReturnName string `json:"return_name"` // return_name
	ProcDef    string `json:"proc_def"`    // proc_def
}

// PostgresProcs runs a custom query, returning results as Proc.
func PostgresProcs(ctx context.Context, db DB, schema string) ([]*Proc, error) {
	// query
	const sqlstr = `SELECT ` +
		`p.oid, ` + // ::varchar AS proc_id
		`p.proname, ` + // ::varchar AS proc_name
		`pp.proc_type, ` + // ::varchar AS proc_type
		`format_type(pp.return_type, NULL), ` + // ::varchar AS return_type
		`pp.return_name, ` + // ::varchar AS return_name
		`p.prosrc ` + // ::varchar AS proc_def
		`FROM pg_catalog.pg_proc p ` +
		`JOIN pg_catalog.pg_namespace n ON (p.pronamespace = n.oid) ` +
		`JOIN ( ` +
		`SELECT ` +
		`p.oid, ` +
		`(CASE WHEN EXISTS( ` +
		`SELECT ` +
		`column_name ` +
		`FROM information_schema.columns ` +
		`WHERE table_name = 'pg_proc' ` +
		`AND column_name = 'prokind' ` +
		`) ` +
		`THEN (CASE p.prokind ` +
		`WHEN 'p' THEN 'procedure' ` +
		`WHEN 'f' THEN 'function' ` +
		`END) ` +
		`ELSE '' ` +
		`END) AS proc_type, ` +
		`UNNEST(COALESCE(p.proallargtypes, ARRAY[p.prorettype])) AS return_type, ` +
		`UNNEST(CASE ` +
		`WHEN p.proargmodes IS NULL THEN ARRAY[''] ` +
		`ELSE p.proargnames ` +
		`END) AS return_name, ` +
		`UNNEST(COALESCE(p.proargmodes, ARRAY['o'])) AS param_type ` +
		`FROM pg_catalog.pg_proc p ` +
		`) AS pp ON p.oid = pp.oid ` +
		`WHERE p.prorettype <> 'pg_catalog.cstring'::pg_catalog.regtype ` +
		`AND (p.proargtypes[0] IS NULL ` +
		`OR p.proargtypes[0] <> 'pg_catalog.cstring'::pg_catalog.regtype) ` +
		`AND (pp.proc_type = 'function' ` +
		`OR pp.proc_type = 'procedure') ` +
		`AND pp.param_type = 'o' ` +
		`AND n.nspname = $1`
	// run
	logf(sqlstr, schema)
	rows, err := db.QueryContext(ctx, sqlstr, schema)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Proc
	for rows.Next() {
		var p Proc
		// scan
		if err := rows.Scan(&p.ProcID, &p.ProcName, &p.ProcType, &p.ReturnType, &p.ReturnName, &p.ProcDef); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

/* Generated by openapi-typescript v6.0.3 */
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable */
// @ts-nocheck
export type schemas = components['schemas']

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/auth/myprovider/callback": {
    get: operations["MyProviderCallback"];
  };
  "/auth/myprovider/login": {
    get: operations["MyProviderLogin"];
  };
  "/events": {
    get: operations["Events"];
  };
  "/ping": {
    /** Ping pongs */
    get: operations["Ping"];
  };
  "/openapi.yaml": {
    /** Returns this very OpenAPI spec. */
    get: operations["OpenapiYamlGet"];
  };
  "/admin/ping": {
    /** Ping pongs */
    get: operations["AdminPing"];
  };
  "/user/me": {
    /** returns the logged in user */
    get: operations["GetCurrentUser"];
  };
  "/user/{id}/authorization": {
    /** updates user role and scopes by id */
    patch: operations["UpdateUserAuthorization"];
  };
  "/user/{id}": {
    /** deletes the user by id */
    delete: operations["DeleteUser"];
    /** updates the user by id */
    patch: operations["UpdateUser"];
  };
  "/project/{id}/initialize": {
    /** creates initial data (teams, work item types, tags...) for a new project */
    post: operations["InitializeProject"];
  };
  "/project/{id}/": {
    /** returns board data for a project */
    get: operations["GetProject"];
  };
  "/project/{id}/config": {
    /** returns the project configuration */
    get: operations["GetProjectConfig"];
    /** updates the project configuration */
    put: operations["UpdateProjectConfig"];
  };
  "/project/{id}/board": {
    /** returns board data for a project */
    get: operations["GetProjectBoard"];
  };
  "/project/{id}/workitems": {
    /** returns workitems for a project */
    get: operations["GetProjectWorkitems"];
  };
}

export interface components {
  schemas: {
    DbActivity: {
      activityID: number;
      description: string;
      isProductive: boolean;
      name: string;
      projectID: number;
    };
    DbKanbanStep: {
      color: string;
      description: string;
      kanbanStepID: number;
      name: string;
      projectID: number;
      stepOrder: number | null;
      timeTrackable: boolean;
    };
    DbProject: {
      /** Format: date-time */
      createdAt: string;
      description: string;
      name: components["schemas"]["Project"];
      projectID: number;
      /** Format: date-time */
      updatedAt: string;
    };
    DbTeam: {
      /** Format: date-time */
      createdAt: string;
      description: string;
      name: string;
      projectID: number;
      teamID: number;
      /** Format: date-time */
      updatedAt: string;
    };
    DbWorkItemTag: {
      color: string;
      description: string;
      name: string;
      projectID: number;
      workItemTagID: number;
    };
    DbWorkItemType: {
      color: string;
      description: string;
      name: string;
      projectID: number;
      workItemTypeID: number;
    };
    DbDemoWorkItem: {
      /** Format: date-time */
      lastMessageAt: string;
      line: string;
      ref: string;
      reopened: boolean;
      workItemID: number;
    };
    DbUserAPIKey: {
      apiKey: string;
      /** Format: date-time */
      expiresOn: string;
      userID: components["schemas"]["UuidUUID"];
    };
    DbUser: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt: string | null;
      email: string;
      firstName: string | null;
      fullName: string | null;
      hasGlobalNotifications: boolean;
      hasPersonalNotifications: boolean;
      lastName: string | null;
      scopes: components["schemas"]["Scopes"];
      userID: components["schemas"]["UuidUUID"];
      username: string;
    };
    DbTimeEntry: {
      activityID: number;
      comment: string;
      durationMinutes: number | null;
      /** Format: date-time */
      start: string;
      teamID: number | null;
      timeEntryID: number;
      userID: components["schemas"]["UuidUUID"];
      workItemID: number | null;
    };
    DbWorkItemComment: {
      /** Format: date-time */
      createdAt: string;
      message: string;
      /** Format: date-time */
      updatedAt: string;
      userID: components["schemas"]["UuidUUID"];
      workItemCommentID: number;
      workItemID: number;
    };
    ProjectConfig: {
      fields: (components["schemas"]["ModelsProjectConfigField"])[] | null;
      header: (string)[] | null;
    };
    RestDemoWorkItemsResponse: {
      /** Format: date-time */
      closed: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt: string | null;
      demoWorkItem: components["schemas"]["DbDemoWorkItem"];
      description: string;
      kanbanStepID: number;
      members?: (components["schemas"]["DbUser"])[] | null;
      metadata: (number)[] | null;
      /** Format: date-time */
      targetDate: string;
      teamID: number;
      timeEntries?: (components["schemas"]["DbTimeEntry"])[] | null;
      title: string;
      /** Format: date-time */
      updatedAt: string;
      workItemComments?: (components["schemas"]["DbWorkItemComment"])[] | null;
      workItemID: number;
      workItemTags?: (components["schemas"]["DbWorkItemTag"])[] | null;
      workItemType?: components["schemas"]["DbWorkItemType"];
      workItemTypeID: number;
    };
    InitializeProjectRequest: {
      activities?: (components["schemas"]["DbActivityCreateParams"])[] | null;
      projectID?: number;
      teams?: (components["schemas"]["DbTeamCreateParams"])[] | null;
      workItemTags?: (components["schemas"]["DbWorkItemTagCreateParams"])[] | null;
    };
    RestProjectBoardResponse: {
      project?: components["schemas"]["DbProject"];
    };
    UserResponse: {
      apiKey?: components["schemas"]["DbUserAPIKey"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt: string | null;
      email: string;
      firstName: string | null;
      fullName: string | null;
      hasGlobalNotifications: boolean;
      hasPersonalNotifications: boolean;
      lastName: string | null;
      projects?: (components["schemas"]["DbProject"])[] | null;
      role: components["schemas"]["Role"];
      scopes: components["schemas"]["Scopes"];
      teams?: (components["schemas"]["DbTeam"])[] | null;
      userID: components["schemas"]["UuidUUID"];
      username: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /**
       * Detail 
       * @description Additional details for validation errors
       */
      detail?: (components["schemas"]["ValidationError"])[];
      /**
       * Messages 
       * @description Descriptive error messages to show in a callout
       */
      messages: (string)[];
    };
    /**
     * @description string identifiers for SSE event listeners. 
     * @enum {string}
     */
    Topics: "GlobalAlerts";
    /** @enum {string} */
    Scope: "test-scope" | "users:read" | "users:write" | "scopes:write" | "team-settings:write" | "project-settings:write" | "work-item:review";
    Scopes: (components["schemas"]["Scope"])[];
    /** @enum {string} */
    Role: "guest" | "user" | "advancedUser" | "manager" | "admin" | "superAdmin";
    /**
     * WorkItem role 
     * @description represents a database 'work_item_role' 
     * @enum {string}
     */
    WorkItemRole: "preparer" | "reviewer";
    /**
     * @description represents User data to update 
     * @example {
     *   "firstName": "Jane",
     *   "lastName": "Doe"
     * }
     */
    UpdateUserRequest: {
      /** @description originally from auth server but updatable */
      firstName?: string;
      /** @description originally from auth server but updatable */
      lastName?: string;
    };
    /**
     * @description represents User authorization data to update 
     * @example {
     *   "role": "manager",
     *   "scopes": [
     *     "test-scope"
     *   ]
     * }
     */
    UpdateUserAuthRequest: {
      role?: components["schemas"]["Role"];
      scopes?: components["schemas"]["Scopes"];
    };
    /** ValidationError */
    ValidationError: {
      /**
       * Location 
       * @description location in body path, if any
       */
      loc: (string)[];
      /**
       * Message 
       * @description should always be shown to the user
       */
      msg: string;
      type: components["schemas"]["HttpErrorType"];
      /**
       * Error details 
       * @description verbose details of the error
       */
      detail: {
        schema: Record<string, never>;
        value: string;
      };
      /** Contextual information */
      ctx?: Record<string, never>;
    };
    /** @enum {string} */
    HttpErrorType: "response_validation" | "request_validation" | "unknown";
    UuidUUID: string;
    PgtypeJSONB: Record<string, never>;
    ModelsProjectConfigField: {
      isEditable: boolean;
      isVisible: boolean;
      name: string;
      path: string;
      showCollapsed: boolean;
    };
    DbWorkItem: {
      /** Format: date-time */
      closed: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt: string | null;
      description: string;
      kanbanStepID: number;
      metadata: (number)[] | null;
      /** Format: date-time */
      targetDate: string;
      teamID: number;
      title: string;
      /** Format: date-time */
      updatedAt: string;
      workItemID: number;
      workItemTypeID: number;
    };
    /**
     * @description Existing projects 
     * @enum {string}
     */
    Project: "demo" | "demo_two";
    DbActivityCreateParams: {
      description?: string;
      isProductive?: boolean;
      name?: string;
      projectID?: number;
    };
    DbKanbanStepCreateParams: {
      color?: string;
      description?: string;
      name?: string;
      projectID?: number;
      stepOrder?: number | null;
      timeTrackable?: boolean;
    };
    DbTeamCreateParams: {
      description?: string;
      name?: string;
      projectID?: number;
    };
    DbWorkItemTagCreateParams: {
      color?: string;
      description?: string;
      name?: string;
      projectID?: number;
    };
    DbWorkItemTypeCreateParams: {
      color?: string;
      description?: string;
      name?: string;
      projectID?: number;
    };
    ModelsProject: string;
    ModelsRole: string;
    DbWorkItemRole: string;
    DbWorkItem_Member: {
      role: components["schemas"]["WorkItemRole"];
      user?: components["schemas"]["DbUser"];
    };
    /**
     * @description represents a database 'notification_type' 
     * @enum {string}
     */
    NotificationType: "personal" | "global";
    /** @enum {string} */
    DemoProjectKanbanSteps: "Disabled" | "Received" | "Under review" | "Work in progress";
    /** @enum {string} */
    DemoProject2KanbanSteps: "Received";
    ModelsScope: string;
    /** @enum {string} */
    Demo2WorkItemTypes: "Type 1" | "Type 2" | "Another type";
    /** @enum {string} */
    DemoKanbanSteps: "Disabled" | "Received" | "Under review" | "Work in progress";
    /** @enum {string} */
    DemoTwoKanbanSteps: "Received";
    /** @enum {string} */
    DemoTwoWorkItemTypes: "Type 1" | "Type 2" | "Another type";
    /** @enum {string} */
    DemoWorkItemTypes: "Type 1";
  };
  responses: never;
  parameters: {
    /**
     * @description UUID identifier of entity that needs to be updated 
     * @example 123e4567-e89b-12d3-a456-426614174000
     */
    uuid: string;
    /**
     * @description integer identifier that needs to be updated 
     * @example 41131
     */
    PathSerial: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  MyProviderCallback: {
    responses: {
      /** @description callback for MyProvider auth server */
      200: never;
    };
  };
  MyProviderLogin: {
    responses: {
      /** @description redirect to MyProvider auth server login */
      302: never;
    };
  };
  Events: {
    responses: {
      /** @description events */
      200: {
        content: {
          "text/event-stream": string;
        };
      };
    };
  };
  Ping: {
    /** Ping pongs */
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  OpenapiYamlGet: {
    /** Returns this very OpenAPI spec. */
    responses: {
      /** @description OpenAPI YAML file. */
      200: {
        content: {
          "application/x-yaml": string;
        };
      };
    };
  };
  AdminPing: {
    /** Ping pongs */
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  GetCurrentUser: {
    /** returns the logged in user */
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  UpdateUserAuthorization: {
    /** updates user role and scopes by id */
    /** @description Updated user object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserAuthRequest"];
      };
    };
    responses: {
      /** @description User auth updated successfully. */
      204: never;
    };
  };
  DeleteUser: {
    /** deletes the user by id */
    responses: {
      /** @description User not found */
      404: never;
    };
  };
  UpdateUser: {
    /** updates the user by id */
    /** @description Updated user object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequest"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  InitializeProject: {
    /** creates initial data (teams, work item types, tags...) for a new project */
    requestBody: {
      content: {
        "application/json": components["schemas"]["InitializeProjectRequest"];
      };
    };
    responses: {
      /** @description Project successfully initialized. */
      204: never;
    };
  };
  GetProject: {
    /** returns board data for a project */
    responses: {
      /** @description Project. */
      200: {
        content: {
          "application/json": components["schemas"]["DbProject"];
        };
      };
    };
  };
  GetProjectConfig: {
    /** returns the project configuration */
    responses: {
      /** @description Project config. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectConfig"];
        };
      };
    };
  };
  UpdateProjectConfig: {
    /** updates the project configuration */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProjectConfig"];
      };
    };
    responses: {
      /** @description Config updated successfully. */
      204: never;
    };
  };
  GetProjectBoard: {
    /** returns board data for a project */
    responses: {
      /** @description Project successfully initialized. */
      200: {
        content: {
          "application/json": components["schemas"]["RestProjectBoardResponse"];
        };
      };
    };
  };
  GetProjectWorkitems: {
    /** returns workitems for a project */
    parameters?: {
      query?: {
        open?: boolean;
        deleted?: boolean;
      };
    };
    responses: {
      /** @description Project successfully initialized. */
      200: {
        content: {
          "application/json": components["schemas"]["RestDemoWorkItemsResponse"];
        };
      };
    };
  };
}

/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable */
// @ts-nocheck
export type schemas = components['schemas']

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/ping': {
    get: operations['Ping']
  }
  '/openapi.yaml': {
    get: operations['OpenapiYamlGet']
  }
  '/admin/ping': {
    get: operations['AdminPing']
  }
  '/user/me': {
    get: operations['GetCurrentUser']
  }
  [key: `/user/{id}`]: {
    delete: operations['DeleteUser']
    patch: operations['UpdateUser']
  }
}

export interface components {
  schemas: {
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /**
     * a User
     * @description represents User data to update
     * @example {
     *   "role": "manager",
     *   "first_name": "Jane",
     *   "last_name": "Doe"
     * }
     */
    UpdateUserRequest: {
      /** @description originally from auth server but updatable */
      first_name?: string
      /** @description originally from auth server but updatable */
      last_name?: string
      role?: components['schemas']['Role']
      scopes?: components['schemas']['Scope'][]
    }
    /** @enum {string} */
    Scope:
      | 'test-scope'
      | 'users:read'
      | 'users:write'
      | 'scopes:write'
      | 'team-settings:write'
      | 'project-settings:write'
      | 'work-item:review'
    /** @enum {string} */
    Role: 'guest' | 'user' | 'advancedUser' | 'manager' | 'admin' | 'superAdmin'
    /**
     * WorkItem role
     * @description Role in work item for a member.
     * @enum {string}
     */
    WorkItemRole: 'preparer' | 'reviewer'
    User: {
      apiKeyID?: number | null
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      deletedAt?: string | null
      email?: string
      externalID?: string
      firstName?: string | null
      fullName?: string | null
      lastName?: string | null
      roleRank?: number
      scopes?: string[] | null
      teams?: components['schemas']['Team'][] | null
      time_entries?: components['schemas']['TimeEntry'][] | null
      /** Format: date-time */
      updatedAt?: string
      userID?: components['schemas']['UuidUUID']
      username?: string
      work_items?: components['schemas']['WorkItem'][] | null
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: string[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
    PgtypeJSONB: { [key: string]: unknown }
    Task: {
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      deletedAt?: string | null
      finished?: boolean | null
      metadata?: components['schemas']['PgtypeJSONB']
      task_type?: components['schemas']['TaskType']
      taskID?: number
      taskTypeID?: number
      title?: string
      /** Format: date-time */
      updatedAt?: string
      workItemID?: number
    }
    TaskType: {
      color?: string
      description?: string
      name?: string
      taskTypeID?: number
      teamID?: number
    } | null
    Team: {
      /** Format: date-time */
      createdAt?: string
      description?: string
      metadata?: components['schemas']['PgtypeJSONB']
      name?: string
      projectID?: number
      teamID?: number
      time_entries?: components['schemas']['TimeEntry'][] | null
      /** Format: date-time */
      updatedAt?: string
      users?: components['schemas']['User'][] | null
    }
    TimeEntry: {
      activityID?: number
      comment?: string
      durationMinutes?: number | null
      /** Format: date-time */
      start?: string
      teamID?: number | null
      timeEntryID?: number
      userID?: components['schemas']['UuidUUID']
      workItemID?: number | null
    }
    UserAPIKey: {
      api_key?: string
      /** Format: date-time */
      expires_on?: string
      user_api_key_id?: number
      user_id?: components['schemas']['UuidUUID']
    } | null
    UuidUUID: string
    WorkItem: {
      closed?: boolean
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      deletedAt?: string | null
      kanbanStepID?: number
      metadata?: components['schemas']['PgtypeJSONB']
      tasks?: components['schemas']['Task'][] | null
      teamID?: number
      time_entries?: components['schemas']['TimeEntry'][] | null
      title?: string
      /** Format: date-time */
      updatedAt?: string
      users?: components['schemas']['User'][] | null
      work_item_comments?: components['schemas']['WorkItemComment'][] | null
      workItemID?: number
      workItemTypeID?: number
    }
    WorkItemComment: {
      /** Format: date-time */
      createdAt?: string
      message?: string
      /** Format: date-time */
      updatedAt?: string
      userID?: components['schemas']['UuidUUID']
      workItemCommentID?: number
      workItemID?: number
    }
  }
  parameters: {
    /**
     * @description user_id that needs to be updated
     * @example 123e4567-e89b-12d3-a456-426614174000
     */
    UserID: string
  }
}

export interface operations {
  Ping: {
    responses: {
      /** OK */
      200: {
        content: {
          'text/plain': string
        }
      }
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  OpenapiYamlGet: {
    responses: {
      /** OpenAPI YAML file. */
      200: {
        content: {
          'text/yaml': string
        }
      }
    }
  }
  AdminPing: {
    responses: {
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  GetCurrentUser: {
    responses: {
      /** ok */
      200: {
        content: {
          'application/json': components['schemas']['User']
        }
      }
    }
  }
  DeleteUser: {
    parameters: {
      path: {
        /** user_id that needs to be updated */
        id: components['parameters']['UserID']
      }
    }
    responses: {
      /** User not found */
      404: unknown
    }
  }
  UpdateUser: {
    parameters: {
      path: {
        /** user_id that needs to be updated */
        id: components['parameters']['UserID']
      }
    }
    responses: {
      /** User not found */
      404: unknown
    }
    /** Updated user object */
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserRequest']
      }
    }
  }
}

export interface external {}

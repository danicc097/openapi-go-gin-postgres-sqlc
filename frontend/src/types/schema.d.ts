/* Generated by openapi-typescript v6.4.3 */
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable */
// @ts-nocheck
export type schemas = components['schemas']

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/myprovider/callback": {
    get: operations["MyProviderCallback"];
  };
  "/auth/myprovider/login": {
    get: operations["MyProviderLogin"];
  };
  "/events": {
    get: operations["Events"];
  };
  "/notifications/user/page": {
    /** Get paginated user notifications */
    get: operations["GetPaginatedNotifications"];
  };
  "/ping": {
    /** Ping pongs */
    get: operations["Ping"];
  };
  "/openapi.yaml": {
    /** Returns this very OpenAPI spec. */
    get: operations["OpenapiYamlGet"];
  };
  "/admin/ping": {
    /** Ping pongs */
    get: operations["AdminPing"];
  };
  "/project/{projectName}/team/": {
    /** create team. */
    post: operations["CreateTeam"];
  };
  [path: `/team/${number}`]: {
    /** get team. */
    get: operations["GetTeam"];
    /** delete team. */
    delete: operations["DeleteTeam"];
    /** update team. */
    patch: operations["UpdateTeam"];
  };
  "/project/{projectName}/work-item-tag/": {
    /** create workitemtag. */
    post: operations["CreateWorkItemTag"];
  };
  "/project/{projectName}/activity/": {
    /** create activity. */
    post: operations["CreateActivity"];
  };
  "/time-entry/": {
    /** create time entry. */
    post: operations["CreateTimeEntry"];
  };
  [path: `/time-entry/${number}`]: {
    /** get time-entry. */
    get: operations["GetTimeEntry"];
    /** delete time-entry. */
    delete: operations["DeleteTimeEntry"];
    /** update time-entry. */
    patch: operations["UpdateTimeEntry"];
  };
  [path: `/activity/${number}`]: {
    /** get activity. */
    get: operations["GetActivity"];
    /** delete activity. */
    delete: operations["DeleteActivity"];
    /** update activity. */
    patch: operations["UpdateActivity"];
  };
  [path: `/work-item-tag/${number}`]: {
    /** get workitemtag. */
    get: operations["GetWorkItemTag"];
    /** delete workitemtag. */
    delete: operations["DeleteWorkItemTag"];
    /** update workitemtag. */
    patch: operations["UpdateWorkItemTag"];
  };
  "/project/{projectName}/work-item-type/": {
    /** create workitemtype. */
    post: operations["CreateWorkItemType"];
  };
  [path: `/work-item-type/${number}`]: {
    /** get workitemtype. */
    get: operations["GetWorkItemType"];
    /** delete workitemtype. */
    delete: operations["DeleteWorkItemType"];
    /** update workitemtype. */
    patch: operations["UpdateWorkItemType"];
  };
  "/user/page": {
    /** Get paginated users */
    get: operations["GetPaginatedUsers"];
  };
  "/user/me": {
    /** returns the logged in user */
    get: operations["GetCurrentUser"];
  };
  [path: `/user/${string}/authorization`]: {
    /** updates user role and scopes by id */
    patch: operations["UpdateUserAuthorization"];
  };
  [path: `/user/${string}`]: {
    /** deletes the user by id */
    delete: operations["DeleteUser"];
    /** updates the user by id */
    patch: operations["UpdateUser"];
  };
  "/project/{projectName}/initialize": {
    /** creates initial data (teams, tags...) for a new project */
    post: operations["InitializeProject"];
  };
  "/project/{projectName}/": {
    /** returns board data for a project */
    get: operations["GetProject"];
  };
  "/project/{projectName}/config": {
    /** returns the project configuration */
    get: operations["GetProjectConfig"];
    /** updates the project configuration */
    put: operations["UpdateProjectConfig"];
  };
  "/project/{projectName}/board": {
    /** returns board data for a project */
    get: operations["GetProjectBoard"];
  };
  "/project/{projectName}/workitems": {
    /** returns workitems for a project */
    get: operations["GetProjectWorkitems"];
  };
  "/work-item/": {
    /** create workitem */
    post: operations["CreateWorkitem"];
  };
  [path: `/work-item/${number}/`]: {
    /** get workitem */
    get: operations["GetWorkItem"];
    /** delete workitem */
    delete: operations["DeleteWorkitem"];
    /** update workitem */
    patch: operations["UpdateWorkitem"];
  };
  [path: `/work-item/${number}/comment/`]: {
    /** create work item comment. */
    post: operations["CreateWorkItemComment"];
  };
  [path: `/work-item/${number}/comment/${number}`]: {
    /** get work item comment. */
    get: operations["GetWorkItemComment"];
    /** delete . */
    delete: operations["DeleteWorkItemComment"];
    /** update work item comment. */
    patch: operations["UpdateWorkItemComment"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Activity: {
      activityID: number;
      /** Format: date-time */
      deletedAt?: string | null;
      description: string;
      isProductive: boolean;
      name: string;
      projectID: number;
    };
    CreateActivityRequest: {
      description: string;
      isProductive: boolean;
      name: string;
    };
    CreateDemoTwoWorkItemRequest: {
      base: components["schemas"]["DbWorkItemCreateParams"];
      demoTwoProject: components["schemas"]["DbDemoTwoWorkItemCreateParams"];
      members: components["schemas"]["ServicesMember"][];
      projectName: components["schemas"]["Project"];
      tagIDs: number[];
    };
    CreateDemoWorkItemRequest: {
      base: components["schemas"]["DbWorkItemCreateParams"];
      demoProject: components["schemas"]["DbDemoWorkItemCreateParams"];
      members: components["schemas"]["ServicesMember"][];
      projectName: components["schemas"]["Project"];
      tagIDs: number[];
    };
    CreateProjectBoardRequest: {
      tags?: components["schemas"]["DbWorkItemTagCreateParams"][] | null;
      teams?: components["schemas"]["DbTeamCreateParams"][] | null;
    };
    CreateTeamRequest: {
      description: string;
      name: string;
    };
    CreateWorkItemCommentRequest: {
      message: string;
      userID: components["schemas"]["DbUserID"];
      workItemID: number;
    };
    CreateWorkItemTagRequest: {
      color: string;
      description: string;
      name: string;
    };
    CreateWorkItemTypeRequest: {
      color: string;
      description: string;
      name: string;
    };
    DbDemoTwoWorkItem: {
      /** Format: date-time */
      customDateForProject2?: string | null;
      workItemID: number;
    };
    DbDemoTwoWorkItemCreateParams: {
      /** Format: date-time */
      customDateForProject2?: string | null;
    };
    DbDemoWorkItem: {
      /** Format: date-time */
      lastMessageAt: string;
      line: string;
      ref: string;
      reopened: boolean;
      workItemID: number;
    };
    DbDemoWorkItemCreateParams: {
      /** Format: date-time */
      lastMessageAt: string;
      line: string;
      ref: string;
      reopened: boolean;
    };
    DbKanbanStep: {
      color: string;
      description: string;
      kanbanStepID: number;
      name: string;
      projectID: number;
      stepOrder: number;
      timeTrackable: boolean;
    };
    DbNotification: {
      body: string;
      /** Format: date-time */
      createdAt: string;
      labels: string[];
      link?: string | null;
      notificationID: number;
      notificationType: components["schemas"]["NotificationType"];
      receiver?: components["schemas"]["DbUserID"];
      sender: components["schemas"]["DbUserID"];
      title: string;
    };
    DbProject: {
      boardConfig: components["schemas"]["ProjectConfig"];
      /** Format: date-time */
      createdAt: string;
      description: string;
      name: components["schemas"]["Project"];
      projectID: number;
      /** Format: date-time */
      updatedAt: string;
    };
    DbTeam: {
      /** Format: date-time */
      createdAt: string;
      description: string;
      name: string;
      projectID: number;
      teamID: number;
      /** Format: date-time */
      updatedAt: string;
    };
    DbTeamCreateParams: {
      description: string;
      name: string;
    };
    DbTimeEntry: {
      activityID: number;
      comment: string;
      durationMinutes?: number | null;
      /** Format: date-time */
      start: string;
      teamID?: number | null;
      timeEntryID: number;
      userID: components["schemas"]["DbUserID"];
      workItemID?: number | null;
    };
    DbUser: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt?: string | null;
      email: string;
      firstName?: string | null;
      fullName?: string | null;
      hasGlobalNotifications: boolean;
      hasPersonalNotifications: boolean;
      lastName?: string | null;
      scopes: components["schemas"]["Scopes"];
      userID: components["schemas"]["DbUserID"];
      username: string;
    };
    DbUserAPIKey: {
      apiKey: string;
      /** Format: date-time */
      expiresOn: string;
      userID: components["schemas"]["DbUserID"];
    };
    /** @example cdb15f83-1c5d-4727-98d1-8924ccd1fc01 */
    DbUserID: string;
    DbUserWIAUWorkItem: {
      role: components["schemas"]["WorkItemRole"];
      user: components["schemas"]["DbUser"];
    };
    DbWorkItem: {
      /** Format: date-time */
      closedAt?: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt?: string | null;
      description: string;
      kanbanStepID: number;
      metadata: {
        [key: string]: unknown;
      };
      /** Format: date-time */
      targetDate: string;
      teamID: number;
      title: string;
      /** Format: date-time */
      updatedAt: string;
      workItemID: number;
      workItemTypeID: number;
    };
    DbWorkItemComment: {
      /** Format: date-time */
      createdAt: string;
      message: string;
      /** Format: date-time */
      updatedAt: string;
      userID: components["schemas"]["DbUserID"];
      workItemCommentID: number;
      workItemID: number;
    };
    DbWorkItemCreateParams: {
      /** Format: date-time */
      closedAt?: string | null;
      description: string;
      kanbanStepID: number;
      metadata: {
        [key: string]: unknown;
      };
      /** Format: date-time */
      targetDate: string;
      teamID: number;
      title: string;
      workItemTypeID: number;
    };
    DbWorkItemTag: {
      color: string;
      /** Format: date-time */
      deletedAt?: string | null;
      description: string;
      name: string;
      projectID: number;
      workItemTagID: number;
    };
    DbWorkItemTagCreateParams: {
      color: string;
      description: string;
      name: string;
    };
    DbWorkItemType: {
      color: string;
      description: string;
      name: string;
      projectID: number;
      workItemTypeID: number;
    };
    DemoTwoWorkItems: {
      /** Format: date-time */
      closedAt?: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt?: string | null;
      demoTwoWorkItem: components["schemas"]["DbDemoTwoWorkItem"];
      description: string;
      kanbanStepID: number;
      members?: components["schemas"]["DbWorkItemM2MAssigneeWIA"][] | null;
      metadata: {
        [key: string]: unknown;
      };
      /** Format: date-time */
      targetDate: string;
      teamID: number | null;
      timeEntries?: components["schemas"]["DbTimeEntry"][] | null;
      title: string;
      /** Format: date-time */
      updatedAt: string;
      workItemComments?: components["schemas"]["DbWorkItemComment"][] | null;
      workItemID: number;
      workItemTags?: components["schemas"]["DbWorkItemTag"][] | null;
      workItemType?: components["schemas"]["DbWorkItemType"];
      workItemTypeID: number;
    };
    DemoWorkItems: {
      /** Format: date-time */
      closedAt?: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt?: string | null;
      demoWorkItem: components["schemas"]["DbDemoWorkItem"];
      description: string;
      kanbanStepID: number;
      members?: components["schemas"]["DbWorkItemM2MAssigneeWIA"][] | null;
      metadata: {
        [key: string]: unknown;
      };
      /** Format: date-time */
      targetDate: string;
      teamID: number | null;
      timeEntries?: components["schemas"]["DbTimeEntry"][] | null;
      title: string;
      /** Format: date-time */
      updatedAt: string;
      workItemComments?: components["schemas"]["DbWorkItemComment"][] | null;
      workItemID: number;
      workItemTags?: components["schemas"]["DbWorkItemTag"][] | null;
      workItemType?: components["schemas"]["DbWorkItemType"];
      workItemTypeID: number;
    };
    Notification: {
      notification: components["schemas"]["DbNotification"];
      notificationID: number;
      read: boolean;
      userID: components["schemas"]["DbUserID"];
      userNotificationID: number;
    };
    PaginatedNotificationsResponse: {
      items: components["schemas"]["Notification"][] | null;
      page: components["schemas"]["PaginationPage"];
    };
    PaginatedUsersResponse: {
      items: components["schemas"]["User"][] | null;
      page: components["schemas"]["PaginationPage"];
    };
    PaginationPage: {
      nextCursor?: string;
    };
    ProjectBoard: {
      projectName: components["schemas"]["Project"];
    };
    ServicesMember: {
      role: components["schemas"]["WorkItemRole"];
      userID: components["schemas"]["DbUserID"];
    };
    SharedWorkItemJoins: {
      members?: components["schemas"]["DbWorkItemM2MAssigneeWIA"][] | null;
      timeEntries?: components["schemas"]["DbTimeEntry"][] | null;
      workItemComments?: components["schemas"]["DbWorkItemComment"][] | null;
      workItemTags?: components["schemas"]["DbWorkItemTag"][] | null;
      workItemType?: components["schemas"]["DbWorkItemType"];
    };
    Team: {
      /** Format: date-time */
      createdAt: string;
      description: string;
      name: string;
      projectID: number;
      teamID: number;
      /** Format: date-time */
      updatedAt: string;
    };
    UpdateActivityRequest: {
      description?: string;
      isProductive?: boolean;
      name?: string;
    };
    UpdateTeamRequest: {
      description?: string;
      name?: string;
    };
    UpdateWorkItemCommentRequest: {
      message?: string;
      userID?: components["schemas"]["DbUserID"];
      workItemID?: number;
    };
    UpdateWorkItemTagRequest: {
      color?: string;
      description?: string;
      name?: string;
    };
    UpdateWorkItemTypeRequest: {
      color?: string;
      description?: string;
      name?: string;
    };
    User: {
      apiKey?: components["schemas"]["DbUserAPIKey"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt?: string | null;
      email: string;
      firstName?: string | null;
      fullName?: string | null;
      hasGlobalNotifications: boolean;
      hasPersonalNotifications: boolean;
      lastName?: string | null;
      projects?: components["schemas"]["DbProject"][] | null;
      role: components["schemas"]["Role"];
      scopes: components["schemas"]["Scopes"];
      teams?: components["schemas"]["DbTeam"][] | null;
      userID: components["schemas"]["DbUserID"];
      username: string;
    };
    WorkItemComment: {
      /** Format: date-time */
      createdAt: string;
      message: string;
      /** Format: date-time */
      updatedAt: string;
      userID: components["schemas"]["DbUserID"];
      workItemCommentID: number;
      workItemID: number;
    };
    WorkItemTag: {
      color: string;
      /** Format: date-time */
      deletedAt?: string | null;
      description: string;
      name: string;
      projectID: number;
      workItemTagID: number;
    };
    WorkItemType: {
      color: string;
      description: string;
      name: string;
      projectID: number;
      workItemTypeID: number;
    };
    /** @enum {string} */
    Direction: "asc" | "desc";
    DbActivity: {
      activityID: number;
      description: string;
      isProductive: boolean;
      name: string;
      projectID: number;
    };
    ProjectConfig: {
      fields: components["schemas"]["ProjectConfigField"][];
      header: string[];
      visualization?: Record<string, never>;
    };
    ProjectConfigField: {
      isEditable: boolean;
      isVisible: boolean;
      name: string;
      path: string;
      showCollapsed: boolean;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /**
       * Detail
       * @description Additional details for validation errors
       */
      detail?: components["schemas"]["ValidationError"][];
      /**
       * Messages
       * @description Descriptive error messages to show in a callout
       */
      messages: string[];
    };
    /**
     * @description Represents standardized HTTP error types.
     * Notes:
     * - 'Private' marks an error to be hidden in response.
     *
     * @enum {string}
     */
    ErrorCode: "Unknown" | "Private" | "NotFound" | "InvalidArgument" | "AlreadyExists" | "Unauthorized" | "Unauthenticated" | "RequestValidation" | "ResponseValidation" | "OIDC" | "InvalidRole" | "InvalidScope" | "InvalidUUID";
    /** @description represents an error message response. */
    HTTPError: {
      title: string;
      detail: string;
      status: number;
      error: string;
      /**
       * Location
       * @description location in body path, if any
       */
      loc?: string[];
      type: components["schemas"]["ErrorCode"];
      validationError?: components["schemas"]["HTTPValidationError"];
    };
    /**
     * @description string identifiers for SSE event listeners.
     * @enum {string}
     */
    Topics: "GlobalAlerts";
    /**
     * @description is generated from scopes.json keys.
     * @enum {string}
     */
    Scope: "project-member" | "users:read" | "users:write" | "users:delete" | "scopes:write" | "team-settings:write" | "project-settings:write" | "activity:create" | "activity:edit" | "activity:delete" | "work-item-tag:create" | "work-item-tag:edit" | "work-item-tag:delete" | "work-item:review" | "work-item-comment:create" | "work-item-comment:edit" | "work-item-comment:delete";
    Scopes: components["schemas"]["Scope"][];
    /**
     * @description is generated from roles.json keys.
     * @enum {string}
     */
    Role: "guest" | "user" | "advancedUser" | "manager" | "admin" | "superAdmin";
    /**
     * WorkItem role
     * @description is generated from database enum 'work_item_role'.
     * @enum {string}
     */
    WorkItemRole: "preparer" | "reviewer";
    /**
     * @description represents User data to update
     * @example {
     *   "firstName": "Jane",
     *   "lastName": "Doe"
     * }
     */
    UpdateUserRequest: {
      /** @description originally from auth server but updatable */
      firstName?: string;
      /** @description originally from auth server but updatable */
      lastName?: string;
    };
    /**
     * @description represents User authorization data to update
     * @example {
     *   "role": "manager",
     *   "scopes": [
     *     "users:read"
     *   ]
     * }
     */
    UpdateUserAuthRequest: {
      role?: components["schemas"]["Role"];
      scopes?: components["schemas"]["Scopes"];
    };
    /** ValidationError */
    ValidationError: {
      /**
       * Location
       * @description location in body path, if any
       */
      loc: string[];
      /**
       * Message
       * @description should always be shown to the user
       */
      msg: string;
      /**
       * Error details
       * @description verbose details of the error
       */
      detail: {
        schema: Record<string, never>;
        value: string;
      };
      /** Contextual information */
      ctx?: Record<string, never>;
    };
    UuidUUID: string;
    CreateWorkItemRequest: components["schemas"]["CreateDemoWorkItemRequest"] | components["schemas"]["CreateDemoTwoWorkItemRequest"];
    /**
     * @description is generated from projects table.
     * @enum {string}
     */
    Project: "demo" | "demo_two";
    DbActivityCreateParams: {
      description: string;
      isProductive: boolean;
      name: string;
      projectID?: number;
    };
    DbWorkItemRole: string;
    /**
     * @description is generated from database enum 'notification_type'.
     * @enum {string}
     */
    NotificationType: "personal" | "global";
    /**
     * @description is generated from work_item_types table.
     * @enum {string}
     */
    DemoTwoWorkItemTypes: "Type 1" | "Type 2" | "Another type";
    /**
     * @description is generated from work_item_types table.
     * @enum {string}
     */
    DemoWorkItemTypes: "Type 1";
    DbWorkItemID: unknown;
    DbProjectID: unknown;
    DbWorkItemTypeID: unknown;
    DbNotificationID: unknown;
    DbUserNotification: {
      notificationID: number;
      read: boolean;
      userID: components["schemas"]["DbUserID"];
      userNotificationID: number;
    };
    /**
     * @description is generated from kanban_steps table.
     * @enum {string}
     */
    DemoKanbanSteps: "Disabled" | "Received" | "Under review" | "Work in progress";
    /**
     * @description is generated from kanban_steps table.
     * @enum {string}
     */
    DemoTwoKanbanSteps: "Received";
    DbUserWIAWorkItem: {
      role: components["schemas"]["WorkItemRole"];
      user: components["schemas"]["DbUser"];
    };
    DbWorkItemM2MAssigneeWIA: {
      role: components["schemas"]["WorkItemRole"];
      user: components["schemas"]["DbUser"];
    };
    CreateTimeEntryRequest: {
      activityID: number;
      comment: string;
      durationMinutes?: number | null;
      /** Format: date-time */
      start: string;
      teamID?: number | null;
      userID: components["schemas"]["DbUserID"];
      workItemID?: number | null;
    };
    TimeEntry: {
      activityID: number;
      comment: string;
      durationMinutes?: number | null;
      /** Format: date-time */
      start: string;
      teamID?: number | null;
      timeEntryID: number;
      userID: components["schemas"]["DbUserID"];
      workItemID?: number | null;
    };
    UpdateTimeEntryRequest: {
      activityID?: number;
      comment?: string;
      durationMinutes?: number | null;
      /** Format: date-time */
      start?: string;
      teamID?: number | null;
      userID?: components["schemas"]["DbUserID"];
      workItemID?: number | null;
    };
  };
  responses: never;
  parameters: {
    /**
     * @description Project name
     * @example demo
     */
    ProjectName: components["schemas"]["Project"];
    /**
     * @description UUID identifier
     * @example 123e4567-e89b-12d3-a456-426614174000
     */
    UUID: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  MyProviderCallback: {
    responses: {
      /** @description Callback for MyProvider auth server */
      302: never;
    };
  };
  MyProviderLogin: {
    parameters: {
      query: {
        "auth-redirect-uri": string;
      };
    };
    responses: {
      /** @description Redirect to MyProvider auth server login */
      302: never;
    };
  };
  Events: {
    parameters: {
      query: {
        projectName: components["schemas"]["Project"];
      };
    };
    responses: {
      /** @description events */
      200: {
        content: {
          "text/event-stream": string;
        };
      };
    };
  };
  /** Get paginated user notifications */
  GetPaginatedNotifications: {
    parameters: {
      query: {
        limit: number;
        direction: components["schemas"]["Direction"];
        cursor: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedNotificationsResponse"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** Ping pongs */
  Ping: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** Returns this very OpenAPI spec. */
  OpenapiYamlGet: {
    responses: {
      /** @description OpenAPI YAML file. */
      200: {
        content: {
          "application/x-yaml": string;
        };
      };
    };
  };
  /** Ping pongs */
  AdminPing: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** create team. */
  CreateTeam: {
    parameters: {
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTeamRequest"];
      };
    };
    responses: {
      /** @description Success. */
      201: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** get team. */
  GetTeam: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        teamID: number;
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** delete team. */
  DeleteTeam: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        teamID: number;
      };
    };
    responses: {
      /** @description Success. */
      204: never;
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** update team. */
  UpdateTeam: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        teamID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTeamRequest"];
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** create workitemtag. */
  CreateWorkItemTag: {
    parameters: {
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWorkItemTagRequest"];
      };
    };
    responses: {
      /** @description Success. */
      201: {
        content: {
          "application/json": components["schemas"]["WorkItemTag"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** create activity. */
  CreateActivity: {
    parameters: {
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateActivityRequest"];
      };
    };
    responses: {
      /** @description Success. */
      201: {
        content: {
          "application/json": components["schemas"]["Activity"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** create time entry. */
  CreateTimeEntry: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTimeEntryRequest"];
      };
    };
    responses: {
      /** @description Success. */
      201: {
        content: {
          "application/json": components["schemas"]["TimeEntry"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** get time-entry. */
  GetTimeEntry: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        timeEntryID: number;
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["TimeEntry"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** delete time-entry. */
  DeleteTimeEntry: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        timeEntryID: number;
      };
    };
    responses: {
      /** @description Success. */
      204: never;
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** update time-entry. */
  UpdateTimeEntry: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        timeEntryID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTimeEntryRequest"];
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["TimeEntry"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** get activity. */
  GetActivity: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        activityID: number;
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["Activity"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** delete activity. */
  DeleteActivity: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        activityID: number;
      };
    };
    responses: {
      /** @description Success. */
      204: never;
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** update activity. */
  UpdateActivity: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        activityID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateActivityRequest"];
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["Activity"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** get workitemtag. */
  GetWorkItemTag: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemTagID: number;
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkItemTag"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** delete workitemtag. */
  DeleteWorkItemTag: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemTagID: number;
      };
    };
    responses: {
      /** @description Success. */
      204: never;
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** update workitemtag. */
  UpdateWorkItemTag: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemTagID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWorkItemTagRequest"];
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkItemTag"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** create workitemtype. */
  CreateWorkItemType: {
    parameters: {
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWorkItemTypeRequest"];
      };
    };
    responses: {
      /** @description Success. */
      201: {
        content: {
          "application/json": components["schemas"]["WorkItemType"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** get workitemtype. */
  GetWorkItemType: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemTypeID: number;
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkItemType"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** delete workitemtype. */
  DeleteWorkItemType: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemTypeID: number;
      };
    };
    responses: {
      /** @description Success. */
      204: never;
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** update workitemtype. */
  UpdateWorkItemType: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemTypeID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWorkItemTypeRequest"];
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkItemType"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** Get paginated users */
  GetPaginatedUsers: {
    parameters: {
      query: {
        limit: number;
        direction: components["schemas"]["Direction"];
        cursor: string;
        filter?: {
          post?: string[];
          author?: string[];
        };
        nested?: {
          obj?: {
            nestedObj?: string;
          };
        };
        arrayFilter?: (string | boolean)[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedUsersResponse"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** returns the logged in user */
  GetCurrentUser: {
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** updates user role and scopes by id */
  UpdateUserAuthorization: {
    parameters: {
      path: {
        /**
         * @description UUID identifier
         * @example 123e4567-e89b-12d3-a456-426614174000
         */
        id: string;
      };
    };
    /** @description Updated user object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserAuthRequest"];
      };
    };
    responses: {
      /** @description User auth updated successfully. */
      204: never;
    };
  };
  /** deletes the user by id */
  DeleteUser: {
    parameters: {
      path: {
        /**
         * @description UUID identifier
         * @example 123e4567-e89b-12d3-a456-426614174000
         */
        id: string;
      };
    };
    responses: {
      /** @description User deleted successfully */
      204: never;
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** updates the user by id */
  UpdateUser: {
    parameters: {
      path: {
        /**
         * @description UUID identifier
         * @example 123e4567-e89b-12d3-a456-426614174000
         */
        id: string;
      };
    };
    /** @description Updated user object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequest"];
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** creates initial data (teams, tags...) for a new project */
  InitializeProject: {
    parameters: {
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectBoardRequest"];
      };
    };
    responses: {
      /** @description Success. */
      204: never;
    };
  };
  /** returns board data for a project */
  GetProject: {
    parameters: {
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    responses: {
      /** @description Project. */
      200: {
        content: {
          "application/json": components["schemas"]["DbProject"];
        };
      };
    };
  };
  /** returns the project configuration */
  GetProjectConfig: {
    parameters: {
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    responses: {
      /** @description Project config. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectConfig"];
        };
      };
    };
  };
  /** updates the project configuration */
  UpdateProjectConfig: {
    parameters: {
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProjectConfig"];
      };
    };
    responses: {
      /** @description Config updated successfully. */
      204: never;
    };
  };
  /** returns board data for a project */
  GetProjectBoard: {
    parameters: {
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectBoard"];
        };
      };
    };
  };
  /** returns workitems for a project */
  GetProjectWorkitems: {
    parameters: {
      query?: {
        open?: boolean;
        deleted?: boolean;
      };
      path: {
        projectName: components["parameters"]["ProjectName"];
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["DemoWorkItems"] | components["schemas"]["DemoTwoWorkItems"];
        };
      };
    };
  };
  /** create workitem */
  CreateWorkitem: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWorkItemRequest"];
      };
    };
    responses: {
      /** @description Success. */
      201: {
        content: {
          "application/json": components["schemas"]["DbWorkItem"];
        };
      };
    };
  };
  /** get workitem */
  GetWorkItem: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemID: number;
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["DbWorkItem"];
        };
      };
    };
  };
  /** delete workitem */
  DeleteWorkitem: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemID: number;
      };
    };
    responses: {
      /** @description Success. */
      204: never;
    };
  };
  /** update workitem */
  UpdateWorkitem: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemID: number;
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["DbWorkItem"];
        };
      };
    };
  };
  /** create work item comment. */
  CreateWorkItemComment: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWorkItemCommentRequest"];
      };
    };
    responses: {
      /** @description Success. */
      201: {
        content: {
          "application/json": components["schemas"]["WorkItemComment"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** get work item comment. */
  GetWorkItemComment: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemID: number;
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemCommentID: number;
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkItemComment"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** delete . */
  DeleteWorkItemComment: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemID: number;
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemCommentID: number;
      };
    };
    responses: {
      /** @description Success. */
      204: never;
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
  /** update work item comment. */
  UpdateWorkItemComment: {
    parameters: {
      path: {
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemID: number;
        /**
         * @description integer identifier
         * @example 41131
         */
        workItemCommentID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWorkItemCommentRequest"];
      };
    };
    responses: {
      /** @description Success. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkItemComment"];
        };
      };
      /** @description Unauthenticated */
      401: never;
      /** @description Unauthorized */
      403: never;
      /** @description Error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["HTTPError"];
        };
      };
    };
  };
}

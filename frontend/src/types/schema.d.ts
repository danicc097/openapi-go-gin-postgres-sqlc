/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable */
// @ts-nocheck
export type schemas = components['schemas']
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/ping': {
    get: operations['ping']
  }
  '/openapi.yaml': {
    get: {
      responses: {
        /** OpenAPI YAML file. */
        200: {
          content: {
            'text/yaml': string
          }
        }
      }
    }
  }
  '/admin/ping': {
    get: operations['adminPing']
  }
  '/pet': {
    put: operations['updatePet']
    post: operations['addPet']
  }
  '/pet/findByStatus': {
    /** Multiple status values can be provided with comma separated strings */
    get: operations['findPetsByStatus']
  }
  '/pet/findByTags': {
    /** Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. */
    get: operations['findPetsByTags']
  }
  [key: `/pet/${number}`]: {
    /** Returns a single pet */
    get: operations['getPetById']
    post: operations['updatePetWithForm']
    delete: operations['deletePet']
  }
  [key: `/pet/${number}/uploadImage`]: {
    post: operations['uploadFile']
  }
  '/store/inventory': {
    /** Returns a map of status codes to quantities */
    get: operations['getInventory']
  }
  '/store/order': {
    post: operations['placeOrder']
  }
  [key: `/store/order/${string}`]: {
    /** For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions */
    get: operations['getOrderById']
    /** For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors */
    delete: operations['deleteOrder']
  }
  '/user': {
    /** This can only be done by the logged in user. */
    post: operations['createUser']
  }
  '/user/createWithArray': {
    post: operations['createUsersWithArrayInput']
  }
  '/user/login': {
    get: operations['loginUser']
  }
  '/user/logout': {
    get: operations['logoutUser']
  }
  [key: `/user/${string}`]: {
    get: operations['getUserByName']
    /** This can only be done by the logged in user. */
    put: operations['updateUser']
    /** This can only be done by the logged in user. */
    delete: operations['deleteUser']
  }
  '/fake/data_file': {
    get: operations['fake_data_file']
  }
}

export interface components {
  schemas: {
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /**
     * Pet Order
     * @description An order for a pets from the pet store
     * @example {
     *   "petId": 6,
     *   "quantity": 1,
     *   "id": 0,
     *   "shipDate": "2000-01-23T04:56:07.000Z",
     *   "complete": false,
     *   "status": "placed"
     * }
     */
    Order: {
      /** Format: int64 */
      id?: number
      /** Format: int64 */
      petId?: number
      /** Format: int32 */
      quantity?: number
      /** Format: date-time */
      shipDate?: string
      /**
       * @description Order Status
       * @enum {string}
       */
      status?: 'placed' | 'approved' | 'delivered'
      /** @default false */
      complete?: boolean
    }
    /**
     * Pet category
     * @description A category for a pet
     * @example {
     *   "name": "name",
     *   "id": 6
     * }
     */
    Category: {
      /** Format: int64 */
      id?: number
      name?: string
    }
    /**
     * a User
     * @description represents User data to update
     * @example {
     *   "password": "password",
     *   "email": "email",
     *   "username": "username",
     *   "firstName": "John",
     *   "lastName": "Doe"
     * }
     */
    UpdateUserRequest: {
      username?: string
      email?: string
      password?: string
      firstName?: string
      lastName?: string
    }
    /**
     * a User
     * @description represents a new User
     */
    CreateUserRequest: {
      username: string
      email: string
      password: string
    }
    /**
     * @description represents the response to a User creation
     * @example id
     */
    CreateUserResponse: {
      access_token?: string
      /** Format: int64 */
      user_id?: number
    }
    /**
     * a User
     * @description A User who is purchasing from the pet store
     */
    User: {
      /** Format: int64 */
      id?: number
      username?: string
      firstName?: string
      lastName?: string
      email?: string
      password?: string
      phone?: string
      /**
       * @description User role
       * @enum {string}
       */
      role?: 'user' | 'manager' | 'admin'
    }
    /**
     * Pet Tag
     * @description A tag for a pet
     * @example {
     *   "name": "name",
     *   "id": 1
     * }
     */
    Tag: {
      /** Format: int64 */
      id?: number
      name?: string
    }
    /**
     * a Pet
     * @description A pet for sale in the pet store
     * @example {
     *   "photoUrls": [
     *     "photoUrls",
     *     "photoUrls"
     *   ],
     *   "name": "doggie",
     *   "id": 0,
     *   "category": {
     *     "name": "name",
     *     "id": 6
     *   },
     *   "tags": [
     *     {
     *       "name": "name",
     *       "id": 1
     *     },
     *     {
     *       "name": "name",
     *       "id": 1
     *     }
     *   ],
     *   "status": "available"
     * }
     */
    Pet: {
      /** Format: int64 */
      id?: number
      category?: components['schemas']['Category']
      /** @example doggie */
      name: string
      photoUrls: string[]
      tags?: components['schemas']['Tag'][]
      /**
       * @deprecated
       * @description pet status in the store
       * @enum {string}
       */
      status?: 'available' | 'pending' | 'sold'
    }
    /**
     * An uploaded response
     * @description Describes the result of uploading an image resource
     * @example {
     *   "code": 0,
     *   "type": "type",
     *   "message": "message"
     * }
     */
    ApiResponse: {
      /** Format: int32 */
      code?: number
      type?: string
      message?: string
    }
    /**
     * An uploaded response
     * @description Describes the result of uploading an image resource
     */
    Special: {
      /** Format: int32 */
      self?: number
      private?: string
      super?: string
      '123Number'?: string
      'array[test]'?: string
      ''?: string
    }
    Dog: components['schemas']['Animal'] & components['schemas']['Dog_allOf']
    Cat: components['schemas']['Animal'] & components['schemas']['Address'] & components['schemas']['Cat_allOf']
    Address: { [key: string]: number }
    Animal: {
      className: string
      /** @default red */
      color?: string
    }
    allof_tag_api_response: components['schemas']['Tag'] & components['schemas']['ApiResponse']
    AnyOfPig: Partial<components['schemas']['BasquePig']> & Partial<components['schemas']['DanishPig']>
    Pig: components['schemas']['BasquePig'] | components['schemas']['DanishPig']
    BasquePig: {
      className: string
      color: string
    }
    DanishPig: {
      className: string
      size: number
    }
    NestedOneOf: {
      size?: number
      nestedPig?: components['schemas']['Pig']
    }
    updatePet_request: {
      jsonData?: components['schemas']['Pet']
      /** Format: binary */
      binaryDataN2Information?: string
    }
    updatePetWithForm_request: {
      /** @description Updated name of the pet */
      name?: string
      /** @description Updated status of the pet */
      status?: string
    }
    uploadFile_request: {
      /** @description Additional data to pass to server */
      additionalMetadata?: string
      /**
       * Format: binary
       * @description file to upload
       */
      file?: string
    }
    Dog_allOf: {
      breed?: string
    }
    Cat_allOf: {
      declawed?: boolean
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: string[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  requestBodies: {
    /** List of user object */
    UserArray: {
      content: {
        'application/json': components['schemas']['User'][]
      }
    }
    /** Pet object that needs to be added to the store */
    Pet: {
      content: {
        'application/json': components['schemas']['Pet']
        'application/xml': components['schemas']['Pet']
        'multipart/related': components['schemas']['updatePet_request']
      }
    }
  }
}

export interface operations {
  ping: {
    responses: {
      /** OK */
      200: {
        content: {
          'text/plain': string
        }
      }
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  adminPing: {
    responses: {
      /** OK */
      200: {
        content: {
          'text/plain': string
        }
      }
      /** Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  updatePet: {
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/xml': components['schemas']['Pet']
          'application/json': components['schemas']['Pet']
        }
      }
      /** Invalid ID supplied */
      400: unknown
      /** Pet not found */
      404: unknown
      /** Validation exception */
      405: unknown
    }
    requestBody: components['requestBodies']['Pet']
  }
  addPet: {
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/xml': components['schemas']['Pet']
          'application/json': components['schemas']['Pet']
        }
      }
      /** Invalid input */
      405: unknown
    }
    requestBody: components['requestBodies']['Pet']
  }
  /** Multiple status values can be provided with comma separated strings */
  findPetsByStatus: {
    parameters: {
      query: {
        /** @deprecated Status values that need to be considered for filter */
        status: ('available' | 'pending' | 'sold')[]
      }
    }
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/xml': components['schemas']['Pet'][]
          'application/json': components['schemas']['Pet'][]
        }
      }
      /** Invalid status value */
      400: unknown
    }
  }
  /** Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. */
  findPetsByTags: {
    parameters: {
      query: {
        /** Tags to filter by */
        tags: string[]
      }
    }
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/xml': components['schemas']['Pet'][]
          'application/json': components['schemas']['Pet'][]
        }
      }
      /** Invalid tag value */
      400: unknown
    }
  }
  /** Returns a single pet */
  getPetById: {
    parameters: {
      path: {
        /** ID of pet to return */
        petId: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/xml': components['schemas']['Pet']
          'application/json': components['schemas']['Pet']
        }
      }
      /** Invalid ID supplied */
      400: unknown
      /** Pet not found */
      404: unknown
    }
  }
  updatePetWithForm: {
    parameters: {
      path: {
        /** ID of pet that needs to be updated */
        petId: number
      }
    }
    responses: {
      /** Invalid input */
      405: unknown
    }
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['updatePetWithForm_request']
      }
    }
  }
  deletePet: {
    parameters: {
      header: {
        api_key?: string
      }
      path: {
        /** Pet id to delete */
        petId: number
      }
    }
    responses: {
      /** Invalid pet value */
      400: unknown
    }
  }
  uploadFile: {
    parameters: {
      path: {
        /** ID of pet to update */
        petId: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/json': components['schemas']['ApiResponse']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['uploadFile_request']
      }
    }
  }
  /** Returns a map of status codes to quantities */
  getInventory: {
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/json': { [key: string]: number }
        }
      }
    }
  }
  placeOrder: {
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/xml': components['schemas']['Order']
          'application/json': components['schemas']['Order']
        }
      }
      /** Invalid Order */
      400: unknown
    }
    /** order placed for purchasing the pet */
    requestBody: {
      content: {
        'application/json': components['schemas']['Order']
      }
    }
  }
  /** For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions */
  getOrderById: {
    parameters: {
      path: {
        /** ID of pet that needs to be fetched */
        orderId: number
      }
    }
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/xml': components['schemas']['Order']
          'application/json': components['schemas']['Order']
        }
      }
      /** Invalid ID supplied */
      400: unknown
      /** Order not found */
      404: unknown
    }
  }
  /** For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors */
  deleteOrder: {
    parameters: {
      path: {
        /** ID of the order that needs to be deleted */
        orderId: string
      }
    }
    responses: {
      /** Invalid ID supplied */
      400: unknown
      /** Order not found */
      404: unknown
    }
  }
  /** This can only be done by the logged in user. */
  createUser: {
    responses: {
      /** successful operation */
      201: {
        content: {
          'application/json': components['schemas']['CreateUserResponse']
        }
      }
    }
    /** Created user object */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserRequest']
      }
    }
  }
  createUsersWithArrayInput: {
    responses: {
      /** successful operation */
      default: unknown
    }
    requestBody: components['requestBodies']['UserArray']
  }
  loginUser: {
    parameters: {
      query: {
        /** The user name for login */
        username: string
        /** The password for login in clear text */
        password: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        headers: {
          /** Cookie authentication key for use with the `api_key` apiKey authentication. */
          'Set-Cookie'?: string
          /** calls per hour allowed by the user */
          'X-Rate-Limit'?: number
          /** date in UTC when token expires */
          'X-Expires-After'?: string
        }
        content: {
          'application/xml': string
          'application/json': string
        }
      }
      /** Invalid username/password supplied */
      400: unknown
    }
  }
  logoutUser: {
    responses: {
      /** successful operation */
      default: unknown
    }
  }
  getUserByName: {
    parameters: {
      path: {
        /** The name that needs to be fetched. Use user1 for testing. */
        username: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/xml': components['schemas']['User']
          'application/json': components['schemas']['User']
        }
      }
      /** Invalid username supplied */
      400: unknown
      /** User not found */
      404: unknown
    }
  }
  /** This can only be done by the logged in user. */
  updateUser: {
    parameters: {
      path: {
        /** name that need to be deleted */
        username: string
      }
    }
    responses: {
      /** Invalid user supplied */
      400: unknown
      /** User not found */
      404: unknown
    }
    /** Updated user object */
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserRequest']
      }
    }
  }
  /** This can only be done by the logged in user. */
  deleteUser: {
    parameters: {
      path: {
        /** The name that needs to be deleted */
        username: string
      }
    }
    responses: {
      /** Invalid username supplied */
      400: unknown
      /** User not found */
      404: unknown
    }
  }
  fake_data_file: {
    parameters: {
      header: {
        /** dummy required parameter */
        dummy: string
        /** header data file */
        data_file?: string
      }
    }
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/xml': components['schemas']['User']
          'application/json': components['schemas']['User']
        }
      }
    }
  }
}

export interface external {}

/* eslint-disable */
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * is generated from database enum 'work_item_role'.
 */
export type WorkItemRole = 'preparer' | 'reviewer'
export type ModelsUserID = string
/**
 * is generated from projects table.
 */
export type ProjectName = 'demo' | 'demo_two'
/**
 * is generated from database enum 'notification_type'.
 */
export type NotificationType = 'personal' | 'global'
/**
 * is generated from scopes.json keys.
 */
export type Scope =
  | 'project-member'
  | 'users:read'
  | 'users:write'
  | 'users:delete'
  | 'scopes:write'
  | 'team-settings:write'
  | 'project-settings:write'
  | 'activity:create'
  | 'activity:edit'
  | 'activity:delete'
  | 'work-item-tag:create'
  | 'work-item-tag:edit'
  | 'work-item-tag:delete'
  | 'work-item:review'
  | 'work-item-comment:create'
  | 'work-item-comment:edit'
  | 'work-item-comment:delete'
export type Scopes = Scope[]
/**
 * is generated from roles.json keys.
 */
export type Role = 'guest' | 'user' | 'advancedUser' | 'manager' | 'admin' | 'superAdmin'
export type Direction = 'asc' | 'desc'
/**
 * location in body path, if any
 */
export type Location = string[]
/**
 * should always be shown to the user
 */
export type Message = string
/**
 * Additional details for validation errors
 */
export type Detail = ValidationError[]
/**
 * Descriptive error messages to show in a callout
 */
export type Messages = string[]
/**
 * Represents standardized HTTP error types.
 * Notes:
 * - 'Private' marks an error to be hidden in response.
 *
 */
export type ErrorCode =
  | 'Unknown'
  | 'Private'
  | 'NotFound'
  | 'InvalidArgument'
  | 'AlreadyExists'
  | 'Unauthorized'
  | 'Unauthenticated'
  | 'RequestValidation'
  | 'ResponseValidation'
  | 'OIDC'
  | 'InvalidRole'
  | 'InvalidScope'
  | 'InvalidUUID'
/**
 * location in body path, if any
 */
export type Location1 = string[]
/**
 * string identifiers for SSE event listeners.
 */
export type Topic = 'AppDebug' | 'WorkItemUpdated' | 'TeamCreated' | 'GlobalAlerts'
export type Topics = Topic[]
export type UuidUUID = string
export type WorkItemResponse = DemoWorkItemResponse | DemoTwoWorkItemResponse
export type CreateWorkItemRequest = CreateDemoWorkItemRequest | CreateDemoTwoWorkItemRequest
/**
 * is generated from work_item_types table.
 */
export type DemoTwoWorkItemTypes = 'Type 1' | 'Type 2' | 'Another type'
/**
 * is generated from work_item_types table.
 */
export type DemoWorkItemTypes = 'Type 1'
/**
 * is generated from kanban_steps table.
 */
export type DemoKanbanSteps = 'Disabled' | 'Received' | 'Under review' | 'Work in progress'
/**
 * is generated from kanban_steps table.
 */
export type DemoTwoKanbanSteps = 'Received'
export type PaginationFilterModes =
  | 'between'
  | 'betweenInclusive'
  | 'contains'
  | 'empty'
  | 'endsWith'
  | 'equals'
  | 'fuzzy'
  | 'greaterThan'
  | 'greaterThanOrEqualTo'
  | 'lessThan'
  | 'lessThanOrEqualTo'
  | 'notEmpty'
  | 'notEquals'
  | 'startsWith'
export type PaginationFilter = PaginationFilterPrimitive | PaginationFilterArray

export interface CreateActivityRequest {
  description: string
  isProductive: boolean
  name: string
}
export interface CreateDemoTwoWorkItemRequest {
  base: ModelsWorkItemCreateParams
  demoTwoProject: ModelsDemoTwoWorkItemCreateParams
  members: ServicesMember[]
  projectName: ProjectName
  tagIDs: number[]
}
export interface ModelsWorkItemCreateParams {
  closedAt?: string | null
  description: string
  kanbanStepID: number
  metadata: {}
  targetDate: string
  teamID: number
  title: string
  workItemTypeID: number
}
export interface ModelsDemoTwoWorkItemCreateParams {
  customDateForProject2?: string | null
}
export interface ServicesMember {
  role: WorkItemRole
  userID: ModelsUserID
}
export interface CreateDemoWorkItemRequest {
  base: ModelsWorkItemCreateParams
  demoProject: ModelsDemoWorkItemCreateParams
  members: ServicesMember[]
  projectName: ProjectName
  tagIDs: number[]
}
export interface ModelsDemoWorkItemCreateParams {
  lastMessageAt: string
  line: string
  ref: string
  reopened: boolean
}
export interface CreateProjectBoardRequest {
  tags?: ModelsWorkItemTagCreateParams[] | null
  teams?: ModelsTeamCreateParams[] | null
}
export interface ModelsWorkItemTagCreateParams {
  color: string
  description: string
  name: string
}
export interface ModelsTeamCreateParams {
  description: string
  name: string
}
export interface CreateTeamRequest {
  description: string
  name: string
}
export interface CreateWorkItemCommentRequest {
  message: string
  userID: ModelsUserID
  workItemID: number
}
export interface CreateWorkItemTagRequest {
  color: string
  description: string
  name: string
}
export interface CreateWorkItemTypeRequest {
  color: string
  description: string
  name: string
}
export interface ModelsDemoTwoWorkItem {
  customDateForProject2?: string | null
  workItemID: number
}
export interface ModelsDemoWorkItem {
  lastMessageAt: string
  line: string
  ref: string
  reopened: boolean
  workItemID: number
}
export interface ModelsKanbanStep {
  color: string
  description: string
  kanbanStepID: number
  name: string
  projectID: number
  stepOrder: number
  timeTrackable: boolean
}
export interface ModelsNotification {
  body: string
  createdAt: string
  labels: string[]
  link?: string | null
  notificationID: number
  notificationType: NotificationType
  receiver?: ModelsUserID
  sender: ModelsUserID
  title: string
}
export interface ModelsProject {
  boardConfig: ProjectConfig
  createdAt: string
  description: string
  name: ProjectName
  projectID: number
  updatedAt: string
}
export interface ProjectConfig {
  fields?: ProjectConfigField[]
  header?: string[]
  visualization?: {}
}
export interface ProjectConfigField {
  isEditable: boolean
  isVisible: boolean
  name: string
  path: string
  showCollapsed: boolean
}
export interface ModelsTeam {
  createdAt: string
  description: string
  name: string
  projectID: number
  teamID: number
  updatedAt: string
}
export interface ModelsTimeEntry {
  activityID: number
  comment: string
  durationMinutes?: number | null
  start: string
  teamID?: number | null
  timeEntryID: number
  userID: ModelsUserID
  workItemID?: number | null
}
export interface ModelsUser {
  age?: number | null
  createdAt: string
  deletedAt?: string | null
  email: string
  firstName?: string | null
  fullName?: string | null
  hasGlobalNotifications: boolean
  hasPersonalNotifications: boolean
  lastName?: string | null
  scopes: Scopes
  updatedAt: string
  userID: ModelsUserID
  username: string
}
export interface ModelsUserAPIKey {
  apiKey: string
  expiresOn: string
  userID: ModelsUserID
}
export interface ModelsWorkItem {
  closedAt?: string | null
  createdAt: string
  deletedAt?: string | null
  description: string
  kanbanStepID: number
  metadata: {}
  targetDate: string
  teamID: number
  title: string
  updatedAt: string
  workItemID: number
  workItemTypeID: number
}
export interface ModelsWorkItemComment {
  createdAt: string
  message: string
  updatedAt: string
  userID: ModelsUserID
  workItemCommentID: number
  workItemID: number
}
export interface ModelsWorkItemTag {
  color: string
  deletedAt?: string | null
  description: string
  name: string
  projectID: number
  workItemTagID: number
}
export interface ModelsWorkItemType {
  color: string
  description: string
  name: string
  projectID: number
  workItemTypeID: number
}
export interface PaginatedNotificationsResponse {
  items: NotificationResponse[] | null
  page: PaginationPage
}
export interface NotificationResponse {
  notification: ModelsNotification
  notificationID: number
  read: boolean
  userID: ModelsUserID
  userNotificationID: number
}
export interface PaginationPage {
  nextCursor?: string
}
export interface PaginatedUsersResponse {
  items: UserResponse[] | null
  page: PaginationPage
}
export interface UserResponse {
  age?: number | null
  apiKey?: ModelsUserAPIKey
  createdAt: string
  deletedAt?: string | null
  email: string
  firstName?: string | null
  fullName?: string | null
  hasGlobalNotifications: boolean
  hasPersonalNotifications: boolean
  lastName?: string | null
  projects?: ModelsProject[] | null
  role: Role
  scopes: Scopes
  teams?: ModelsTeam[] | null
  updatedAt: string
  userID: ModelsUserID
  username: string
}
export interface ProjectBoard {
  projectName: ProjectName
}
export interface SharedWorkItemJoins {
  members?: ModelsWorkItemM2MAssigneeWIA[] | null
  timeEntries?: ModelsTimeEntry[] | null
  workItemComments?: ModelsWorkItemComment[] | null
  workItemTags?: ModelsWorkItemTag[] | null
  workItemType?: ModelsWorkItemType
}
export interface ModelsWorkItemM2MAssigneeWIA {
  role: WorkItemRole
  user: ModelsUser
}
export interface UpdateActivityRequest {
  description?: string
  isProductive?: boolean
  name?: string
}
export interface UpdateTeamRequest {
  description?: string
  name?: string
}
export interface UpdateWorkItemCommentRequest {
  message?: string
  userID?: ModelsUserID
  workItemID?: number
}
export interface UpdateWorkItemTagRequest {
  color?: string
  description?: string
  name?: string
}
export interface UpdateWorkItemTypeRequest {
  color?: string
  description?: string
  name?: string
}
export interface HTTPValidationError {
  detail?: Detail
  messages: Messages
}
export interface ValidationError {
  loc: Location
  msg: Message
  detail: ErrorDetails
  ctx?: ContextualInformation
}
/**
 * verbose details of the error
 */
export interface ErrorDetails {
  schema: {}
  value: string
}
export interface ContextualInformation {}
/**
 * represents an error message response.
 */
export interface HTTPError {
  title: string
  detail: string
  status: number
  error: string
  loc?: Location1
  type: ErrorCode
  validationError?: HTTPValidationError
}
/**
 * represents User data to update
 */
export interface UpdateUserRequest {
  /**
   * originally from auth server but updatable
   */
  firstName?: string
  /**
   * originally from auth server but updatable
   */
  lastName?: string
}
/**
 * represents User authorization data to update
 */
export interface UpdateUserAuthRequest {
  role?: Role
  scopes?: Scopes
}
export interface DemoWorkItemResponse {
  closedAt?: string | null
  createdAt: string
  deletedAt?: string | null
  demoWorkItem: ModelsDemoWorkItem
  description: string
  kanbanStepID: number
  members?: ModelsWorkItemM2MAssigneeWIA[] | null
  metadata: {}
  projectName: ProjectName
  targetDate: string
  teamID: number | null
  timeEntries?: ModelsTimeEntry[] | null
  title: string
  updatedAt: string
  workItemComments?: ModelsWorkItemComment[] | null
  workItemID: number
  workItemTags?: ModelsWorkItemTag[] | null
  workItemType?: ModelsWorkItemType
  workItemTypeID: number
}
export interface DemoTwoWorkItemResponse {
  closedAt?: string | null
  createdAt: string
  deletedAt?: string | null
  demoTwoWorkItem: ModelsDemoTwoWorkItem
  description: string
  kanbanStepID: number
  members?: ModelsWorkItemM2MAssigneeWIA[] | null
  metadata: {}
  projectName: ProjectName
  targetDate: string
  teamID: number | null
  timeEntries?: ModelsTimeEntry[] | null
  title: string
  updatedAt: string
  workItemComments?: ModelsWorkItemComment[] | null
  workItemID: number
  workItemTags?: ModelsWorkItemTag[] | null
  workItemType?: ModelsWorkItemType
  workItemTypeID: number
}
export interface CreateTimeEntryRequest {
  activityID: number
  comment: string
  durationMinutes?: number | null
  start: string
  teamID?: number | null
  userID: ModelsUserID
  workItemID?: number | null
}
export interface UpdateTimeEntryRequest {
  activityID?: number
  comment?: string
  durationMinutes?: number | null
  start?: string
  teamID?: number | null
  userID?: ModelsUserID
  workItemID?: number | null
}
export interface WorkItemBase {
  closedAt?: string | null
  createdAt: string
  deletedAt?: string | null
  description: string
  kanbanStepID: number
  members?: ModelsWorkItemM2MAssigneeWIA[] | null
  metadata: {}
  projectName: ProjectName
  targetDate: string
  teamID: number | null
  timeEntries?: ModelsTimeEntry[] | null
  title: string
  updatedAt: string
  workItemComments?: ModelsWorkItemComment[] | null
  workItemID: number
  workItemTags?: ModelsWorkItemTag[] | null
  workItemType?: ModelsWorkItemType
  workItemTypeID: number
}
export interface PaginationFilterPrimitive {
  filterMode: PaginationFilterModes
  value?: string | null
  caseSensitive?: boolean | null
}
export interface PaginationFilterArray {
  filterMode: PaginationFilterModes
  value?: (string | null)[] | null
}
/**
 * represents any value, including `null`
 */
export interface AnyValue {}
export interface Pagination {
  filter?: PaginationFilter
  sort?: Direction
}
/**
 * represents pagination data indexed by column id
 */
export interface PaginationItems {
  [k: string]: Pagination
}
export interface PaginationCursor {
  direction: Direction
  /**
   * represents a cursor value
   */
  value?: {}
  /**
   * represents the JSON name of the models column
   */
  column: string
}
export interface GetPaginatedUsersQueryParameters {
  role?: Role
  items?: PaginationItems
}
export interface ModelsCacheDemoWorkItemJoins {
  assignees: boolean
  kanbanStep: boolean
  team: boolean
  timeEntries: boolean
  workItemComments: boolean
  workItemTags: boolean
  workItemType: boolean
}
export interface ModelsUserJoins {
  assigneeWorkItems: boolean
  memberProjects: boolean
  memberTeams: boolean
  receiverNotifications: boolean
  senderNotifications: boolean
  timeEntries: boolean
  userAPIKey: boolean
  userNotifications: boolean
  workItemComments: boolean
}
export interface PaginatedDemoWorkItemsResponse {
  items: CacheDemoWorkItemResponse[] | null
  page: PaginationPage
}
export interface CacheDemoWorkItemResponse {
  closedAt?: string | null
  createdAt: string
  deletedAt?: string | null
  description: string
  kanbanStepID: number
  lastMessageAt: string
  line: string
  metadata: {}
  ref: string
  reopened: boolean
  targetDate: string
  teamID: number
  title: string
  updatedAt: string
  workItemID: number
  workItemTypeID: number
}
export interface GetCacheDemoWorkItemQueryParameters {
  joins?: ModelsCacheDemoWorkItemJoins
}
export interface GetCurrentUserQueryParameters {
  joins?: ModelsUserJoins
}
export interface ActivityResponse {
  activityID: number
  deletedAt?: string | null
  description: string
  isProductive: boolean
  name: string
  projectID: number
}
export interface TeamResponse {
  createdAt: string
  description: string
  name: string
  projectID: number
  teamID: number
  updatedAt: string
}
export interface WorkItemCommentResponse {
  createdAt: string
  message: string
  updatedAt: string
  userID: ModelsUserID
  workItemCommentID: number
  workItemID: number
}
export interface WorkItemTagResponse {
  color: string
  deletedAt?: string | null
  description: string
  name: string
  projectID: number
  workItemTagID: number
}
export interface TimeEntryResponse {
  activityID: number
  comment: string
  durationMinutes?: number | null
  start: string
  teamID?: number | null
  timeEntryID: number
  userID: ModelsUserID
  workItemID?: number | null
}
export interface WorkItemTypeResponse {
  color: string
  description: string
  name: string
  projectID: number
  workItemTypeID: number
}
export interface ModelsProjectConfig {
  fields?: ModelsProjectConfigField[] | null
  header?: string[] | null
  visualization?: {} | null
}
export interface ModelsProjectConfigField {
  isEditable?: boolean
  isVisible?: boolean
  name?: string
  path?: string
  showCollapsed?: boolean
}

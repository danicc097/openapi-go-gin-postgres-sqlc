/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { useQuery, useInfiniteQuery } from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  QueryFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query'
import type { EventsParams, HTTPError } from '.././model'
import { customInstance } from '../../api/mutator'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never

export const myProviderCallback = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<void>({ url: `/auth/myprovider/callback`, method: 'get', signal }, options)
}

export const getMyProviderCallbackQueryKey = () => [`/auth/myprovider/callback`] as const

export const getMyProviderCallbackInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof myProviderCallback>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof myProviderCallback>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseInfiniteQueryOptions<Awaited<ReturnType<typeof myProviderCallback>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getMyProviderCallbackQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof myProviderCallback>>> = ({ signal }) =>
    myProviderCallback(requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type MyProviderCallbackInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof myProviderCallback>>>
export type MyProviderCallbackInfiniteQueryError = unknown

export const useMyProviderCallbackInfinite = <
  TData = Awaited<ReturnType<typeof myProviderCallback>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof myProviderCallback>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getMyProviderCallbackInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getMyProviderCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof myProviderCallback>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof myProviderCallback>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseQueryOptions<Awaited<ReturnType<typeof myProviderCallback>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getMyProviderCallbackQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof myProviderCallback>>> = ({ signal }) =>
    myProviderCallback(requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type MyProviderCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof myProviderCallback>>>
export type MyProviderCallbackQueryError = unknown

export const useMyProviderCallback = <
  TData = Awaited<ReturnType<typeof myProviderCallback>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof myProviderCallback>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getMyProviderCallbackQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const myProviderLogin = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<unknown>({ url: `/auth/myprovider/login`, method: 'get', signal }, options)
}

export const getMyProviderLoginQueryKey = () => [`/auth/myprovider/login`] as const

export const getMyProviderLoginInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof myProviderLogin>>,
  TError = void,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof myProviderLogin>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseInfiniteQueryOptions<Awaited<ReturnType<typeof myProviderLogin>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getMyProviderLoginQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof myProviderLogin>>> = ({ signal }) =>
    myProviderLogin(requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type MyProviderLoginInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof myProviderLogin>>>
export type MyProviderLoginInfiniteQueryError = void

export const useMyProviderLoginInfinite = <
  TData = Awaited<ReturnType<typeof myProviderLogin>>,
  TError = void,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof myProviderLogin>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getMyProviderLoginInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getMyProviderLoginQueryOptions = <
  TData = Awaited<ReturnType<typeof myProviderLogin>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof myProviderLogin>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseQueryOptions<Awaited<ReturnType<typeof myProviderLogin>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getMyProviderLoginQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof myProviderLogin>>> = ({ signal }) =>
    myProviderLogin(requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type MyProviderLoginQueryResult = NonNullable<Awaited<ReturnType<typeof myProviderLogin>>>
export type MyProviderLoginQueryError = void

export const useMyProviderLogin = <TData = Awaited<ReturnType<typeof myProviderLogin>>, TError = void>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof myProviderLogin>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getMyProviderLoginQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const events = (
  params: EventsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string>({ url: `/events`, method: 'get', params, signal }, options)
}

export const getEventsQueryKey = (params: EventsParams) => [`/events`, ...(params ? [params] : [])] as const

export const getEventsInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof events>>, TError = unknown>(
  params: EventsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof events>>, TError, TData>
    request?: SecondParameter<typeof customInstance>
  },
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof events>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getEventsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof events>>> = ({ signal }) =>
    events(params, requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type EventsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof events>>>
export type EventsInfiniteQueryError = unknown

export const useEventsInfinite = <TData = Awaited<ReturnType<typeof events>>, TError = unknown>(
  params: EventsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof events>>, TError, TData>
    request?: SecondParameter<typeof customInstance>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventsInfiniteQueryOptions(params, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getEventsQueryOptions = <TData = Awaited<ReturnType<typeof events>>, TError = unknown>(
  params: EventsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof events>>, TError, TData>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryOptions<Awaited<ReturnType<typeof events>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getEventsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof events>>> = ({ signal }) =>
    events(params, requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type EventsQueryResult = NonNullable<Awaited<ReturnType<typeof events>>>
export type EventsQueryError = unknown

export const useEvents = <TData = Awaited<ReturnType<typeof events>>, TError = unknown>(
  params: EventsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof events>>, TError, TData>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Ping pongs
 */
export const ping = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<string>({ url: `/ping`, method: 'get', signal }, options)
}

export const getPingQueryKey = () => [`/ping`] as const

export const getPingInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof ping>>, TError = HTTPError>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseInfiniteQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPingQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ping>>> = ({ signal }) => ping(requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type PingInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof ping>>>
export type PingInfiniteQueryError = HTTPError

export const usePingInfinite = <TData = Awaited<ReturnType<typeof ping>>, TError = HTTPError>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPingInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getPingQueryOptions = <TData = Awaited<ReturnType<typeof ping>>, TError = HTTPError>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPingQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof ping>>> = ({ signal }) => ping(requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type PingQueryResult = NonNullable<Awaited<ReturnType<typeof ping>>>
export type PingQueryError = HTTPError

export const usePing = <TData = Awaited<ReturnType<typeof ping>>, TError = HTTPError>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof ping>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPingQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Returns this very OpenAPI spec.
 */
export const openapiYamlGet = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<Blob>({ url: `/openapi.yaml`, method: 'get', responseType: 'blob', signal }, options)
}

export const getOpenapiYamlGetQueryKey = () => [`/openapi.yaml`] as const

export const getOpenapiYamlGetInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof openapiYamlGet>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof openapiYamlGet>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseInfiniteQueryOptions<Awaited<ReturnType<typeof openapiYamlGet>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOpenapiYamlGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof openapiYamlGet>>> = ({ signal }) =>
    openapiYamlGet(requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type OpenapiYamlGetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof openapiYamlGet>>>
export type OpenapiYamlGetInfiniteQueryError = unknown

export const useOpenapiYamlGetInfinite = <
  TData = Awaited<ReturnType<typeof openapiYamlGet>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof openapiYamlGet>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getOpenapiYamlGetInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getOpenapiYamlGetQueryOptions = <
  TData = Awaited<ReturnType<typeof openapiYamlGet>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof openapiYamlGet>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseQueryOptions<Awaited<ReturnType<typeof openapiYamlGet>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOpenapiYamlGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof openapiYamlGet>>> = ({ signal }) =>
    openapiYamlGet(requestOptions, signal)

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type OpenapiYamlGetQueryResult = NonNullable<Awaited<ReturnType<typeof openapiYamlGet>>>
export type OpenapiYamlGetQueryError = unknown

export const useOpenapiYamlGet = <TData = Awaited<ReturnType<typeof openapiYamlGet>>, TError = unknown>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof openapiYamlGet>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getOpenapiYamlGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

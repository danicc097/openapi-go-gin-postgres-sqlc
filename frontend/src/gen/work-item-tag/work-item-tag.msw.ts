/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { faker } from '@faker-js/faker'
import { rest } from 'msw'

export const getCreateWorkItemTagMock = () => ({
  color: faker.word.sample(),
  description: faker.word.sample(),
  name: faker.word.sample(),
  projectID: faker.number.int({ min: undefined, max: undefined }),
  workItemTagID: faker.number.int({ min: undefined, max: undefined }),
})

export const getGetWorkItemTagMock = () => ({
  color: faker.word.sample(),
  description: faker.word.sample(),
  name: faker.word.sample(),
  projectID: faker.number.int({ min: undefined, max: undefined }),
  workItemTagID: faker.number.int({ min: undefined, max: undefined }),
})

export const getUpdateWorkItemTagMock = () => ({
  color: faker.word.sample(),
  description: faker.word.sample(),
  name: faker.word.sample(),
  projectID: faker.number.int({ min: undefined, max: undefined }),
  workItemTagID: faker.number.int({ min: undefined, max: undefined }),
})

export const getWorkItemTagMSW = () => [
  rest.post('*/project/:projectName/workItemTag/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getCreateWorkItemTagMock()))
  }),
  rest.get('*/project/:projectName/workItemTag/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetWorkItemTagMock()))
  }),
  rest.patch('*/project/:projectName/workItemTag/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getUpdateWorkItemTagMock()))
  }),
  rest.delete('*/project/:projectName/workItemTag/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
]

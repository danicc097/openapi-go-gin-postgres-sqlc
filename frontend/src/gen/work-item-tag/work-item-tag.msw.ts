import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  WorkItemTag
} from '.././model'

export const getCreateWorkItemTagResponseMock = (overrideResponse: any = {}): WorkItemTag => ({color: faker.word.sample(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID, ...overrideResponse})

export const getGetWorkItemTagResponseMock = (overrideResponse: any = {}): WorkItemTag => ({color: faker.word.sample(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID, ...overrideResponse})

export const getUpdateWorkItemTagResponseMock = (overrideResponse: any = {}): WorkItemTag => ({color: faker.word.sample(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID, ...overrideResponse})


export const getCreateWorkItemTagMockHandler = (overrideResponse?: WorkItemTag) => {
  return http.post('*/project/:projectName/work-item-tag/', async () => {
    await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getCreateWorkItemTagResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetWorkItemTagMockHandler = (overrideResponse?: WorkItemTag) => {
  return http.get('*/work-item-tag/:workItemTagID', async () => {
    await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetWorkItemTagResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateWorkItemTagMockHandler = (overrideResponse?: WorkItemTag) => {
  return http.patch('*/work-item-tag/:workItemTagID', async () => {
    await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpdateWorkItemTagResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteWorkItemTagMockHandler = () => {
  return http.delete('*/work-item-tag/:workItemTagID', async () => {
    await delay(200);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getWorkItemTagMock = () => [
  getCreateWorkItemTagMockHandler(),
  getGetWorkItemTagMockHandler(),
  getUpdateWorkItemTagMockHandler(),
  getDeleteWorkItemTagMockHandler()
]

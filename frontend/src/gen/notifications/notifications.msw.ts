import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  NotificationType
} from '.././model'
import type {
  PaginatedNotificationsResponse
} from '.././model'

export const getGetPaginatedNotificationsResponseMock = (overrideResponse: any = {}): PaginatedNotificationsResponse => ({items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({notification: {body: faker.word.sample(), createdAt: (() => faker.date.past())(), labels: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), link: faker.helpers.arrayElement([faker.word.sample(), null]), notificationID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.NotificationID, notificationType: faker.helpers.arrayElement(Object.values(NotificationType)), receiver: faker.word.sample(), sender: faker.word.sample(), title: faker.word.sample(), ...overrideResponse}, notificationID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.NotificationID, read: faker.datatype.boolean(), userID: faker.string.uuid() as EntityIDs.UserID, userNotificationID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.UserNotificationID, ...overrideResponse})), page: {nextCursor: faker.word.sample(), ...overrideResponse}, ...overrideResponse})


export const getGetPaginatedNotificationsMockHandler = (overrideResponse?: PaginatedNotificationsResponse) => {
  return http.get('*/notifications/user/page', async () => {
    await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetPaginatedNotificationsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getNotificationsMock = () => [
  getGetPaginatedNotificationsMockHandler()
]

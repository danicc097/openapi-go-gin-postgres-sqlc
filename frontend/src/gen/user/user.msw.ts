import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  ProjectName,
  Role,
  Scope
} from '.././model'
import type {
  PaginatedUsersResponse,
  UserResponse
} from '.././model'

export const getGetPaginatedUsersResponseMock = (overrideResponse: any = {}): PaginatedUsersResponse => ({items: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), apiKey: {apiKey: faker.word.sample(), expiresOn: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, ...overrideResponse}, createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), projects: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({boardConfig: {fields: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({isEditable: faker.datatype.boolean(), isVisible: faker.datatype.boolean(), name: faker.word.sample(), path: faker.word.sample(), showCollapsed: faker.datatype.boolean(), ...overrideResponse})), header: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), visualization: {}, ...overrideResponse}, createdAt: (() => faker.date.past())(), description: faker.word.sample(), name: faker.helpers.arrayElement(Object.values(ProjectName)), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, updatedAt: (() => faker.date.past())(), ...overrideResponse})), role: faker.helpers.arrayElement(Object.values(Role)), scopes: faker.helpers.arrayElements(Object.values(Scope)), teams: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, teamID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TeamID, updatedAt: (() => faker.date.past())(), ...overrideResponse})), updatedAt: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, username: faker.word.sample(), ...overrideResponse})), page: {nextCursor: faker.word.sample(), ...overrideResponse}, ...overrideResponse})

export const getGetCurrentUserResponseMock = (overrideResponse: any = {}): UserResponse => ({age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), apiKey: {apiKey: faker.word.sample(), expiresOn: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, ...overrideResponse}, createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: (() => faker.internet.email())(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), projects: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({boardConfig: {fields: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({isEditable: faker.datatype.boolean(), isVisible: faker.datatype.boolean(), name: faker.word.sample(), path: faker.word.sample(), showCollapsed: faker.datatype.boolean(), ...overrideResponse})), header: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), visualization: {}, ...overrideResponse}, createdAt: (() => faker.date.past())(), description: faker.word.sample(), name: faker.helpers.arrayElement(Object.values(ProjectName)), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, updatedAt: (() => faker.date.past())(), ...overrideResponse})), role: faker.helpers.arrayElement(Object.values(Role)), scopes: faker.helpers.arrayElements(Object.values(Scope)), teams: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, teamID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TeamID, updatedAt: (() => faker.date.past())(), ...overrideResponse})), updatedAt: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, username: faker.word.sample(), ...overrideResponse})

export const getUpdateUserResponseMock = (overrideResponse: any = {}): UserResponse => ({age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), apiKey: {apiKey: faker.word.sample(), expiresOn: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, ...overrideResponse}, createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: (() => faker.internet.email())(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), projects: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({boardConfig: {fields: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({isEditable: faker.datatype.boolean(), isVisible: faker.datatype.boolean(), name: faker.word.sample(), path: faker.word.sample(), showCollapsed: faker.datatype.boolean(), ...overrideResponse})), header: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), visualization: {}, ...overrideResponse}, createdAt: (() => faker.date.past())(), description: faker.word.sample(), name: faker.helpers.arrayElement(Object.values(ProjectName)), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, updatedAt: (() => faker.date.past())(), ...overrideResponse})), role: faker.helpers.arrayElement(Object.values(Role)), scopes: faker.helpers.arrayElements(Object.values(Scope)), teams: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, teamID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TeamID, updatedAt: (() => faker.date.past())(), ...overrideResponse})), updatedAt: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, username: faker.word.sample(), ...overrideResponse})


export const getGetPaginatedUsersMockHandler = (overrideResponse?: PaginatedUsersResponse) => {
  return http.get('*/user/page', async () => {
    await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetPaginatedUsersResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetCurrentUserMockHandler = (overrideResponse?: UserResponse) => {
  return http.get('*/user/me', async () => {
    await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetCurrentUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateUserAuthorizationMockHandler = () => {
  return http.patch('*/user/:id/authorization', async () => {
    await delay(200);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteUserMockHandler = () => {
  return http.delete('*/user/:id', async () => {
    await delay(200);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateUserMockHandler = (overrideResponse?: UserResponse) => {
  return http.patch('*/user/:id', async () => {
    await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpdateUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getUserMock = () => [
  getGetPaginatedUsersMockHandler(),
  getGetCurrentUserMockHandler(),
  getUpdateUserAuthorizationMockHandler(),
  getDeleteUserMockHandler(),
  getUpdateUserMockHandler()
]

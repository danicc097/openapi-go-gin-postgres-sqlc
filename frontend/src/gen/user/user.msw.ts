/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { faker } from '@faker-js/faker'
import { rest } from 'msw'
import { Project, Role, Scope } from '.././model'

export const getGetCurrentUserMock = () => ({
  apiKey: { apiKey: faker.word.sample(), expiresOn: (() => faker.date.past())(), userID: faker.word.sample() },
  createdAt: (() => faker.date.past())(),
  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
  email: (() => faker.internet.email())(),
  firstName: faker.helpers.arrayElement([faker.word.sample(), null]),
  fullName: faker.helpers.arrayElement([faker.word.sample(), null]),
  hasGlobalNotifications: faker.datatype.boolean(),
  hasPersonalNotifications: faker.datatype.boolean(),
  lastName: faker.helpers.arrayElement([faker.word.sample(), null]),
  projects: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    boardConfig: {
      fields: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        isEditable: faker.datatype.boolean(),
        isVisible: faker.datatype.boolean(),
        name: faker.word.sample(),
        path: faker.word.sample(),
        showCollapsed: faker.datatype.boolean(),
      })),
      header: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.word.sample(),
      ),
      visualization: {},
    },
    createdAt: (() => faker.date.past())(),
    description: faker.word.sample(),
    name: faker.helpers.arrayElement(Object.values(Project)),
    projectID: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: (() => faker.date.past())(),
  })),
  role: faker.helpers.arrayElement(Object.values(Role)),
  scopes: faker.helpers.arrayElements(Object.values(Scope)),
  teams: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    createdAt: (() => faker.date.past())(),
    description: faker.word.sample(),
    name: faker.word.sample(),
    projectID: faker.number.int({ min: undefined, max: undefined }),
    teamID: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: (() => faker.date.past())(),
  })),
  userID: (() => faker.datatype.uuid())(),
  username: faker.word.sample(),
})

export const getUpdateUserMock = () => ({
  apiKey: { apiKey: faker.word.sample(), expiresOn: (() => faker.date.past())(), userID: faker.word.sample() },
  createdAt: (() => faker.date.past())(),
  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
  email: (() => faker.internet.email())(),
  firstName: faker.helpers.arrayElement([faker.word.sample(), null]),
  fullName: faker.helpers.arrayElement([faker.word.sample(), null]),
  hasGlobalNotifications: faker.datatype.boolean(),
  hasPersonalNotifications: faker.datatype.boolean(),
  lastName: faker.helpers.arrayElement([faker.word.sample(), null]),
  projects: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    boardConfig: {
      fields: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        isEditable: faker.datatype.boolean(),
        isVisible: faker.datatype.boolean(),
        name: faker.word.sample(),
        path: faker.word.sample(),
        showCollapsed: faker.datatype.boolean(),
      })),
      header: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.word.sample(),
      ),
      visualization: {},
    },
    createdAt: (() => faker.date.past())(),
    description: faker.word.sample(),
    name: faker.helpers.arrayElement(Object.values(Project)),
    projectID: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: (() => faker.date.past())(),
  })),
  role: faker.helpers.arrayElement(Object.values(Role)),
  scopes: faker.helpers.arrayElements(Object.values(Scope)),
  teams: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    createdAt: (() => faker.date.past())(),
    description: faker.word.sample(),
    name: faker.word.sample(),
    projectID: faker.number.int({ min: undefined, max: undefined }),
    teamID: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: (() => faker.date.past())(),
  })),
  userID: (() => faker.datatype.uuid())(),
  username: faker.word.sample(),
})

export const getUserMSW = () => [
  rest.get('*/user/me', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetCurrentUserMock()))
  }),
  rest.patch('*/user/:id/authorization', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.delete('*/user/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.patch('*/user/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getUpdateUserMock()))
  }),
]

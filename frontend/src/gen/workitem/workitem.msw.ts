/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { faker } from '@faker-js/faker'
import { rest } from 'msw'

export const getCreateWorkitemMock = () =>
  faker.helpers.arrayElement([
    {
      closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      createdAt: (() => faker.date.past())(),
      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      description: faker.word.sample(),
      kanbanStepID: faker.number.int({ min: undefined, max: undefined }),
      metadata: (() => ({
        key: faker.color.hsl(),
      }))(),
      targetDate: (() => faker.date.past())(),
      teamID: faker.number.int({ min: undefined, max: undefined }),
      title: faker.word.sample(),
      updatedAt: (() => faker.date.past())(),
      workItemID: faker.number.int({ min: undefined, max: undefined }),
      workItemTypeID: faker.number.int({ min: undefined, max: undefined }),
    },
  ])

export const getGetWorkitemMock = () =>
  faker.helpers.arrayElement([
    {
      closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      createdAt: (() => faker.date.past())(),
      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      description: faker.word.sample(),
      kanbanStepID: faker.number.int({ min: undefined, max: undefined }),
      metadata: (() => ({
        key: faker.color.hsl(),
      }))(),
      targetDate: (() => faker.date.past())(),
      teamID: faker.number.int({ min: undefined, max: undefined }),
      title: faker.word.sample(),
      updatedAt: (() => faker.date.past())(),
      workItemID: faker.number.int({ min: undefined, max: undefined }),
      workItemTypeID: faker.number.int({ min: undefined, max: undefined }),
    },
  ])

export const getUpdateWorkitemMock = () =>
  faker.helpers.arrayElement([
    {
      closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      createdAt: (() => faker.date.past())(),
      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      description: faker.word.sample(),
      kanbanStepID: faker.number.int({ min: undefined, max: undefined }),
      metadata: (() => ({
        key: faker.color.hsl(),
      }))(),
      targetDate: (() => faker.date.past())(),
      teamID: faker.number.int({ min: undefined, max: undefined }),
      title: faker.word.sample(),
      updatedAt: (() => faker.date.past())(),
      workItemID: faker.number.int({ min: undefined, max: undefined }),
      workItemTypeID: faker.number.int({ min: undefined, max: undefined }),
    },
  ])

export const getCreateWorkitemCommentMock = () =>
  faker.helpers.arrayElement([
    {
      createdAt: (() => faker.date.past())(),
      message: faker.word.sample(),
      updatedAt: (() => faker.date.past())(),
      userID: (() => faker.datatype.uuid())(),
      workItemCommentID: faker.number.int({ min: undefined, max: undefined }),
      workItemID: faker.number.int({ min: undefined, max: undefined }),
    },
  ])

export const getWorkitemMSW = () => [
  rest.post('*/workitem/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getCreateWorkitemMock()))
  }),
  rest.get('*/workitem/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetWorkitemMock()))
  }),
  rest.patch('*/workitem/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getUpdateWorkitemMock()))
  }),
  rest.delete('*/workitem/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.post('*/workitem/:id/comments/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getCreateWorkitemCommentMock()))
  }),
]

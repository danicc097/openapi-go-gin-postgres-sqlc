/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios'
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query'
import type {
  DbWorkItem,
  RestDemoWorkItemCreateRequest,
  DbWorkItemComment,
  RestWorkItemCommentCreateRequest,
} from '.././model'

/**
 * @summary create workitem
 */
export const createWorkitem = (
  restDemoWorkItemCreateRequest: RestDemoWorkItemCreateRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DbWorkItem>> => {
  return axios.post(`/workitem/`, restDemoWorkItemCreateRequest, options)
}

export const getCreateWorkitemMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkitem>>,
    TError,
    { data: RestDemoWorkItemCreateRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWorkitem>>,
  TError,
  { data: RestDemoWorkItemCreateRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWorkitem>>,
    { data: RestDemoWorkItemCreateRequest }
  > = (props) => {
    const { data } = props ?? {}

    return createWorkitem(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateWorkitemMutationResult = NonNullable<Awaited<ReturnType<typeof createWorkitem>>>
export type CreateWorkitemMutationBody = RestDemoWorkItemCreateRequest
export type CreateWorkitemMutationError = AxiosError<unknown>

export const useCreateWorkitem = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkitem>>,
    TError,
    { data: RestDemoWorkItemCreateRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getCreateWorkitemMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary get workitem
 */
export const getWorkitem = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DbWorkItem>> => {
  return axios.get(`/workitem/${id}/`, options)
}

export const getGetWorkitemQueryKey = (id: number) => [`/workitem/${id}/`] as const

export const getGetWorkitemInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkitem>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorkitem>>, TError, TData>
    axios?: AxiosRequestConfig
  },
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorkitem>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetWorkitemQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkitem>>> = ({ signal }) =>
    getWorkitem(id, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: !!id, staleTime: 3600000, ...queryOptions }
}

export type GetWorkitemInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkitem>>>
export type GetWorkitemInfiniteQueryError = AxiosError<unknown>

export const useGetWorkitemInfinite = <TData = Awaited<ReturnType<typeof getWorkitem>>, TError = AxiosError<unknown>>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorkitem>>, TError, TData>
    axios?: AxiosRequestConfig
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWorkitemInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetWorkitemQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkitem>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getWorkitem>>, TError, TData>
    axios?: AxiosRequestConfig
  },
): UseQueryOptions<Awaited<ReturnType<typeof getWorkitem>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetWorkitemQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkitem>>> = ({ signal }) =>
    getWorkitem(id, { signal, ...axiosOptions })

  return { queryKey, queryFn, enabled: !!id, staleTime: 3600000, ...queryOptions }
}

export type GetWorkitemQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkitem>>>
export type GetWorkitemQueryError = AxiosError<unknown>

export const useGetWorkitem = <TData = Awaited<ReturnType<typeof getWorkitem>>, TError = AxiosError<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getWorkitem>>, TError, TData>
    axios?: AxiosRequestConfig
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWorkitemQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary update workitem
 */
export const updateWorkitem = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<DbWorkItem>> => {
  return axios.patch(`/workitem/${id}/`, undefined, options)
}

export const getUpdateWorkitemMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof updateWorkitem>>, TError, { id: number }, TContext>
  axios?: AxiosRequestConfig
}): UseMutationOptions<Awaited<ReturnType<typeof updateWorkitem>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateWorkitem>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return updateWorkitem(id, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateWorkitemMutationResult = NonNullable<Awaited<ReturnType<typeof updateWorkitem>>>

export type UpdateWorkitemMutationError = AxiosError<unknown>

export const useUpdateWorkitem = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof updateWorkitem>>, TError, { id: number }, TContext>
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getUpdateWorkitemMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary delete workitem
 */
export const deleteWorkitem = (id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.delete(`/workitem/${id}/`, options)
}

export const getDeleteWorkitemMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteWorkitem>>, TError, { id: number }, TContext>
  axios?: AxiosRequestConfig
}): UseMutationOptions<Awaited<ReturnType<typeof deleteWorkitem>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWorkitem>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return deleteWorkitem(id, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteWorkitemMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWorkitem>>>

export type DeleteWorkitemMutationError = AxiosError<unknown>

export const useDeleteWorkitem = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteWorkitem>>, TError, { id: number }, TContext>
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getDeleteWorkitemMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary create workitem comment
 */
export const createWorkitemComment = (
  id: number,
  restWorkItemCommentCreateRequest: RestWorkItemCommentCreateRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DbWorkItemComment>> => {
  return axios.post(`/workitem/${id}/comments/`, restWorkItemCommentCreateRequest, options)
}

export const getCreateWorkitemCommentMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkitemComment>>,
    TError,
    { id: number; data: RestWorkItemCommentCreateRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWorkitemComment>>,
  TError,
  { id: number; data: RestWorkItemCommentCreateRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWorkitemComment>>,
    { id: number; data: RestWorkItemCommentCreateRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return createWorkitemComment(id, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateWorkitemCommentMutationResult = NonNullable<Awaited<ReturnType<typeof createWorkitemComment>>>
export type CreateWorkitemCommentMutationBody = RestWorkItemCommentCreateRequest
export type CreateWorkitemCommentMutationError = AxiosError<unknown>

export const useCreateWorkitemComment = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkitemComment>>,
    TError,
    { id: number; data: RestWorkItemCommentCreateRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getCreateWorkitemCommentMutationOptions(options)

  return useMutation(mutationOptions)
}

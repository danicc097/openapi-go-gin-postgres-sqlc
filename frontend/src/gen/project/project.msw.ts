import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  ProjectName,
  Scope,
  WorkItemRole
} from '.././model'
import type {
  DemoTwoWorkItemResponse,
  DemoWorkItemResponse,
  ModelsProject,
  ProjectBoard,
  ProjectConfig,
  WorkItemResponse
} from '.././model'

export const getGetProjectResponseMock = (overrideResponse: Partial< ModelsProject > = {}): ModelsProject => ({boardConfig: {fields: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({isEditable: faker.datatype.boolean(), isVisible: faker.datatype.boolean(), name: faker.word.sample(), path: faker.word.sample(), showCollapsed: faker.datatype.boolean()})), header: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), visualization: {}}, createdAt: (() => faker.date.past())(), description: faker.word.sample(), name: faker.helpers.arrayElement(Object.values(ProjectName)), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, updatedAt: (() => faker.date.past())(), ...overrideResponse})

export const getGetProjectConfigResponseMock = (overrideResponse: Partial< ProjectConfig > = {}): ProjectConfig => ({fields: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({isEditable: faker.datatype.boolean(), isVisible: faker.datatype.boolean(), name: faker.word.sample(), path: faker.word.sample(), showCollapsed: faker.datatype.boolean()})), header: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), visualization: {}, ...overrideResponse})

export const getGetProjectBoardResponseMock = (overrideResponse: Partial< ProjectBoard > = {}): ProjectBoard => ({projectName: faker.helpers.arrayElement(Object.values(ProjectName)), ...overrideResponse})

export const getGetProjectWorkitemsResponseDemoWorkItemResponseMock = (overrideResponse: Partial<DemoWorkItemResponse> = {}): DemoWorkItemResponse => ({...{closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), demoWorkItem: {lastMessageAt: (() => faker.date.past())(), line: faker.word.sample(), ref: faker.helpers.fromRegExp('^[0-9]{8}$'), reopened: faker.datatype.boolean(), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID}, description: faker.word.sample(), kanbanStepID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.KanbanStepID, members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({role: faker.helpers.arrayElement(Object.values(WorkItemRole)), user: {age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), scopes: faker.helpers.arrayElements(Object.values(Scope)), updatedAt: (() => faker.date.past())(), userID: faker.helpers.fromRegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'), username: faker.word.sample()}})), metadata: (() => ({
              key: faker.string.sample()
            }))(), projectName: faker.helpers.arrayElement(['demo'] as const), targetDate: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntries: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.helpers.fromRegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'), workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), title: faker.word.sample(), updatedAt: (() => faker.date.past())(), workItemComments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), message: faker.word.sample(), updatedAt: (() => faker.date.past())(), userID: faker.helpers.fromRegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'), workItemCommentID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemCommentID, workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID})), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID, workItemTags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.helpers.fromRegExp('^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID})), workItemType: {color: faker.helpers.fromRegExp('^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, ...overrideResponse});

export const getGetProjectWorkitemsResponseDemoTwoWorkItemResponseMock = (overrideResponse: Partial<DemoTwoWorkItemResponse> = {}): DemoTwoWorkItemResponse => ({...{closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), demoTwoWorkItem: {customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID}, description: faker.word.sample(), kanbanStepID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.KanbanStepID, members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({role: faker.helpers.arrayElement(Object.values(WorkItemRole)), user: {age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), scopes: faker.helpers.arrayElements(Object.values(Scope)), updatedAt: (() => faker.date.past())(), userID: faker.helpers.fromRegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'), username: faker.word.sample()}})), metadata: (() => ({
              key: faker.string.sample()
            }))(), projectName: faker.helpers.arrayElement(['demo_two'] as const), targetDate: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntries: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.helpers.fromRegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'), workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), title: faker.word.sample(), updatedAt: (() => faker.date.past())(), workItemComments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), message: faker.word.sample(), updatedAt: (() => faker.date.past())(), userID: faker.helpers.fromRegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'), workItemCommentID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemCommentID, workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID})), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID, workItemTags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.helpers.fromRegExp('^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID})), workItemType: {color: faker.helpers.fromRegExp('^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, ...overrideResponse});

export const getGetProjectWorkitemsResponseMock = (): WorkItemResponse => (faker.helpers.arrayElement([{...getGetProjectWorkitemsResponseDemoWorkItemResponseMock()},{...getGetProjectWorkitemsResponseDemoTwoWorkItemResponseMock()}]))


export const getInitializeProjectMockHandler = () => {
  return http.post('*/project/:projectName/initialize', async () => {await delay(200);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetProjectMockHandler = (overrideResponse?: ModelsProject | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ModelsProject> | ModelsProject)) => {
  return http.get('*/project/:projectName/', async (info) => {await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProjectResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetProjectConfigMockHandler = (overrideResponse?: ProjectConfig | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectConfig> | ProjectConfig)) => {
  return http.get('*/project/:projectName/config', async (info) => {await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProjectConfigResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateProjectConfigMockHandler = () => {
  return http.put('*/project/:projectName/config', async () => {await delay(200);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetProjectBoardMockHandler = (overrideResponse?: ProjectBoard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectBoard> | ProjectBoard)) => {
  return http.get('*/project/:projectName/board', async (info) => {await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProjectBoardResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetProjectWorkitemsMockHandler = (overrideResponse?: WorkItemResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<WorkItemResponse> | WorkItemResponse)) => {
  return http.get('*/project/:projectName/workitems', async (info) => {await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProjectWorkitemsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getProjectMock = () => [
  getInitializeProjectMockHandler(),
  getGetProjectMockHandler(),
  getGetProjectConfigMockHandler(),
  getUpdateProjectConfigMockHandler(),
  getGetProjectBoardMockHandler(),
  getGetProjectWorkitemsMockHandler()
]

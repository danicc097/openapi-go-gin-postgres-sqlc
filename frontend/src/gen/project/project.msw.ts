/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { rest } from 'msw'
import { faker } from '@faker-js/faker'

export const getGetProjectMock = () => ({})

export const getGetProjectConfigMock = () => ({
  fields: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    isEditable: faker.datatype.boolean(),
    isVisible: faker.datatype.boolean(),
    name: faker.random.word(),
    path: faker.random.word(),
    showCollapsed: faker.datatype.boolean(),
  })),
  header: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
    faker.random.word(),
  ),
})

export const getGetProjectBoardMock = () => ({
  activities: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
    undefined,
  ]),
  kanbanSteps: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
    undefined,
  ]),
  project: faker.helpers.arrayElement([{}, undefined]),
  teams: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
    undefined,
  ]),
  workItemTags: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
    undefined,
  ]),
  workItemTypes: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
    undefined,
  ]),
})

export const getGetProjectWorkitemsMock = () =>
  faker.helpers.arrayElement([
    {
      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      createdAt: (() => faker.date.past())(),
      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      demoProjectWorkItem: {},
      description: faker.random.word(),
      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
      members: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
        undefined,
      ]),
      metadata: {},
      targetDate: (() => faker.date.past())(),
      teamID: faker.datatype.number({ min: undefined, max: undefined }),
      timeEntries: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
        undefined,
      ]),
      title: faker.random.word(),
      updatedAt: (() => faker.date.past())(),
      workItemComments: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
        undefined,
      ]),
      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
      workItemTags: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})),
        undefined,
      ]),
      workItemType: faker.helpers.arrayElement([{}, undefined]),
      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
    },
  ])

export const getProjectMSW = () => [
  rest.post('*/project/:id/initialize', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/project/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectMock()))
  }),
  rest.get('*/project/:id/config', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectConfigMock()))
  }),
  rest.put('*/project/:id/config', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/project/:id/board', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectBoardMock()))
  }),
  rest.get('*/project/:id/workitems', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectWorkitemsMock()))
  }),
]

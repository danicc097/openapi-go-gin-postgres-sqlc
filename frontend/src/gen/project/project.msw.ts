/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { rest } from 'msw'
import { faker } from '@faker-js/faker'
import { Project, WorkItemRole } from '.././model'

export const getGetProjectMock = () => ({
  activities: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      activityID: faker.datatype.number({ min: undefined, max: undefined }),
      description: faker.random.word(),
      isProductive: faker.datatype.boolean(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      timeEntries: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          activityID: faker.datatype.number({ min: undefined, max: undefined }),
          comment: faker.random.word(),
          durationMinutes: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          start: (() => faker.date.past())(),
          teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
          userID: faker.random.word(),
          workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
        })),
        undefined,
      ]),
    })),
    undefined,
  ]),
  createdAt: (() => faker.date.past())(),
  description: faker.random.word(),
  initialized: faker.datatype.boolean(),
  kanbanSteps: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      color: faker.random.word(),
      description: faker.random.word(),
      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      stepOrder: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
      timeTrackable: faker.datatype.boolean(),
    })),
    undefined,
  ]),
  name: faker.helpers.arrayElement(Object.values(Project)),
  projectID: faker.datatype.number({ min: undefined, max: undefined }),
  teams: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      createdAt: (() => faker.date.past())(),
      description: faker.random.word(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      teamID: faker.datatype.number({ min: undefined, max: undefined }),
      timeEntries: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          activityID: faker.datatype.number({ min: undefined, max: undefined }),
          comment: faker.random.word(),
          durationMinutes: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          start: (() => faker.date.past())(),
          teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
          userID: faker.random.word(),
          workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
        })),
        undefined,
      ]),
      updatedAt: (() => faker.date.past())(),
      users: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          createdAt: (() => faker.date.past())(),
          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
          email: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
          hasGlobalNotifications: faker.datatype.boolean(),
          hasPersonalNotifications: faker.datatype.boolean(),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          timeEntries: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              activityID: faker.datatype.number({ min: undefined, max: undefined }),
              comment: faker.random.word(),
              durationMinutes: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              start: (() => faker.date.past())(),
              teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
              timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
              userID: faker.random.word(),
              workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
            })),
            undefined,
          ]),
          userAPIKey: faker.helpers.arrayElement([
            {
              apiKey: faker.random.word(),
              expiresOn: (() => faker.date.past())(),
              user: faker.helpers.arrayElement([
                {
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  email: faker.random.word(),
                  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                  fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                  hasGlobalNotifications: faker.datatype.boolean(),
                  hasPersonalNotifications: faker.datatype.boolean(),
                  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  userID: faker.random.word(),
                  username: faker.random.word(),
                  workItems: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItem: faker.helpers.arrayElement([
                            {
                              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              description: faker.random.word(),
                              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                              members: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({ role: faker.helpers.arrayElement(Object.values(WorkItemRole)) }),
                                ),
                                undefined,
                              ]),
                              metadata: Array.from(
                                { length: faker.datatype.number({ min: 1, max: 10 }) },
                                (_, i) => i + 1,
                              ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                              project2WorkItem: faker.helpers.arrayElement([
                                {
                                  customDateForProject2: faker.helpers.arrayElement([
                                    (() => faker.date.past())(),
                                    null,
                                  ]),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              targetDate: (() => faker.date.past())(),
                              teamID: faker.datatype.number({ min: undefined, max: undefined }),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              title: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              workItemComments: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTags: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemType: faker.helpers.arrayElement([
                                {
                                  color: faker.random.word(),
                                  description: faker.random.word(),
                                  name: faker.random.word(),
                                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItem: faker.helpers.arrayElement([
                            {
                              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              demoProjectWorkItem: faker.helpers.arrayElement([
                                {
                                  lastMessageAt: (() => faker.date.past())(),
                                  line: faker.random.word(),
                                  ref: faker.random.word(),
                                  reopened: faker.datatype.boolean(),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              description: faker.random.word(),
                              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                              members: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({ role: faker.helpers.arrayElement(Object.values(WorkItemRole)) }),
                                ),
                                undefined,
                              ]),
                              metadata: Array.from(
                                { length: faker.datatype.number({ min: 1, max: 10 }) },
                                (_, i) => i + 1,
                              ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                              targetDate: (() => faker.date.past())(),
                              teamID: faker.datatype.number({ min: undefined, max: undefined }),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              title: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              workItemComments: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTags: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemType: faker.helpers.arrayElement([
                                {
                                  color: faker.random.word(),
                                  description: faker.random.word(),
                                  name: faker.random.word(),
                                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItem: faker.helpers.arrayElement([
                            {
                              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              demoProjectWorkItem: faker.helpers.arrayElement([
                                {
                                  lastMessageAt: (() => faker.date.past())(),
                                  line: faker.random.word(),
                                  ref: faker.random.word(),
                                  reopened: faker.datatype.boolean(),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              description: faker.random.word(),
                              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                              members: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({ role: faker.helpers.arrayElement(Object.values(WorkItemRole)) }),
                                ),
                                undefined,
                              ]),
                              metadata: Array.from(
                                { length: faker.datatype.number({ min: 1, max: 10 }) },
                                (_, i) => i + 1,
                              ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                              project2WorkItem: faker.helpers.arrayElement([
                                {
                                  customDateForProject2: faker.helpers.arrayElement([
                                    (() => faker.date.past())(),
                                    null,
                                  ]),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              targetDate: (() => faker.date.past())(),
                              teamID: faker.datatype.number({ min: undefined, max: undefined }),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              title: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              workItemComments: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTags: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              userID: faker.random.word(),
            },
            undefined,
          ]),
          userID: faker.random.word(),
          username: faker.random.word(),
          workItems: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              createdAt: (() => faker.date.past())(),
              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              demoProjectWorkItem: faker.helpers.arrayElement([
                {
                  lastMessageAt: (() => faker.date.past())(),
                  line: faker.random.word(),
                  ref: faker.random.word(),
                  reopened: faker.datatype.boolean(),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              description: faker.random.word(),
              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
              members: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                  user: faker.helpers.arrayElement([
                    {
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      email: faker.random.word(),
                      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                      fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                      hasGlobalNotifications: faker.datatype.boolean(),
                      hasPersonalNotifications: faker.datatype.boolean(),
                      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      userAPIKey: faker.helpers.arrayElement([
                        {
                          apiKey: faker.random.word(),
                          expiresOn: (() => faker.date.past())(),
                          userID: faker.random.word(),
                        },
                        undefined,
                      ]),
                      userID: faker.random.word(),
                      username: faker.random.word(),
                    },
                    undefined,
                  ]),
                })),
                undefined,
              ]),
              metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
                faker.datatype.number({ min: 0, max: undefined }),
              ),
              project2WorkItem: faker.helpers.arrayElement([
                {
                  customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              targetDate: (() => faker.date.past())(),
              teamID: faker.datatype.number({ min: undefined, max: undefined }),
              timeEntries: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                  comment: faker.random.word(),
                  durationMinutes: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                  start: (() => faker.date.past())(),
                  teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                  userID: faker.random.word(),
                  workItemID: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                })),
                undefined,
              ]),
              title: faker.random.word(),
              updatedAt: (() => faker.date.past())(),
              workItemComments: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  createdAt: (() => faker.date.past())(),
                  message: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  userID: faker.random.word(),
                  workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemTags: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
              workItemType: faker.helpers.arrayElement([
                {
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
    })),
    undefined,
  ]),
  updatedAt: (() => faker.date.past())(),
  workItemTags: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      color: faker.random.word(),
      description: faker.random.word(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
      workItems: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
          createdAt: (() => faker.date.past())(),
          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
          demoProjectWorkItem: faker.helpers.arrayElement([
            {
              lastMessageAt: (() => faker.date.past())(),
              line: faker.random.word(),
              ref: faker.random.word(),
              reopened: faker.datatype.boolean(),
              workItem: faker.helpers.arrayElement([
                {
                  closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  description: faker.random.word(),
                  kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                  members: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                      user: faker.helpers.arrayElement([
                        {
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          email: faker.random.word(),
                          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                          hasGlobalNotifications: faker.datatype.boolean(),
                          hasPersonalNotifications: faker.datatype.boolean(),
                          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                          teams: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                updatedAt: (() => faker.date.past())(),
                                users: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    email: faker.random.word(),
                                    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    hasGlobalNotifications: faker.datatype.boolean(),
                                    hasPersonalNotifications: faker.datatype.boolean(),
                                    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    userAPIKey: faker.helpers.arrayElement([
                                      {
                                        apiKey: faker.random.word(),
                                        expiresOn: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                      },
                                      undefined,
                                    ]),
                                    userID: faker.random.word(),
                                    username: faker.random.word(),
                                  })),
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          userAPIKey: faker.helpers.arrayElement([
                            {
                              apiKey: faker.random.word(),
                              expiresOn: (() => faker.date.past())(),
                              userID: faker.random.word(),
                            },
                            undefined,
                          ]),
                          userID: faker.random.word(),
                          username: faker.random.word(),
                        },
                        undefined,
                      ]),
                    })),
                    undefined,
                  ]),
                  metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                    () => faker.datatype.number({ min: 0, max: undefined }),
                  ),
                  project2WorkItem: faker.helpers.arrayElement([
                    {
                      customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  targetDate: (() => faker.date.past())(),
                  teamID: faker.datatype.number({ min: undefined, max: undefined }),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  title: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  workItemComments: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      createdAt: (() => faker.date.past())(),
                      message: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      userID: faker.random.word(),
                      workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemType: faker.helpers.arrayElement([
                    {
                      color: faker.random.word(),
                      description: faker.random.word(),
                      name: faker.random.word(),
                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          description: faker.random.word(),
          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
          members: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
              user: faker.helpers.arrayElement([
                {
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  email: faker.random.word(),
                  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                  fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                  hasGlobalNotifications: faker.datatype.boolean(),
                  hasPersonalNotifications: faker.datatype.boolean(),
                  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                  teams: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      createdAt: (() => faker.date.past())(),
                      description: faker.random.word(),
                      name: faker.random.word(),
                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      updatedAt: (() => faker.date.past())(),
                      users: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          email: faker.random.word(),
                          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                          hasGlobalNotifications: faker.datatype.boolean(),
                          hasPersonalNotifications: faker.datatype.boolean(),
                          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          userAPIKey: faker.helpers.arrayElement([
                            {
                              apiKey: faker.random.word(),
                              expiresOn: (() => faker.date.past())(),
                              userID: faker.random.word(),
                            },
                            undefined,
                          ]),
                          userID: faker.random.word(),
                          username: faker.random.word(),
                        })),
                        undefined,
                      ]),
                    })),
                    undefined,
                  ]),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  userAPIKey: faker.helpers.arrayElement([
                    {
                      apiKey: faker.random.word(),
                      expiresOn: (() => faker.date.past())(),
                      userID: faker.random.word(),
                    },
                    undefined,
                  ]),
                  userID: faker.random.word(),
                  username: faker.random.word(),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
            faker.datatype.number({ min: 0, max: undefined }),
          ),
          project2WorkItem: faker.helpers.arrayElement([
            {
              customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              workItem: faker.helpers.arrayElement([
                {
                  closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  demoProjectWorkItem: faker.helpers.arrayElement([
                    {
                      lastMessageAt: (() => faker.date.past())(),
                      line: faker.random.word(),
                      ref: faker.random.word(),
                      reopened: faker.datatype.boolean(),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  description: faker.random.word(),
                  kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                  members: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                      user: faker.helpers.arrayElement([
                        {
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          email: faker.random.word(),
                          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                          hasGlobalNotifications: faker.datatype.boolean(),
                          hasPersonalNotifications: faker.datatype.boolean(),
                          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                          teams: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                updatedAt: (() => faker.date.past())(),
                                users: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    email: faker.random.word(),
                                    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    hasGlobalNotifications: faker.datatype.boolean(),
                                    hasPersonalNotifications: faker.datatype.boolean(),
                                    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    userAPIKey: faker.helpers.arrayElement([
                                      {
                                        apiKey: faker.random.word(),
                                        expiresOn: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                      },
                                      undefined,
                                    ]),
                                    userID: faker.random.word(),
                                    username: faker.random.word(),
                                  })),
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          userAPIKey: faker.helpers.arrayElement([
                            {
                              apiKey: faker.random.word(),
                              expiresOn: (() => faker.date.past())(),
                              userID: faker.random.word(),
                            },
                            undefined,
                          ]),
                          userID: faker.random.word(),
                          username: faker.random.word(),
                        },
                        undefined,
                      ]),
                    })),
                    undefined,
                  ]),
                  metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                    () => faker.datatype.number({ min: 0, max: undefined }),
                  ),
                  targetDate: (() => faker.date.past())(),
                  teamID: faker.datatype.number({ min: undefined, max: undefined }),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  title: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  workItemComments: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      createdAt: (() => faker.date.past())(),
                      message: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      userID: faker.random.word(),
                      workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemType: faker.helpers.arrayElement([
                    {
                      color: faker.random.word(),
                      description: faker.random.word(),
                      name: faker.random.word(),
                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          targetDate: (() => faker.date.past())(),
          teamID: faker.datatype.number({ min: undefined, max: undefined }),
          timeEntries: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              activityID: faker.datatype.number({ min: undefined, max: undefined }),
              comment: faker.random.word(),
              durationMinutes: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              start: (() => faker.date.past())(),
              teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
              timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
              userID: faker.random.word(),
              workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
            })),
            undefined,
          ]),
          title: faker.random.word(),
          updatedAt: (() => faker.date.past())(),
          workItemComments: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              createdAt: (() => faker.date.past())(),
              message: faker.random.word(),
              updatedAt: (() => faker.date.past())(),
              userID: faker.random.word(),
              workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            undefined,
          ]),
          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
          workItemType: faker.helpers.arrayElement([
            {
              color: faker.random.word(),
              description: faker.random.word(),
              name: faker.random.word(),
              projectID: faker.datatype.number({ min: undefined, max: undefined }),
              workItem: faker.helpers.arrayElement([
                {
                  closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  demoProjectWorkItem: faker.helpers.arrayElement([
                    {
                      lastMessageAt: (() => faker.date.past())(),
                      line: faker.random.word(),
                      ref: faker.random.word(),
                      reopened: faker.datatype.boolean(),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  description: faker.random.word(),
                  kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                  members: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                      user: faker.helpers.arrayElement([
                        {
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          email: faker.random.word(),
                          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                          hasGlobalNotifications: faker.datatype.boolean(),
                          hasPersonalNotifications: faker.datatype.boolean(),
                          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                          teams: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                updatedAt: (() => faker.date.past())(),
                                users: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    email: faker.random.word(),
                                    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    hasGlobalNotifications: faker.datatype.boolean(),
                                    hasPersonalNotifications: faker.datatype.boolean(),
                                    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    userAPIKey: faker.helpers.arrayElement([
                                      {
                                        apiKey: faker.random.word(),
                                        expiresOn: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                      },
                                      undefined,
                                    ]),
                                    userID: faker.random.word(),
                                    username: faker.random.word(),
                                  })),
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          userAPIKey: faker.helpers.arrayElement([
                            {
                              apiKey: faker.random.word(),
                              expiresOn: (() => faker.date.past())(),
                              userID: faker.random.word(),
                            },
                            undefined,
                          ]),
                          userID: faker.random.word(),
                          username: faker.random.word(),
                        },
                        undefined,
                      ]),
                    })),
                    undefined,
                  ]),
                  metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                    () => faker.datatype.number({ min: 0, max: undefined }),
                  ),
                  project2WorkItem: faker.helpers.arrayElement([
                    {
                      customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  targetDate: (() => faker.date.past())(),
                  teamID: faker.datatype.number({ min: undefined, max: undefined }),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  title: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  workItemComments: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      createdAt: (() => faker.date.past())(),
                      message: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      userID: faker.random.word(),
                      workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        undefined,
      ]),
    })),
    undefined,
  ]),
  workItemTypes: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      color: faker.random.word(),
      description: faker.random.word(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      workItem: faker.helpers.arrayElement([
        {
          closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
          createdAt: (() => faker.date.past())(),
          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
          demoProjectWorkItem: faker.helpers.arrayElement([
            {
              lastMessageAt: (() => faker.date.past())(),
              line: faker.random.word(),
              ref: faker.random.word(),
              reopened: faker.datatype.boolean(),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          description: faker.random.word(),
          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
          members: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
              user: faker.helpers.arrayElement([
                {
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  email: faker.random.word(),
                  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                  fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                  hasGlobalNotifications: faker.datatype.boolean(),
                  hasPersonalNotifications: faker.datatype.boolean(),
                  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                  teams: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      createdAt: (() => faker.date.past())(),
                      description: faker.random.word(),
                      name: faker.random.word(),
                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      updatedAt: (() => faker.date.past())(),
                      users: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          email: faker.random.word(),
                          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                          hasGlobalNotifications: faker.datatype.boolean(),
                          hasPersonalNotifications: faker.datatype.boolean(),
                          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          userAPIKey: faker.helpers.arrayElement([
                            {
                              apiKey: faker.random.word(),
                              expiresOn: (() => faker.date.past())(),
                              userID: faker.random.word(),
                            },
                            undefined,
                          ]),
                          userID: faker.random.word(),
                          username: faker.random.word(),
                          workItems: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                createdAt: (() => faker.date.past())(),
                                deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                demoProjectWorkItem: faker.helpers.arrayElement([
                                  {
                                    lastMessageAt: (() => faker.date.past())(),
                                    line: faker.random.word(),
                                    ref: faker.random.word(),
                                    reopened: faker.datatype.boolean(),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  },
                                  undefined,
                                ]),
                                description: faker.random.word(),
                                kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                metadata: Array.from(
                                  { length: faker.datatype.number({ min: 1, max: 10 }) },
                                  (_, i) => i + 1,
                                ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                project2WorkItem: faker.helpers.arrayElement([
                                  {
                                    customDateForProject2: faker.helpers.arrayElement([
                                      (() => faker.date.past())(),
                                      null,
                                    ]),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  },
                                  undefined,
                                ]),
                                targetDate: (() => faker.date.past())(),
                                teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                title: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                workItemComments: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  })),
                                  undefined,
                                ]),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTags: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  })),
                                  undefined,
                                ]),
                                workItemType: faker.helpers.arrayElement([
                                  {
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                  },
                                  undefined,
                                ]),
                                workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                    })),
                    undefined,
                  ]),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  userAPIKey: faker.helpers.arrayElement([
                    {
                      apiKey: faker.random.word(),
                      expiresOn: (() => faker.date.past())(),
                      userID: faker.random.word(),
                    },
                    undefined,
                  ]),
                  userID: faker.random.word(),
                  username: faker.random.word(),
                  workItems: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
            faker.datatype.number({ min: 0, max: undefined }),
          ),
          project2WorkItem: faker.helpers.arrayElement([
            {
              customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          targetDate: (() => faker.date.past())(),
          teamID: faker.datatype.number({ min: undefined, max: undefined }),
          timeEntries: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              activityID: faker.datatype.number({ min: undefined, max: undefined }),
              comment: faker.random.word(),
              durationMinutes: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              start: (() => faker.date.past())(),
              teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
              timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
              userID: faker.random.word(),
              workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
            })),
            undefined,
          ]),
          title: faker.random.word(),
          updatedAt: (() => faker.date.past())(),
          workItemComments: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              createdAt: (() => faker.date.past())(),
              message: faker.random.word(),
              updatedAt: (() => faker.date.past())(),
              userID: faker.random.word(),
              workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            undefined,
          ]),
          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
          workItemTags: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              color: faker.random.word(),
              description: faker.random.word(),
              name: faker.random.word(),
              projectID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
              workItems: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  demoProjectWorkItem: faker.helpers.arrayElement([
                    {
                      lastMessageAt: (() => faker.date.past())(),
                      line: faker.random.word(),
                      ref: faker.random.word(),
                      reopened: faker.datatype.boolean(),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  description: faker.random.word(),
                  kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                  members: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                      user: faker.helpers.arrayElement([
                        {
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          email: faker.random.word(),
                          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                          hasGlobalNotifications: faker.datatype.boolean(),
                          hasPersonalNotifications: faker.datatype.boolean(),
                          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                          teams: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                updatedAt: (() => faker.date.past())(),
                                users: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    email: faker.random.word(),
                                    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    hasGlobalNotifications: faker.datatype.boolean(),
                                    hasPersonalNotifications: faker.datatype.boolean(),
                                    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    userAPIKey: faker.helpers.arrayElement([
                                      {
                                        apiKey: faker.random.word(),
                                        expiresOn: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                      },
                                      undefined,
                                    ]),
                                    userID: faker.random.word(),
                                    username: faker.random.word(),
                                  })),
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          userAPIKey: faker.helpers.arrayElement([
                            {
                              apiKey: faker.random.word(),
                              expiresOn: (() => faker.date.past())(),
                              userID: faker.random.word(),
                            },
                            undefined,
                          ]),
                          userID: faker.random.word(),
                          username: faker.random.word(),
                        },
                        undefined,
                      ]),
                    })),
                    undefined,
                  ]),
                  metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                    () => faker.datatype.number({ min: 0, max: undefined }),
                  ),
                  project2WorkItem: faker.helpers.arrayElement([
                    {
                      customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  targetDate: (() => faker.date.past())(),
                  teamID: faker.datatype.number({ min: undefined, max: undefined }),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  title: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  workItemComments: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      createdAt: (() => faker.date.past())(),
                      message: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      userID: faker.random.word(),
                      workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemType: faker.helpers.arrayElement([
                    {
                      color: faker.random.word(),
                      description: faker.random.word(),
                      name: faker.random.word(),
                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
            })),
            undefined,
          ]),
          workItemType: faker.helpers.arrayElement([
            {
              color: faker.random.word(),
              description: faker.random.word(),
              name: faker.random.word(),
              projectID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
        },
        undefined,
      ]),
      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
    })),
    undefined,
  ]),
})

export const getGetProjectConfigMock = () => ({
  fields: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    isEditable: faker.datatype.boolean(),
    isVisible: faker.datatype.boolean(),
    name: faker.random.word(),
    path: faker.random.word(),
    showCollapsed: faker.datatype.boolean(),
  })),
  header: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
    faker.random.word(),
  ),
})

export const getGetProjectBoardMock = () => ({
  project: faker.helpers.arrayElement([
    {
      activities: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          activityID: faker.datatype.number({ min: undefined, max: undefined }),
          description: faker.random.word(),
          isProductive: faker.datatype.boolean(),
          name: faker.random.word(),
          projectID: faker.datatype.number({ min: undefined, max: undefined }),
          timeEntries: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              activityID: faker.datatype.number({ min: undefined, max: undefined }),
              comment: faker.random.word(),
              durationMinutes: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              start: (() => faker.date.past())(),
              teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
              timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
              userID: faker.random.word(),
              workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      createdAt: (() => faker.date.past())(),
      description: faker.random.word(),
      initialized: faker.datatype.boolean(),
      kanbanSteps: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          color: faker.random.word(),
          description: faker.random.word(),
          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
          name: faker.random.word(),
          projectID: faker.datatype.number({ min: undefined, max: undefined }),
          stepOrder: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
          timeTrackable: faker.datatype.boolean(),
        })),
        undefined,
      ]),
      name: faker.helpers.arrayElement(Object.values(Project)),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      teams: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          createdAt: (() => faker.date.past())(),
          description: faker.random.word(),
          name: faker.random.word(),
          projectID: faker.datatype.number({ min: undefined, max: undefined }),
          teamID: faker.datatype.number({ min: undefined, max: undefined }),
          timeEntries: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              activityID: faker.datatype.number({ min: undefined, max: undefined }),
              comment: faker.random.word(),
              durationMinutes: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              start: (() => faker.date.past())(),
              teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
              timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
              userID: faker.random.word(),
              workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
            })),
            undefined,
          ]),
          updatedAt: (() => faker.date.past())(),
          users: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              createdAt: (() => faker.date.past())(),
              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              email: faker.random.word(),
              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
              hasGlobalNotifications: faker.datatype.boolean(),
              hasPersonalNotifications: faker.datatype.boolean(),
              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
              timeEntries: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                  comment: faker.random.word(),
                  durationMinutes: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                  start: (() => faker.date.past())(),
                  teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                  userID: faker.random.word(),
                  workItemID: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                })),
                undefined,
              ]),
              userAPIKey: faker.helpers.arrayElement([
                {
                  apiKey: faker.random.word(),
                  expiresOn: (() => faker.date.past())(),
                  user: faker.helpers.arrayElement([
                    {
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      email: faker.random.word(),
                      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                      fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                      hasGlobalNotifications: faker.datatype.boolean(),
                      hasPersonalNotifications: faker.datatype.boolean(),
                      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      userID: faker.random.word(),
                      username: faker.random.word(),
                      workItems: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          demoProjectWorkItem: faker.helpers.arrayElement([
                            {
                              lastMessageAt: (() => faker.date.past())(),
                              line: faker.random.word(),
                              ref: faker.random.word(),
                              reopened: faker.datatype.boolean(),
                              workItem: faker.helpers.arrayElement([
                                {
                                  closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                  createdAt: (() => faker.date.past())(),
                                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                  description: faker.random.word(),
                                  kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                  members: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({ role: faker.helpers.arrayElement(Object.values(WorkItemRole)) })),
                                    undefined,
                                  ]),
                                  metadata: Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                  project2WorkItem: faker.helpers.arrayElement([
                                    {
                                      customDateForProject2: faker.helpers.arrayElement([
                                        (() => faker.date.past())(),
                                        null,
                                      ]),
                                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    },
                                    undefined,
                                  ]),
                                  targetDate: (() => faker.date.past())(),
                                  teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                  timeEntries: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                      comment: faker.random.word(),
                                      durationMinutes: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                      start: (() => faker.date.past())(),
                                      teamID: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                      userID: faker.random.word(),
                                      workItemID: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                    })),
                                    undefined,
                                  ]),
                                  title: faker.random.word(),
                                  updatedAt: (() => faker.date.past())(),
                                  workItemComments: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      createdAt: (() => faker.date.past())(),
                                      message: faker.random.word(),
                                      updatedAt: (() => faker.date.past())(),
                                      userID: faker.random.word(),
                                      workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    })),
                                    undefined,
                                  ]),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  workItemTags: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      color: faker.random.word(),
                                      description: faker.random.word(),
                                      name: faker.random.word(),
                                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                      workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                    })),
                                    undefined,
                                  ]),
                                  workItemType: faker.helpers.arrayElement([
                                    {
                                      color: faker.random.word(),
                                      description: faker.random.word(),
                                      name: faker.random.word(),
                                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                    },
                                    undefined,
                                  ]),
                                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          description: faker.random.word(),
                          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                          members: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({ role: faker.helpers.arrayElement(Object.values(WorkItemRole)) }),
                            ),
                            undefined,
                          ]),
                          metadata: Array.from(
                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                            (_, i) => i + 1,
                          ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                          project2WorkItem: faker.helpers.arrayElement([
                            {
                              customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              workItem: faker.helpers.arrayElement([
                                {
                                  closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                  createdAt: (() => faker.date.past())(),
                                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                  demoProjectWorkItem: faker.helpers.arrayElement([
                                    {
                                      lastMessageAt: (() => faker.date.past())(),
                                      line: faker.random.word(),
                                      ref: faker.random.word(),
                                      reopened: faker.datatype.boolean(),
                                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    },
                                    undefined,
                                  ]),
                                  description: faker.random.word(),
                                  kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                  members: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({ role: faker.helpers.arrayElement(Object.values(WorkItemRole)) })),
                                    undefined,
                                  ]),
                                  metadata: Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                  targetDate: (() => faker.date.past())(),
                                  teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                  timeEntries: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                      comment: faker.random.word(),
                                      durationMinutes: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                      start: (() => faker.date.past())(),
                                      teamID: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                      userID: faker.random.word(),
                                      workItemID: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                    })),
                                    undefined,
                                  ]),
                                  title: faker.random.word(),
                                  updatedAt: (() => faker.date.past())(),
                                  workItemComments: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      createdAt: (() => faker.date.past())(),
                                      message: faker.random.word(),
                                      updatedAt: (() => faker.date.past())(),
                                      userID: faker.random.word(),
                                      workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    })),
                                    undefined,
                                  ]),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  workItemTags: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      color: faker.random.word(),
                                      description: faker.random.word(),
                                      name: faker.random.word(),
                                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                      workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                    })),
                                    undefined,
                                  ]),
                                  workItemType: faker.helpers.arrayElement([
                                    {
                                      color: faker.random.word(),
                                      description: faker.random.word(),
                                      name: faker.random.word(),
                                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                    },
                                    undefined,
                                  ]),
                                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          targetDate: (() => faker.date.past())(),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          title: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          workItemComments: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                message: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                userID: faker.random.word(),
                                workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTags: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                color: faker.random.word(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemType: faker.helpers.arrayElement([
                            {
                              color: faker.random.word(),
                              description: faker.random.word(),
                              name: faker.random.word(),
                              projectID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItem: faker.helpers.arrayElement([
                                {
                                  closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                  createdAt: (() => faker.date.past())(),
                                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                  demoProjectWorkItem: faker.helpers.arrayElement([
                                    {
                                      lastMessageAt: (() => faker.date.past())(),
                                      line: faker.random.word(),
                                      ref: faker.random.word(),
                                      reopened: faker.datatype.boolean(),
                                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    },
                                    undefined,
                                  ]),
                                  description: faker.random.word(),
                                  kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                  members: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({ role: faker.helpers.arrayElement(Object.values(WorkItemRole)) })),
                                    undefined,
                                  ]),
                                  metadata: Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                  project2WorkItem: faker.helpers.arrayElement([
                                    {
                                      customDateForProject2: faker.helpers.arrayElement([
                                        (() => faker.date.past())(),
                                        null,
                                      ]),
                                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    },
                                    undefined,
                                  ]),
                                  targetDate: (() => faker.date.past())(),
                                  teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                  timeEntries: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                      comment: faker.random.word(),
                                      durationMinutes: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                      start: (() => faker.date.past())(),
                                      teamID: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                      userID: faker.random.word(),
                                      workItemID: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                    })),
                                    undefined,
                                  ]),
                                  title: faker.random.word(),
                                  updatedAt: (() => faker.date.past())(),
                                  workItemComments: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      createdAt: (() => faker.date.past())(),
                                      message: faker.random.word(),
                                      updatedAt: (() => faker.date.past())(),
                                      userID: faker.random.word(),
                                      workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    })),
                                    undefined,
                                  ]),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  workItemTags: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      color: faker.random.word(),
                                      description: faker.random.word(),
                                      name: faker.random.word(),
                                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                      workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                    })),
                                    undefined,
                                  ]),
                                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                    },
                    undefined,
                  ]),
                  userID: faker.random.word(),
                },
                undefined,
              ]),
              userID: faker.random.word(),
              username: faker.random.word(),
              workItems: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  demoProjectWorkItem: faker.helpers.arrayElement([
                    {
                      lastMessageAt: (() => faker.date.past())(),
                      line: faker.random.word(),
                      ref: faker.random.word(),
                      reopened: faker.datatype.boolean(),
                      workItem: faker.helpers.arrayElement([
                        {
                          closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          description: faker.random.word(),
                          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                          members: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                                user: faker.helpers.arrayElement([
                                  {
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    email: faker.random.word(),
                                    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    hasGlobalNotifications: faker.datatype.boolean(),
                                    hasPersonalNotifications: faker.datatype.boolean(),
                                    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    userAPIKey: faker.helpers.arrayElement([
                                      {
                                        apiKey: faker.random.word(),
                                        expiresOn: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                      },
                                      undefined,
                                    ]),
                                    userID: faker.random.word(),
                                    username: faker.random.word(),
                                  },
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          metadata: Array.from(
                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                            (_, i) => i + 1,
                          ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                          project2WorkItem: faker.helpers.arrayElement([
                            {
                              customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          targetDate: (() => faker.date.past())(),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          title: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          workItemComments: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                message: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                userID: faker.random.word(),
                                workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTags: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                color: faker.random.word(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemType: faker.helpers.arrayElement([
                            {
                              color: faker.random.word(),
                              description: faker.random.word(),
                              name: faker.random.word(),
                              projectID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  description: faker.random.word(),
                  kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                  members: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                      user: faker.helpers.arrayElement([
                        {
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          email: faker.random.word(),
                          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                          hasGlobalNotifications: faker.datatype.boolean(),
                          hasPersonalNotifications: faker.datatype.boolean(),
                          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          userAPIKey: faker.helpers.arrayElement([
                            {
                              apiKey: faker.random.word(),
                              expiresOn: (() => faker.date.past())(),
                              userID: faker.random.word(),
                            },
                            undefined,
                          ]),
                          userID: faker.random.word(),
                          username: faker.random.word(),
                        },
                        undefined,
                      ]),
                    })),
                    undefined,
                  ]),
                  metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                    () => faker.datatype.number({ min: 0, max: undefined }),
                  ),
                  project2WorkItem: faker.helpers.arrayElement([
                    {
                      customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      workItem: faker.helpers.arrayElement([
                        {
                          closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          demoProjectWorkItem: faker.helpers.arrayElement([
                            {
                              lastMessageAt: (() => faker.date.past())(),
                              line: faker.random.word(),
                              ref: faker.random.word(),
                              reopened: faker.datatype.boolean(),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          description: faker.random.word(),
                          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                          members: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                                user: faker.helpers.arrayElement([
                                  {
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    email: faker.random.word(),
                                    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    hasGlobalNotifications: faker.datatype.boolean(),
                                    hasPersonalNotifications: faker.datatype.boolean(),
                                    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    userAPIKey: faker.helpers.arrayElement([
                                      {
                                        apiKey: faker.random.word(),
                                        expiresOn: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                      },
                                      undefined,
                                    ]),
                                    userID: faker.random.word(),
                                    username: faker.random.word(),
                                  },
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          metadata: Array.from(
                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                            (_, i) => i + 1,
                          ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                          targetDate: (() => faker.date.past())(),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          title: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          workItemComments: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                message: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                userID: faker.random.word(),
                                workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTags: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                color: faker.random.word(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemType: faker.helpers.arrayElement([
                            {
                              color: faker.random.word(),
                              description: faker.random.word(),
                              name: faker.random.word(),
                              projectID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  targetDate: (() => faker.date.past())(),
                  teamID: faker.datatype.number({ min: undefined, max: undefined }),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  title: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  workItemComments: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      createdAt: (() => faker.date.past())(),
                      message: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      userID: faker.random.word(),
                      workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemTags: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      color: faker.random.word(),
                      description: faker.random.word(),
                      name: faker.random.word(),
                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                  workItemType: faker.helpers.arrayElement([
                    {
                      color: faker.random.word(),
                      description: faker.random.word(),
                      name: faker.random.word(),
                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItem: faker.helpers.arrayElement([
                        {
                          closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          demoProjectWorkItem: faker.helpers.arrayElement([
                            {
                              lastMessageAt: (() => faker.date.past())(),
                              line: faker.random.word(),
                              ref: faker.random.word(),
                              reopened: faker.datatype.boolean(),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          description: faker.random.word(),
                          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                          members: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                                user: faker.helpers.arrayElement([
                                  {
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    email: faker.random.word(),
                                    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    hasGlobalNotifications: faker.datatype.boolean(),
                                    hasPersonalNotifications: faker.datatype.boolean(),
                                    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    userAPIKey: faker.helpers.arrayElement([
                                      {
                                        apiKey: faker.random.word(),
                                        expiresOn: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                      },
                                      undefined,
                                    ]),
                                    userID: faker.random.word(),
                                    username: faker.random.word(),
                                  },
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          metadata: Array.from(
                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                            (_, i) => i + 1,
                          ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                          project2WorkItem: faker.helpers.arrayElement([
                            {
                              customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          targetDate: (() => faker.date.past())(),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          title: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          workItemComments: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                message: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                userID: faker.random.word(),
                                workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTags: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                color: faker.random.word(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      updatedAt: (() => faker.date.past())(),
      workItemTags: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          color: faker.random.word(),
          description: faker.random.word(),
          name: faker.random.word(),
          projectID: faker.datatype.number({ min: undefined, max: undefined }),
          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
          workItems: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              createdAt: (() => faker.date.past())(),
              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              demoProjectWorkItem: faker.helpers.arrayElement([
                {
                  lastMessageAt: (() => faker.date.past())(),
                  line: faker.random.word(),
                  ref: faker.random.word(),
                  reopened: faker.datatype.boolean(),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              teams: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    updatedAt: (() => faker.date.past())(),
                                    users: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        email: faker.random.word(),
                                        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        hasGlobalNotifications: faker.datatype.boolean(),
                                        hasPersonalNotifications: faker.datatype.boolean(),
                                        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        userAPIKey: faker.helpers.arrayElement([
                                          {
                                            apiKey: faker.random.word(),
                                            expiresOn: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                          },
                                          undefined,
                                        ]),
                                        userID: faker.random.word(),
                                        username: faker.random.word(),
                                      })),
                                      undefined,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              description: faker.random.word(),
              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
              members: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                  user: faker.helpers.arrayElement([
                    {
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      email: faker.random.word(),
                      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                      fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                      hasGlobalNotifications: faker.datatype.boolean(),
                      hasPersonalNotifications: faker.datatype.boolean(),
                      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                      teams: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          updatedAt: (() => faker.date.past())(),
                          users: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                email: faker.random.word(),
                                firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                hasGlobalNotifications: faker.datatype.boolean(),
                                hasPersonalNotifications: faker.datatype.boolean(),
                                lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                userAPIKey: faker.helpers.arrayElement([
                                  {
                                    apiKey: faker.random.word(),
                                    expiresOn: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                  },
                                  undefined,
                                ]),
                                userID: faker.random.word(),
                                username: faker.random.word(),
                              }),
                            ),
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      userAPIKey: faker.helpers.arrayElement([
                        {
                          apiKey: faker.random.word(),
                          expiresOn: (() => faker.date.past())(),
                          userID: faker.random.word(),
                        },
                        undefined,
                      ]),
                      userID: faker.random.word(),
                      username: faker.random.word(),
                    },
                    undefined,
                  ]),
                })),
                undefined,
              ]),
              metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
                faker.datatype.number({ min: 0, max: undefined }),
              ),
              project2WorkItem: faker.helpers.arrayElement([
                {
                  customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              teams: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    updatedAt: (() => faker.date.past())(),
                                    users: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        email: faker.random.word(),
                                        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        hasGlobalNotifications: faker.datatype.boolean(),
                                        hasPersonalNotifications: faker.datatype.boolean(),
                                        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        userAPIKey: faker.helpers.arrayElement([
                                          {
                                            apiKey: faker.random.word(),
                                            expiresOn: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                          },
                                          undefined,
                                        ]),
                                        userID: faker.random.word(),
                                        username: faker.random.word(),
                                      })),
                                      undefined,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              targetDate: (() => faker.date.past())(),
              teamID: faker.datatype.number({ min: undefined, max: undefined }),
              timeEntries: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                  comment: faker.random.word(),
                  durationMinutes: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                  start: (() => faker.date.past())(),
                  teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                  userID: faker.random.word(),
                  workItemID: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                })),
                undefined,
              ]),
              title: faker.random.word(),
              updatedAt: (() => faker.date.past())(),
              workItemComments: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  createdAt: (() => faker.date.past())(),
                  message: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  userID: faker.random.word(),
                  workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemType: faker.helpers.arrayElement([
                {
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              teams: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    updatedAt: (() => faker.date.past())(),
                                    users: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        email: faker.random.word(),
                                        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        hasGlobalNotifications: faker.datatype.boolean(),
                                        hasPersonalNotifications: faker.datatype.boolean(),
                                        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        userAPIKey: faker.helpers.arrayElement([
                                          {
                                            apiKey: faker.random.word(),
                                            expiresOn: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                          },
                                          undefined,
                                        ]),
                                        userID: faker.random.word(),
                                        username: faker.random.word(),
                                      })),
                                      undefined,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      workItemTypes: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          color: faker.random.word(),
          description: faker.random.word(),
          name: faker.random.word(),
          projectID: faker.datatype.number({ min: undefined, max: undefined }),
          workItem: faker.helpers.arrayElement([
            {
              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              createdAt: (() => faker.date.past())(),
              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              demoProjectWorkItem: faker.helpers.arrayElement([
                {
                  lastMessageAt: (() => faker.date.past())(),
                  line: faker.random.word(),
                  ref: faker.random.word(),
                  reopened: faker.datatype.boolean(),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              description: faker.random.word(),
              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
              members: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                  user: faker.helpers.arrayElement([
                    {
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      email: faker.random.word(),
                      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                      fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                      hasGlobalNotifications: faker.datatype.boolean(),
                      hasPersonalNotifications: faker.datatype.boolean(),
                      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                      teams: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          updatedAt: (() => faker.date.past())(),
                          users: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                email: faker.random.word(),
                                firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                hasGlobalNotifications: faker.datatype.boolean(),
                                hasPersonalNotifications: faker.datatype.boolean(),
                                lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                userAPIKey: faker.helpers.arrayElement([
                                  {
                                    apiKey: faker.random.word(),
                                    expiresOn: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                  },
                                  undefined,
                                ]),
                                userID: faker.random.word(),
                                username: faker.random.word(),
                                workItems: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    demoProjectWorkItem: faker.helpers.arrayElement([
                                      {
                                        lastMessageAt: (() => faker.date.past())(),
                                        line: faker.random.word(),
                                        ref: faker.random.word(),
                                        reopened: faker.datatype.boolean(),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    description: faker.random.word(),
                                    kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                    metadata: Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                    project2WorkItem: faker.helpers.arrayElement([
                                      {
                                        customDateForProject2: faker.helpers.arrayElement([
                                          (() => faker.date.past())(),
                                          null,
                                        ]),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    targetDate: (() => faker.date.past())(),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    title: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    workItemComments: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        message: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                        workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      })),
                                      undefined,
                                    ]),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTags: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        color: faker.random.word(),
                                        description: faker.random.word(),
                                        name: faker.random.word(),
                                        projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                      })),
                                      undefined,
                                    ]),
                                    workItemType: faker.helpers.arrayElement([
                                      {
                                        color: faker.random.word(),
                                        description: faker.random.word(),
                                        name: faker.random.word(),
                                        projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                  })),
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      userAPIKey: faker.helpers.arrayElement([
                        {
                          apiKey: faker.random.word(),
                          expiresOn: (() => faker.date.past())(),
                          userID: faker.random.word(),
                        },
                        undefined,
                      ]),
                      userID: faker.random.word(),
                      username: faker.random.word(),
                      workItems: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          demoProjectWorkItem: faker.helpers.arrayElement([
                            {
                              lastMessageAt: (() => faker.date.past())(),
                              line: faker.random.word(),
                              ref: faker.random.word(),
                              reopened: faker.datatype.boolean(),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          description: faker.random.word(),
                          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                          metadata: Array.from(
                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                            (_, i) => i + 1,
                          ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                          project2WorkItem: faker.helpers.arrayElement([
                            {
                              customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          targetDate: (() => faker.date.past())(),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          title: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          workItemComments: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                message: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                userID: faker.random.word(),
                                workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTags: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                color: faker.random.word(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemType: faker.helpers.arrayElement([
                            {
                              color: faker.random.word(),
                              description: faker.random.word(),
                              name: faker.random.word(),
                              projectID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                    },
                    undefined,
                  ]),
                })),
                undefined,
              ]),
              metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
                faker.datatype.number({ min: 0, max: undefined }),
              ),
              project2WorkItem: faker.helpers.arrayElement([
                {
                  customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              targetDate: (() => faker.date.past())(),
              teamID: faker.datatype.number({ min: undefined, max: undefined }),
              timeEntries: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                  comment: faker.random.word(),
                  durationMinutes: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                  start: (() => faker.date.past())(),
                  teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                  userID: faker.random.word(),
                  workItemID: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                })),
                undefined,
              ]),
              title: faker.random.word(),
              updatedAt: (() => faker.date.past())(),
              workItemComments: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  createdAt: (() => faker.date.past())(),
                  message: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  userID: faker.random.word(),
                  workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemTags: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItems: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              teams: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    updatedAt: (() => faker.date.past())(),
                                    users: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        email: faker.random.word(),
                                        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        hasGlobalNotifications: faker.datatype.boolean(),
                                        hasPersonalNotifications: faker.datatype.boolean(),
                                        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        userAPIKey: faker.helpers.arrayElement([
                                          {
                                            apiKey: faker.random.word(),
                                            expiresOn: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                          },
                                          undefined,
                                        ]),
                                        userID: faker.random.word(),
                                        username: faker.random.word(),
                                      })),
                                      undefined,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                })),
                undefined,
              ]),
              workItemType: faker.helpers.arrayElement([
                {
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        undefined,
      ]),
    },
    undefined,
  ]),
})

export const getGetProjectWorkitemsMock = () =>
  faker.helpers.arrayElement([
    {
      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      createdAt: (() => faker.date.past())(),
      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      demoProjectWorkItem: {
        lastMessageAt: (() => faker.date.past())(),
        line: faker.random.word(),
        ref: faker.random.word(),
        reopened: faker.datatype.boolean(),
        workItem: faker.helpers.arrayElement([
          {
            closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
            createdAt: (() => faker.date.past())(),
            deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
            description: faker.random.word(),
            kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
            members: faker.helpers.arrayElement([
              Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                user: faker.helpers.arrayElement([
                  {
                    createdAt: (() => faker.date.past())(),
                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                    email: faker.random.word(),
                    firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                    fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                    hasGlobalNotifications: faker.datatype.boolean(),
                    hasPersonalNotifications: faker.datatype.boolean(),
                    lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                    teams: faker.helpers.arrayElement([
                      Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                        createdAt: (() => faker.date.past())(),
                        description: faker.random.word(),
                        name: faker.random.word(),
                        projectID: faker.datatype.number({ min: undefined, max: undefined }),
                        teamID: faker.datatype.number({ min: undefined, max: undefined }),
                        timeEntries: faker.helpers.arrayElement([
                          Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                            () => ({
                              activityID: faker.datatype.number({ min: undefined, max: undefined }),
                              comment: faker.random.word(),
                              durationMinutes: faker.helpers.arrayElement([
                                faker.datatype.number({ min: undefined, max: undefined }),
                                null,
                              ]),
                              start: (() => faker.date.past())(),
                              teamID: faker.helpers.arrayElement([
                                faker.datatype.number({ min: undefined, max: undefined }),
                                null,
                              ]),
                              timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                              userID: faker.random.word(),
                              workItemID: faker.helpers.arrayElement([
                                faker.datatype.number({ min: undefined, max: undefined }),
                                null,
                              ]),
                            }),
                          ),
                          undefined,
                        ]),
                        updatedAt: (() => faker.date.past())(),
                        users: faker.helpers.arrayElement([
                          Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                            () => ({
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                              workItems: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    description: faker.random.word(),
                                    kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                    metadata: Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                    project2WorkItem: faker.helpers.arrayElement([
                                      {
                                        customDateForProject2: faker.helpers.arrayElement([
                                          (() => faker.date.past())(),
                                          null,
                                        ]),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    targetDate: (() => faker.date.past())(),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    title: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    workItemComments: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        message: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                        workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      })),
                                      undefined,
                                    ]),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTags: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        color: faker.random.word(),
                                        description: faker.random.word(),
                                        name: faker.random.word(),
                                        projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                      })),
                                      undefined,
                                    ]),
                                    workItemType: faker.helpers.arrayElement([
                                      {
                                        color: faker.random.word(),
                                        description: faker.random.word(),
                                        name: faker.random.word(),
                                        projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                            }),
                          ),
                          undefined,
                        ]),
                      })),
                      undefined,
                    ]),
                    timeEntries: faker.helpers.arrayElement([
                      Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                        comment: faker.random.word(),
                        durationMinutes: faker.helpers.arrayElement([
                          faker.datatype.number({ min: undefined, max: undefined }),
                          null,
                        ]),
                        start: (() => faker.date.past())(),
                        teamID: faker.helpers.arrayElement([
                          faker.datatype.number({ min: undefined, max: undefined }),
                          null,
                        ]),
                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                        userID: faker.random.word(),
                        workItemID: faker.helpers.arrayElement([
                          faker.datatype.number({ min: undefined, max: undefined }),
                          null,
                        ]),
                      })),
                      undefined,
                    ]),
                    userAPIKey: faker.helpers.arrayElement([
                      {
                        apiKey: faker.random.word(),
                        expiresOn: (() => faker.date.past())(),
                        userID: faker.random.word(),
                      },
                      undefined,
                    ]),
                    userID: faker.random.word(),
                    username: faker.random.word(),
                    workItems: faker.helpers.arrayElement([
                      Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                        closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                        createdAt: (() => faker.date.past())(),
                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                        description: faker.random.word(),
                        kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                        metadata: Array.from(
                          { length: faker.datatype.number({ min: 1, max: 10 }) },
                          (_, i) => i + 1,
                        ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                        project2WorkItem: faker.helpers.arrayElement([
                          {
                            customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                          },
                          undefined,
                        ]),
                        targetDate: (() => faker.date.past())(),
                        teamID: faker.datatype.number({ min: undefined, max: undefined }),
                        timeEntries: faker.helpers.arrayElement([
                          Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                            () => ({
                              activityID: faker.datatype.number({ min: undefined, max: undefined }),
                              comment: faker.random.word(),
                              durationMinutes: faker.helpers.arrayElement([
                                faker.datatype.number({ min: undefined, max: undefined }),
                                null,
                              ]),
                              start: (() => faker.date.past())(),
                              teamID: faker.helpers.arrayElement([
                                faker.datatype.number({ min: undefined, max: undefined }),
                                null,
                              ]),
                              timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                              userID: faker.random.word(),
                              workItemID: faker.helpers.arrayElement([
                                faker.datatype.number({ min: undefined, max: undefined }),
                                null,
                              ]),
                            }),
                          ),
                          undefined,
                        ]),
                        title: faker.random.word(),
                        updatedAt: (() => faker.date.past())(),
                        workItemComments: faker.helpers.arrayElement([
                          Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                            () => ({
                              createdAt: (() => faker.date.past())(),
                              message: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              userID: faker.random.word(),
                              workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            }),
                          ),
                          undefined,
                        ]),
                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        workItemTags: faker.helpers.arrayElement([
                          Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                            () => ({
                              color: faker.random.word(),
                              description: faker.random.word(),
                              name: faker.random.word(),
                              projectID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                            }),
                          ),
                          undefined,
                        ]),
                        workItemType: faker.helpers.arrayElement([
                          {
                            color: faker.random.word(),
                            description: faker.random.word(),
                            name: faker.random.word(),
                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                            workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                          },
                          undefined,
                        ]),
                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                      })),
                      undefined,
                    ]),
                  },
                  undefined,
                ]),
              })),
              undefined,
            ]),
            metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
              faker.datatype.number({ min: 0, max: undefined }),
            ),
            project2WorkItem: faker.helpers.arrayElement([
              {
                customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
              },
              undefined,
            ]),
            targetDate: (() => faker.date.past())(),
            teamID: faker.datatype.number({ min: undefined, max: undefined }),
            timeEntries: faker.helpers.arrayElement([
              Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                comment: faker.random.word(),
                durationMinutes: faker.helpers.arrayElement([
                  faker.datatype.number({ min: undefined, max: undefined }),
                  null,
                ]),
                start: (() => faker.date.past())(),
                teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                userID: faker.random.word(),
                workItemID: faker.helpers.arrayElement([
                  faker.datatype.number({ min: undefined, max: undefined }),
                  null,
                ]),
              })),
              undefined,
            ]),
            title: faker.random.word(),
            updatedAt: (() => faker.date.past())(),
            workItemComments: faker.helpers.arrayElement([
              Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                createdAt: (() => faker.date.past())(),
                message: faker.random.word(),
                updatedAt: (() => faker.date.past())(),
                userID: faker.random.word(),
                workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
              })),
              undefined,
            ]),
            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
            workItemTags: faker.helpers.arrayElement([
              Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                color: faker.random.word(),
                description: faker.random.word(),
                name: faker.random.word(),
                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                workItems: faker.helpers.arrayElement([
                  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                    closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                    createdAt: (() => faker.date.past())(),
                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                    description: faker.random.word(),
                    kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                    members: faker.helpers.arrayElement([
                      Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                        role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                        user: faker.helpers.arrayElement([
                          {
                            createdAt: (() => faker.date.past())(),
                            deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                            email: faker.random.word(),
                            firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                            fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                            hasGlobalNotifications: faker.datatype.boolean(),
                            hasPersonalNotifications: faker.datatype.boolean(),
                            lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                            teams: faker.helpers.arrayElement([
                              Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                () => ({
                                  createdAt: (() => faker.date.past())(),
                                  description: faker.random.word(),
                                  name: faker.random.word(),
                                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                  teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                  timeEntries: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                      comment: faker.random.word(),
                                      durationMinutes: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                      start: (() => faker.date.past())(),
                                      teamID: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                      userID: faker.random.word(),
                                      workItemID: faker.helpers.arrayElement([
                                        faker.datatype.number({ min: undefined, max: undefined }),
                                        null,
                                      ]),
                                    })),
                                    undefined,
                                  ]),
                                  updatedAt: (() => faker.date.past())(),
                                  users: faker.helpers.arrayElement([
                                    Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => ({
                                      createdAt: (() => faker.date.past())(),
                                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                      email: faker.random.word(),
                                      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                      fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                      hasGlobalNotifications: faker.datatype.boolean(),
                                      hasPersonalNotifications: faker.datatype.boolean(),
                                      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                      timeEntries: faker.helpers.arrayElement([
                                        Array.from(
                                          { length: faker.datatype.number({ min: 1, max: 10 }) },
                                          (_, i) => i + 1,
                                        ).map(() => ({
                                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                          comment: faker.random.word(),
                                          durationMinutes: faker.helpers.arrayElement([
                                            faker.datatype.number({ min: undefined, max: undefined }),
                                            null,
                                          ]),
                                          start: (() => faker.date.past())(),
                                          teamID: faker.helpers.arrayElement([
                                            faker.datatype.number({ min: undefined, max: undefined }),
                                            null,
                                          ]),
                                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                          userID: faker.random.word(),
                                          workItemID: faker.helpers.arrayElement([
                                            faker.datatype.number({ min: undefined, max: undefined }),
                                            null,
                                          ]),
                                        })),
                                        undefined,
                                      ]),
                                      userAPIKey: faker.helpers.arrayElement([
                                        {
                                          apiKey: faker.random.word(),
                                          expiresOn: (() => faker.date.past())(),
                                          userID: faker.random.word(),
                                        },
                                        undefined,
                                      ]),
                                      userID: faker.random.word(),
                                      username: faker.random.word(),
                                    })),
                                    undefined,
                                  ]),
                                }),
                              ),
                              undefined,
                            ]),
                            timeEntries: faker.helpers.arrayElement([
                              Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                () => ({
                                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                  comment: faker.random.word(),
                                  durationMinutes: faker.helpers.arrayElement([
                                    faker.datatype.number({ min: undefined, max: undefined }),
                                    null,
                                  ]),
                                  start: (() => faker.date.past())(),
                                  teamID: faker.helpers.arrayElement([
                                    faker.datatype.number({ min: undefined, max: undefined }),
                                    null,
                                  ]),
                                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                  userID: faker.random.word(),
                                  workItemID: faker.helpers.arrayElement([
                                    faker.datatype.number({ min: undefined, max: undefined }),
                                    null,
                                  ]),
                                }),
                              ),
                              undefined,
                            ]),
                            userAPIKey: faker.helpers.arrayElement([
                              {
                                apiKey: faker.random.word(),
                                expiresOn: (() => faker.date.past())(),
                                userID: faker.random.word(),
                              },
                              undefined,
                            ]),
                            userID: faker.random.word(),
                            username: faker.random.word(),
                          },
                          undefined,
                        ]),
                      })),
                      undefined,
                    ]),
                    metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                      () => faker.datatype.number({ min: 0, max: undefined }),
                    ),
                    project2WorkItem: faker.helpers.arrayElement([
                      {
                        customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      },
                      undefined,
                    ]),
                    targetDate: (() => faker.date.past())(),
                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                    timeEntries: faker.helpers.arrayElement([
                      Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                        comment: faker.random.word(),
                        durationMinutes: faker.helpers.arrayElement([
                          faker.datatype.number({ min: undefined, max: undefined }),
                          null,
                        ]),
                        start: (() => faker.date.past())(),
                        teamID: faker.helpers.arrayElement([
                          faker.datatype.number({ min: undefined, max: undefined }),
                          null,
                        ]),
                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                        userID: faker.random.word(),
                        workItemID: faker.helpers.arrayElement([
                          faker.datatype.number({ min: undefined, max: undefined }),
                          null,
                        ]),
                      })),
                      undefined,
                    ]),
                    title: faker.random.word(),
                    updatedAt: (() => faker.date.past())(),
                    workItemComments: faker.helpers.arrayElement([
                      Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                        createdAt: (() => faker.date.past())(),
                        message: faker.random.word(),
                        updatedAt: (() => faker.date.past())(),
                        userID: faker.random.word(),
                        workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      })),
                      undefined,
                    ]),
                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                    workItemType: faker.helpers.arrayElement([
                      {
                        color: faker.random.word(),
                        description: faker.random.word(),
                        name: faker.random.word(),
                        projectID: faker.datatype.number({ min: undefined, max: undefined }),
                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                      },
                      undefined,
                    ]),
                    workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                  })),
                  undefined,
                ]),
              })),
              undefined,
            ]),
            workItemType: faker.helpers.arrayElement([
              {
                color: faker.random.word(),
                description: faker.random.word(),
                name: faker.random.word(),
                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
              },
              undefined,
            ]),
            workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
          },
          undefined,
        ]),
        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
      },
      description: faker.random.word(),
      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
      members: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          createdAt: (() => faker.date.past())(),
          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
          email: faker.random.word(),
          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
          hasGlobalNotifications: faker.datatype.boolean(),
          hasPersonalNotifications: faker.datatype.boolean(),
          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
          teams: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              createdAt: (() => faker.date.past())(),
              description: faker.random.word(),
              name: faker.random.word(),
              projectID: faker.datatype.number({ min: undefined, max: undefined }),
              teamID: faker.datatype.number({ min: undefined, max: undefined }),
              timeEntries: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                  comment: faker.random.word(),
                  durationMinutes: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                  start: (() => faker.date.past())(),
                  teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                  userID: faker.random.word(),
                  workItemID: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                })),
                undefined,
              ]),
              updatedAt: (() => faker.date.past())(),
              users: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  email: faker.random.word(),
                  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                  fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                  hasGlobalNotifications: faker.datatype.boolean(),
                  hasPersonalNotifications: faker.datatype.boolean(),
                  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  userAPIKey: faker.helpers.arrayElement([
                    {
                      apiKey: faker.random.word(),
                      expiresOn: (() => faker.date.past())(),
                      user: faker.helpers.arrayElement([
                        {
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          email: faker.random.word(),
                          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                          hasGlobalNotifications: faker.datatype.boolean(),
                          hasPersonalNotifications: faker.datatype.boolean(),
                          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          userID: faker.random.word(),
                          username: faker.random.word(),
                          workItems: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                createdAt: (() => faker.date.past())(),
                                deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                demoProjectWorkItem: faker.helpers.arrayElement([
                                  {
                                    lastMessageAt: (() => faker.date.past())(),
                                    line: faker.random.word(),
                                    ref: faker.random.word(),
                                    reopened: faker.datatype.boolean(),
                                    workItem: faker.helpers.arrayElement([
                                      {
                                        closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        description: faker.random.word(),
                                        kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                        metadata: Array.from(
                                          { length: faker.datatype.number({ min: 1, max: 10 }) },
                                          (_, i) => i + 1,
                                        ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                        project2WorkItem: faker.helpers.arrayElement([
                                          {
                                            customDateForProject2: faker.helpers.arrayElement([
                                              (() => faker.date.past())(),
                                              null,
                                            ]),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        targetDate: (() => faker.date.past())(),
                                        teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        title: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        workItemComments: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            createdAt: (() => faker.date.past())(),
                                            message: faker.random.word(),
                                            updatedAt: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                            workItemCommentID: faker.datatype.number({
                                              min: undefined,
                                              max: undefined,
                                            }),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTags: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemType: faker.helpers.arrayElement([
                                          {
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  },
                                  undefined,
                                ]),
                                description: faker.random.word(),
                                kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                metadata: Array.from(
                                  { length: faker.datatype.number({ min: 1, max: 10 }) },
                                  (_, i) => i + 1,
                                ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                project2WorkItem: faker.helpers.arrayElement([
                                  {
                                    customDateForProject2: faker.helpers.arrayElement([
                                      (() => faker.date.past())(),
                                      null,
                                    ]),
                                    workItem: faker.helpers.arrayElement([
                                      {
                                        closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        demoProjectWorkItem: faker.helpers.arrayElement([
                                          {
                                            lastMessageAt: (() => faker.date.past())(),
                                            line: faker.random.word(),
                                            ref: faker.random.word(),
                                            reopened: faker.datatype.boolean(),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        description: faker.random.word(),
                                        kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                        metadata: Array.from(
                                          { length: faker.datatype.number({ min: 1, max: 10 }) },
                                          (_, i) => i + 1,
                                        ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                        targetDate: (() => faker.date.past())(),
                                        teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        title: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        workItemComments: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            createdAt: (() => faker.date.past())(),
                                            message: faker.random.word(),
                                            updatedAt: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                            workItemCommentID: faker.datatype.number({
                                              min: undefined,
                                              max: undefined,
                                            }),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTags: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemType: faker.helpers.arrayElement([
                                          {
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  },
                                  undefined,
                                ]),
                                targetDate: (() => faker.date.past())(),
                                teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                title: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                workItemComments: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  })),
                                  undefined,
                                ]),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTags: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  })),
                                  undefined,
                                ]),
                                workItemType: faker.helpers.arrayElement([
                                  {
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItem: faker.helpers.arrayElement([
                                      {
                                        closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        demoProjectWorkItem: faker.helpers.arrayElement([
                                          {
                                            lastMessageAt: (() => faker.date.past())(),
                                            line: faker.random.word(),
                                            ref: faker.random.word(),
                                            reopened: faker.datatype.boolean(),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        description: faker.random.word(),
                                        kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                        metadata: Array.from(
                                          { length: faker.datatype.number({ min: 1, max: 10 }) },
                                          (_, i) => i + 1,
                                        ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                        project2WorkItem: faker.helpers.arrayElement([
                                          {
                                            customDateForProject2: faker.helpers.arrayElement([
                                              (() => faker.date.past())(),
                                              null,
                                            ]),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        targetDate: (() => faker.date.past())(),
                                        teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        title: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        workItemComments: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            createdAt: (() => faker.date.past())(),
                                            message: faker.random.word(),
                                            updatedAt: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                            workItemCommentID: faker.datatype.number({
                                              min: undefined,
                                              max: undefined,
                                            }),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTags: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                  },
                                  undefined,
                                ]),
                                workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                        },
                        undefined,
                      ]),
                      userID: faker.random.word(),
                    },
                    undefined,
                  ]),
                  userID: faker.random.word(),
                  username: faker.random.word(),
                  workItems: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItem: faker.helpers.arrayElement([
                            {
                              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              description: faker.random.word(),
                              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                              metadata: Array.from(
                                { length: faker.datatype.number({ min: 1, max: 10 }) },
                                (_, i) => i + 1,
                              ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                              project2WorkItem: faker.helpers.arrayElement([
                                {
                                  customDateForProject2: faker.helpers.arrayElement([
                                    (() => faker.date.past())(),
                                    null,
                                  ]),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              targetDate: (() => faker.date.past())(),
                              teamID: faker.datatype.number({ min: undefined, max: undefined }),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              title: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              workItemComments: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTags: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemType: faker.helpers.arrayElement([
                                {
                                  color: faker.random.word(),
                                  description: faker.random.word(),
                                  name: faker.random.word(),
                                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItem: faker.helpers.arrayElement([
                            {
                              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              demoProjectWorkItem: faker.helpers.arrayElement([
                                {
                                  lastMessageAt: (() => faker.date.past())(),
                                  line: faker.random.word(),
                                  ref: faker.random.word(),
                                  reopened: faker.datatype.boolean(),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              description: faker.random.word(),
                              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                              metadata: Array.from(
                                { length: faker.datatype.number({ min: 1, max: 10 }) },
                                (_, i) => i + 1,
                              ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                              targetDate: (() => faker.date.past())(),
                              teamID: faker.datatype.number({ min: undefined, max: undefined }),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              title: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              workItemComments: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTags: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemType: faker.helpers.arrayElement([
                                {
                                  color: faker.random.word(),
                                  description: faker.random.word(),
                                  name: faker.random.word(),
                                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItem: faker.helpers.arrayElement([
                            {
                              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              demoProjectWorkItem: faker.helpers.arrayElement([
                                {
                                  lastMessageAt: (() => faker.date.past())(),
                                  line: faker.random.word(),
                                  ref: faker.random.word(),
                                  reopened: faker.datatype.boolean(),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              description: faker.random.word(),
                              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                              metadata: Array.from(
                                { length: faker.datatype.number({ min: 1, max: 10 }) },
                                (_, i) => i + 1,
                              ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                              project2WorkItem: faker.helpers.arrayElement([
                                {
                                  customDateForProject2: faker.helpers.arrayElement([
                                    (() => faker.date.past())(),
                                    null,
                                  ]),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              targetDate: (() => faker.date.past())(),
                              teamID: faker.datatype.number({ min: undefined, max: undefined }),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              title: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              workItemComments: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTags: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                })),
                undefined,
              ]),
            })),
            undefined,
          ]),
          timeEntries: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              activityID: faker.datatype.number({ min: undefined, max: undefined }),
              comment: faker.random.word(),
              durationMinutes: faker.helpers.arrayElement([
                faker.datatype.number({ min: undefined, max: undefined }),
                null,
              ]),
              start: (() => faker.date.past())(),
              teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
              timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
              userID: faker.random.word(),
              workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
            })),
            undefined,
          ]),
          userAPIKey: faker.helpers.arrayElement([
            {
              apiKey: faker.random.word(),
              expiresOn: (() => faker.date.past())(),
              user: faker.helpers.arrayElement([
                {
                  createdAt: (() => faker.date.past())(),
                  deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  email: faker.random.word(),
                  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                  fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                  hasGlobalNotifications: faker.datatype.boolean(),
                  hasPersonalNotifications: faker.datatype.boolean(),
                  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                  teams: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      createdAt: (() => faker.date.past())(),
                      description: faker.random.word(),
                      name: faker.random.word(),
                      projectID: faker.datatype.number({ min: undefined, max: undefined }),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      updatedAt: (() => faker.date.past())(),
                      users: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          email: faker.random.word(),
                          firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                          fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                          hasGlobalNotifications: faker.datatype.boolean(),
                          hasPersonalNotifications: faker.datatype.boolean(),
                          lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          userID: faker.random.word(),
                          username: faker.random.word(),
                          workItems: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                createdAt: (() => faker.date.past())(),
                                deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                demoProjectWorkItem: faker.helpers.arrayElement([
                                  {
                                    lastMessageAt: (() => faker.date.past())(),
                                    line: faker.random.word(),
                                    ref: faker.random.word(),
                                    reopened: faker.datatype.boolean(),
                                    workItem: faker.helpers.arrayElement([
                                      {
                                        closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        description: faker.random.word(),
                                        kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                        metadata: Array.from(
                                          { length: faker.datatype.number({ min: 1, max: 10 }) },
                                          (_, i) => i + 1,
                                        ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                        project2WorkItem: faker.helpers.arrayElement([
                                          {
                                            customDateForProject2: faker.helpers.arrayElement([
                                              (() => faker.date.past())(),
                                              null,
                                            ]),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        targetDate: (() => faker.date.past())(),
                                        teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        title: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        workItemComments: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            createdAt: (() => faker.date.past())(),
                                            message: faker.random.word(),
                                            updatedAt: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                            workItemCommentID: faker.datatype.number({
                                              min: undefined,
                                              max: undefined,
                                            }),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTags: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemType: faker.helpers.arrayElement([
                                          {
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  },
                                  undefined,
                                ]),
                                description: faker.random.word(),
                                kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                metadata: Array.from(
                                  { length: faker.datatype.number({ min: 1, max: 10 }) },
                                  (_, i) => i + 1,
                                ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                project2WorkItem: faker.helpers.arrayElement([
                                  {
                                    customDateForProject2: faker.helpers.arrayElement([
                                      (() => faker.date.past())(),
                                      null,
                                    ]),
                                    workItem: faker.helpers.arrayElement([
                                      {
                                        closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        demoProjectWorkItem: faker.helpers.arrayElement([
                                          {
                                            lastMessageAt: (() => faker.date.past())(),
                                            line: faker.random.word(),
                                            ref: faker.random.word(),
                                            reopened: faker.datatype.boolean(),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        description: faker.random.word(),
                                        kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                        metadata: Array.from(
                                          { length: faker.datatype.number({ min: 1, max: 10 }) },
                                          (_, i) => i + 1,
                                        ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                        targetDate: (() => faker.date.past())(),
                                        teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        title: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        workItemComments: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            createdAt: (() => faker.date.past())(),
                                            message: faker.random.word(),
                                            updatedAt: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                            workItemCommentID: faker.datatype.number({
                                              min: undefined,
                                              max: undefined,
                                            }),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTags: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemType: faker.helpers.arrayElement([
                                          {
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  },
                                  undefined,
                                ]),
                                targetDate: (() => faker.date.past())(),
                                teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                title: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                workItemComments: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  })),
                                  undefined,
                                ]),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTags: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  })),
                                  undefined,
                                ]),
                                workItemType: faker.helpers.arrayElement([
                                  {
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItem: faker.helpers.arrayElement([
                                      {
                                        closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        demoProjectWorkItem: faker.helpers.arrayElement([
                                          {
                                            lastMessageAt: (() => faker.date.past())(),
                                            line: faker.random.word(),
                                            ref: faker.random.word(),
                                            reopened: faker.datatype.boolean(),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        description: faker.random.word(),
                                        kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                        metadata: Array.from(
                                          { length: faker.datatype.number({ min: 1, max: 10 }) },
                                          (_, i) => i + 1,
                                        ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                        project2WorkItem: faker.helpers.arrayElement([
                                          {
                                            customDateForProject2: faker.helpers.arrayElement([
                                              (() => faker.date.past())(),
                                              null,
                                            ]),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          },
                                          undefined,
                                        ]),
                                        targetDate: (() => faker.date.past())(),
                                        teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        title: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        workItemComments: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            createdAt: (() => faker.date.past())(),
                                            message: faker.random.word(),
                                            updatedAt: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                            workItemCommentID: faker.datatype.number({
                                              min: undefined,
                                              max: undefined,
                                            }),
                                            workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTags: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            color: faker.random.word(),
                                            description: faker.random.word(),
                                            name: faker.random.word(),
                                            projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                            workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                          })),
                                          undefined,
                                        ]),
                                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                  },
                                  undefined,
                                ]),
                                workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                    })),
                    undefined,
                  ]),
                  timeEntries: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      activityID: faker.datatype.number({ min: undefined, max: undefined }),
                      comment: faker.random.word(),
                      durationMinutes: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      start: (() => faker.date.past())(),
                      teamID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                      timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                      userID: faker.random.word(),
                      workItemID: faker.helpers.arrayElement([
                        faker.datatype.number({ min: undefined, max: undefined }),
                        null,
                      ]),
                    })),
                    undefined,
                  ]),
                  userID: faker.random.word(),
                  username: faker.random.word(),
                  workItems: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItem: faker.helpers.arrayElement([
                            {
                              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              description: faker.random.word(),
                              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                              metadata: Array.from(
                                { length: faker.datatype.number({ min: 1, max: 10 }) },
                                (_, i) => i + 1,
                              ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                              project2WorkItem: faker.helpers.arrayElement([
                                {
                                  customDateForProject2: faker.helpers.arrayElement([
                                    (() => faker.date.past())(),
                                    null,
                                  ]),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              targetDate: (() => faker.date.past())(),
                              teamID: faker.datatype.number({ min: undefined, max: undefined }),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              title: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              workItemComments: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTags: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemType: faker.helpers.arrayElement([
                                {
                                  color: faker.random.word(),
                                  description: faker.random.word(),
                                  name: faker.random.word(),
                                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItem: faker.helpers.arrayElement([
                            {
                              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              demoProjectWorkItem: faker.helpers.arrayElement([
                                {
                                  lastMessageAt: (() => faker.date.past())(),
                                  line: faker.random.word(),
                                  ref: faker.random.word(),
                                  reopened: faker.datatype.boolean(),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              description: faker.random.word(),
                              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                              metadata: Array.from(
                                { length: faker.datatype.number({ min: 1, max: 10 }) },
                                (_, i) => i + 1,
                              ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                              targetDate: (() => faker.date.past())(),
                              teamID: faker.datatype.number({ min: undefined, max: undefined }),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              title: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              workItemComments: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTags: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemType: faker.helpers.arrayElement([
                                {
                                  color: faker.random.word(),
                                  description: faker.random.word(),
                                  name: faker.random.word(),
                                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItem: faker.helpers.arrayElement([
                            {
                              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              demoProjectWorkItem: faker.helpers.arrayElement([
                                {
                                  lastMessageAt: (() => faker.date.past())(),
                                  line: faker.random.word(),
                                  ref: faker.random.word(),
                                  reopened: faker.datatype.boolean(),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              description: faker.random.word(),
                              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                              metadata: Array.from(
                                { length: faker.datatype.number({ min: 1, max: 10 }) },
                                (_, i) => i + 1,
                              ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                              project2WorkItem: faker.helpers.arrayElement([
                                {
                                  customDateForProject2: faker.helpers.arrayElement([
                                    (() => faker.date.past())(),
                                    null,
                                  ]),
                                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                },
                                undefined,
                              ]),
                              targetDate: (() => faker.date.past())(),
                              teamID: faker.datatype.number({ min: undefined, max: undefined }),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              title: faker.random.word(),
                              updatedAt: (() => faker.date.past())(),
                              workItemComments: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    message: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                    workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTags: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    color: faker.random.word(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                  }),
                                ),
                                undefined,
                              ]),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              userID: faker.random.word(),
            },
            undefined,
          ]),
          userID: faker.random.word(),
          username: faker.random.word(),
          workItems: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              createdAt: (() => faker.date.past())(),
              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              demoProjectWorkItem: faker.helpers.arrayElement([
                {
                  lastMessageAt: (() => faker.date.past())(),
                  line: faker.random.word(),
                  ref: faker.random.word(),
                  reopened: faker.datatype.boolean(),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              description: faker.random.word(),
              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
              metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
                faker.datatype.number({ min: 0, max: undefined }),
              ),
              project2WorkItem: faker.helpers.arrayElement([
                {
                  customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              targetDate: (() => faker.date.past())(),
              teamID: faker.datatype.number({ min: undefined, max: undefined }),
              timeEntries: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                  comment: faker.random.word(),
                  durationMinutes: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                  start: (() => faker.date.past())(),
                  teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                  userID: faker.random.word(),
                  workItemID: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                })),
                undefined,
              ]),
              title: faker.random.word(),
              updatedAt: (() => faker.date.past())(),
              workItemComments: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  createdAt: (() => faker.date.past())(),
                  message: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  userID: faker.random.word(),
                  workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemTags: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
              workItemType: faker.helpers.arrayElement([
                {
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTags: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.datatype.number({ min: 0, max: undefined }),
      ),
      project2WorkItem: faker.helpers.arrayElement([
        {
          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
          workItem: faker.helpers.arrayElement([
            {
              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              createdAt: (() => faker.date.past())(),
              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              demoProjectWorkItem: faker.helpers.arrayElement([
                {
                  lastMessageAt: (() => faker.date.past())(),
                  line: faker.random.word(),
                  ref: faker.random.word(),
                  reopened: faker.datatype.boolean(),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              description: faker.random.word(),
              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
              members: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                  user: faker.helpers.arrayElement([
                    {
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      email: faker.random.word(),
                      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                      fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                      hasGlobalNotifications: faker.datatype.boolean(),
                      hasPersonalNotifications: faker.datatype.boolean(),
                      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                      teams: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          updatedAt: (() => faker.date.past())(),
                          users: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                email: faker.random.word(),
                                firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                hasGlobalNotifications: faker.datatype.boolean(),
                                hasPersonalNotifications: faker.datatype.boolean(),
                                lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                userAPIKey: faker.helpers.arrayElement([
                                  {
                                    apiKey: faker.random.word(),
                                    expiresOn: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                  },
                                  undefined,
                                ]),
                                userID: faker.random.word(),
                                username: faker.random.word(),
                                workItems: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    demoProjectWorkItem: faker.helpers.arrayElement([
                                      {
                                        lastMessageAt: (() => faker.date.past())(),
                                        line: faker.random.word(),
                                        ref: faker.random.word(),
                                        reopened: faker.datatype.boolean(),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    description: faker.random.word(),
                                    kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                    metadata: Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                    targetDate: (() => faker.date.past())(),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    title: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    workItemComments: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        message: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                        workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      })),
                                      undefined,
                                    ]),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTags: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        color: faker.random.word(),
                                        description: faker.random.word(),
                                        name: faker.random.word(),
                                        projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                      })),
                                      undefined,
                                    ]),
                                    workItemType: faker.helpers.arrayElement([
                                      {
                                        color: faker.random.word(),
                                        description: faker.random.word(),
                                        name: faker.random.word(),
                                        projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                  })),
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      userAPIKey: faker.helpers.arrayElement([
                        {
                          apiKey: faker.random.word(),
                          expiresOn: (() => faker.date.past())(),
                          userID: faker.random.word(),
                        },
                        undefined,
                      ]),
                      userID: faker.random.word(),
                      username: faker.random.word(),
                      workItems: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          demoProjectWorkItem: faker.helpers.arrayElement([
                            {
                              lastMessageAt: (() => faker.date.past())(),
                              line: faker.random.word(),
                              ref: faker.random.word(),
                              reopened: faker.datatype.boolean(),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          description: faker.random.word(),
                          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                          metadata: Array.from(
                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                            (_, i) => i + 1,
                          ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                          targetDate: (() => faker.date.past())(),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          title: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          workItemComments: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                message: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                userID: faker.random.word(),
                                workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTags: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                color: faker.random.word(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemType: faker.helpers.arrayElement([
                            {
                              color: faker.random.word(),
                              description: faker.random.word(),
                              name: faker.random.word(),
                              projectID: faker.datatype.number({ min: undefined, max: undefined }),
                              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                    },
                    undefined,
                  ]),
                })),
                undefined,
              ]),
              metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
                faker.datatype.number({ min: 0, max: undefined }),
              ),
              targetDate: (() => faker.date.past())(),
              teamID: faker.datatype.number({ min: undefined, max: undefined }),
              timeEntries: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                  comment: faker.random.word(),
                  durationMinutes: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                  start: (() => faker.date.past())(),
                  teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                  userID: faker.random.word(),
                  workItemID: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                })),
                undefined,
              ]),
              title: faker.random.word(),
              updatedAt: (() => faker.date.past())(),
              workItemComments: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  createdAt: (() => faker.date.past())(),
                  message: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  userID: faker.random.word(),
                  workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemTags: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItems: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              teams: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    updatedAt: (() => faker.date.past())(),
                                    users: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        email: faker.random.word(),
                                        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        hasGlobalNotifications: faker.datatype.boolean(),
                                        hasPersonalNotifications: faker.datatype.boolean(),
                                        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        userAPIKey: faker.helpers.arrayElement([
                                          {
                                            apiKey: faker.random.word(),
                                            expiresOn: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                          },
                                          undefined,
                                        ]),
                                        userID: faker.random.word(),
                                        username: faker.random.word(),
                                      })),
                                      undefined,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                })),
                undefined,
              ]),
              workItemType: faker.helpers.arrayElement([
                {
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
        },
        undefined,
      ]),
      targetDate: (() => faker.date.past())(),
      teamID: faker.datatype.number({ min: undefined, max: undefined }),
      timeEntries: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          activityID: faker.datatype.number({ min: undefined, max: undefined }),
          comment: faker.random.word(),
          durationMinutes: faker.helpers.arrayElement([
            faker.datatype.number({ min: undefined, max: undefined }),
            null,
          ]),
          start: (() => faker.date.past())(),
          teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
          userID: faker.random.word(),
          workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
        })),
        undefined,
      ]),
      title: faker.random.word(),
      updatedAt: (() => faker.date.past())(),
      workItemComments: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          createdAt: (() => faker.date.past())(),
          message: faker.random.word(),
          updatedAt: (() => faker.date.past())(),
          userID: faker.random.word(),
          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
        })),
        undefined,
      ]),
      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
      workItemTags: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          color: faker.random.word(),
          description: faker.random.word(),
          name: faker.random.word(),
          projectID: faker.datatype.number({ min: undefined, max: undefined }),
          workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
          workItems: faker.helpers.arrayElement([
            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              createdAt: (() => faker.date.past())(),
              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              demoProjectWorkItem: faker.helpers.arrayElement([
                {
                  lastMessageAt: (() => faker.date.past())(),
                  line: faker.random.word(),
                  ref: faker.random.word(),
                  reopened: faker.datatype.boolean(),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              teams: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    updatedAt: (() => faker.date.past())(),
                                    users: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        email: faker.random.word(),
                                        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        hasGlobalNotifications: faker.datatype.boolean(),
                                        hasPersonalNotifications: faker.datatype.boolean(),
                                        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        userAPIKey: faker.helpers.arrayElement([
                                          {
                                            apiKey: faker.random.word(),
                                            expiresOn: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                          },
                                          undefined,
                                        ]),
                                        userID: faker.random.word(),
                                        username: faker.random.word(),
                                      })),
                                      undefined,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              description: faker.random.word(),
              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
              members: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                  user: faker.helpers.arrayElement([
                    {
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      email: faker.random.word(),
                      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                      fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                      hasGlobalNotifications: faker.datatype.boolean(),
                      hasPersonalNotifications: faker.datatype.boolean(),
                      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                      teams: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          updatedAt: (() => faker.date.past())(),
                          users: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                email: faker.random.word(),
                                firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                hasGlobalNotifications: faker.datatype.boolean(),
                                hasPersonalNotifications: faker.datatype.boolean(),
                                lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                userAPIKey: faker.helpers.arrayElement([
                                  {
                                    apiKey: faker.random.word(),
                                    expiresOn: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                  },
                                  undefined,
                                ]),
                                userID: faker.random.word(),
                                username: faker.random.word(),
                              }),
                            ),
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      userAPIKey: faker.helpers.arrayElement([
                        {
                          apiKey: faker.random.word(),
                          expiresOn: (() => faker.date.past())(),
                          userID: faker.random.word(),
                        },
                        undefined,
                      ]),
                      userID: faker.random.word(),
                      username: faker.random.word(),
                    },
                    undefined,
                  ]),
                })),
                undefined,
              ]),
              metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
                faker.datatype.number({ min: 0, max: undefined }),
              ),
              project2WorkItem: faker.helpers.arrayElement([
                {
                  customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              teams: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    updatedAt: (() => faker.date.past())(),
                                    users: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        email: faker.random.word(),
                                        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        hasGlobalNotifications: faker.datatype.boolean(),
                                        hasPersonalNotifications: faker.datatype.boolean(),
                                        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        userAPIKey: faker.helpers.arrayElement([
                                          {
                                            apiKey: faker.random.word(),
                                            expiresOn: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                          },
                                          undefined,
                                        ]),
                                        userID: faker.random.word(),
                                        username: faker.random.word(),
                                      })),
                                      undefined,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemType: faker.helpers.arrayElement([
                        {
                          color: faker.random.word(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              targetDate: (() => faker.date.past())(),
              teamID: faker.datatype.number({ min: undefined, max: undefined }),
              timeEntries: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                  comment: faker.random.word(),
                  durationMinutes: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                  start: (() => faker.date.past())(),
                  teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                  userID: faker.random.word(),
                  workItemID: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                })),
                undefined,
              ]),
              title: faker.random.word(),
              updatedAt: (() => faker.date.past())(),
              workItemComments: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  createdAt: (() => faker.date.past())(),
                  message: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  userID: faker.random.word(),
                  workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemType: faker.helpers.arrayElement([
                {
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItem: faker.helpers.arrayElement([
                    {
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              teams: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    updatedAt: (() => faker.date.past())(),
                                    users: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        email: faker.random.word(),
                                        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        hasGlobalNotifications: faker.datatype.boolean(),
                                        hasPersonalNotifications: faker.datatype.boolean(),
                                        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        userAPIKey: faker.helpers.arrayElement([
                                          {
                                            apiKey: faker.random.word(),
                                            expiresOn: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                          },
                                          undefined,
                                        ]),
                                        userID: faker.random.word(),
                                        username: faker.random.word(),
                                      })),
                                      undefined,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    },
                    undefined,
                  ]),
                  workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      workItemType: faker.helpers.arrayElement([
        {
          color: faker.random.word(),
          description: faker.random.word(),
          name: faker.random.word(),
          projectID: faker.datatype.number({ min: undefined, max: undefined }),
          workItem: faker.helpers.arrayElement([
            {
              closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              createdAt: (() => faker.date.past())(),
              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
              demoProjectWorkItem: faker.helpers.arrayElement([
                {
                  lastMessageAt: (() => faker.date.past())(),
                  line: faker.random.word(),
                  ref: faker.random.word(),
                  reopened: faker.datatype.boolean(),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              description: faker.random.word(),
              kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
              members: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                  user: faker.helpers.arrayElement([
                    {
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      email: faker.random.word(),
                      firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                      fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                      hasGlobalNotifications: faker.datatype.boolean(),
                      hasPersonalNotifications: faker.datatype.boolean(),
                      lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                      teams: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          description: faker.random.word(),
                          name: faker.random.word(),
                          projectID: faker.datatype.number({ min: undefined, max: undefined }),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          updatedAt: (() => faker.date.past())(),
                          users: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                email: faker.random.word(),
                                firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                hasGlobalNotifications: faker.datatype.boolean(),
                                hasPersonalNotifications: faker.datatype.boolean(),
                                lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                timeEntries: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  })),
                                  undefined,
                                ]),
                                userAPIKey: faker.helpers.arrayElement([
                                  {
                                    apiKey: faker.random.word(),
                                    expiresOn: (() => faker.date.past())(),
                                    userID: faker.random.word(),
                                  },
                                  undefined,
                                ]),
                                userID: faker.random.word(),
                                username: faker.random.word(),
                                workItems: faker.helpers.arrayElement([
                                  Array.from(
                                    { length: faker.datatype.number({ min: 1, max: 10 }) },
                                    (_, i) => i + 1,
                                  ).map(() => ({
                                    closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    createdAt: (() => faker.date.past())(),
                                    deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                    demoProjectWorkItem: faker.helpers.arrayElement([
                                      {
                                        lastMessageAt: (() => faker.date.past())(),
                                        line: faker.random.word(),
                                        ref: faker.random.word(),
                                        reopened: faker.datatype.boolean(),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    description: faker.random.word(),
                                    kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                                    metadata: Array.from(
                                      { length: faker.datatype.number({ min: 1, max: 10 }) },
                                      (_, i) => i + 1,
                                    ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                                    project2WorkItem: faker.helpers.arrayElement([
                                      {
                                        customDateForProject2: faker.helpers.arrayElement([
                                          (() => faker.date.past())(),
                                          null,
                                        ]),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      },
                                      undefined,
                                    ]),
                                    targetDate: (() => faker.date.past())(),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    title: faker.random.word(),
                                    updatedAt: (() => faker.date.past())(),
                                    workItemComments: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        message: faker.random.word(),
                                        updatedAt: (() => faker.date.past())(),
                                        userID: faker.random.word(),
                                        workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                      })),
                                      undefined,
                                    ]),
                                    workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                                    workItemTags: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        color: faker.random.word(),
                                        description: faker.random.word(),
                                        name: faker.random.word(),
                                        projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                        workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                                      })),
                                      undefined,
                                    ]),
                                    workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                                  })),
                                  undefined,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      userAPIKey: faker.helpers.arrayElement([
                        {
                          apiKey: faker.random.word(),
                          expiresOn: (() => faker.date.past())(),
                          userID: faker.random.word(),
                        },
                        undefined,
                      ]),
                      userID: faker.random.word(),
                      username: faker.random.word(),
                      workItems: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          createdAt: (() => faker.date.past())(),
                          deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          demoProjectWorkItem: faker.helpers.arrayElement([
                            {
                              lastMessageAt: (() => faker.date.past())(),
                              line: faker.random.word(),
                              ref: faker.random.word(),
                              reopened: faker.datatype.boolean(),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          description: faker.random.word(),
                          kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                          metadata: Array.from(
                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                            (_, i) => i + 1,
                          ).map(() => faker.datatype.number({ min: 0, max: undefined })),
                          project2WorkItem: faker.helpers.arrayElement([
                            {
                              customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                            },
                            undefined,
                          ]),
                          targetDate: (() => faker.date.past())(),
                          teamID: faker.datatype.number({ min: undefined, max: undefined }),
                          timeEntries: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                comment: faker.random.word(),
                                durationMinutes: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                start: (() => faker.date.past())(),
                                teamID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                                timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                userID: faker.random.word(),
                                workItemID: faker.helpers.arrayElement([
                                  faker.datatype.number({ min: undefined, max: undefined }),
                                  null,
                                ]),
                              }),
                            ),
                            undefined,
                          ]),
                          title: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          workItemComments: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                createdAt: (() => faker.date.past())(),
                                message: faker.random.word(),
                                updatedAt: (() => faker.date.past())(),
                                userID: faker.random.word(),
                                workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemTags: faker.helpers.arrayElement([
                            Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                              () => ({
                                color: faker.random.word(),
                                description: faker.random.word(),
                                name: faker.random.word(),
                                projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                              }),
                            ),
                            undefined,
                          ]),
                          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                    },
                    undefined,
                  ]),
                })),
                undefined,
              ]),
              metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
                faker.datatype.number({ min: 0, max: undefined }),
              ),
              project2WorkItem: faker.helpers.arrayElement([
                {
                  customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                },
                undefined,
              ]),
              targetDate: (() => faker.date.past())(),
              teamID: faker.datatype.number({ min: undefined, max: undefined }),
              timeEntries: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  activityID: faker.datatype.number({ min: undefined, max: undefined }),
                  comment: faker.random.word(),
                  durationMinutes: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                  start: (() => faker.date.past())(),
                  teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
                  timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                  userID: faker.random.word(),
                  workItemID: faker.helpers.arrayElement([
                    faker.datatype.number({ min: undefined, max: undefined }),
                    null,
                  ]),
                })),
                undefined,
              ]),
              title: faker.random.word(),
              updatedAt: (() => faker.date.past())(),
              workItemComments: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  createdAt: (() => faker.date.past())(),
                  message: faker.random.word(),
                  updatedAt: (() => faker.date.past())(),
                  userID: faker.random.word(),
                  workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                })),
                undefined,
              ]),
              workItemID: faker.datatype.number({ min: undefined, max: undefined }),
              workItemTags: faker.helpers.arrayElement([
                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                  color: faker.random.word(),
                  description: faker.random.word(),
                  name: faker.random.word(),
                  projectID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
                  workItems: faker.helpers.arrayElement([
                    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      createdAt: (() => faker.date.past())(),
                      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                      demoProjectWorkItem: faker.helpers.arrayElement([
                        {
                          lastMessageAt: (() => faker.date.past())(),
                          line: faker.random.word(),
                          ref: faker.random.word(),
                          reopened: faker.datatype.boolean(),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      description: faker.random.word(),
                      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
                      members: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          role: faker.helpers.arrayElement(Object.values(WorkItemRole)),
                          user: faker.helpers.arrayElement([
                            {
                              createdAt: (() => faker.date.past())(),
                              deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                              email: faker.random.word(),
                              firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                              fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                              hasGlobalNotifications: faker.datatype.boolean(),
                              hasPersonalNotifications: faker.datatype.boolean(),
                              lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                              teams: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    createdAt: (() => faker.date.past())(),
                                    description: faker.random.word(),
                                    name: faker.random.word(),
                                    projectID: faker.datatype.number({ min: undefined, max: undefined }),
                                    teamID: faker.datatype.number({ min: undefined, max: undefined }),
                                    timeEntries: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                        comment: faker.random.word(),
                                        durationMinutes: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        start: (() => faker.date.past())(),
                                        teamID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                        userID: faker.random.word(),
                                        workItemID: faker.helpers.arrayElement([
                                          faker.datatype.number({ min: undefined, max: undefined }),
                                          null,
                                        ]),
                                      })),
                                      undefined,
                                    ]),
                                    updatedAt: (() => faker.date.past())(),
                                    users: faker.helpers.arrayElement([
                                      Array.from(
                                        { length: faker.datatype.number({ min: 1, max: 10 }) },
                                        (_, i) => i + 1,
                                      ).map(() => ({
                                        createdAt: (() => faker.date.past())(),
                                        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                                        email: faker.random.word(),
                                        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        hasGlobalNotifications: faker.datatype.boolean(),
                                        hasPersonalNotifications: faker.datatype.boolean(),
                                        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
                                        timeEntries: faker.helpers.arrayElement([
                                          Array.from(
                                            { length: faker.datatype.number({ min: 1, max: 10 }) },
                                            (_, i) => i + 1,
                                          ).map(() => ({
                                            activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                            comment: faker.random.word(),
                                            durationMinutes: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            start: (() => faker.date.past())(),
                                            teamID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                            timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                            userID: faker.random.word(),
                                            workItemID: faker.helpers.arrayElement([
                                              faker.datatype.number({ min: undefined, max: undefined }),
                                              null,
                                            ]),
                                          })),
                                          undefined,
                                        ]),
                                        userAPIKey: faker.helpers.arrayElement([
                                          {
                                            apiKey: faker.random.word(),
                                            expiresOn: (() => faker.date.past())(),
                                            userID: faker.random.word(),
                                          },
                                          undefined,
                                        ]),
                                        userID: faker.random.word(),
                                        username: faker.random.word(),
                                      })),
                                      undefined,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              timeEntries: faker.helpers.arrayElement([
                                Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                                  () => ({
                                    activityID: faker.datatype.number({ min: undefined, max: undefined }),
                                    comment: faker.random.word(),
                                    durationMinutes: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    start: (() => faker.date.past())(),
                                    teamID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                    timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                                    userID: faker.random.word(),
                                    workItemID: faker.helpers.arrayElement([
                                      faker.datatype.number({ min: undefined, max: undefined }),
                                      null,
                                    ]),
                                  }),
                                ),
                                undefined,
                              ]),
                              userAPIKey: faker.helpers.arrayElement([
                                {
                                  apiKey: faker.random.word(),
                                  expiresOn: (() => faker.date.past())(),
                                  userID: faker.random.word(),
                                },
                                undefined,
                              ]),
                              userID: faker.random.word(),
                              username: faker.random.word(),
                            },
                            undefined,
                          ]),
                        })),
                        undefined,
                      ]),
                      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                        () => faker.datatype.number({ min: 0, max: undefined }),
                      ),
                      project2WorkItem: faker.helpers.arrayElement([
                        {
                          customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        },
                        undefined,
                      ]),
                      targetDate: (() => faker.date.past())(),
                      teamID: faker.datatype.number({ min: undefined, max: undefined }),
                      timeEntries: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          activityID: faker.datatype.number({ min: undefined, max: undefined }),
                          comment: faker.random.word(),
                          durationMinutes: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          start: (() => faker.date.past())(),
                          teamID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                          timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
                          userID: faker.random.word(),
                          workItemID: faker.helpers.arrayElement([
                            faker.datatype.number({ min: undefined, max: undefined }),
                            null,
                          ]),
                        })),
                        undefined,
                      ]),
                      title: faker.random.word(),
                      updatedAt: (() => faker.date.past())(),
                      workItemComments: faker.helpers.arrayElement([
                        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
                          createdAt: (() => faker.date.past())(),
                          message: faker.random.word(),
                          updatedAt: (() => faker.date.past())(),
                          userID: faker.random.word(),
                          workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
                          workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                        })),
                        undefined,
                      ]),
                      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
                      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
                    })),
                    undefined,
                  ]),
                })),
                undefined,
              ]),
              workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
            },
            undefined,
          ]),
          workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
        },
        undefined,
      ]),
      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
    },
  ])

export const getProjectMSW = () => [
  rest.post('*/project/:id/initialize', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/project/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectMock()))
  }),
  rest.get('*/project/:id/config', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectConfigMock()))
  }),
  rest.put('*/project/:id/config', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/project/:id/board', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectBoardMock()))
  }),
  rest.get('*/project/:id/workitems', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectWorkitemsMock()))
  }),
]

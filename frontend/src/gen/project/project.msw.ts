/**
 * Generated by orval v6.14.4 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { rest } from 'msw'
import { faker } from '@faker-js/faker'
import { Project, Scope } from '.././model'

export const getGetProjectMock = () => ({
  createdAt: (() => faker.date.past())(),
  description: faker.random.word(),
  name: faker.helpers.arrayElement(Object.values(Project)),
  projectID: faker.datatype.number({ min: undefined, max: undefined }),
  updatedAt: (() => faker.date.past())(),
})

export const getGetProjectConfigMock = () => ({
  fields: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    isEditable: faker.datatype.boolean(),
    isVisible: faker.datatype.boolean(),
    name: faker.random.word(),
    path: faker.random.word(),
    showCollapsed: faker.datatype.boolean(),
  })),
  header: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
    faker.random.word(),
  ),
})

export const getGetProjectBoardMock = () => ({
  project: {
    createdAt: (() => faker.date.past())(),
    description: faker.random.word(),
    name: faker.helpers.arrayElement(Object.values(Project)),
    projectID: faker.datatype.number({ min: undefined, max: undefined }),
    updatedAt: (() => faker.date.past())(),
  },
})

export const getGetProjectWorkitemsMock = () =>
  faker.helpers.arrayElement([
    {
      closed: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      createdAt: (() => faker.date.past())(),
      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      demoWorkItem: {
        lastMessageAt: (() => faker.date.past())(),
        line: faker.random.word(),
        ref: faker.random.word(),
        reopened: faker.datatype.boolean(),
        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
      },
      description: faker.random.word(),
      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
      members: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        createdAt: (() => faker.date.past())(),
        deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
        email: faker.random.word(),
        firstName: faker.helpers.arrayElement([faker.random.word(), null]),
        fullName: faker.helpers.arrayElement([faker.random.word(), null]),
        hasGlobalNotifications: faker.datatype.boolean(),
        hasPersonalNotifications: faker.datatype.boolean(),
        lastName: faker.helpers.arrayElement([faker.random.word(), null]),
        scopes: faker.helpers.arrayElements(Object.values(Scope)),
        userID: faker.random.word(),
        username: faker.random.word(),
      })),
      metadata: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.datatype.number({ min: 0, max: undefined }),
      ),
      targetDate: (() => faker.date.past())(),
      teamID: faker.datatype.number({ min: undefined, max: undefined }),
      timeEntries: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        activityID: faker.datatype.number({ min: undefined, max: undefined }),
        comment: faker.random.word(),
        durationMinutes: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
        start: (() => faker.date.past())(),
        teamID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
        timeEntryID: faker.datatype.number({ min: undefined, max: undefined }),
        userID: faker.random.word(),
        workItemID: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
      })),
      title: faker.random.word(),
      updatedAt: (() => faker.date.past())(),
      workItemComments: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        createdAt: (() => faker.date.past())(),
        message: faker.random.word(),
        updatedAt: (() => faker.date.past())(),
        userID: faker.random.word(),
        workItemCommentID: faker.datatype.number({ min: undefined, max: undefined }),
        workItemID: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      workItemID: faker.datatype.number({ min: undefined, max: undefined }),
      workItemTags: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        color: faker.random.word(),
        description: faker.random.word(),
        name: faker.random.word(),
        projectID: faker.datatype.number({ min: undefined, max: undefined }),
        workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
      })),
      workItemType: {
        color: faker.random.word(),
        description: faker.random.word(),
        name: faker.random.word(),
        projectID: faker.datatype.number({ min: undefined, max: undefined }),
        workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
      },
      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
    },
  ])

export const getProjectMSW = () => [
  rest.post('*/project/:id/initialize', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/project/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectMock()))
  }),
  rest.get('*/project/:id/config', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectConfigMock()))
  }),
  rest.put('*/project/:id/config', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/project/:id/board', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectBoardMock()))
  }),
  rest.get('*/project/:id/workitems', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectWorkitemsMock()))
  }),
]

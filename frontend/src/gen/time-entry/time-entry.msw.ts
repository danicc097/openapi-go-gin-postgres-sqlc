import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  TimeEntry
} from '.././model'

export const getCreateTimeEntryResponseMock = (overrideResponse: any = {}): TimeEntry => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), ...overrideResponse})

export const getGetTimeEntryResponseMock = (overrideResponse: any = {}): TimeEntry => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), ...overrideResponse})

export const getUpdateTimeEntryResponseMock = (overrideResponse: any = {}): TimeEntry => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), ...overrideResponse})


export const getCreateTimeEntryMockHandler = (overrideResponse?: TimeEntry) => {
  return http.post('*/time-entry/', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getCreateTimeEntryResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetTimeEntryMockHandler = (overrideResponse?: TimeEntry) => {
  return http.get('*/time-entry/:timeEntryID', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetTimeEntryResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateTimeEntryMockHandler = (overrideResponse?: TimeEntry) => {
  return http.patch('*/time-entry/:timeEntryID', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpdateTimeEntryResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteTimeEntryMockHandler = () => {
  return http.delete('*/time-entry/:timeEntryID', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getTimeEntryMock = () => [
  getCreateTimeEntryMockHandler(),
  getGetTimeEntryMockHandler(),
  getUpdateTimeEntryMockHandler(),
  getDeleteTimeEntryMockHandler()
]

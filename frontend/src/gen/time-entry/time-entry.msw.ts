import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'

export const getCreateTimeEntryMock = () => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})

export const getGetTimeEntryMock = () => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})

export const getUpdateTimeEntryMock = () => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})

export const getTimeEntryMock = () => [
http.post('*/time-entry/', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getCreateTimeEntryMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/time-entry/:timeEntryID', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTimeEntryMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/time-entry/:timeEntryID', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getUpdateTimeEntryMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/time-entry/:timeEntryID', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),]

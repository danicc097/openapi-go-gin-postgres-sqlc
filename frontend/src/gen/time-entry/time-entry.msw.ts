import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  TimeEntryResponse
} from '.././model'

export const getCreateTimeEntryResponseMock = (overrideResponse: Partial< TimeEntryResponse > = {}): TimeEntryResponse => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.helpers.fromRegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'), workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), ...overrideResponse})

export const getGetTimeEntryResponseMock = (overrideResponse: Partial< TimeEntryResponse > = {}): TimeEntryResponse => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.helpers.fromRegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'), workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), ...overrideResponse})

export const getUpdateTimeEntryResponseMock = (overrideResponse: Partial< TimeEntryResponse > = {}): TimeEntryResponse => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.helpers.fromRegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'), workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), ...overrideResponse})


export const getCreateTimeEntryMockHandler = (overrideResponse?: TimeEntryResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeEntryResponse> | TimeEntryResponse)) => {
  return http.post('*/time-entry/', async (info) => {await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateTimeEntryResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetTimeEntryMockHandler = (overrideResponse?: TimeEntryResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TimeEntryResponse> | TimeEntryResponse)) => {
  return http.get('*/time-entry/:timeEntryID', async (info) => {await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTimeEntryResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateTimeEntryMockHandler = (overrideResponse?: TimeEntryResponse | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<TimeEntryResponse> | TimeEntryResponse)) => {
  return http.patch('*/time-entry/:timeEntryID', async (info) => {await delay(200);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateTimeEntryResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteTimeEntryMockHandler = () => {
  return http.delete('*/time-entry/:timeEntryID', async () => {await delay(200);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getTimeEntryMock = () => [
  getCreateTimeEntryMockHandler(),
  getGetTimeEntryMockHandler(),
  getUpdateTimeEntryMockHandler(),
  getDeleteTimeEntryMockHandler()
]

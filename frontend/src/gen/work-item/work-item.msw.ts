import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'

export const getCreateWorkitemMock = () =>
  faker.helpers.arrayElement([
    {
      closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      createdAt: (() => faker.date.past())(),
      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      description: faker.word.sample(),
      kanbanStepID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.KanbanStepID,
      metadata: (() => ({
        key: faker.color.hsl(),
      }))(),
      targetDate: (() => faker.date.past())(),
      teamID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.TeamID,
      title: faker.word.sample(),
      updatedAt: (() => faker.date.past())(),
      workItemID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.WorkItemID,
      workItemTypeID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.WorkItemTypeID,
    },
  ])

export const getGetWorkItemMock = () =>
  faker.helpers.arrayElement([
    {
      closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      createdAt: (() => faker.date.past())(),
      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      description: faker.word.sample(),
      kanbanStepID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.KanbanStepID,
      metadata: (() => ({
        key: faker.color.hsl(),
      }))(),
      targetDate: (() => faker.date.past())(),
      teamID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.TeamID,
      title: faker.word.sample(),
      updatedAt: (() => faker.date.past())(),
      workItemID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.WorkItemID,
      workItemTypeID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.WorkItemTypeID,
    },
  ])

export const getUpdateWorkitemMock = () =>
  faker.helpers.arrayElement([
    {
      closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      createdAt: (() => faker.date.past())(),
      deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]),
      description: faker.word.sample(),
      kanbanStepID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.KanbanStepID,
      metadata: (() => ({
        key: faker.color.hsl(),
      }))(),
      targetDate: (() => faker.date.past())(),
      teamID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.TeamID,
      title: faker.word.sample(),
      updatedAt: (() => faker.date.past())(),
      workItemID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.WorkItemID,
      workItemTypeID: faker.number.int({ min: undefined, max: undefined }) as EntityIDs.WorkItemTypeID,
    },
  ])

export const getWorkItemMock = () => [
  http.post('*/work-item/', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(getCreateWorkitemMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.get('*/work-item/:workItemID/', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(getGetWorkItemMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.patch('*/work-item/:workItemID/', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(getUpdateWorkitemMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.delete('*/work-item/:workItemID/', async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
]

import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  Scope,
  WorkItemRole
} from '.././model'

export const getCreateWorkitemMock = () => (faker.helpers.arrayElement([{closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), demoWorkItem: {lastMessageAt: (() => faker.date.past())(), line: faker.word.sample(), ref: faker.word.sample(), reopened: faker.datatype.boolean(), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID}, description: faker.word.sample(), kanbanStepID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.KanbanStepID, members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({role: faker.helpers.arrayElement(Object.values(WorkItemRole)), user: {createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), scopes: faker.helpers.arrayElements(Object.values(Scope)), userID: faker.string.uuid() as EntityIDs.UserID, username: faker.word.sample()}})), metadata: (() => ({
              key: faker.string.sample()
            }))(), projectName: faker.helpers.arrayElement(['demo'] as const), targetDate: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntries: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), title: faker.word.sample(), updatedAt: (() => faker.date.past())(), workItemComments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), message: faker.word.sample(), updatedAt: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, workItemCommentID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemCommentID, workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID})), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID, workItemTags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.word.sample(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID})), workItemType: {color: faker.word.sample(), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID},{closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), demoTwoWorkItem: {customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID}, description: faker.word.sample(), kanbanStepID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.KanbanStepID, members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({role: faker.helpers.arrayElement(Object.values(WorkItemRole)), user: {createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), scopes: faker.helpers.arrayElements(Object.values(Scope)), userID: faker.string.uuid() as EntityIDs.UserID, username: faker.word.sample()}})), metadata: (() => ({
              key: faker.string.sample()
            }))(), projectName: faker.helpers.arrayElement(['demo_two'] as const), targetDate: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntries: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), title: faker.word.sample(), updatedAt: (() => faker.date.past())(), workItemComments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), message: faker.word.sample(), updatedAt: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, workItemCommentID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemCommentID, workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID})), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID, workItemTags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.word.sample(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID})), workItemType: {color: faker.word.sample(), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}]))

export const getGetWorkItemMock = () => (faker.helpers.arrayElement([{closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), demoWorkItem: {lastMessageAt: (() => faker.date.past())(), line: faker.word.sample(), ref: faker.word.sample(), reopened: faker.datatype.boolean(), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID}, description: faker.word.sample(), kanbanStepID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.KanbanStepID, members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({role: faker.helpers.arrayElement(Object.values(WorkItemRole)), user: {createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), scopes: faker.helpers.arrayElements(Object.values(Scope)), userID: faker.string.uuid() as EntityIDs.UserID, username: faker.word.sample()}})), metadata: (() => ({
              key: faker.string.sample()
            }))(), projectName: faker.helpers.arrayElement(['demo'] as const), targetDate: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntries: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), title: faker.word.sample(), updatedAt: (() => faker.date.past())(), workItemComments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), message: faker.word.sample(), updatedAt: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, workItemCommentID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemCommentID, workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID})), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID, workItemTags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.word.sample(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID})), workItemType: {color: faker.word.sample(), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID},{closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), demoTwoWorkItem: {customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID}, description: faker.word.sample(), kanbanStepID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.KanbanStepID, members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({role: faker.helpers.arrayElement(Object.values(WorkItemRole)), user: {createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), scopes: faker.helpers.arrayElements(Object.values(Scope)), userID: faker.string.uuid() as EntityIDs.UserID, username: faker.word.sample()}})), metadata: (() => ({
              key: faker.string.sample()
            }))(), projectName: faker.helpers.arrayElement(['demo_two'] as const), targetDate: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntries: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), title: faker.word.sample(), updatedAt: (() => faker.date.past())(), workItemComments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), message: faker.word.sample(), updatedAt: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, workItemCommentID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemCommentID, workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID})), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID, workItemTags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.word.sample(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID})), workItemType: {color: faker.word.sample(), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}]))

export const getUpdateWorkitemMock = () => (faker.helpers.arrayElement([{closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), demoWorkItem: {lastMessageAt: (() => faker.date.past())(), line: faker.word.sample(), ref: faker.word.sample(), reopened: faker.datatype.boolean(), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID}, description: faker.word.sample(), kanbanStepID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.KanbanStepID, members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({role: faker.helpers.arrayElement(Object.values(WorkItemRole)), user: {createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), scopes: faker.helpers.arrayElements(Object.values(Scope)), userID: faker.string.uuid() as EntityIDs.UserID, username: faker.word.sample()}})), metadata: (() => ({
              key: faker.string.sample()
            }))(), projectName: faker.helpers.arrayElement(['demo'] as const), targetDate: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntries: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), title: faker.word.sample(), updatedAt: (() => faker.date.past())(), workItemComments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), message: faker.word.sample(), updatedAt: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, workItemCommentID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemCommentID, workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID})), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID, workItemTags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.word.sample(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID})), workItemType: {color: faker.word.sample(), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID},{closedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), demoTwoWorkItem: {customDateForProject2: faker.helpers.arrayElement([(() => faker.date.past())(), null]), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID}, description: faker.word.sample(), kanbanStepID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.KanbanStepID, members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({role: faker.helpers.arrayElement(Object.values(WorkItemRole)), user: {createdAt: (() => faker.date.past())(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), email: faker.word.sample(), firstName: faker.helpers.arrayElement([faker.word.sample(), null]), fullName: faker.helpers.arrayElement([faker.word.sample(), null]), hasGlobalNotifications: faker.datatype.boolean(), hasPersonalNotifications: faker.datatype.boolean(), lastName: faker.helpers.arrayElement([faker.word.sample(), null]), scopes: faker.helpers.arrayElements(Object.values(Scope)), userID: faker.string.uuid() as EntityIDs.UserID, username: faker.word.sample()}})), metadata: (() => ({
              key: faker.string.sample()
            }))(), projectName: faker.helpers.arrayElement(['demo_two'] as const), targetDate: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntries: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({activityID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ActivityID, comment: faker.word.sample(), durationMinutes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), start: (() => faker.date.past())(), teamID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), timeEntryID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.TimeEntryID, userID: faker.string.uuid() as EntityIDs.UserID, workItemID: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), title: faker.word.sample(), updatedAt: (() => faker.date.past())(), workItemComments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: (() => faker.date.past())(), message: faker.word.sample(), updatedAt: (() => faker.date.past())(), userID: faker.string.uuid() as EntityIDs.UserID, workItemCommentID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemCommentID, workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID})), workItemID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemID, workItemTags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.word.sample(), deletedAt: faker.helpers.arrayElement([(() => faker.date.past())(), null]), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTagID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTagID})), workItemType: {color: faker.word.sample(), description: faker.word.sample(), name: faker.word.sample(), projectID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.ProjectID, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}, workItemTypeID: faker.number.int({min: undefined, max: undefined}) as EntityIDs.WorkItemTypeID}]))

export const getWorkItemMock = () => [
http.post('*/work-item/', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getCreateWorkitemMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/work-item/:workItemID/', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetWorkItemMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/work-item/:workItemID/', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getUpdateWorkitemMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/work-item/:workItemID/', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),]

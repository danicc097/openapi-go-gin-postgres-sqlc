/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type { CreateEntityNotificationRequest } from '../model/createEntityNotificationRequest'
import type { EntityNotification } from '../model/entityNotification'
import type { HTTPError } from '../model/hTTPError'
import type { UpdateEntityNotificationRequest } from '../model/updateEntityNotificationRequest'
import { customInstance } from '../../api/mutator'

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never

/**
 * @summary create entity notification.
 */
export const createEntityNotification = (
  createEntityNotificationRequest: CreateEntityNotificationRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EntityNotification>(
    {
      url: `/entity-notification/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createEntityNotificationRequest,
    },
    options,
  )
}

export const getCreateEntityNotificationMutationOptions = <TError = void | HTTPError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEntityNotification>>,
    TError,
    { data: CreateEntityNotificationRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createEntityNotification>>,
  TError,
  { data: CreateEntityNotificationRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createEntityNotification>>,
    { data: CreateEntityNotificationRequest }
  > = (props) => {
    const { data } = props ?? {}

    return createEntityNotification(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateEntityNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof createEntityNotification>>>
export type CreateEntityNotificationMutationBody = CreateEntityNotificationRequest
export type CreateEntityNotificationMutationError = void | HTTPError

/**
 * @summary create entity notification.
 */
export const useCreateEntityNotification = <TError = void | HTTPError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createEntityNotification>>,
    TError,
    { data: CreateEntityNotificationRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const mutationOptions = getCreateEntityNotificationMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary get entity notification.
 */
export const getEntityNotification = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EntityNotification>({ url: `/entity-notification/${id}`, method: 'GET', signal }, options)
}

export const getGetEntityNotificationQueryKey = (id: number) => {
  return [`/entity-notification/${id}`] as const
}

export const getGetEntityNotificationInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getEntityNotification>>,
  TError = void | HTTPError,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEntityNotification>>, TError, TData>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetEntityNotificationQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEntityNotification>>> = ({ signal }) =>
    getEntityNotification(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, staleTime: 3600000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getEntityNotification>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetEntityNotificationInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getEntityNotification>>>
export type GetEntityNotificationInfiniteQueryError = void | HTTPError

/**
 * @summary get entity notification.
 */
export const useGetEntityNotificationInfinite = <
  TData = Awaited<ReturnType<typeof getEntityNotification>>,
  TError = void | HTTPError,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEntityNotification>>, TError, TData>
    request?: SecondParameter<typeof customInstance>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEntityNotificationInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetEntityNotificationQueryOptions = <
  TData = Awaited<ReturnType<typeof getEntityNotification>>,
  TError = void | HTTPError,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getEntityNotification>>, TError, TData>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetEntityNotificationQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEntityNotification>>> = ({ signal }) =>
    getEntityNotification(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, staleTime: 3600000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEntityNotification>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetEntityNotificationQueryResult = NonNullable<Awaited<ReturnType<typeof getEntityNotification>>>
export type GetEntityNotificationQueryError = void | HTTPError

/**
 * @summary get entity notification.
 */
export const useGetEntityNotification = <
  TData = Awaited<ReturnType<typeof getEntityNotification>>,
  TError = void | HTTPError,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getEntityNotification>>, TError, TData>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEntityNotificationQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary update entity notification.
 */
export const updateEntityNotification = (
  id: number,
  updateEntityNotificationRequest: UpdateEntityNotificationRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EntityNotification>(
    {
      url: `/entity-notification/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateEntityNotificationRequest,
    },
    options,
  )
}

export const getUpdateEntityNotificationMutationOptions = <TError = void | HTTPError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEntityNotification>>,
    TError,
    { id: number; data: UpdateEntityNotificationRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateEntityNotification>>,
  TError,
  { id: number; data: UpdateEntityNotificationRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateEntityNotification>>,
    { id: number; data: UpdateEntityNotificationRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateEntityNotification(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateEntityNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof updateEntityNotification>>>
export type UpdateEntityNotificationMutationBody = UpdateEntityNotificationRequest
export type UpdateEntityNotificationMutationError = void | HTTPError

/**
 * @summary update entity notification.
 */
export const useUpdateEntityNotification = <TError = void | HTTPError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateEntityNotification>>,
    TError,
    { id: number; data: UpdateEntityNotificationRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const mutationOptions = getUpdateEntityNotificationMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary delete .
 */
export const deleteEntityNotification = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/entity-notification/${id}`, method: 'DELETE' }, options)
}

export const getDeleteEntityNotificationMutationOptions = <TError = HTTPError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEntityNotification>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteEntityNotification>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEntityNotification>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return deleteEntityNotification(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteEntityNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEntityNotification>>>

export type DeleteEntityNotificationMutationError = HTTPError

/**
 * @summary delete .
 */
export const useDeleteEntityNotification = <TError = HTTPError, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteEntityNotification>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof customInstance>
}) => {
  const mutationOptions = getDeleteEntityNotificationMutationOptions(options)

  return useMutation(mutationOptions)
}

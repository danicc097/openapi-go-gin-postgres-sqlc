/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'
import { Topics } from '.././model'

export const getCreateEntityNotificationMock = () => ({
  createdAt: (() => faker.date.past())(),
  entityNotificationID: faker.number.int({ min: undefined, max: undefined }),
  id: faker.word.sample(),
  message: faker.word.sample(),
  projectID: faker.number.int({ min: undefined, max: undefined }),
  topic: faker.helpers.arrayElement(Object.values(Topics)),
})

export const getGetEntityNotificationMock = () => ({
  createdAt: (() => faker.date.past())(),
  entityNotificationID: faker.number.int({ min: undefined, max: undefined }),
  id: faker.word.sample(),
  message: faker.word.sample(),
  projectID: faker.number.int({ min: undefined, max: undefined }),
  topic: faker.helpers.arrayElement(Object.values(Topics)),
})

export const getUpdateEntityNotificationMock = () => ({
  createdAt: (() => faker.date.past())(),
  entityNotificationID: faker.number.int({ min: undefined, max: undefined }),
  id: faker.word.sample(),
  message: faker.word.sample(),
  projectID: faker.number.int({ min: undefined, max: undefined }),
  topic: faker.helpers.arrayElement(Object.values(Topics)),
})

export const getEntityNotificationMock = () => [
  http.post('*/project/:projectName/entity-notification/', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(getCreateEntityNotificationMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.get('*/entity-notification/:id', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(getGetEntityNotificationMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.patch('*/entity-notification/:id', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(getUpdateEntityNotificationMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
  http.delete('*/entity-notification/:id', async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  }),
]

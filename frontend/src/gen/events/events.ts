import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  EventsParams
} from '.././model'
import { customInstance } from '../../api/mutator';
import type { ErrorType } from '../../api/mutator';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const events = (
    params: EventsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/events`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getEventsQueryKey = (params: EventsParams,) => {
    return [`/events`, ...(params ? [params]: [])] as const;
    }

    
export const getEventsQueryOptions = <TData = Awaited<ReturnType<typeof events>>, TError = ErrorType<unknown>>(params: EventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof events>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof events>>> = ({ signal }) => events(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof events>>, TError, TData> & { queryKey: QueryKey }
}

export type EventsQueryResult = NonNullable<Awaited<ReturnType<typeof events>>>
export type EventsQueryError = ErrorType<unknown>

export const useEvents = <TData = Awaited<ReturnType<typeof events>>, TError = ErrorType<unknown>>(
 params: EventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof events>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getEventsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




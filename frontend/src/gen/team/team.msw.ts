/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { faker } from '@faker-js/faker'
import { rest } from 'msw'

export const getCreateTeamMock = () => ({
  createdAt: (() => faker.date.past())(),
  description: faker.word.sample(),
  name: faker.word.sample(),
  projectID: faker.number.int({ min: undefined, max: undefined }),
  teamID: faker.number.int({ min: undefined, max: undefined }),
  updatedAt: (() => faker.date.past())(),
})

export const getGetTeamMock = () => ({
  createdAt: (() => faker.date.past())(),
  description: faker.word.sample(),
  name: faker.word.sample(),
  projectID: faker.number.int({ min: undefined, max: undefined }),
  teamID: faker.number.int({ min: undefined, max: undefined }),
  updatedAt: (() => faker.date.past())(),
})

export const getUpdateTeamMock = () => ({
  createdAt: (() => faker.date.past())(),
  description: faker.word.sample(),
  name: faker.word.sample(),
  projectID: faker.number.int({ min: undefined, max: undefined }),
  teamID: faker.number.int({ min: undefined, max: undefined }),
  updatedAt: (() => faker.date.past())(),
})

export const getTeamMSW = () => [
  rest.post('*/project/:projectName/team/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getCreateTeamMock()))
  }),
  rest.get('*/project/:projectName/team/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetTeamMock()))
  }),
  rest.patch('*/project/:projectName/team/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getUpdateTeamMock()))
  }),
  rest.delete('*/project/:projectName/team/:id/', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
]

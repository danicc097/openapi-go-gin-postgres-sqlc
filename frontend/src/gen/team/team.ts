import type * as EntityIDs from 'src/gen/entity-ids'
/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateTeamRequest,
  HTTPError,
  Team,
  UpdateTeamRequest
} from '.././model'
import { customInstance } from '../../api/mutator';
import type { ErrorType } from '../../api/mutator';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary create team.
 */
export const createTeam = (
    projectName: 'demo' | 'demo_two',
    createTeamRequest: CreateTeamRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Team>(
      {url: `/project/${projectName}/team/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTeamRequest
    },
      options);
    }
  


export const getCreateTeamMutationOptions = <TError = ErrorType<void | HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTeam>>, TError,{projectName: 'demo' | 'demo_two';data: CreateTeamRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createTeam>>, TError,{projectName: 'demo' | 'demo_two';data: CreateTeamRequest}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTeam>>, {projectName: 'demo' | 'demo_two';data: CreateTeamRequest}> = (props) => {
          const {projectName,data} = props ?? {};

          return  createTeam(projectName,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateTeamMutationResult = NonNullable<Awaited<ReturnType<typeof createTeam>>>
    export type CreateTeamMutationBody = CreateTeamRequest
    export type CreateTeamMutationError = ErrorType<void | HTTPError>

    /**
 * @summary create team.
 */
export const useCreateTeam = <TError = ErrorType<void | HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTeam>>, TError,{projectName: 'demo' | 'demo_two';data: CreateTeamRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getCreateTeamMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary get team.
 */
export const getTeam = (
    teamID: EntityIDs.TeamID,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Team>(
      {url: `/team/${teamID}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTeamQueryKey = (teamID: EntityIDs.TeamID,) => {
    return [`/team/${teamID}`] as const;
    }

    
export const getGetTeamInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getTeam>>, TError = ErrorType<void | HTTPError>>(teamID: EntityIDs.TeamID, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTeam>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTeamQueryKey(teamID);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeam>>> = ({ signal }) => getTeam(teamID, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(teamID),  cacheTime: 0, refetchOnWindowFocus: false, refetchOnMount: false, retryOnMount: false, staleTime: Infinity, keepPreviousData: true,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTeam>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTeamInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTeam>>>
export type GetTeamInfiniteQueryError = ErrorType<void | HTTPError>

/**
 * @summary get team.
 */
export const useGetTeamInfinite = <TData = Awaited<ReturnType<typeof getTeam>>, TError = ErrorType<void | HTTPError>>(
 teamID: EntityIDs.TeamID, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTeam>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTeamInfiniteQueryOptions(teamID,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTeamQueryOptions = <TData = Awaited<ReturnType<typeof getTeam>>, TError = ErrorType<void | HTTPError>>(teamID: EntityIDs.TeamID, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTeam>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTeamQueryKey(teamID);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeam>>> = ({ signal }) => getTeam(teamID, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(teamID),  cacheTime: 0, refetchOnWindowFocus: false, refetchOnMount: false, retryOnMount: false, staleTime: Infinity, keepPreviousData: true,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTeam>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTeamQueryResult = NonNullable<Awaited<ReturnType<typeof getTeam>>>
export type GetTeamQueryError = ErrorType<void | HTTPError>

/**
 * @summary get team.
 */
export const useGetTeam = <TData = Awaited<ReturnType<typeof getTeam>>, TError = ErrorType<void | HTTPError>>(
 teamID: EntityIDs.TeamID, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTeam>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTeamQueryOptions(teamID,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary update team.
 */
export const updateTeam = (
    teamID: EntityIDs.TeamID,
    updateTeamRequest: UpdateTeamRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Team>(
      {url: `/team/${teamID}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateTeamRequest
    },
      options);
    }
  


export const getUpdateTeamMutationOptions = <TError = ErrorType<void | HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTeam>>, TError,{teamID: EntityIDs.TeamID;data: UpdateTeamRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateTeam>>, TError,{teamID: EntityIDs.TeamID;data: UpdateTeamRequest}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTeam>>, {teamID: EntityIDs.TeamID;data: UpdateTeamRequest}> = (props) => {
          const {teamID,data} = props ?? {};

          return  updateTeam(teamID,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UpdateTeamMutationResult = NonNullable<Awaited<ReturnType<typeof updateTeam>>>
    export type UpdateTeamMutationBody = UpdateTeamRequest
    export type UpdateTeamMutationError = ErrorType<void | HTTPError>

    /**
 * @summary update team.
 */
export const useUpdateTeam = <TError = ErrorType<void | HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTeam>>, TError,{teamID: EntityIDs.TeamID;data: UpdateTeamRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getUpdateTeamMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary delete team.
 */
export const deleteTeam = (
    teamID: EntityIDs.TeamID,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/team/${teamID}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTeamMutationOptions = <TError = ErrorType<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTeam>>, TError,{teamID: EntityIDs.TeamID}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTeam>>, TError,{teamID: EntityIDs.TeamID}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTeam>>, {teamID: EntityIDs.TeamID}> = (props) => {
          const {teamID} = props ?? {};

          return  deleteTeam(teamID,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteTeamMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTeam>>>
    
    export type DeleteTeamMutationError = ErrorType<HTTPError>

    /**
 * @summary delete team.
 */
export const useDeleteTeam = <TError = ErrorType<HTTPError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTeam>>, TError,{teamID: EntityIDs.TeamID}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getDeleteTeamMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
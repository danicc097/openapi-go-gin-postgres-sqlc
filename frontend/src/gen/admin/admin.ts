/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios'
import { useQuery, useInfiniteQuery } from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  QueryFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query'
import type { HTTPValidationError } from '.././model'

/**
 * @summary Ping pongs
 */
export const adminPing = (options?: AxiosRequestConfig): Promise<AxiosResponse<string>> => {
  return axios.get(`/admin/ping`, options)
}

export const getAdminPingQueryKey = () => [`/admin/ping`] as const

export const getAdminPingInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof adminPing>>,
  TError = AxiosError<HTTPValidationError>,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof adminPing>>, TError, TData>
  axios?: AxiosRequestConfig
}): UseInfiniteQueryOptions<Awaited<ReturnType<typeof adminPing>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminPingQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminPing>>> = ({ signal }) =>
    adminPing({ signal, ...axiosOptions })

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type AdminPingInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof adminPing>>>
export type AdminPingInfiniteQueryError = AxiosError<HTTPValidationError>

export const useAdminPingInfinite = <
  TData = Awaited<ReturnType<typeof adminPing>>,
  TError = AxiosError<HTTPValidationError>,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof adminPing>>, TError, TData>
  axios?: AxiosRequestConfig
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminPingInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getAdminPingQueryOptions = <
  TData = Awaited<ReturnType<typeof adminPing>>,
  TError = AxiosError<HTTPValidationError>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof adminPing>>, TError, TData>
  axios?: AxiosRequestConfig
}): UseQueryOptions<Awaited<ReturnType<typeof adminPing>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminPingQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminPing>>> = ({ signal }) =>
    adminPing({ signal, ...axiosOptions })

  return { queryKey, queryFn, staleTime: 3600000, ...queryOptions }
}

export type AdminPingQueryResult = NonNullable<Awaited<ReturnType<typeof adminPing>>>
export type AdminPingQueryError = AxiosError<HTTPValidationError>

export const useAdminPing = <
  TData = Awaited<ReturnType<typeof adminPing>>,
  TError = AxiosError<HTTPValidationError>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof adminPing>>, TError, TData>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminPingQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

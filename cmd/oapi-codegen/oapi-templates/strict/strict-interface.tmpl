{{range .}}
    {{$opid := .OperationId -}}
    type {{$opid | ucFirst}}RequestObject struct {
        {{range .PathParams -}}
            {{.GoName | ucFirst}} {{.TypeDef}} {{.JsonTag}}
        {{end -}}
        {{if .RequiresParamObject -}}
            Params externalRef0.{{$opid}}Params
        {{end -}}
        {{if .HasMaskedRequestContentTypes -}}
            ContentType string
        {{end -}}
        {{$multipleBodies := gt (len .Bodies) 1 -}}
        {{range .Bodies -}}
            {{- $st := (printf "%v%v" $opid "Request") -}}
            {{if $multipleBodies}}{{.NameTag}}{{end}}Body {{if eq .NameTag "Multipart"}}*multipart.Reader{{else if ne .NameTag ""}}
            {{- if not (is_rest_type $st)}}*externalRef0.{{$opid}}{{.NameTag}}RequestBody{{else}}*{{$st}}{{end}}
            {{- else}}io.Reader{{end}}
        {{end -}}
    }

    type {{$opid | ucFirst}}ResponseObject interface {
        Visit{{$opid}}Response(w http.ResponseWriter) error
    }

    {{range .Responses}}
        {{$statusCode := .StatusCode -}}
        {{$hasHeaders := ne 0 (len .Headers) -}}
        {{$fixedStatusCode := .HasFixedStatusCode -}}
        {{$isRef := .IsRef -}}
        {{$ref := .Ref  | ucFirstWithPkgName -}}
        {{$headers := .Headers -}}

        {{if (and $hasHeaders (not $isRef)) -}}
            type {{$opid}}{{$statusCode}}ResponseHeaders struct {
                {{range .Headers -}}
                    {{.GoName}} {{.Schema.TypeDecl}}
                {{end -}}
            }
        {{end}}

        {{range .Contents}}
            {{$receiverTypeName := printf "%s%s%s%s" $opid $statusCode .NameTagOrContentType "Response"}}
            {{if and $fixedStatusCode $isRef -}}
                type {{$receiverTypeName}} struct{ {{$ref}}{{.NameTagOrContentType}}Response }
            {{else if and (not $hasHeaders) ($fixedStatusCode) (.IsSupported) -}}
                type {{$receiverTypeName}} {{if eq .NameTag "Multipart"}}func(writer *multipart.Writer)error{{else if .IsSupported}}{{if .Schema.IsRef}}={{end}} {{ if not (is_rest_type .Schema.TypeDecl)}}{{.Schema.TypeDecl}}{{else}}{{rest_type .Schema.TypeDecl}}{{end}}{{else}}io.Reader{{end}} {{/* FIXME: strict response should use rest (not external ref) in .Schema.TypeDecl*/}}
            {{else -}}
                type {{$receiverTypeName}} struct {
                    Body {{if eq .NameTag "Multipart"}}func(writer *multipart.Writer)error{{else if .IsSupported}}{{.Schema.TypeDecl}}{{else}}io.Reader{{end}}
                    {{if $hasHeaders -}}
                        Headers {{if $isRef}}{{$ref}}{{else}}{{$opid}}{{$statusCode}}{{end}}ResponseHeaders
                    {{end -}}

                    {{if not $fixedStatusCode -}}
                        StatusCode int
                    {{end -}}

                    {{if not .HasFixedContentType -}}
                        ContentType string
                    {{end -}}

                    {{if not .IsSupported -}}
                        ContentLength int64
                    {{end -}}
                }
            {{end}}

            func (response {{$receiverTypeName}}) Visit{{$opid}}Response(w http.ResponseWriter) error {
                {{range $headers -}}
                    w.Header().Set("{{.Name}}", fmt.Sprint(response.Headers.{{.GoName}}))
                {{end -}}
                {{if eq .NameTag "Multipart" -}}
                    writer := multipart.NewWriter(w)
                {{end -}}
                w.Header().Set("Content-Type", {{if eq .NameTag "Multipart"}}writer.FormDataContentType(){{else if .HasFixedContentType }}"{{.ContentType}}"{{else}}response.ContentType{{end}})
                {{if not .IsSupported -}}
                    if response.ContentLength != 0 {
                        w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
                    }
                {{end -}}
                w.WriteHeader({{if $fixedStatusCode}}{{$statusCode}}{{else}}response.StatusCode{{end}})
                {{$hasBodyVar := or ($hasHeaders) (not $fixedStatusCode) (not .IsSupported)}}
                {{if eq .NameTag "JSON" -}}
                    return json.NewEncoder(w).Encode({{if $hasBodyVar}}response.Body{{else}}response{{end}})
                {{else if eq .NameTag "Text" -}}
                    _, err := w.Write([]byte({{if $hasBodyVar}}response.Body{{else}}response{{end}}))
                    return err
                {{else if eq .NameTag "Formdata" -}}
                    if form, err := runtime.MarshalForm({{if $hasBodyVar}}response.Body{{else}}response{{end}}, nil); err != nil {
                        return err
                    } else {
                        _, err := w.Write([]byte(form.Encode()))
                        return err
                    }
                {{else if eq .NameTag "Multipart" -}}
                    defer writer.Close()
                    return {{if $hasBodyVar}}response.Body{{else}}response{{end}}(writer);
                {{else -}}
                    if closer, ok := response.Body.(io.ReadCloser); ok {
                        defer closer.Close()
                    }
                    _, err := io.Copy(w, response.Body)
                    return err
                {{end}}{{/* if eq .NameTag "JSON" */ -}}
            }
        {{end}}

        {{if eq 0 (len .Contents) -}}
            {{if and $fixedStatusCode $isRef -}}
                type {{$opid}}{{$statusCode}}Response = {{$ref}}Response
            {{else -}}
                type {{$opid}}{{$statusCode}}Response struct {
                    {{if $hasHeaders -}}
                        Headers {{if $isRef}}{{$ref}}{{else}}{{$opid}}{{$statusCode}}{{end}}ResponseHeaders
                    {{end}}
                    {{if not $fixedStatusCode -}}
                        StatusCode int
                    {{end -}}
                }
            {{end -}}
            func (response {{$opid}}{{$statusCode}}Response) Visit{{$opid}}Response(w http.ResponseWriter) error {
                {{range $headers -}}
                    w.Header().Set("{{.Name}}", fmt.Sprint(response.Headers.{{.GoName}}))
                {{end -}}
                w.WriteHeader({{if $fixedStatusCode}}{{$statusCode}}{{else}}response.StatusCode{{end}})
                return nil
            }
        {{end}}
    {{end}}
{{end}}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
{{range .}}{{.SummaryAsComment }}
// ({{.Method}} {{.Path}})
{{$opid := .OperationId -}}
{{$opid}}(c *gin.Context, request {{$opid | ucFirst}}RequestObject) ({{$opid | ucFirst}}ResponseObject, error)
{{end}}{{/* range . */ -}}

middlewares(opID OperationID) []gin.HandlerFunc
authMiddlewares(opID OperationID) []gin.HandlerFunc
}
